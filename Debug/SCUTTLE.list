
SCUTTLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026fc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002884  08002884  00003884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028c4  080028c4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080028c4  080028c4  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028c4  080028c4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028c4  080028c4  000038c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028c8  080028c8  000038c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080028cc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080028d8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080028d8  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a0b  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001785  00000000  00000000  0000da47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0000f1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000089a  00000000  00000000  0000fd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002280b  00000000  00000000  0001059a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c168  00000000  00000000  00032da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7ecd  00000000  00000000  0003ef0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116dda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e3c  00000000  00000000  00116e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00119c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800286c 	.word	0x0800286c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800286c 	.word	0x0800286c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 faa6 	bl	800071e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f837 	bl	8000244 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f923 	bl	8000420 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001da:	f000 f883 	bl	80002e4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Start Timer 1 channels 3 and 4
  int32_t duty = -50;
 80001de:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 80001e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80001e4:	2201      	movs	r2, #1
 80001e6:	2104      	movs	r1, #4
 80001e8:	4814      	ldr	r0, [pc, #80]	@ (800023c <main+0x74>)
 80001ea:	f000 fdc1 	bl	8000d70 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80001ee:	2108      	movs	r1, #8
 80001f0:	4813      	ldr	r0, [pc, #76]	@ (8000240 <main+0x78>)
 80001f2:	f001 fc59 	bl	8001aa8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80001f6:	210c      	movs	r1, #12
 80001f8:	4811      	ldr	r0, [pc, #68]	@ (8000240 <main+0x78>)
 80001fa:	f001 fc55 	bl	8001aa8 <HAL_TIM_PWM_Start>

  // Setup motor2 with TIM1 Channel 3 and 4
  volatile uint32_t *pCCR3 = &(htim1.Instance->CCR3);
 80001fe:	4b10      	ldr	r3, [pc, #64]	@ (8000240 <main+0x78>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	333c      	adds	r3, #60	@ 0x3c
 8000204:	61bb      	str	r3, [r7, #24]
  volatile uint32_t *pCCR4 = &(htim1.Instance->CCR4);
 8000206:	4b0e      	ldr	r3, [pc, #56]	@ (8000240 <main+0x78>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	3340      	adds	r3, #64	@ 0x40
 800020c:	617b      	str	r3, [r7, #20]
  uint32_t Tim2Period = (htim1.Instance->ARR);
 800020e:	4b0c      	ldr	r3, [pc, #48]	@ (8000240 <main+0x78>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000214:	613b      	str	r3, [r7, #16]
  motor_t motor2 = {pCCR3, pCCR4, Tim2Period, duty};
 8000216:	69bb      	ldr	r3, [r7, #24]
 8000218:	603b      	str	r3, [r7, #0]
 800021a:	697b      	ldr	r3, [r7, #20]
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	60bb      	str	r3, [r7, #8]
 8000222:	69fb      	ldr	r3, [r7, #28]
 8000224:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */

  /* USER CODE BEGIN WHILE */
  while (1) {
	  HAL_Delay(1000);
 8000226:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800022a:	f000 faed 	bl	8000808 <HAL_Delay>
	  set_duty(&motor2, duty);
 800022e:	463b      	mov	r3, r7
 8000230:	69f9      	ldr	r1, [r7, #28]
 8000232:	4618      	mov	r0, r3
 8000234:	f000 f946 	bl	80004c4 <set_duty>
	  HAL_Delay(1000);
 8000238:	bf00      	nop
 800023a:	e7f4      	b.n	8000226 <main+0x5e>
 800023c:	48000400 	.word	0x48000400
 8000240:	20000028 	.word	0x20000028

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b096      	sub	sp, #88	@ 0x58
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0314 	add.w	r3, r7, #20
 800024e:	2244      	movs	r2, #68	@ 0x44
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f002 fade 	bl	8002814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	463b      	mov	r3, r7
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000266:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800026a:	f000 fda7 	bl	8000dbc <HAL_PWREx_ControlVoltageScaling>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000274:	f000 f91e 	bl	80004b4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000278:	2301      	movs	r3, #1
 800027a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800027c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000280:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000282:	2302      	movs	r3, #2
 8000284:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000286:	2303      	movs	r3, #3
 8000288:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 800028a:	2305      	movs	r3, #5
 800028c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 800028e:	2320      	movs	r3, #32
 8000290:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000292:	2307      	movs	r3, #7
 8000294:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000296:	2302      	movs	r3, #2
 8000298:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800029a:	2302      	movs	r3, #2
 800029c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	f107 0314 	add.w	r3, r7, #20
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 fde0 	bl	8000e68 <HAL_RCC_OscConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ae:	f000 f901 	bl	80004b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b6:	2303      	movs	r3, #3
 80002b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002c6:	463b      	mov	r3, r7
 80002c8:	2104      	movs	r1, #4
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 f9a8 	bl	8001620 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002d6:	f000 f8ed 	bl	80004b4 <Error_Handler>
  }
}
 80002da:	bf00      	nop
 80002dc:	3758      	adds	r7, #88	@ 0x58
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b096      	sub	sp, #88	@ 0x58
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]
 8000306:	615a      	str	r2, [r3, #20]
 8000308:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	222c      	movs	r2, #44	@ 0x2c
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f002 fa7f 	bl	8002814 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000316:	4b40      	ldr	r3, [pc, #256]	@ (8000418 <MX_TIM1_Init+0x134>)
 8000318:	4a40      	ldr	r2, [pc, #256]	@ (800041c <MX_TIM1_Init+0x138>)
 800031a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800031c:	4b3e      	ldr	r3, [pc, #248]	@ (8000418 <MX_TIM1_Init+0x134>)
 800031e:	2200      	movs	r2, #0
 8000320:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000322:	4b3d      	ldr	r3, [pc, #244]	@ (8000418 <MX_TIM1_Init+0x134>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8000328:	4b3b      	ldr	r3, [pc, #236]	@ (8000418 <MX_TIM1_Init+0x134>)
 800032a:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800032e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000330:	4b39      	ldr	r3, [pc, #228]	@ (8000418 <MX_TIM1_Init+0x134>)
 8000332:	2200      	movs	r2, #0
 8000334:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000336:	4b38      	ldr	r3, [pc, #224]	@ (8000418 <MX_TIM1_Init+0x134>)
 8000338:	2200      	movs	r2, #0
 800033a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800033c:	4b36      	ldr	r3, [pc, #216]	@ (8000418 <MX_TIM1_Init+0x134>)
 800033e:	2200      	movs	r2, #0
 8000340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000342:	4835      	ldr	r0, [pc, #212]	@ (8000418 <MX_TIM1_Init+0x134>)
 8000344:	f001 fb58 	bl	80019f8 <HAL_TIM_PWM_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800034e:	f000 f8b1 	bl	80004b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000352:	2300      	movs	r3, #0
 8000354:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000356:	2300      	movs	r3, #0
 8000358:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800035a:	2300      	movs	r3, #0
 800035c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800035e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000362:	4619      	mov	r1, r3
 8000364:	482c      	ldr	r0, [pc, #176]	@ (8000418 <MX_TIM1_Init+0x134>)
 8000366:	f002 f94f 	bl	8002608 <HAL_TIMEx_MasterConfigSynchronization>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000370:	f000 f8a0 	bl	80004b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000374:	2360      	movs	r3, #96	@ 0x60
 8000376:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800037c:	2300      	movs	r3, #0
 800037e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000380:	2300      	movs	r3, #0
 8000382:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000384:	2300      	movs	r3, #0
 8000386:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000388:	2300      	movs	r3, #0
 800038a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800038c:	2300      	movs	r3, #0
 800038e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000390:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000394:	2208      	movs	r2, #8
 8000396:	4619      	mov	r1, r3
 8000398:	481f      	ldr	r0, [pc, #124]	@ (8000418 <MX_TIM1_Init+0x134>)
 800039a:	f001 fc8b 	bl	8001cb4 <HAL_TIM_PWM_ConfigChannel>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80003a4:	f000 f886 	bl	80004b4 <Error_Handler>
  }
  sConfigOC.Pulse = 29999;
 80003a8:	f247 532f 	movw	r3, #29999	@ 0x752f
 80003ac:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80003ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003b2:	220c      	movs	r2, #12
 80003b4:	4619      	mov	r1, r3
 80003b6:	4818      	ldr	r0, [pc, #96]	@ (8000418 <MX_TIM1_Init+0x134>)
 80003b8:	f001 fc7c 	bl	8001cb4 <HAL_TIM_PWM_ConfigChannel>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 80003c2:	f000 f877 	bl	80004b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003c6:	2300      	movs	r3, #0
 80003c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80003e4:	2300      	movs	r3, #0
 80003e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80003e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80003ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003f2:	2300      	movs	r3, #0
 80003f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	4619      	mov	r1, r3
 80003fa:	4807      	ldr	r0, [pc, #28]	@ (8000418 <MX_TIM1_Init+0x134>)
 80003fc:	f002 f98c 	bl	8002718 <HAL_TIMEx_ConfigBreakDeadTime>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000406:	f000 f855 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800040a:	4803      	ldr	r0, [pc, #12]	@ (8000418 <MX_TIM1_Init+0x134>)
 800040c:	f000 f8e4 	bl	80005d8 <HAL_TIM_MspPostInit>

}
 8000410:	bf00      	nop
 8000412:	3758      	adds	r7, #88	@ 0x58
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000028 	.word	0x20000028
 800041c:	40012c00 	.word	0x40012c00

08000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	f107 030c 	add.w	r3, r7, #12
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
 8000434:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000436:	4b1d      	ldr	r3, [pc, #116]	@ (80004ac <MX_GPIO_Init+0x8c>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043a:	4a1c      	ldr	r2, [pc, #112]	@ (80004ac <MX_GPIO_Init+0x8c>)
 800043c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000442:	4b1a      	ldr	r3, [pc, #104]	@ (80004ac <MX_GPIO_Init+0x8c>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800044a:	60bb      	str	r3, [r7, #8]
 800044c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044e:	4b17      	ldr	r3, [pc, #92]	@ (80004ac <MX_GPIO_Init+0x8c>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000452:	4a16      	ldr	r2, [pc, #88]	@ (80004ac <MX_GPIO_Init+0x8c>)
 8000454:	f043 0302 	orr.w	r3, r3, #2
 8000458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800045a:	4b14      	ldr	r3, [pc, #80]	@ (80004ac <MX_GPIO_Init+0x8c>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800045e:	f003 0302 	and.w	r3, r3, #2
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000466:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <MX_GPIO_Init+0x8c>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046a:	4a10      	ldr	r2, [pc, #64]	@ (80004ac <MX_GPIO_Init+0x8c>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000472:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <MX_GPIO_Init+0x8c>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	603b      	str	r3, [r7, #0]
 800047c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	2104      	movs	r1, #4
 8000482:	480b      	ldr	r0, [pc, #44]	@ (80004b0 <MX_GPIO_Init+0x90>)
 8000484:	f000 fc74 	bl	8000d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000488:	2304      	movs	r3, #4
 800048a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048c:	2301      	movs	r3, #1
 800048e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000494:	2300      	movs	r3, #0
 8000496:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000498:	f107 030c 	add.w	r3, r7, #12
 800049c:	4619      	mov	r1, r3
 800049e:	4804      	ldr	r0, [pc, #16]	@ (80004b0 <MX_GPIO_Init+0x90>)
 80004a0:	f000 fabc 	bl	8000a1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004a4:	bf00      	nop
 80004a6:	3720      	adds	r7, #32
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40021000 	.word	0x40021000
 80004b0:	48000400 	.word	0x48000400

080004b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
	...

080004c4 <set_duty>:
 * @param[in] p_mot Pointer to the motor object structure.
 * @param[in] level Desired duty cycle percentage (-100 to 100).
 * @details This function constrains the level to the valid range and sets the
 * 			PWM duty cycle by updating the compare register pointer directly.
 */
void set_duty(motor_t* p_mot, int32_t level) {
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
	/// Constrain level to valid range
	if (level > 100) level = 100;
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	2b64      	cmp	r3, #100	@ 0x64
 80004d2:	dd01      	ble.n	80004d8 <set_duty+0x14>
 80004d4:	2364      	movs	r3, #100	@ 0x64
 80004d6:	603b      	str	r3, [r7, #0]
    if (level < -100) level = -100;
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80004de:	da02      	bge.n	80004e6 <set_duty+0x22>
 80004e0:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80004e4:	603b      	str	r3, [r7, #0]
	/// Initialize pulse width variables
    uint32_t pulse1 = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60fb      	str	r3, [r7, #12]
    uint32_t pulse2 = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60bb      	str	r3, [r7, #8]
    if(level > 0 ){
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	dd0c      	ble.n	800050e <set_duty+0x4a>
    	pulse2 = (uint32_t)((level * p_mot->Period) / 100);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	683a      	ldr	r2, [r7, #0]
 80004fa:	fb02 f303 	mul.w	r3, r2, r3
 80004fe:	4a13      	ldr	r2, [pc, #76]	@ (800054c <set_duty+0x88>)
 8000500:	fb82 1203 	smull	r1, r2, r2, r3
 8000504:	1152      	asrs	r2, r2, #5
 8000506:	17db      	asrs	r3, r3, #31
 8000508:	1ad3      	subs	r3, r2, r3
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	e00f      	b.n	800052e <set_duty+0x6a>
    }
    else if(level < 0){
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	da0c      	bge.n	800052e <set_duty+0x6a>
    	pulse1 = (uint32_t)((-level * p_mot->Period) / 100);
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	425b      	negs	r3, r3
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	6892      	ldr	r2, [r2, #8]
 800051c:	fb02 f303 	mul.w	r3, r2, r3
 8000520:	4a0a      	ldr	r2, [pc, #40]	@ (800054c <set_duty+0x88>)
 8000522:	fb82 1203 	smull	r1, r2, r2, r3
 8000526:	1152      	asrs	r2, r2, #5
 8000528:	17db      	asrs	r3, r3, #31
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	60fb      	str	r3, [r7, #12]
    }
    /// Set the PWM duty cycle by updating the compare register
    *(p_mot->chA) = pulse1;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	68fa      	ldr	r2, [r7, #12]
 8000534:	601a      	str	r2, [r3, #0]
    *(p_mot->chB) = pulse2;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	68ba      	ldr	r2, [r7, #8]
 800053c:	601a      	str	r2, [r3, #0]

}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	51eb851f 	.word	0x51eb851f

08000550 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000556:	4b0f      	ldr	r3, [pc, #60]	@ (8000594 <HAL_MspInit+0x44>)
 8000558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800055a:	4a0e      	ldr	r2, [pc, #56]	@ (8000594 <HAL_MspInit+0x44>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6613      	str	r3, [r2, #96]	@ 0x60
 8000562:	4b0c      	ldr	r3, [pc, #48]	@ (8000594 <HAL_MspInit+0x44>)
 8000564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <HAL_MspInit+0x44>)
 8000570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000572:	4a08      	ldr	r2, [pc, #32]	@ (8000594 <HAL_MspInit+0x44>)
 8000574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000578:	6593      	str	r3, [r2, #88]	@ 0x58
 800057a:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <HAL_MspInit+0x44>)
 800057c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800057e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000

08000598 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	@ (80005d0 <HAL_TIM_PWM_MspInit+0x38>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d10b      	bne.n	80005c2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005aa:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80005ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005ae:	4a09      	ldr	r2, [pc, #36]	@ (80005d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80005b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80005b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80005b6:	4b07      	ldr	r3, [pc, #28]	@ (80005d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80005b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40012c00 	.word	0x40012c00
 80005d4:	40021000 	.word	0x40021000

080005d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a12      	ldr	r2, [pc, #72]	@ (8000640 <HAL_TIM_MspPostInit+0x68>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d11d      	bne.n	8000636 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <HAL_TIM_MspPostInit+0x6c>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	4a11      	ldr	r2, [pc, #68]	@ (8000644 <HAL_TIM_MspPostInit+0x6c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000606:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <HAL_TIM_MspPostInit+0x6c>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000612:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000616:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000618:	2302      	movs	r3, #2
 800061a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000624:	2301      	movs	r3, #1
 8000626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	4619      	mov	r1, r3
 800062e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000632:	f000 f9f3 	bl	8000a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000636:	bf00      	nop
 8000638:	3720      	adds	r7, #32
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40012c00 	.word	0x40012c00
 8000644:	40021000 	.word	0x40021000

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <NMI_Handler+0x4>

08000650 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <HardFault_Handler+0x4>

08000658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <MemManage_Handler+0x4>

08000660 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <BusFault_Handler+0x4>

08000668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <UsageFault_Handler+0x4>

08000670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069e:	f000 f893 	bl	80007c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006ac:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <SystemInit+0x20>)
 80006ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b2:	4a05      	ldr	r2, [pc, #20]	@ (80006c8 <SystemInit+0x20>)
 80006b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000704 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d0:	f7ff ffea 	bl	80006a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d4:	480c      	ldr	r0, [pc, #48]	@ (8000708 <LoopForever+0x6>)
  ldr r1, =_edata
 80006d6:	490d      	ldr	r1, [pc, #52]	@ (800070c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000710 <LoopForever+0xe>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000718 <LoopForever+0x16>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006fa:	f002 f893 	bl	8002824 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006fe:	f7ff fd63 	bl	80001c8 <main>

08000702 <LoopForever>:

LoopForever:
    b LoopForever
 8000702:	e7fe      	b.n	8000702 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000704:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800070c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000710:	080028cc 	.word	0x080028cc
  ldr r2, =_sbss
 8000714:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000718:	20000078 	.word	0x20000078

0800071c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800071c:	e7fe      	b.n	800071c <ADC1_2_IRQHandler>

0800071e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000724:	2300      	movs	r3, #0
 8000726:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000728:	2003      	movs	r0, #3
 800072a:	f000 f943 	bl	80009b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800072e:	200f      	movs	r0, #15
 8000730:	f000 f80e 	bl	8000750 <HAL_InitTick>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d002      	beq.n	8000740 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	71fb      	strb	r3, [r7, #7]
 800073e:	e001      	b.n	8000744 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000740:	f7ff ff06 	bl	8000550 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000744:	79fb      	ldrb	r3, [r7, #7]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000758:	2300      	movs	r3, #0
 800075a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800075c:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <HAL_InitTick+0x6c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d023      	beq.n	80007ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000764:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <HAL_InitTick+0x70>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <HAL_InitTick+0x6c>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000772:	fbb3 f3f1 	udiv	r3, r3, r1
 8000776:	fbb2 f3f3 	udiv	r3, r2, r3
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f941 	bl	8000a02 <HAL_SYSTICK_Config>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d10f      	bne.n	80007a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b0f      	cmp	r3, #15
 800078a:	d809      	bhi.n	80007a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800078c:	2200      	movs	r2, #0
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	f000 f919 	bl	80009ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000798:	4a0a      	ldr	r2, [pc, #40]	@ (80007c4 <HAL_InitTick+0x74>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	e007      	b.n	80007b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007a0:	2301      	movs	r3, #1
 80007a2:	73fb      	strb	r3, [r7, #15]
 80007a4:	e004      	b.n	80007b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	73fb      	strb	r3, [r7, #15]
 80007aa:	e001      	b.n	80007b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007ac:	2301      	movs	r3, #1
 80007ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000008 	.word	0x20000008
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000004 	.word	0x20000004

080007c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <HAL_IncTick+0x20>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <HAL_IncTick+0x24>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4413      	add	r3, r2
 80007d8:	4a04      	ldr	r2, [pc, #16]	@ (80007ec <HAL_IncTick+0x24>)
 80007da:	6013      	str	r3, [r2, #0]
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000074 	.word	0x20000074

080007f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return uwTick;
 80007f4:	4b03      	ldr	r3, [pc, #12]	@ (8000804 <HAL_GetTick+0x14>)
 80007f6:	681b      	ldr	r3, [r3, #0]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000074 	.word	0x20000074

08000808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000810:	f7ff ffee 	bl	80007f0 <HAL_GetTick>
 8000814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000820:	d005      	beq.n	800082e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000822:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <HAL_Delay+0x44>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	461a      	mov	r2, r3
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	4413      	add	r3, r2
 800082c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800082e:	bf00      	nop
 8000830:	f7ff ffde 	bl	80007f0 <HAL_GetTick>
 8000834:	4602      	mov	r2, r0
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	429a      	cmp	r2, r3
 800083e:	d8f7      	bhi.n	8000830 <HAL_Delay+0x28>
  {
  }
}
 8000840:	bf00      	nop
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000008 	.word	0x20000008

08000850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <__NVIC_SetPriorityGrouping+0x44>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800086c:	4013      	ands	r3, r2
 800086e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000878:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800087c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000882:	4a04      	ldr	r2, [pc, #16]	@ (8000894 <__NVIC_SetPriorityGrouping+0x44>)
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	60d3      	str	r3, [r2, #12]
}
 8000888:	bf00      	nop
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800089c:	4b04      	ldr	r3, [pc, #16]	@ (80008b0 <__NVIC_GetPriorityGrouping+0x18>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	f003 0307 	and.w	r3, r3, #7
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	6039      	str	r1, [r7, #0]
 80008be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	db0a      	blt.n	80008de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	490c      	ldr	r1, [pc, #48]	@ (8000900 <__NVIC_SetPriority+0x4c>)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	0112      	lsls	r2, r2, #4
 80008d4:	b2d2      	uxtb	r2, r2
 80008d6:	440b      	add	r3, r1
 80008d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008dc:	e00a      	b.n	80008f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4908      	ldr	r1, [pc, #32]	@ (8000904 <__NVIC_SetPriority+0x50>)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	f003 030f 	and.w	r3, r3, #15
 80008ea:	3b04      	subs	r3, #4
 80008ec:	0112      	lsls	r2, r2, #4
 80008ee:	b2d2      	uxtb	r2, r2
 80008f0:	440b      	add	r3, r1
 80008f2:	761a      	strb	r2, [r3, #24]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	e000e100 	.word	0xe000e100
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000908:	b480      	push	{r7}
 800090a:	b089      	sub	sp, #36	@ 0x24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	f1c3 0307 	rsb	r3, r3, #7
 8000922:	2b04      	cmp	r3, #4
 8000924:	bf28      	it	cs
 8000926:	2304      	movcs	r3, #4
 8000928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3304      	adds	r3, #4
 800092e:	2b06      	cmp	r3, #6
 8000930:	d902      	bls.n	8000938 <NVIC_EncodePriority+0x30>
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3b03      	subs	r3, #3
 8000936:	e000      	b.n	800093a <NVIC_EncodePriority+0x32>
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	f04f 32ff 	mov.w	r2, #4294967295
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	43da      	mvns	r2, r3
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	401a      	ands	r2, r3
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000950:	f04f 31ff 	mov.w	r1, #4294967295
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	fa01 f303 	lsl.w	r3, r1, r3
 800095a:	43d9      	mvns	r1, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	4313      	orrs	r3, r2
         );
}
 8000962:	4618      	mov	r0, r3
 8000964:	3724      	adds	r7, #36	@ 0x24
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
	...

08000970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3b01      	subs	r3, #1
 800097c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000980:	d301      	bcc.n	8000986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000982:	2301      	movs	r3, #1
 8000984:	e00f      	b.n	80009a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000986:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <SysTick_Config+0x40>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3b01      	subs	r3, #1
 800098c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098e:	210f      	movs	r1, #15
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f7ff ff8e 	bl	80008b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000998:	4b05      	ldr	r3, [pc, #20]	@ (80009b0 <SysTick_Config+0x40>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099e:	4b04      	ldr	r3, [pc, #16]	@ (80009b0 <SysTick_Config+0x40>)
 80009a0:	2207      	movs	r2, #7
 80009a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	e000e010 	.word	0xe000e010

080009b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff47 	bl	8000850 <__NVIC_SetPriorityGrouping>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b086      	sub	sp, #24
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	4603      	mov	r3, r0
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009dc:	f7ff ff5c 	bl	8000898 <__NVIC_GetPriorityGrouping>
 80009e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	68b9      	ldr	r1, [r7, #8]
 80009e6:	6978      	ldr	r0, [r7, #20]
 80009e8:	f7ff ff8e 	bl	8000908 <NVIC_EncodePriority>
 80009ec:	4602      	mov	r2, r0
 80009ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f2:	4611      	mov	r1, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff5d 	bl	80008b4 <__NVIC_SetPriority>
}
 80009fa:	bf00      	nop
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ffb0 	bl	8000970 <SysTick_Config>
 8000a10:	4603      	mov	r3, r0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b087      	sub	sp, #28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2a:	e17f      	b.n	8000d2c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	2101      	movs	r1, #1
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	fa01 f303 	lsl.w	r3, r1, r3
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f000 8171 	beq.w	8000d26 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 0303 	and.w	r3, r3, #3
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d005      	beq.n	8000a5c <HAL_GPIO_Init+0x40>
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f003 0303 	and.w	r3, r3, #3
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d130      	bne.n	8000abe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	2203      	movs	r2, #3
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	68da      	ldr	r2, [r3, #12]
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a92:	2201      	movs	r2, #1
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	091b      	lsrs	r3, r3, #4
 8000aa8:	f003 0201 	and.w	r2, r3, #1
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f003 0303 	and.w	r3, r3, #3
 8000ac6:	2b03      	cmp	r3, #3
 8000ac8:	d118      	bne.n	8000afc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ace:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	08db      	lsrs	r3, r3, #3
 8000ae6:	f003 0201 	and.w	r2, r3, #1
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f003 0303 	and.w	r3, r3, #3
 8000b04:	2b03      	cmp	r3, #3
 8000b06:	d017      	beq.n	8000b38 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	2203      	movs	r2, #3
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f003 0303 	and.w	r3, r3, #3
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d123      	bne.n	8000b8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	08da      	lsrs	r2, r3, #3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3208      	adds	r2, #8
 8000b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	220f      	movs	r2, #15
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	691a      	ldr	r2, [r3, #16]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	08da      	lsrs	r2, r3, #3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3208      	adds	r2, #8
 8000b86:	6939      	ldr	r1, [r7, #16]
 8000b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	2203      	movs	r2, #3
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 0203 	and.w	r2, r3, #3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f000 80ac 	beq.w	8000d26 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	4b5f      	ldr	r3, [pc, #380]	@ (8000d4c <HAL_GPIO_Init+0x330>)
 8000bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bd2:	4a5e      	ldr	r2, [pc, #376]	@ (8000d4c <HAL_GPIO_Init+0x330>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bda:	4b5c      	ldr	r3, [pc, #368]	@ (8000d4c <HAL_GPIO_Init+0x330>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000be6:	4a5a      	ldr	r2, [pc, #360]	@ (8000d50 <HAL_GPIO_Init+0x334>)
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	089b      	lsrs	r3, r3, #2
 8000bec:	3302      	adds	r3, #2
 8000bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	f003 0303 	and.w	r3, r3, #3
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	220f      	movs	r2, #15
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c10:	d025      	beq.n	8000c5e <HAL_GPIO_Init+0x242>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a4f      	ldr	r2, [pc, #316]	@ (8000d54 <HAL_GPIO_Init+0x338>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d01f      	beq.n	8000c5a <HAL_GPIO_Init+0x23e>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a4e      	ldr	r2, [pc, #312]	@ (8000d58 <HAL_GPIO_Init+0x33c>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d019      	beq.n	8000c56 <HAL_GPIO_Init+0x23a>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a4d      	ldr	r2, [pc, #308]	@ (8000d5c <HAL_GPIO_Init+0x340>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d013      	beq.n	8000c52 <HAL_GPIO_Init+0x236>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a4c      	ldr	r2, [pc, #304]	@ (8000d60 <HAL_GPIO_Init+0x344>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d00d      	beq.n	8000c4e <HAL_GPIO_Init+0x232>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a4b      	ldr	r2, [pc, #300]	@ (8000d64 <HAL_GPIO_Init+0x348>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d007      	beq.n	8000c4a <HAL_GPIO_Init+0x22e>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a4a      	ldr	r2, [pc, #296]	@ (8000d68 <HAL_GPIO_Init+0x34c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d101      	bne.n	8000c46 <HAL_GPIO_Init+0x22a>
 8000c42:	2306      	movs	r3, #6
 8000c44:	e00c      	b.n	8000c60 <HAL_GPIO_Init+0x244>
 8000c46:	2307      	movs	r3, #7
 8000c48:	e00a      	b.n	8000c60 <HAL_GPIO_Init+0x244>
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	e008      	b.n	8000c60 <HAL_GPIO_Init+0x244>
 8000c4e:	2304      	movs	r3, #4
 8000c50:	e006      	b.n	8000c60 <HAL_GPIO_Init+0x244>
 8000c52:	2303      	movs	r3, #3
 8000c54:	e004      	b.n	8000c60 <HAL_GPIO_Init+0x244>
 8000c56:	2302      	movs	r3, #2
 8000c58:	e002      	b.n	8000c60 <HAL_GPIO_Init+0x244>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e000      	b.n	8000c60 <HAL_GPIO_Init+0x244>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	f002 0203 	and.w	r2, r2, #3
 8000c66:	0092      	lsls	r2, r2, #2
 8000c68:	4093      	lsls	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c70:	4937      	ldr	r1, [pc, #220]	@ (8000d50 <HAL_GPIO_Init+0x334>)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	089b      	lsrs	r3, r3, #2
 8000c76:	3302      	adds	r3, #2
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d6c <HAL_GPIO_Init+0x350>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ca2:	4a32      	ldr	r2, [pc, #200]	@ (8000d6c <HAL_GPIO_Init+0x350>)
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ca8:	4b30      	ldr	r3, [pc, #192]	@ (8000d6c <HAL_GPIO_Init+0x350>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ccc:	4a27      	ldr	r2, [pc, #156]	@ (8000d6c <HAL_GPIO_Init+0x350>)
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cd2:	4b26      	ldr	r3, [pc, #152]	@ (8000d6c <HAL_GPIO_Init+0x350>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cf6:	4a1d      	ldr	r2, [pc, #116]	@ (8000d6c <HAL_GPIO_Init+0x350>)
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d6c <HAL_GPIO_Init+0x350>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d20:	4a12      	ldr	r2, [pc, #72]	@ (8000d6c <HAL_GPIO_Init+0x350>)
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa22 f303 	lsr.w	r3, r2, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f47f ae78 	bne.w	8000a2c <HAL_GPIO_Init+0x10>
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	371c      	adds	r7, #28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010000 	.word	0x40010000
 8000d54:	48000400 	.word	0x48000400
 8000d58:	48000800 	.word	0x48000800
 8000d5c:	48000c00 	.word	0x48000c00
 8000d60:	48001000 	.word	0x48001000
 8000d64:	48001400 	.word	0x48001400
 8000d68:	48001800 	.word	0x48001800
 8000d6c:	40010400 	.word	0x40010400

08000d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d80:	787b      	ldrb	r3, [r7, #1]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d86:	887a      	ldrh	r2, [r7, #2]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d8c:	e002      	b.n	8000d94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d8e:	887a      	ldrh	r2, [r7, #2]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000da4:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	40007000 	.word	0x40007000

08000dbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000dca:	d130      	bne.n	8000e2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dcc:	4b23      	ldr	r3, [pc, #140]	@ (8000e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000dd8:	d038      	beq.n	8000e4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dda:	4b20      	ldr	r3, [pc, #128]	@ (8000e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000de2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000de4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000de8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dea:	4b1d      	ldr	r3, [pc, #116]	@ (8000e60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2232      	movs	r2, #50	@ 0x32
 8000df0:	fb02 f303 	mul.w	r3, r2, r3
 8000df4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000df6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfa:	0c9b      	lsrs	r3, r3, #18
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e00:	e002      	b.n	8000e08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e08:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e14:	d102      	bne.n	8000e1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f2      	bne.n	8000e02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e28:	d110      	bne.n	8000e4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e00f      	b.n	8000e4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e3a:	d007      	beq.n	8000e4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e3c:	4b07      	ldr	r3, [pc, #28]	@ (8000e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e44:	4a05      	ldr	r2, [pc, #20]	@ (8000e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40007000 	.word	0x40007000
 8000e60:	20000000 	.word	0x20000000
 8000e64:	431bde83 	.word	0x431bde83

08000e68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e3ca      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e7a:	4b97      	ldr	r3, [pc, #604]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f003 030c 	and.w	r3, r3, #12
 8000e82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e84:	4b94      	ldr	r3, [pc, #592]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 80e4 	beq.w	8001064 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d007      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x4a>
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	2b0c      	cmp	r3, #12
 8000ea6:	f040 808b 	bne.w	8000fc0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	f040 8087 	bne.w	8000fc0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eb2:	4b89      	ldr	r3, [pc, #548]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d005      	beq.n	8000eca <HAL_RCC_OscConfig+0x62>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e3a2      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a1a      	ldr	r2, [r3, #32]
 8000ece:	4b82      	ldr	r3, [pc, #520]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d004      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x7c>
 8000eda:	4b7f      	ldr	r3, [pc, #508]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000ee2:	e005      	b.n	8000ef0 <HAL_RCC_OscConfig+0x88>
 8000ee4:	4b7c      	ldr	r3, [pc, #496]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000eea:	091b      	lsrs	r3, r3, #4
 8000eec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d223      	bcs.n	8000f3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fd1d 	bl	8001938 <RCC_SetFlashLatencyFromMSIRange>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e383      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f08:	4b73      	ldr	r3, [pc, #460]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a72      	ldr	r2, [pc, #456]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000f0e:	f043 0308 	orr.w	r3, r3, #8
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4b70      	ldr	r3, [pc, #448]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	496d      	ldr	r1, [pc, #436]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000f22:	4313      	orrs	r3, r2
 8000f24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f26:	4b6c      	ldr	r3, [pc, #432]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	4968      	ldr	r1, [pc, #416]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000f36:	4313      	orrs	r3, r2
 8000f38:	604b      	str	r3, [r1, #4]
 8000f3a:	e025      	b.n	8000f88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f3c:	4b66      	ldr	r3, [pc, #408]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a65      	ldr	r2, [pc, #404]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000f42:	f043 0308 	orr.w	r3, r3, #8
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4b63      	ldr	r3, [pc, #396]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	4960      	ldr	r1, [pc, #384]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000f56:	4313      	orrs	r3, r2
 8000f58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f5a:	4b5f      	ldr	r3, [pc, #380]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	495b      	ldr	r1, [pc, #364]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d109      	bne.n	8000f88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 fcdd 	bl	8001938 <RCC_SetFlashLatencyFromMSIRange>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e343      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f88:	f000 fc4a 	bl	8001820 <HAL_RCC_GetSysClockFreq>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	4b52      	ldr	r3, [pc, #328]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	091b      	lsrs	r3, r3, #4
 8000f94:	f003 030f 	and.w	r3, r3, #15
 8000f98:	4950      	ldr	r1, [pc, #320]	@ (80010dc <HAL_RCC_OscConfig+0x274>)
 8000f9a:	5ccb      	ldrb	r3, [r1, r3]
 8000f9c:	f003 031f 	and.w	r3, r3, #31
 8000fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa4:	4a4e      	ldr	r2, [pc, #312]	@ (80010e0 <HAL_RCC_OscConfig+0x278>)
 8000fa6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fa8:	4b4e      	ldr	r3, [pc, #312]	@ (80010e4 <HAL_RCC_OscConfig+0x27c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fbcf 	bl	8000750 <HAL_InitTick>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d052      	beq.n	8001062 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	e327      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d032      	beq.n	800102e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fc8:	4b43      	ldr	r3, [pc, #268]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a42      	ldr	r2, [pc, #264]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fc0c 	bl	80007f0 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fc08 	bl	80007f0 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e310      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fee:	4b3a      	ldr	r3, [pc, #232]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ffa:	4b37      	ldr	r3, [pc, #220]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a36      	ldr	r2, [pc, #216]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	4b34      	ldr	r3, [pc, #208]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	4931      	ldr	r1, [pc, #196]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8001014:	4313      	orrs	r3, r2
 8001016:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001018:	4b2f      	ldr	r3, [pc, #188]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	492c      	ldr	r1, [pc, #176]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8001028:	4313      	orrs	r3, r2
 800102a:	604b      	str	r3, [r1, #4]
 800102c:	e01a      	b.n	8001064 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800102e:	4b2a      	ldr	r3, [pc, #168]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a29      	ldr	r2, [pc, #164]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800103a:	f7ff fbd9 	bl	80007f0 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001042:	f7ff fbd5 	bl	80007f0 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e2dd      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001054:	4b20      	ldr	r3, [pc, #128]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f0      	bne.n	8001042 <HAL_RCC_OscConfig+0x1da>
 8001060:	e000      	b.n	8001064 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001062:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	d074      	beq.n	800115a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	2b08      	cmp	r3, #8
 8001074:	d005      	beq.n	8001082 <HAL_RCC_OscConfig+0x21a>
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	2b0c      	cmp	r3, #12
 800107a:	d10e      	bne.n	800109a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	2b03      	cmp	r3, #3
 8001080:	d10b      	bne.n	800109a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d064      	beq.n	8001158 <HAL_RCC_OscConfig+0x2f0>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d160      	bne.n	8001158 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e2ba      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010a2:	d106      	bne.n	80010b2 <HAL_RCC_OscConfig+0x24a>
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0b      	ldr	r2, [pc, #44]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 80010aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	e026      	b.n	8001100 <HAL_RCC_OscConfig+0x298>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010ba:	d115      	bne.n	80010e8 <HAL_RCC_OscConfig+0x280>
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a05      	ldr	r2, [pc, #20]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 80010c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b03      	ldr	r3, [pc, #12]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a02      	ldr	r2, [pc, #8]	@ (80010d8 <HAL_RCC_OscConfig+0x270>)
 80010ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	e014      	b.n	8001100 <HAL_RCC_OscConfig+0x298>
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000
 80010dc:	08002884 	.word	0x08002884
 80010e0:	20000000 	.word	0x20000000
 80010e4:	20000004 	.word	0x20000004
 80010e8:	4ba0      	ldr	r3, [pc, #640]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a9f      	ldr	r2, [pc, #636]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 80010ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b9d      	ldr	r3, [pc, #628]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a9c      	ldr	r2, [pc, #624]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 80010fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d013      	beq.n	8001130 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001108:	f7ff fb72 	bl	80007f0 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001110:	f7ff fb6e 	bl	80007f0 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b64      	cmp	r3, #100	@ 0x64
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e276      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001122:	4b92      	ldr	r3, [pc, #584]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0f0      	beq.n	8001110 <HAL_RCC_OscConfig+0x2a8>
 800112e:	e014      	b.n	800115a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001130:	f7ff fb5e 	bl	80007f0 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001138:	f7ff fb5a 	bl	80007f0 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b64      	cmp	r3, #100	@ 0x64
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e262      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800114a:	4b88      	ldr	r3, [pc, #544]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f0      	bne.n	8001138 <HAL_RCC_OscConfig+0x2d0>
 8001156:	e000      	b.n	800115a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d060      	beq.n	8001228 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	2b04      	cmp	r3, #4
 800116a:	d005      	beq.n	8001178 <HAL_RCC_OscConfig+0x310>
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	2b0c      	cmp	r3, #12
 8001170:	d119      	bne.n	80011a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d116      	bne.n	80011a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001178:	4b7c      	ldr	r3, [pc, #496]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <HAL_RCC_OscConfig+0x328>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e23f      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001190:	4b76      	ldr	r3, [pc, #472]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	061b      	lsls	r3, r3, #24
 800119e:	4973      	ldr	r1, [pc, #460]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 80011a0:	4313      	orrs	r3, r2
 80011a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011a4:	e040      	b.n	8001228 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d023      	beq.n	80011f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ae:	4b6f      	ldr	r3, [pc, #444]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a6e      	ldr	r2, [pc, #440]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 80011b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ba:	f7ff fb19 	bl	80007f0 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c2:	f7ff fb15 	bl	80007f0 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e21d      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011d4:	4b65      	ldr	r3, [pc, #404]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e0:	4b62      	ldr	r3, [pc, #392]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	061b      	lsls	r3, r3, #24
 80011ee:	495f      	ldr	r1, [pc, #380]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	604b      	str	r3, [r1, #4]
 80011f4:	e018      	b.n	8001228 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011f6:	4b5d      	ldr	r3, [pc, #372]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a5c      	ldr	r2, [pc, #368]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 80011fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001202:	f7ff faf5 	bl	80007f0 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800120a:	f7ff faf1 	bl	80007f0 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e1f9      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800121c:	4b53      	ldr	r3, [pc, #332]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f0      	bne.n	800120a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	2b00      	cmp	r3, #0
 8001232:	d03c      	beq.n	80012ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d01c      	beq.n	8001276 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800123c:	4b4b      	ldr	r3, [pc, #300]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 800123e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001242:	4a4a      	ldr	r2, [pc, #296]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124c:	f7ff fad0 	bl	80007f0 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001254:	f7ff facc 	bl	80007f0 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e1d4      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001266:	4b41      	ldr	r3, [pc, #260]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 8001268:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0ef      	beq.n	8001254 <HAL_RCC_OscConfig+0x3ec>
 8001274:	e01b      	b.n	80012ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001276:	4b3d      	ldr	r3, [pc, #244]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 8001278:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800127c:	4a3b      	ldr	r2, [pc, #236]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 800127e:	f023 0301 	bic.w	r3, r3, #1
 8001282:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001286:	f7ff fab3 	bl	80007f0 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800128e:	f7ff faaf 	bl	80007f0 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e1b7      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012a0:	4b32      	ldr	r3, [pc, #200]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 80012a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1ef      	bne.n	800128e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 80a6 	beq.w	8001408 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012c0:	4b2a      	ldr	r3, [pc, #168]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 80012c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10d      	bne.n	80012e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012cc:	4b27      	ldr	r3, [pc, #156]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 80012ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d0:	4a26      	ldr	r2, [pc, #152]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 80012d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80012d8:	4b24      	ldr	r3, [pc, #144]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 80012da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012e4:	2301      	movs	r3, #1
 80012e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e8:	4b21      	ldr	r3, [pc, #132]	@ (8001370 <HAL_RCC_OscConfig+0x508>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d118      	bne.n	8001326 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <HAL_RCC_OscConfig+0x508>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001370 <HAL_RCC_OscConfig+0x508>)
 80012fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001300:	f7ff fa76 	bl	80007f0 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001308:	f7ff fa72 	bl	80007f0 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e17a      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800131a:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <HAL_RCC_OscConfig+0x508>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d108      	bne.n	8001340 <HAL_RCC_OscConfig+0x4d8>
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 8001330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001334:	4a0d      	ldr	r2, [pc, #52]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800133e:	e029      	b.n	8001394 <HAL_RCC_OscConfig+0x52c>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b05      	cmp	r3, #5
 8001346:	d115      	bne.n	8001374 <HAL_RCC_OscConfig+0x50c>
 8001348:	4b08      	ldr	r3, [pc, #32]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 800134a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800134e:	4a07      	ldr	r2, [pc, #28]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 800135a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800135e:	4a03      	ldr	r2, [pc, #12]	@ (800136c <HAL_RCC_OscConfig+0x504>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001368:	e014      	b.n	8001394 <HAL_RCC_OscConfig+0x52c>
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	40007000 	.word	0x40007000
 8001374:	4b9c      	ldr	r3, [pc, #624]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 8001376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800137a:	4a9b      	ldr	r2, [pc, #620]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 800137c:	f023 0301 	bic.w	r3, r3, #1
 8001380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001384:	4b98      	ldr	r3, [pc, #608]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 8001386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800138a:	4a97      	ldr	r2, [pc, #604]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 800138c:	f023 0304 	bic.w	r3, r3, #4
 8001390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d016      	beq.n	80013ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139c:	f7ff fa28 	bl	80007f0 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013a2:	e00a      	b.n	80013ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a4:	f7ff fa24 	bl	80007f0 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e12a      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013ba:	4b8b      	ldr	r3, [pc, #556]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 80013bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0ed      	beq.n	80013a4 <HAL_RCC_OscConfig+0x53c>
 80013c8:	e015      	b.n	80013f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ca:	f7ff fa11 	bl	80007f0 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013d0:	e00a      	b.n	80013e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d2:	f7ff fa0d 	bl	80007f0 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e113      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013e8:	4b7f      	ldr	r3, [pc, #508]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 80013ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1ed      	bne.n	80013d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013f6:	7ffb      	ldrb	r3, [r7, #31]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d105      	bne.n	8001408 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013fc:	4b7a      	ldr	r3, [pc, #488]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 80013fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001400:	4a79      	ldr	r2, [pc, #484]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 8001402:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001406:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80fe 	beq.w	800160e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001416:	2b02      	cmp	r3, #2
 8001418:	f040 80d0 	bne.w	80015bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800141c:	4b72      	ldr	r3, [pc, #456]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f003 0203 	and.w	r2, r3, #3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800142c:	429a      	cmp	r2, r3
 800142e:	d130      	bne.n	8001492 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	3b01      	subs	r3, #1
 800143c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800143e:	429a      	cmp	r2, r3
 8001440:	d127      	bne.n	8001492 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800144c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800144e:	429a      	cmp	r2, r3
 8001450:	d11f      	bne.n	8001492 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800145c:	2a07      	cmp	r2, #7
 800145e:	bf14      	ite	ne
 8001460:	2201      	movne	r2, #1
 8001462:	2200      	moveq	r2, #0
 8001464:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001466:	4293      	cmp	r3, r2
 8001468:	d113      	bne.n	8001492 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001474:	085b      	lsrs	r3, r3, #1
 8001476:	3b01      	subs	r3, #1
 8001478:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800147a:	429a      	cmp	r2, r3
 800147c:	d109      	bne.n	8001492 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001488:	085b      	lsrs	r3, r3, #1
 800148a:	3b01      	subs	r3, #1
 800148c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800148e:	429a      	cmp	r2, r3
 8001490:	d06e      	beq.n	8001570 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	2b0c      	cmp	r3, #12
 8001496:	d069      	beq.n	800156c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001498:	4b53      	ldr	r3, [pc, #332]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d105      	bne.n	80014b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80014a4:	4b50      	ldr	r3, [pc, #320]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0ad      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014b4:	4b4c      	ldr	r3, [pc, #304]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a4b      	ldr	r2, [pc, #300]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 80014ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80014be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014c0:	f7ff f996 	bl	80007f0 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c8:	f7ff f992 	bl	80007f0 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e09a      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014da:	4b43      	ldr	r3, [pc, #268]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014e6:	4b40      	ldr	r3, [pc, #256]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	4b40      	ldr	r3, [pc, #256]	@ (80015ec <HAL_RCC_OscConfig+0x784>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80014f6:	3a01      	subs	r2, #1
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	4311      	orrs	r1, r2
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001500:	0212      	lsls	r2, r2, #8
 8001502:	4311      	orrs	r1, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001508:	0852      	lsrs	r2, r2, #1
 800150a:	3a01      	subs	r2, #1
 800150c:	0552      	lsls	r2, r2, #21
 800150e:	4311      	orrs	r1, r2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001514:	0852      	lsrs	r2, r2, #1
 8001516:	3a01      	subs	r2, #1
 8001518:	0652      	lsls	r2, r2, #25
 800151a:	4311      	orrs	r1, r2
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001520:	0912      	lsrs	r2, r2, #4
 8001522:	0452      	lsls	r2, r2, #17
 8001524:	430a      	orrs	r2, r1
 8001526:	4930      	ldr	r1, [pc, #192]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 8001528:	4313      	orrs	r3, r2
 800152a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800152c:	4b2e      	ldr	r3, [pc, #184]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a2d      	ldr	r2, [pc, #180]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 8001532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001536:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001538:	4b2b      	ldr	r3, [pc, #172]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	4a2a      	ldr	r2, [pc, #168]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 800153e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001542:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001544:	f7ff f954 	bl	80007f0 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800154c:	f7ff f950 	bl	80007f0 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e058      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800155e:	4b22      	ldr	r3, [pc, #136]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800156a:	e050      	b.n	800160e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e04f      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001570:	4b1d      	ldr	r3, [pc, #116]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d148      	bne.n	800160e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800157c:	4b1a      	ldr	r3, [pc, #104]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a19      	ldr	r2, [pc, #100]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 8001582:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001586:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001588:	4b17      	ldr	r3, [pc, #92]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	4a16      	ldr	r2, [pc, #88]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 800158e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001592:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001594:	f7ff f92c 	bl	80007f0 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800159c:	f7ff f928 	bl	80007f0 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e030      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x734>
 80015ba:	e028      	b.n	800160e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2b0c      	cmp	r3, #12
 80015c0:	d023      	beq.n	800160a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a08      	ldr	r2, [pc, #32]	@ (80015e8 <HAL_RCC_OscConfig+0x780>)
 80015c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ce:	f7ff f90f 	bl	80007f0 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015d4:	e00c      	b.n	80015f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d6:	f7ff f90b 	bl	80007f0 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d905      	bls.n	80015f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e013      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
 80015e8:	40021000 	.word	0x40021000
 80015ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f0:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <HAL_RCC_OscConfig+0x7b0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1ec      	bne.n	80015d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <HAL_RCC_OscConfig+0x7b0>)
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	4905      	ldr	r1, [pc, #20]	@ (8001618 <HAL_RCC_OscConfig+0x7b0>)
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_RCC_OscConfig+0x7b4>)
 8001604:	4013      	ands	r3, r2
 8001606:	60cb      	str	r3, [r1, #12]
 8001608:	e001      	b.n	800160e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3720      	adds	r7, #32
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40021000 	.word	0x40021000
 800161c:	feeefffc 	.word	0xfeeefffc

08001620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0e7      	b.n	8001804 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001634:	4b75      	ldr	r3, [pc, #468]	@ (800180c <HAL_RCC_ClockConfig+0x1ec>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d910      	bls.n	8001664 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b72      	ldr	r3, [pc, #456]	@ (800180c <HAL_RCC_ClockConfig+0x1ec>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 0207 	bic.w	r2, r3, #7
 800164a:	4970      	ldr	r1, [pc, #448]	@ (800180c <HAL_RCC_ClockConfig+0x1ec>)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b6e      	ldr	r3, [pc, #440]	@ (800180c <HAL_RCC_ClockConfig+0x1ec>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0cf      	b.n	8001804 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d010      	beq.n	8001692 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	4b66      	ldr	r3, [pc, #408]	@ (8001810 <HAL_RCC_ClockConfig+0x1f0>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800167c:	429a      	cmp	r2, r3
 800167e:	d908      	bls.n	8001692 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001680:	4b63      	ldr	r3, [pc, #396]	@ (8001810 <HAL_RCC_ClockConfig+0x1f0>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	4960      	ldr	r1, [pc, #384]	@ (8001810 <HAL_RCC_ClockConfig+0x1f0>)
 800168e:	4313      	orrs	r3, r2
 8001690:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d04c      	beq.n	8001738 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d107      	bne.n	80016b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016a6:	4b5a      	ldr	r3, [pc, #360]	@ (8001810 <HAL_RCC_ClockConfig+0x1f0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d121      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e0a6      	b.n	8001804 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016be:	4b54      	ldr	r3, [pc, #336]	@ (8001810 <HAL_RCC_ClockConfig+0x1f0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d115      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e09a      	b.n	8001804 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001810 <HAL_RCC_ClockConfig+0x1f0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d109      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e08e      	b.n	8001804 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001810 <HAL_RCC_ClockConfig+0x1f0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e086      	b.n	8001804 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016f6:	4b46      	ldr	r3, [pc, #280]	@ (8001810 <HAL_RCC_ClockConfig+0x1f0>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f023 0203 	bic.w	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4943      	ldr	r1, [pc, #268]	@ (8001810 <HAL_RCC_ClockConfig+0x1f0>)
 8001704:	4313      	orrs	r3, r2
 8001706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001708:	f7ff f872 	bl	80007f0 <HAL_GetTick>
 800170c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170e:	e00a      	b.n	8001726 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001710:	f7ff f86e 	bl	80007f0 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e06e      	b.n	8001804 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	4b3a      	ldr	r3, [pc, #232]	@ (8001810 <HAL_RCC_ClockConfig+0x1f0>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 020c 	and.w	r2, r3, #12
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	429a      	cmp	r2, r3
 8001736:	d1eb      	bne.n	8001710 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d010      	beq.n	8001766 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	4b31      	ldr	r3, [pc, #196]	@ (8001810 <HAL_RCC_ClockConfig+0x1f0>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001750:	429a      	cmp	r2, r3
 8001752:	d208      	bcs.n	8001766 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001754:	4b2e      	ldr	r3, [pc, #184]	@ (8001810 <HAL_RCC_ClockConfig+0x1f0>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	492b      	ldr	r1, [pc, #172]	@ (8001810 <HAL_RCC_ClockConfig+0x1f0>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001766:	4b29      	ldr	r3, [pc, #164]	@ (800180c <HAL_RCC_ClockConfig+0x1ec>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d210      	bcs.n	8001796 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001774:	4b25      	ldr	r3, [pc, #148]	@ (800180c <HAL_RCC_ClockConfig+0x1ec>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 0207 	bic.w	r2, r3, #7
 800177c:	4923      	ldr	r1, [pc, #140]	@ (800180c <HAL_RCC_ClockConfig+0x1ec>)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001784:	4b21      	ldr	r3, [pc, #132]	@ (800180c <HAL_RCC_ClockConfig+0x1ec>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d001      	beq.n	8001796 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e036      	b.n	8001804 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d008      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001810 <HAL_RCC_ClockConfig+0x1f0>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	4918      	ldr	r1, [pc, #96]	@ (8001810 <HAL_RCC_ClockConfig+0x1f0>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d009      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017c0:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <HAL_RCC_ClockConfig+0x1f0>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4910      	ldr	r1, [pc, #64]	@ (8001810 <HAL_RCC_ClockConfig+0x1f0>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017d4:	f000 f824 	bl	8001820 <HAL_RCC_GetSysClockFreq>
 80017d8:	4602      	mov	r2, r0
 80017da:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <HAL_RCC_ClockConfig+0x1f0>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	f003 030f 	and.w	r3, r3, #15
 80017e4:	490b      	ldr	r1, [pc, #44]	@ (8001814 <HAL_RCC_ClockConfig+0x1f4>)
 80017e6:	5ccb      	ldrb	r3, [r1, r3]
 80017e8:	f003 031f 	and.w	r3, r3, #31
 80017ec:	fa22 f303 	lsr.w	r3, r2, r3
 80017f0:	4a09      	ldr	r2, [pc, #36]	@ (8001818 <HAL_RCC_ClockConfig+0x1f8>)
 80017f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017f4:	4b09      	ldr	r3, [pc, #36]	@ (800181c <HAL_RCC_ClockConfig+0x1fc>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe ffa9 	bl	8000750 <HAL_InitTick>
 80017fe:	4603      	mov	r3, r0
 8001800:	72fb      	strb	r3, [r7, #11]

  return status;
 8001802:	7afb      	ldrb	r3, [r7, #11]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40022000 	.word	0x40022000
 8001810:	40021000 	.word	0x40021000
 8001814:	08002884 	.word	0x08002884
 8001818:	20000000 	.word	0x20000000
 800181c:	20000004 	.word	0x20000004

08001820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	@ 0x24
 8001824:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182e:	4b3e      	ldr	r3, [pc, #248]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x108>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001838:	4b3b      	ldr	r3, [pc, #236]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x108>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x34>
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	2b0c      	cmp	r3, #12
 800184c:	d121      	bne.n	8001892 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d11e      	bne.n	8001892 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001854:	4b34      	ldr	r3, [pc, #208]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x108>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d107      	bne.n	8001870 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001860:	4b31      	ldr	r3, [pc, #196]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x108>)
 8001862:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001866:	0a1b      	lsrs	r3, r3, #8
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	e005      	b.n	800187c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001870:	4b2d      	ldr	r3, [pc, #180]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x108>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800187c:	4a2b      	ldr	r2, [pc, #172]	@ (800192c <HAL_RCC_GetSysClockFreq+0x10c>)
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001884:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10d      	bne.n	80018a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001890:	e00a      	b.n	80018a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b04      	cmp	r3, #4
 8001896:	d102      	bne.n	800189e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001898:	4b25      	ldr	r3, [pc, #148]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x110>)
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	e004      	b.n	80018a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018a4:	4b23      	ldr	r3, [pc, #140]	@ (8001934 <HAL_RCC_GetSysClockFreq+0x114>)
 80018a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	2b0c      	cmp	r3, #12
 80018ac:	d134      	bne.n	8001918 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x108>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d003      	beq.n	80018c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d003      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0xac>
 80018c4:	e005      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x110>)
 80018c8:	617b      	str	r3, [r7, #20]
      break;
 80018ca:	e005      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018cc:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <HAL_RCC_GetSysClockFreq+0x114>)
 80018ce:	617b      	str	r3, [r7, #20]
      break;
 80018d0:	e002      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	617b      	str	r3, [r7, #20]
      break;
 80018d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018d8:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x108>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	3301      	adds	r3, #1
 80018e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018e6:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x108>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	0a1b      	lsrs	r3, r3, #8
 80018ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	fb03 f202 	mul.w	r2, r3, r2
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x108>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	0e5b      	lsrs	r3, r3, #25
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	3301      	adds	r3, #1
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001918:	69bb      	ldr	r3, [r7, #24]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3724      	adds	r7, #36	@ 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	08002894 	.word	0x08002894
 8001930:	00f42400 	.word	0x00f42400
 8001934:	017d7840 	.word	0x017d7840

08001938 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001944:	4b2a      	ldr	r3, [pc, #168]	@ (80019f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001950:	f7ff fa26 	bl	8000da0 <HAL_PWREx_GetVoltageRange>
 8001954:	6178      	str	r0, [r7, #20]
 8001956:	e014      	b.n	8001982 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001958:	4b25      	ldr	r3, [pc, #148]	@ (80019f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195c:	4a24      	ldr	r2, [pc, #144]	@ (80019f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800195e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001962:	6593      	str	r3, [r2, #88]	@ 0x58
 8001964:	4b22      	ldr	r3, [pc, #136]	@ (80019f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001970:	f7ff fa16 	bl	8000da0 <HAL_PWREx_GetVoltageRange>
 8001974:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001976:	4b1e      	ldr	r3, [pc, #120]	@ (80019f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197a:	4a1d      	ldr	r2, [pc, #116]	@ (80019f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800197c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001980:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001988:	d10b      	bne.n	80019a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b80      	cmp	r3, #128	@ 0x80
 800198e:	d919      	bls.n	80019c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2ba0      	cmp	r3, #160	@ 0xa0
 8001994:	d902      	bls.n	800199c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001996:	2302      	movs	r3, #2
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	e013      	b.n	80019c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800199c:	2301      	movs	r3, #1
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	e010      	b.n	80019c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b80      	cmp	r3, #128	@ 0x80
 80019a6:	d902      	bls.n	80019ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019a8:	2303      	movs	r3, #3
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	e00a      	b.n	80019c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b80      	cmp	r3, #128	@ 0x80
 80019b2:	d102      	bne.n	80019ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019b4:	2302      	movs	r3, #2
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	e004      	b.n	80019c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b70      	cmp	r3, #112	@ 0x70
 80019be:	d101      	bne.n	80019c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019c0:	2301      	movs	r3, #1
 80019c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019c4:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f023 0207 	bic.w	r2, r3, #7
 80019cc:	4909      	ldr	r1, [pc, #36]	@ (80019f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019d4:	4b07      	ldr	r3, [pc, #28]	@ (80019f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d001      	beq.n	80019e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40022000 	.word	0x40022000

080019f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e049      	b.n	8001a9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7fe fdba 	bl	8000598 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2202      	movs	r2, #2
 8001a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3304      	adds	r3, #4
 8001a34:	4619      	mov	r1, r3
 8001a36:	4610      	mov	r0, r2
 8001a38:	f000 fa50 	bl	8001edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d109      	bne.n	8001acc <HAL_TIM_PWM_Start+0x24>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	bf14      	ite	ne
 8001ac4:	2301      	movne	r3, #1
 8001ac6:	2300      	moveq	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	e03c      	b.n	8001b46 <HAL_TIM_PWM_Start+0x9e>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d109      	bne.n	8001ae6 <HAL_TIM_PWM_Start+0x3e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	bf14      	ite	ne
 8001ade:	2301      	movne	r3, #1
 8001ae0:	2300      	moveq	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	e02f      	b.n	8001b46 <HAL_TIM_PWM_Start+0x9e>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d109      	bne.n	8001b00 <HAL_TIM_PWM_Start+0x58>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	bf14      	ite	ne
 8001af8:	2301      	movne	r3, #1
 8001afa:	2300      	moveq	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	e022      	b.n	8001b46 <HAL_TIM_PWM_Start+0x9e>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d109      	bne.n	8001b1a <HAL_TIM_PWM_Start+0x72>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	bf14      	ite	ne
 8001b12:	2301      	movne	r3, #1
 8001b14:	2300      	moveq	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	e015      	b.n	8001b46 <HAL_TIM_PWM_Start+0x9e>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b10      	cmp	r3, #16
 8001b1e:	d109      	bne.n	8001b34 <HAL_TIM_PWM_Start+0x8c>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	bf14      	ite	ne
 8001b2c:	2301      	movne	r3, #1
 8001b2e:	2300      	moveq	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	e008      	b.n	8001b46 <HAL_TIM_PWM_Start+0x9e>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	bf14      	ite	ne
 8001b40:	2301      	movne	r3, #1
 8001b42:	2300      	moveq	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e09c      	b.n	8001c88 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d104      	bne.n	8001b5e <HAL_TIM_PWM_Start+0xb6>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b5c:	e023      	b.n	8001ba6 <HAL_TIM_PWM_Start+0xfe>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d104      	bne.n	8001b6e <HAL_TIM_PWM_Start+0xc6>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b6c:	e01b      	b.n	8001ba6 <HAL_TIM_PWM_Start+0xfe>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d104      	bne.n	8001b7e <HAL_TIM_PWM_Start+0xd6>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b7c:	e013      	b.n	8001ba6 <HAL_TIM_PWM_Start+0xfe>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2b0c      	cmp	r3, #12
 8001b82:	d104      	bne.n	8001b8e <HAL_TIM_PWM_Start+0xe6>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2202      	movs	r2, #2
 8001b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001b8c:	e00b      	b.n	8001ba6 <HAL_TIM_PWM_Start+0xfe>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b10      	cmp	r3, #16
 8001b92:	d104      	bne.n	8001b9e <HAL_TIM_PWM_Start+0xf6>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b9c:	e003      	b.n	8001ba6 <HAL_TIM_PWM_Start+0xfe>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2201      	movs	r2, #1
 8001bac:	6839      	ldr	r1, [r7, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 fd04 	bl	80025bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a35      	ldr	r2, [pc, #212]	@ (8001c90 <HAL_TIM_PWM_Start+0x1e8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_TIM_PWM_Start+0x13e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a34      	ldr	r2, [pc, #208]	@ (8001c94 <HAL_TIM_PWM_Start+0x1ec>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d00e      	beq.n	8001be6 <HAL_TIM_PWM_Start+0x13e>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a32      	ldr	r2, [pc, #200]	@ (8001c98 <HAL_TIM_PWM_Start+0x1f0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d009      	beq.n	8001be6 <HAL_TIM_PWM_Start+0x13e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a31      	ldr	r2, [pc, #196]	@ (8001c9c <HAL_TIM_PWM_Start+0x1f4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d004      	beq.n	8001be6 <HAL_TIM_PWM_Start+0x13e>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a2f      	ldr	r2, [pc, #188]	@ (8001ca0 <HAL_TIM_PWM_Start+0x1f8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <HAL_TIM_PWM_Start+0x142>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_TIM_PWM_Start+0x144>
 8001bea:	2300      	movs	r3, #0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001bfe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a22      	ldr	r2, [pc, #136]	@ (8001c90 <HAL_TIM_PWM_Start+0x1e8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d01d      	beq.n	8001c46 <HAL_TIM_PWM_Start+0x19e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c12:	d018      	beq.n	8001c46 <HAL_TIM_PWM_Start+0x19e>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a22      	ldr	r2, [pc, #136]	@ (8001ca4 <HAL_TIM_PWM_Start+0x1fc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d013      	beq.n	8001c46 <HAL_TIM_PWM_Start+0x19e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a21      	ldr	r2, [pc, #132]	@ (8001ca8 <HAL_TIM_PWM_Start+0x200>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d00e      	beq.n	8001c46 <HAL_TIM_PWM_Start+0x19e>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cac <HAL_TIM_PWM_Start+0x204>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d009      	beq.n	8001c46 <HAL_TIM_PWM_Start+0x19e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a17      	ldr	r2, [pc, #92]	@ (8001c94 <HAL_TIM_PWM_Start+0x1ec>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d004      	beq.n	8001c46 <HAL_TIM_PWM_Start+0x19e>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a15      	ldr	r2, [pc, #84]	@ (8001c98 <HAL_TIM_PWM_Start+0x1f0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d115      	bne.n	8001c72 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <HAL_TIM_PWM_Start+0x208>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2b06      	cmp	r3, #6
 8001c56:	d015      	beq.n	8001c84 <HAL_TIM_PWM_Start+0x1dc>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c5e:	d011      	beq.n	8001c84 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0201 	orr.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c70:	e008      	b.n	8001c84 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 0201 	orr.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	e000      	b.n	8001c86 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40012c00 	.word	0x40012c00
 8001c94:	40013400 	.word	0x40013400
 8001c98:	40014000 	.word	0x40014000
 8001c9c:	40014400 	.word	0x40014400
 8001ca0:	40014800 	.word	0x40014800
 8001ca4:	40000400 	.word	0x40000400
 8001ca8:	40000800 	.word	0x40000800
 8001cac:	40000c00 	.word	0x40000c00
 8001cb0:	00010007 	.word	0x00010007

08001cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e0ff      	b.n	8001ed2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b14      	cmp	r3, #20
 8001cde:	f200 80f0 	bhi.w	8001ec2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ce8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce8:	08001d3d 	.word	0x08001d3d
 8001cec:	08001ec3 	.word	0x08001ec3
 8001cf0:	08001ec3 	.word	0x08001ec3
 8001cf4:	08001ec3 	.word	0x08001ec3
 8001cf8:	08001d7d 	.word	0x08001d7d
 8001cfc:	08001ec3 	.word	0x08001ec3
 8001d00:	08001ec3 	.word	0x08001ec3
 8001d04:	08001ec3 	.word	0x08001ec3
 8001d08:	08001dbf 	.word	0x08001dbf
 8001d0c:	08001ec3 	.word	0x08001ec3
 8001d10:	08001ec3 	.word	0x08001ec3
 8001d14:	08001ec3 	.word	0x08001ec3
 8001d18:	08001dff 	.word	0x08001dff
 8001d1c:	08001ec3 	.word	0x08001ec3
 8001d20:	08001ec3 	.word	0x08001ec3
 8001d24:	08001ec3 	.word	0x08001ec3
 8001d28:	08001e41 	.word	0x08001e41
 8001d2c:	08001ec3 	.word	0x08001ec3
 8001d30:	08001ec3 	.word	0x08001ec3
 8001d34:	08001ec3 	.word	0x08001ec3
 8001d38:	08001e81 	.word	0x08001e81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f964 	bl	8002010 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699a      	ldr	r2, [r3, #24]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0208 	orr.w	r2, r2, #8
 8001d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699a      	ldr	r2, [r3, #24]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0204 	bic.w	r2, r2, #4
 8001d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6999      	ldr	r1, [r3, #24]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	691a      	ldr	r2, [r3, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	619a      	str	r2, [r3, #24]
      break;
 8001d7a:	e0a5      	b.n	8001ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 f9d4 	bl	8002130 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699a      	ldr	r2, [r3, #24]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699a      	ldr	r2, [r3, #24]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6999      	ldr	r1, [r3, #24]
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	021a      	lsls	r2, r3, #8
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	619a      	str	r2, [r3, #24]
      break;
 8001dbc:	e084      	b.n	8001ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fa3d 	bl	8002244 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	69da      	ldr	r2, [r3, #28]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 0208 	orr.w	r2, r2, #8
 8001dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	69da      	ldr	r2, [r3, #28]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0204 	bic.w	r2, r2, #4
 8001de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	69d9      	ldr	r1, [r3, #28]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	61da      	str	r2, [r3, #28]
      break;
 8001dfc:	e064      	b.n	8001ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 faa5 	bl	8002354 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	69da      	ldr	r2, [r3, #28]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	69da      	ldr	r2, [r3, #28]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	69d9      	ldr	r1, [r3, #28]
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	021a      	lsls	r2, r3, #8
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	61da      	str	r2, [r3, #28]
      break;
 8001e3e:	e043      	b.n	8001ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 faee 	bl	8002428 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0208 	orr.w	r2, r2, #8
 8001e5a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0204 	bic.w	r2, r2, #4
 8001e6a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001e7e:	e023      	b.n	8001ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fb32 	bl	80024f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001eaa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	021a      	lsls	r2, r3, #8
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001ec0:	e002      	b.n	8001ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8001ec6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop

08001edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a40      	ldr	r2, [pc, #256]	@ (8001ff0 <TIM_Base_SetConfig+0x114>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d013      	beq.n	8001f1c <TIM_Base_SetConfig+0x40>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001efa:	d00f      	beq.n	8001f1c <TIM_Base_SetConfig+0x40>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a3d      	ldr	r2, [pc, #244]	@ (8001ff4 <TIM_Base_SetConfig+0x118>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00b      	beq.n	8001f1c <TIM_Base_SetConfig+0x40>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a3c      	ldr	r2, [pc, #240]	@ (8001ff8 <TIM_Base_SetConfig+0x11c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d007      	beq.n	8001f1c <TIM_Base_SetConfig+0x40>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a3b      	ldr	r2, [pc, #236]	@ (8001ffc <TIM_Base_SetConfig+0x120>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d003      	beq.n	8001f1c <TIM_Base_SetConfig+0x40>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a3a      	ldr	r2, [pc, #232]	@ (8002000 <TIM_Base_SetConfig+0x124>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d108      	bne.n	8001f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a2f      	ldr	r2, [pc, #188]	@ (8001ff0 <TIM_Base_SetConfig+0x114>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01f      	beq.n	8001f76 <TIM_Base_SetConfig+0x9a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f3c:	d01b      	beq.n	8001f76 <TIM_Base_SetConfig+0x9a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a2c      	ldr	r2, [pc, #176]	@ (8001ff4 <TIM_Base_SetConfig+0x118>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d017      	beq.n	8001f76 <TIM_Base_SetConfig+0x9a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a2b      	ldr	r2, [pc, #172]	@ (8001ff8 <TIM_Base_SetConfig+0x11c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <TIM_Base_SetConfig+0x9a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a2a      	ldr	r2, [pc, #168]	@ (8001ffc <TIM_Base_SetConfig+0x120>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00f      	beq.n	8001f76 <TIM_Base_SetConfig+0x9a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a29      	ldr	r2, [pc, #164]	@ (8002000 <TIM_Base_SetConfig+0x124>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00b      	beq.n	8001f76 <TIM_Base_SetConfig+0x9a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a28      	ldr	r2, [pc, #160]	@ (8002004 <TIM_Base_SetConfig+0x128>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d007      	beq.n	8001f76 <TIM_Base_SetConfig+0x9a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a27      	ldr	r2, [pc, #156]	@ (8002008 <TIM_Base_SetConfig+0x12c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d003      	beq.n	8001f76 <TIM_Base_SetConfig+0x9a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a26      	ldr	r2, [pc, #152]	@ (800200c <TIM_Base_SetConfig+0x130>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d108      	bne.n	8001f88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a10      	ldr	r2, [pc, #64]	@ (8001ff0 <TIM_Base_SetConfig+0x114>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d00f      	beq.n	8001fd4 <TIM_Base_SetConfig+0xf8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a12      	ldr	r2, [pc, #72]	@ (8002000 <TIM_Base_SetConfig+0x124>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d00b      	beq.n	8001fd4 <TIM_Base_SetConfig+0xf8>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a11      	ldr	r2, [pc, #68]	@ (8002004 <TIM_Base_SetConfig+0x128>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d007      	beq.n	8001fd4 <TIM_Base_SetConfig+0xf8>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a10      	ldr	r2, [pc, #64]	@ (8002008 <TIM_Base_SetConfig+0x12c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d003      	beq.n	8001fd4 <TIM_Base_SetConfig+0xf8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a0f      	ldr	r2, [pc, #60]	@ (800200c <TIM_Base_SetConfig+0x130>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d103      	bne.n	8001fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	615a      	str	r2, [r3, #20]
}
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40012c00 	.word	0x40012c00
 8001ff4:	40000400 	.word	0x40000400
 8001ff8:	40000800 	.word	0x40000800
 8001ffc:	40000c00 	.word	0x40000c00
 8002000:	40013400 	.word	0x40013400
 8002004:	40014000 	.word	0x40014000
 8002008:	40014400 	.word	0x40014400
 800200c:	40014800 	.word	0x40014800

08002010 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002010:	b480      	push	{r7}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	f023 0201 	bic.w	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800203e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0303 	bic.w	r3, r3, #3
 800204a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f023 0302 	bic.w	r3, r3, #2
 800205c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4313      	orrs	r3, r2
 8002066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a2c      	ldr	r2, [pc, #176]	@ (800211c <TIM_OC1_SetConfig+0x10c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d00f      	beq.n	8002090 <TIM_OC1_SetConfig+0x80>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a2b      	ldr	r2, [pc, #172]	@ (8002120 <TIM_OC1_SetConfig+0x110>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00b      	beq.n	8002090 <TIM_OC1_SetConfig+0x80>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a2a      	ldr	r2, [pc, #168]	@ (8002124 <TIM_OC1_SetConfig+0x114>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d007      	beq.n	8002090 <TIM_OC1_SetConfig+0x80>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a29      	ldr	r2, [pc, #164]	@ (8002128 <TIM_OC1_SetConfig+0x118>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d003      	beq.n	8002090 <TIM_OC1_SetConfig+0x80>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a28      	ldr	r2, [pc, #160]	@ (800212c <TIM_OC1_SetConfig+0x11c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d10c      	bne.n	80020aa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f023 0308 	bic.w	r3, r3, #8
 8002096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4313      	orrs	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f023 0304 	bic.w	r3, r3, #4
 80020a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <TIM_OC1_SetConfig+0x10c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00f      	beq.n	80020d2 <TIM_OC1_SetConfig+0xc2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002120 <TIM_OC1_SetConfig+0x110>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00b      	beq.n	80020d2 <TIM_OC1_SetConfig+0xc2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a19      	ldr	r2, [pc, #100]	@ (8002124 <TIM_OC1_SetConfig+0x114>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d007      	beq.n	80020d2 <TIM_OC1_SetConfig+0xc2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a18      	ldr	r2, [pc, #96]	@ (8002128 <TIM_OC1_SetConfig+0x118>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d003      	beq.n	80020d2 <TIM_OC1_SetConfig+0xc2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a17      	ldr	r2, [pc, #92]	@ (800212c <TIM_OC1_SetConfig+0x11c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d111      	bne.n	80020f6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80020e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	621a      	str	r2, [r3, #32]
}
 8002110:	bf00      	nop
 8002112:	371c      	adds	r7, #28
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	40012c00 	.word	0x40012c00
 8002120:	40013400 	.word	0x40013400
 8002124:	40014000 	.word	0x40014000
 8002128:	40014400 	.word	0x40014400
 800212c:	40014800 	.word	0x40014800

08002130 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f023 0210 	bic.w	r2, r3, #16
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800215e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800216a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f023 0320 	bic.w	r3, r3, #32
 800217e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a28      	ldr	r2, [pc, #160]	@ (8002230 <TIM_OC2_SetConfig+0x100>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d003      	beq.n	800219c <TIM_OC2_SetConfig+0x6c>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a27      	ldr	r2, [pc, #156]	@ (8002234 <TIM_OC2_SetConfig+0x104>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d10d      	bne.n	80021b8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002230 <TIM_OC2_SetConfig+0x100>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d00f      	beq.n	80021e0 <TIM_OC2_SetConfig+0xb0>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002234 <TIM_OC2_SetConfig+0x104>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00b      	beq.n	80021e0 <TIM_OC2_SetConfig+0xb0>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002238 <TIM_OC2_SetConfig+0x108>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d007      	beq.n	80021e0 <TIM_OC2_SetConfig+0xb0>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a1a      	ldr	r2, [pc, #104]	@ (800223c <TIM_OC2_SetConfig+0x10c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d003      	beq.n	80021e0 <TIM_OC2_SetConfig+0xb0>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a19      	ldr	r2, [pc, #100]	@ (8002240 <TIM_OC2_SetConfig+0x110>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d113      	bne.n	8002208 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80021e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80021ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	621a      	str	r2, [r3, #32]
}
 8002222:	bf00      	nop
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40012c00 	.word	0x40012c00
 8002234:	40013400 	.word	0x40013400
 8002238:	40014000 	.word	0x40014000
 800223c:	40014400 	.word	0x40014400
 8002240:	40014800 	.word	0x40014800

08002244 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f023 0303 	bic.w	r3, r3, #3
 800227e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a27      	ldr	r2, [pc, #156]	@ (8002340 <TIM_OC3_SetConfig+0xfc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d003      	beq.n	80022ae <TIM_OC3_SetConfig+0x6a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a26      	ldr	r2, [pc, #152]	@ (8002344 <TIM_OC3_SetConfig+0x100>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d10d      	bne.n	80022ca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80022b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	4313      	orrs	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80022c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002340 <TIM_OC3_SetConfig+0xfc>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00f      	beq.n	80022f2 <TIM_OC3_SetConfig+0xae>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002344 <TIM_OC3_SetConfig+0x100>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00b      	beq.n	80022f2 <TIM_OC3_SetConfig+0xae>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002348 <TIM_OC3_SetConfig+0x104>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d007      	beq.n	80022f2 <TIM_OC3_SetConfig+0xae>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a19      	ldr	r2, [pc, #100]	@ (800234c <TIM_OC3_SetConfig+0x108>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d003      	beq.n	80022f2 <TIM_OC3_SetConfig+0xae>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a18      	ldr	r2, [pc, #96]	@ (8002350 <TIM_OC3_SetConfig+0x10c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d113      	bne.n	800231a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	621a      	str	r2, [r3, #32]
}
 8002334:	bf00      	nop
 8002336:	371c      	adds	r7, #28
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40012c00 	.word	0x40012c00
 8002344:	40013400 	.word	0x40013400
 8002348:	40014000 	.word	0x40014000
 800234c:	40014400 	.word	0x40014400
 8002350:	40014800 	.word	0x40014800

08002354 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002382:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800238e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4313      	orrs	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80023a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	031b      	lsls	r3, r3, #12
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a18      	ldr	r2, [pc, #96]	@ (8002414 <TIM_OC4_SetConfig+0xc0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d00f      	beq.n	80023d8 <TIM_OC4_SetConfig+0x84>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a17      	ldr	r2, [pc, #92]	@ (8002418 <TIM_OC4_SetConfig+0xc4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d00b      	beq.n	80023d8 <TIM_OC4_SetConfig+0x84>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a16      	ldr	r2, [pc, #88]	@ (800241c <TIM_OC4_SetConfig+0xc8>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d007      	beq.n	80023d8 <TIM_OC4_SetConfig+0x84>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a15      	ldr	r2, [pc, #84]	@ (8002420 <TIM_OC4_SetConfig+0xcc>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d003      	beq.n	80023d8 <TIM_OC4_SetConfig+0x84>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a14      	ldr	r2, [pc, #80]	@ (8002424 <TIM_OC4_SetConfig+0xd0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d109      	bne.n	80023ec <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	019b      	lsls	r3, r3, #6
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	621a      	str	r2, [r3, #32]
}
 8002406:	bf00      	nop
 8002408:	371c      	adds	r7, #28
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40012c00 	.word	0x40012c00
 8002418:	40013400 	.word	0x40013400
 800241c:	40014000 	.word	0x40014000
 8002420:	40014400 	.word	0x40014400
 8002424:	40014800 	.word	0x40014800

08002428 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800245a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800246c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	041b      	lsls	r3, r3, #16
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a17      	ldr	r2, [pc, #92]	@ (80024dc <TIM_OC5_SetConfig+0xb4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00f      	beq.n	80024a2 <TIM_OC5_SetConfig+0x7a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a16      	ldr	r2, [pc, #88]	@ (80024e0 <TIM_OC5_SetConfig+0xb8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00b      	beq.n	80024a2 <TIM_OC5_SetConfig+0x7a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a15      	ldr	r2, [pc, #84]	@ (80024e4 <TIM_OC5_SetConfig+0xbc>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <TIM_OC5_SetConfig+0x7a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a14      	ldr	r2, [pc, #80]	@ (80024e8 <TIM_OC5_SetConfig+0xc0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d003      	beq.n	80024a2 <TIM_OC5_SetConfig+0x7a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a13      	ldr	r2, [pc, #76]	@ (80024ec <TIM_OC5_SetConfig+0xc4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d109      	bne.n	80024b6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	621a      	str	r2, [r3, #32]
}
 80024d0:	bf00      	nop
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40012c00 	.word	0x40012c00
 80024e0:	40013400 	.word	0x40013400
 80024e4:	40014000 	.word	0x40014000
 80024e8:	40014400 	.word	0x40014400
 80024ec:	40014800 	.word	0x40014800

080024f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800251e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	051b      	lsls	r3, r3, #20
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a18      	ldr	r2, [pc, #96]	@ (80025a8 <TIM_OC6_SetConfig+0xb8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00f      	beq.n	800256c <TIM_OC6_SetConfig+0x7c>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a17      	ldr	r2, [pc, #92]	@ (80025ac <TIM_OC6_SetConfig+0xbc>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d00b      	beq.n	800256c <TIM_OC6_SetConfig+0x7c>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a16      	ldr	r2, [pc, #88]	@ (80025b0 <TIM_OC6_SetConfig+0xc0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d007      	beq.n	800256c <TIM_OC6_SetConfig+0x7c>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a15      	ldr	r2, [pc, #84]	@ (80025b4 <TIM_OC6_SetConfig+0xc4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d003      	beq.n	800256c <TIM_OC6_SetConfig+0x7c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a14      	ldr	r2, [pc, #80]	@ (80025b8 <TIM_OC6_SetConfig+0xc8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d109      	bne.n	8002580 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002572:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	029b      	lsls	r3, r3, #10
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	621a      	str	r2, [r3, #32]
}
 800259a:	bf00      	nop
 800259c:	371c      	adds	r7, #28
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40012c00 	.word	0x40012c00
 80025ac:	40013400 	.word	0x40013400
 80025b0:	40014000 	.word	0x40014000
 80025b4:	40014400 	.word	0x40014400
 80025b8:	40014800 	.word	0x40014800

080025bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	2201      	movs	r2, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a1a      	ldr	r2, [r3, #32]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	43db      	mvns	r3, r3
 80025de:	401a      	ands	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a1a      	ldr	r2, [r3, #32]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	431a      	orrs	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	621a      	str	r2, [r3, #32]
}
 80025fa:	bf00      	nop
 80025fc:	371c      	adds	r7, #28
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800261c:	2302      	movs	r3, #2
 800261e:	e068      	b.n	80026f2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a2e      	ldr	r2, [pc, #184]	@ (8002700 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d004      	beq.n	8002654 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a2d      	ldr	r2, [pc, #180]	@ (8002704 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d108      	bne.n	8002666 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800265a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800266c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4313      	orrs	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1e      	ldr	r2, [pc, #120]	@ (8002700 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01d      	beq.n	80026c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002692:	d018      	beq.n	80026c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1b      	ldr	r2, [pc, #108]	@ (8002708 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1a      	ldr	r2, [pc, #104]	@ (800270c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00e      	beq.n	80026c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a18      	ldr	r2, [pc, #96]	@ (8002710 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d009      	beq.n	80026c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a13      	ldr	r2, [pc, #76]	@ (8002704 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d004      	beq.n	80026c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a14      	ldr	r2, [pc, #80]	@ (8002714 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d10c      	bne.n	80026e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40012c00 	.word	0x40012c00
 8002704:	40013400 	.word	0x40013400
 8002708:	40000400 	.word	0x40000400
 800270c:	40000800 	.word	0x40000800
 8002710:	40000c00 	.word	0x40000c00
 8002714:	40014000 	.word	0x40014000

08002718 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002730:	2302      	movs	r3, #2
 8002732:	e065      	b.n	8002800 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4313      	orrs	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4313      	orrs	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	4313      	orrs	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	041b      	lsls	r3, r3, #16
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a16      	ldr	r2, [pc, #88]	@ (800280c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d004      	beq.n	80027c2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a14      	ldr	r2, [pc, #80]	@ (8002810 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d115      	bne.n	80027ee <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	051b      	lsls	r3, r3, #20
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	4313      	orrs	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	40012c00 	.word	0x40012c00
 8002810:	40013400 	.word	0x40013400

08002814 <memset>:
 8002814:	4402      	add	r2, r0
 8002816:	4603      	mov	r3, r0
 8002818:	4293      	cmp	r3, r2
 800281a:	d100      	bne.n	800281e <memset+0xa>
 800281c:	4770      	bx	lr
 800281e:	f803 1b01 	strb.w	r1, [r3], #1
 8002822:	e7f9      	b.n	8002818 <memset+0x4>

08002824 <__libc_init_array>:
 8002824:	b570      	push	{r4, r5, r6, lr}
 8002826:	4d0d      	ldr	r5, [pc, #52]	@ (800285c <__libc_init_array+0x38>)
 8002828:	4c0d      	ldr	r4, [pc, #52]	@ (8002860 <__libc_init_array+0x3c>)
 800282a:	1b64      	subs	r4, r4, r5
 800282c:	10a4      	asrs	r4, r4, #2
 800282e:	2600      	movs	r6, #0
 8002830:	42a6      	cmp	r6, r4
 8002832:	d109      	bne.n	8002848 <__libc_init_array+0x24>
 8002834:	4d0b      	ldr	r5, [pc, #44]	@ (8002864 <__libc_init_array+0x40>)
 8002836:	4c0c      	ldr	r4, [pc, #48]	@ (8002868 <__libc_init_array+0x44>)
 8002838:	f000 f818 	bl	800286c <_init>
 800283c:	1b64      	subs	r4, r4, r5
 800283e:	10a4      	asrs	r4, r4, #2
 8002840:	2600      	movs	r6, #0
 8002842:	42a6      	cmp	r6, r4
 8002844:	d105      	bne.n	8002852 <__libc_init_array+0x2e>
 8002846:	bd70      	pop	{r4, r5, r6, pc}
 8002848:	f855 3b04 	ldr.w	r3, [r5], #4
 800284c:	4798      	blx	r3
 800284e:	3601      	adds	r6, #1
 8002850:	e7ee      	b.n	8002830 <__libc_init_array+0xc>
 8002852:	f855 3b04 	ldr.w	r3, [r5], #4
 8002856:	4798      	blx	r3
 8002858:	3601      	adds	r6, #1
 800285a:	e7f2      	b.n	8002842 <__libc_init_array+0x1e>
 800285c:	080028c4 	.word	0x080028c4
 8002860:	080028c4 	.word	0x080028c4
 8002864:	080028c4 	.word	0x080028c4
 8002868:	080028c8 	.word	0x080028c8

0800286c <_init>:
 800286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286e:	bf00      	nop
 8002870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002872:	bc08      	pop	{r3}
 8002874:	469e      	mov	lr, r3
 8002876:	4770      	bx	lr

08002878 <_fini>:
 8002878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287a:	bf00      	nop
 800287c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287e:	bc08      	pop	{r3}
 8002880:	469e      	mov	lr, r3
 8002882:	4770      	bx	lr
