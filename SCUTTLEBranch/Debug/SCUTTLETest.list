
SCUTTLETest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006860  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080069e8  080069e8  000079e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a30  08006a30  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a30  08006a30  00007a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a38  08006a38  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a38  08006a38  00007a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a3c  08006a3c  00007a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006a40  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  2000000c  08006a4c  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  08006a4c  000084b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018635  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a42  00000000  00000000  00020671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  000230b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001282  00000000  00000000  00024820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000029a3  00000000  00000000  00025aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc16  00000000  00000000  00028445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5d62  00000000  00000000  0004405b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139dbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006640  00000000  00000000  00139e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00140440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080069d0 	.word	0x080069d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080069d0 	.word	0x080069d0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f001 faee 	bl	8001a9e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f851 	bl	8000568 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004c6:	f000 f89e 	bl	8000606 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ca:	f000 fdef 	bl	80010ac <MX_GPIO_Init>
  MX_TIM1_Init();
 80004ce:	f000 fa85 	bl	80009dc <MX_TIM1_Init>
  MX_ADC1_Init();
 80004d2:	f000 f8c3 	bl	800065c <MX_ADC1_Init>
  MX_ADC2_Init();
 80004d6:	f000 f939 	bl	800074c <MX_ADC2_Init>
  MX_ADC3_Init();
 80004da:	f000 f99d 	bl	8000818 <MX_ADC3_Init>
  MX_TIM2_Init();
 80004de:	f000 fb3f 	bl	8000b60 <MX_TIM2_Init>
  MX_SPI3_Init();
 80004e2:	f000 fa3d 	bl	8000960 <MX_SPI3_Init>
  MX_TIM3_Init();
 80004e6:	f000 fb8f 	bl	8000c08 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80004ea:	f000 fdaf 	bl	800104c <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80004ee:	f000 fbe1 	bl	8000cb4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80004f2:	f000 fc35 	bl	8000d60 <MX_TIM5_Init>
  MX_I2C2_Init();
 80004f6:	f000 f9f3 	bl	80008e0 <MX_I2C2_Init>
  MX_TIM8_Init();
 80004fa:	f000 fc91 	bl	8000e20 <MX_TIM8_Init>
  MX_TIM15_Init();
 80004fe:	f000 fd43 	bl	8000f88 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  // Start Timer 1 channels 3 and 4
  int32_t duty = -50;
 8000502:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 8000506:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	2104      	movs	r1, #4
 800050c:	4814      	ldr	r0, [pc, #80]	@ (8000560 <main+0xa8>)
 800050e:	f002 fd93 	bl	8003038 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000512:	2108      	movs	r1, #8
 8000514:	4813      	ldr	r0, [pc, #76]	@ (8000564 <main+0xac>)
 8000516:	f004 fb25 	bl	8004b64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800051a:	210c      	movs	r1, #12
 800051c:	4811      	ldr	r0, [pc, #68]	@ (8000564 <main+0xac>)
 800051e:	f004 fb21 	bl	8004b64 <HAL_TIM_PWM_Start>

  // Setup motor2 with TIM1 Channel 3 and 4
  volatile uint32_t *pCCR3 = &(htim1.Instance->CCR3);
 8000522:	4b10      	ldr	r3, [pc, #64]	@ (8000564 <main+0xac>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	333c      	adds	r3, #60	@ 0x3c
 8000528:	61bb      	str	r3, [r7, #24]
  volatile uint32_t *pCCR4 = &(htim1.Instance->CCR4);
 800052a:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <main+0xac>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	3340      	adds	r3, #64	@ 0x40
 8000530:	617b      	str	r3, [r7, #20]
  uint32_t Tim2Period = (htim1.Instance->ARR);
 8000532:	4b0c      	ldr	r3, [pc, #48]	@ (8000564 <main+0xac>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000538:	613b      	str	r3, [r7, #16]
  motor_t motor2 = {pCCR3, pCCR4, Tim2Period, duty};
 800053a:	69bb      	ldr	r3, [r7, #24]
 800053c:	603b      	str	r3, [r7, #0]
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	69fb      	ldr	r3, [r7, #28]
 8000548:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  HAL_Delay(1000);
 800054a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800054e:	f001 fb1b 	bl	8001b88 <HAL_Delay>
	  set_duty(&motor2, duty);
 8000552:	463b      	mov	r3, r7
 8000554:	69f9      	ldr	r1, [r7, #28]
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fe34 	bl	80011c4 <set_duty>
	  HAL_Delay(1000);
 800055c:	bf00      	nop
 800055e:	e7f4      	b.n	800054a <main+0x92>
 8000560:	48000400 	.word	0x48000400
 8000564:	2000020c 	.word	0x2000020c

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b096      	sub	sp, #88	@ 0x58
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2244      	movs	r2, #68	@ 0x44
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f006 f9fd 	bl	8006976 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	463b      	mov	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800058a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800058e:	f002 feab 	bl	80032e8 <HAL_PWREx_ControlVoltageScaling>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000598:	f000 fe0c 	bl	80011b4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	2303      	movs	r3, #3
 80005ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005ae:	2305      	movs	r3, #5
 80005b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 80005b2:	2320      	movs	r3, #32
 80005b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005b6:	2307      	movs	r3, #7
 80005b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 fee4 	bl	8003394 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005d2:	f000 fdef 	bl	80011b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2303      	movs	r3, #3
 80005dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	2104      	movs	r1, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 faac 	bl	8003b4c <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005fa:	f000 fddb 	bl	80011b4 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3758      	adds	r7, #88	@ 0x58
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b0a2      	sub	sp, #136	@ 0x88
 800060a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2284      	movs	r2, #132	@ 0x84
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f006 f9af 	bl	8006976 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000618:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800061c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800061e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000622:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000624:	2303      	movs	r3, #3
 8000626:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000628:	2305      	movs	r3, #5
 800062a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800062c:	2318      	movs	r3, #24
 800062e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000630:	2307      	movs	r3, #7
 8000632:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800063c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000640:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	4618      	mov	r0, r3
 8000646:	f003 fca5 	bl	8003f94 <HAL_RCCEx_PeriphCLKConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000650:	f000 fdb0 	bl	80011b4 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3788      	adds	r7, #136	@ 0x88
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	@ 0x28
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
 800067c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800067e:	4b2f      	ldr	r3, [pc, #188]	@ (800073c <MX_ADC1_Init+0xe0>)
 8000680:	4a2f      	ldr	r2, [pc, #188]	@ (8000740 <MX_ADC1_Init+0xe4>)
 8000682:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000684:	4b2d      	ldr	r3, [pc, #180]	@ (800073c <MX_ADC1_Init+0xe0>)
 8000686:	2200      	movs	r2, #0
 8000688:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800068a:	4b2c      	ldr	r3, [pc, #176]	@ (800073c <MX_ADC1_Init+0xe0>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000690:	4b2a      	ldr	r3, [pc, #168]	@ (800073c <MX_ADC1_Init+0xe0>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000696:	4b29      	ldr	r3, [pc, #164]	@ (800073c <MX_ADC1_Init+0xe0>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069c:	4b27      	ldr	r3, [pc, #156]	@ (800073c <MX_ADC1_Init+0xe0>)
 800069e:	2204      	movs	r2, #4
 80006a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006a2:	4b26      	ldr	r3, [pc, #152]	@ (800073c <MX_ADC1_Init+0xe0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a8:	4b24      	ldr	r3, [pc, #144]	@ (800073c <MX_ADC1_Init+0xe0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006ae:	4b23      	ldr	r3, [pc, #140]	@ (800073c <MX_ADC1_Init+0xe0>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006b4:	4b21      	ldr	r3, [pc, #132]	@ (800073c <MX_ADC1_Init+0xe0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	@ (800073c <MX_ADC1_Init+0xe0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c2:	4b1e      	ldr	r3, [pc, #120]	@ (800073c <MX_ADC1_Init+0xe0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006c8:	4b1c      	ldr	r3, [pc, #112]	@ (800073c <MX_ADC1_Init+0xe0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <MX_ADC1_Init+0xe0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006d6:	4b19      	ldr	r3, [pc, #100]	@ (800073c <MX_ADC1_Init+0xe0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006de:	4817      	ldr	r0, [pc, #92]	@ (800073c <MX_ADC1_Init+0xe0>)
 80006e0:	f001 fc02 	bl	8001ee8 <HAL_ADC_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006ea:	f000 fd63 	bl	80011b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4619      	mov	r1, r3
 80006f8:	4810      	ldr	r0, [pc, #64]	@ (800073c <MX_ADC1_Init+0xe0>)
 80006fa:	f002 f95d 	bl	80029b8 <HAL_ADCEx_MultiModeConfigChannel>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000704:	f000 fd56 	bl	80011b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000708:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_ADC1_Init+0xe8>)
 800070a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070c:	2306      	movs	r3, #6
 800070e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <MX_ADC1_Init+0xec>)
 8000716:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000718:	2304      	movs	r3, #4
 800071a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_ADC1_Init+0xe0>)
 8000726:	f001 fd2f 	bl	8002188 <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000730:	f000 fd40 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	@ 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000028 	.word	0x20000028
 8000740:	50040000 	.word	0x50040000
 8000744:	04300002 	.word	0x04300002
 8000748:	407f0000 	.word	0x407f0000

0800074c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000762:	4b29      	ldr	r3, [pc, #164]	@ (8000808 <MX_ADC2_Init+0xbc>)
 8000764:	4a29      	ldr	r2, [pc, #164]	@ (800080c <MX_ADC2_Init+0xc0>)
 8000766:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000768:	4b27      	ldr	r3, [pc, #156]	@ (8000808 <MX_ADC2_Init+0xbc>)
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800076e:	4b26      	ldr	r3, [pc, #152]	@ (8000808 <MX_ADC2_Init+0xbc>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000774:	4b24      	ldr	r3, [pc, #144]	@ (8000808 <MX_ADC2_Init+0xbc>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800077a:	4b23      	ldr	r3, [pc, #140]	@ (8000808 <MX_ADC2_Init+0xbc>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000780:	4b21      	ldr	r3, [pc, #132]	@ (8000808 <MX_ADC2_Init+0xbc>)
 8000782:	2204      	movs	r2, #4
 8000784:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000786:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <MX_ADC2_Init+0xbc>)
 8000788:	2200      	movs	r2, #0
 800078a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800078c:	4b1e      	ldr	r3, [pc, #120]	@ (8000808 <MX_ADC2_Init+0xbc>)
 800078e:	2200      	movs	r2, #0
 8000790:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <MX_ADC2_Init+0xbc>)
 8000794:	2201      	movs	r2, #1
 8000796:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <MX_ADC2_Init+0xbc>)
 800079a:	2200      	movs	r2, #0
 800079c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a0:	4b19      	ldr	r3, [pc, #100]	@ (8000808 <MX_ADC2_Init+0xbc>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a6:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <MX_ADC2_Init+0xbc>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007ac:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <MX_ADC2_Init+0xbc>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b4:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <MX_ADC2_Init+0xbc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80007ba:	4b13      	ldr	r3, [pc, #76]	@ (8000808 <MX_ADC2_Init+0xbc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007c2:	4811      	ldr	r0, [pc, #68]	@ (8000808 <MX_ADC2_Init+0xbc>)
 80007c4:	f001 fb90 	bl	8001ee8 <HAL_ADC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80007ce:	f000 fcf1 	bl	80011b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_ADC2_Init+0xc4>)
 80007d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d6:	2306      	movs	r3, #6
 80007d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80007de:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <MX_ADC2_Init+0xc8>)
 80007e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007e2:	2304      	movs	r3, #4
 80007e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	4619      	mov	r1, r3
 80007ee:	4806      	ldr	r0, [pc, #24]	@ (8000808 <MX_ADC2_Init+0xbc>)
 80007f0:	f001 fcca 	bl	8002188 <HAL_ADC_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80007fa:	f000 fcdb 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000008c 	.word	0x2000008c
 800080c:	50040100 	.word	0x50040100
 8000810:	08600004 	.word	0x08600004
 8000814:	407f0000 	.word	0x407f0000

08000818 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800081e:	463b      	mov	r3, r7
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
 800082c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800082e:	4b29      	ldr	r3, [pc, #164]	@ (80008d4 <MX_ADC3_Init+0xbc>)
 8000830:	4a29      	ldr	r2, [pc, #164]	@ (80008d8 <MX_ADC3_Init+0xc0>)
 8000832:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000834:	4b27      	ldr	r3, [pc, #156]	@ (80008d4 <MX_ADC3_Init+0xbc>)
 8000836:	2200      	movs	r2, #0
 8000838:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800083a:	4b26      	ldr	r3, [pc, #152]	@ (80008d4 <MX_ADC3_Init+0xbc>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000840:	4b24      	ldr	r3, [pc, #144]	@ (80008d4 <MX_ADC3_Init+0xbc>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000846:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <MX_ADC3_Init+0xbc>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800084c:	4b21      	ldr	r3, [pc, #132]	@ (80008d4 <MX_ADC3_Init+0xbc>)
 800084e:	2204      	movs	r2, #4
 8000850:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000852:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <MX_ADC3_Init+0xbc>)
 8000854:	2200      	movs	r2, #0
 8000856:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000858:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <MX_ADC3_Init+0xbc>)
 800085a:	2200      	movs	r2, #0
 800085c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800085e:	4b1d      	ldr	r3, [pc, #116]	@ (80008d4 <MX_ADC3_Init+0xbc>)
 8000860:	2201      	movs	r2, #1
 8000862:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000864:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <MX_ADC3_Init+0xbc>)
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800086c:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <MX_ADC3_Init+0xbc>)
 800086e:	2200      	movs	r2, #0
 8000870:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000872:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <MX_ADC3_Init+0xbc>)
 8000874:	2200      	movs	r2, #0
 8000876:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000878:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <MX_ADC3_Init+0xbc>)
 800087a:	2200      	movs	r2, #0
 800087c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000880:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <MX_ADC3_Init+0xbc>)
 8000882:	2200      	movs	r2, #0
 8000884:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000886:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <MX_ADC3_Init+0xbc>)
 8000888:	2200      	movs	r2, #0
 800088a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800088e:	4811      	ldr	r0, [pc, #68]	@ (80008d4 <MX_ADC3_Init+0xbc>)
 8000890:	f001 fb2a 	bl	8001ee8 <HAL_ADC_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800089a:	f000 fc8b 	bl	80011b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_ADC3_Init+0xc4>)
 80008a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a2:	2306      	movs	r3, #6
 80008a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008aa:	237f      	movs	r3, #127	@ 0x7f
 80008ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ae:	2304      	movs	r3, #4
 80008b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	@ (80008d4 <MX_ADC3_Init+0xbc>)
 80008bc:	f001 fc64 	bl	8002188 <HAL_ADC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008c6:	f000 fc75 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000f0 	.word	0x200000f0
 80008d8:	50040200 	.word	0x50040200
 80008dc:	0c900008 	.word	0x0c900008

080008e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000954 <MX_I2C2_Init+0x74>)
 80008e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000958 <MX_I2C2_Init+0x78>)
 80008e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80008ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <MX_I2C2_Init+0x74>)
 80008ec:	4a1b      	ldr	r2, [pc, #108]	@ (800095c <MX_I2C2_Init+0x7c>)
 80008ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008f0:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <MX_I2C2_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f6:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <MX_I2C2_Init+0x74>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008fc:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <MX_I2C2_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000902:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <MX_I2C2_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <MX_I2C2_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800090e:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <MX_I2C2_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000914:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <MX_I2C2_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800091a:	480e      	ldr	r0, [pc, #56]	@ (8000954 <MX_I2C2_Init+0x74>)
 800091c:	f002 fba4 	bl	8003068 <HAL_I2C_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000926:	f000 fc45 	bl	80011b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800092a:	2100      	movs	r1, #0
 800092c:	4809      	ldr	r0, [pc, #36]	@ (8000954 <MX_I2C2_Init+0x74>)
 800092e:	f002 fc36 	bl	800319e <HAL_I2CEx_ConfigAnalogFilter>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000938:	f000 fc3c 	bl	80011b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800093c:	2100      	movs	r1, #0
 800093e:	4805      	ldr	r0, [pc, #20]	@ (8000954 <MX_I2C2_Init+0x74>)
 8000940:	f002 fc78 	bl	8003234 <HAL_I2CEx_ConfigDigitalFilter>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800094a:	f000 fc33 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000154 	.word	0x20000154
 8000958:	40005800 	.word	0x40005800
 800095c:	10909cec 	.word	0x10909cec

08000960 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000964:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <MX_SPI3_Init+0x74>)
 8000966:	4a1c      	ldr	r2, [pc, #112]	@ (80009d8 <MX_SPI3_Init+0x78>)
 8000968:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_SPI3_Init+0x74>)
 800096c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000970:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000972:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_SPI3_Init+0x74>)
 8000974:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000978:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800097a:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <MX_SPI3_Init+0x74>)
 800097c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000980:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000982:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_SPI3_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_SPI3_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_SPI3_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_SPI3_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_SPI3_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_SPI3_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <MX_SPI3_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_SPI3_Init+0x74>)
 80009ae:	2207      	movs	r2, #7
 80009b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <MX_SPI3_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_SPI3_Init+0x74>)
 80009ba:	2208      	movs	r2, #8
 80009bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_SPI3_Init+0x74>)
 80009c0:	f003 ff74 	bl	80048ac <HAL_SPI_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80009ca:	f000 fbf3 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200001a8 	.word	0x200001a8
 80009d8:	40003c00 	.word	0x40003c00

080009dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b096      	sub	sp, #88	@ 0x58
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]
 80009fe:	615a      	str	r2, [r3, #20]
 8000a00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	222c      	movs	r2, #44	@ 0x2c
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f005 ffb4 	bl	8006976 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a0e:	4b52      	ldr	r3, [pc, #328]	@ (8000b58 <MX_TIM1_Init+0x17c>)
 8000a10:	4a52      	ldr	r2, [pc, #328]	@ (8000b5c <MX_TIM1_Init+0x180>)
 8000a12:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a14:	4b50      	ldr	r3, [pc, #320]	@ (8000b58 <MX_TIM1_Init+0x17c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1a:	4b4f      	ldr	r3, [pc, #316]	@ (8000b58 <MX_TIM1_Init+0x17c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8000a20:	4b4d      	ldr	r3, [pc, #308]	@ (8000b58 <MX_TIM1_Init+0x17c>)
 8000a22:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000a26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a28:	4b4b      	ldr	r3, [pc, #300]	@ (8000b58 <MX_TIM1_Init+0x17c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a2e:	4b4a      	ldr	r3, [pc, #296]	@ (8000b58 <MX_TIM1_Init+0x17c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a34:	4b48      	ldr	r3, [pc, #288]	@ (8000b58 <MX_TIM1_Init+0x17c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a3a:	4847      	ldr	r0, [pc, #284]	@ (8000b58 <MX_TIM1_Init+0x17c>)
 8000a3c:	f004 f83a 	bl	8004ab4 <HAL_TIM_PWM_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a46:	f000 fbb5 	bl	80011b4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000a4a:	4843      	ldr	r0, [pc, #268]	@ (8000b58 <MX_TIM1_Init+0x17c>)
 8000a4c:	f003 ffd1 	bl	80049f2 <HAL_TIM_OC_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000a56:	f000 fbad 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a66:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	483a      	ldr	r0, [pc, #232]	@ (8000b58 <MX_TIM1_Init+0x17c>)
 8000a6e:	f005 f961 	bl	8005d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000a78:	f000 fb9c 	bl	80011b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7c:	2360      	movs	r3, #96	@ 0x60
 8000a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a84:	2300      	movs	r3, #0
 8000a86:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a94:	2300      	movs	r3, #0
 8000a96:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a98:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	482d      	ldr	r0, [pc, #180]	@ (8000b58 <MX_TIM1_Init+0x17c>)
 8000aa2:	f004 fb79 	bl	8005198 <HAL_TIM_PWM_ConfigChannel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000aac:	f000 fb82 	bl	80011b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ab4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ab8:	2204      	movs	r2, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	4826      	ldr	r0, [pc, #152]	@ (8000b58 <MX_TIM1_Init+0x17c>)
 8000abe:	f004 fa55 	bl	8004f6c <HAL_TIM_OC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000ac8:	f000 fb74 	bl	80011b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000acc:	2360      	movs	r3, #96	@ 0x60
 8000ace:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ad0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ad4:	2208      	movs	r2, #8
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	481f      	ldr	r0, [pc, #124]	@ (8000b58 <MX_TIM1_Init+0x17c>)
 8000ada:	f004 fb5d 	bl	8005198 <HAL_TIM_PWM_ConfigChannel>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000ae4:	f000 fb66 	bl	80011b4 <Error_Handler>
  }
  sConfigOC.Pulse = 29999;
 8000ae8:	f247 532f 	movw	r3, #29999	@ 0x752f
 8000aec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000af2:	220c      	movs	r2, #12
 8000af4:	4619      	mov	r1, r3
 8000af6:	4818      	ldr	r0, [pc, #96]	@ (8000b58 <MX_TIM1_Init+0x17c>)
 8000af8:	f004 fb4e 	bl	8005198 <HAL_TIM_PWM_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000b02:	f000 fb57 	bl	80011b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4807      	ldr	r0, [pc, #28]	@ (8000b58 <MX_TIM1_Init+0x17c>)
 8000b3c:	f005 f982 	bl	8005e44 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 8000b46:	f000 fb35 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b4a:	4803      	ldr	r0, [pc, #12]	@ (8000b58 <MX_TIM1_Init+0x17c>)
 8000b4c:	f000 fe80 	bl	8001850 <HAL_TIM_MspPostInit>

}
 8000b50:	bf00      	nop
 8000b52:	3758      	adds	r7, #88	@ 0x58
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	2000020c 	.word	0x2000020c
 8000b5c:	40012c00 	.word	0x40012c00

08000b60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	@ 0x30
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	2224      	movs	r2, #36	@ 0x24
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f005 ff01 	bl	8006976 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	463b      	mov	r3, r7
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b7e:	4b21      	ldr	r3, [pc, #132]	@ (8000c04 <MX_TIM2_Init+0xa4>)
 8000b80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b86:	4b1f      	ldr	r3, [pc, #124]	@ (8000c04 <MX_TIM2_Init+0xa4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c04 <MX_TIM2_Init+0xa4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000b92:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <MX_TIM2_Init+0xa4>)
 8000b94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <MX_TIM2_Init+0xa4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba0:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <MX_TIM2_Init+0xa4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <MX_TIM2_Init+0xa4>)
 8000bd2:	f004 f924 	bl	8004e1e <HAL_TIM_Encoder_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000bdc:	f000 faea 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000be8:	463b      	mov	r3, r7
 8000bea:	4619      	mov	r1, r3
 8000bec:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <MX_TIM2_Init+0xa4>)
 8000bee:	f005 f8a1 	bl	8005d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000bf8:	f000 fadc 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	3730      	adds	r7, #48	@ 0x30
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000258 	.word	0x20000258

08000c08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	@ 0x30
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	2224      	movs	r2, #36	@ 0x24
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f005 fead 	bl	8006976 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c26:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <MX_TIM3_Init+0xa4>)
 8000c28:	4a21      	ldr	r2, [pc, #132]	@ (8000cb0 <MX_TIM3_Init+0xa8>)
 8000c2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cac <MX_TIM3_Init+0xa4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c32:	4b1e      	ldr	r3, [pc, #120]	@ (8000cac <MX_TIM3_Init+0xa4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c38:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <MX_TIM3_Init+0xa4>)
 8000c3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c40:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <MX_TIM3_Init+0xa4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c46:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <MX_TIM3_Init+0xa4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c50:	2300      	movs	r3, #0
 8000c52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c54:	2301      	movs	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c64:	2301      	movs	r3, #1
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	4619      	mov	r1, r3
 8000c76:	480d      	ldr	r0, [pc, #52]	@ (8000cac <MX_TIM3_Init+0xa4>)
 8000c78:	f004 f8d1 	bl	8004e1e <HAL_TIM_Encoder_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c82:	f000 fa97 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4619      	mov	r1, r3
 8000c92:	4806      	ldr	r0, [pc, #24]	@ (8000cac <MX_TIM3_Init+0xa4>)
 8000c94:	f005 f84e 	bl	8005d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c9e:	f000 fa89 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	3730      	adds	r7, #48	@ 0x30
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200002a4 	.word	0x200002a4
 8000cb0:	40000400 	.word	0x40000400

08000cb4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08c      	sub	sp, #48	@ 0x30
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cba:	f107 030c 	add.w	r3, r7, #12
 8000cbe:	2224      	movs	r2, #36	@ 0x24
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f005 fe57 	bl	8006976 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cd2:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <MX_TIM4_Init+0xa4>)
 8000cd4:	4a21      	ldr	r2, [pc, #132]	@ (8000d5c <MX_TIM4_Init+0xa8>)
 8000cd6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d58 <MX_TIM4_Init+0xa4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cde:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <MX_TIM4_Init+0xa4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d58 <MX_TIM4_Init+0xa4>)
 8000ce6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cec:	4b1a      	ldr	r3, [pc, #104]	@ (8000d58 <MX_TIM4_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf2:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <MX_TIM4_Init+0xa4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d00:	2301      	movs	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d10:	2301      	movs	r3, #1
 8000d12:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4619      	mov	r1, r3
 8000d22:	480d      	ldr	r0, [pc, #52]	@ (8000d58 <MX_TIM4_Init+0xa4>)
 8000d24:	f004 f87b 	bl	8004e1e <HAL_TIM_Encoder_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d2e:	f000 fa41 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4806      	ldr	r0, [pc, #24]	@ (8000d58 <MX_TIM4_Init+0xa4>)
 8000d40:	f004 fff8 	bl	8005d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d4a:	f000 fa33 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	3730      	adds	r7, #48	@ 0x30
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200002f0 	.word	0x200002f0
 8000d5c:	40000800 	.word	0x40000800

08000d60 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d7e:	4b26      	ldr	r3, [pc, #152]	@ (8000e18 <MX_TIM5_Init+0xb8>)
 8000d80:	4a26      	ldr	r2, [pc, #152]	@ (8000e1c <MX_TIM5_Init+0xbc>)
 8000d82:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d84:	4b24      	ldr	r3, [pc, #144]	@ (8000e18 <MX_TIM5_Init+0xb8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8a:	4b23      	ldr	r3, [pc, #140]	@ (8000e18 <MX_TIM5_Init+0xb8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000d90:	4b21      	ldr	r3, [pc, #132]	@ (8000e18 <MX_TIM5_Init+0xb8>)
 8000d92:	f04f 32ff 	mov.w	r2, #4294967295
 8000d96:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d98:	4b1f      	ldr	r3, [pc, #124]	@ (8000e18 <MX_TIM5_Init+0xb8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e18 <MX_TIM5_Init+0xb8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000da4:	481c      	ldr	r0, [pc, #112]	@ (8000e18 <MX_TIM5_Init+0xb8>)
 8000da6:	f003 ffe3 	bl	8004d70 <HAL_TIM_IC_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000db0:	f000 fa00 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4815      	ldr	r0, [pc, #84]	@ (8000e18 <MX_TIM5_Init+0xb8>)
 8000dc4:	f004 ffb6 	bl	8005d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8000dce:	f000 f9f1 	bl	80011b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2208      	movs	r2, #8
 8000de6:	4619      	mov	r1, r3
 8000de8:	480b      	ldr	r0, [pc, #44]	@ (8000e18 <MX_TIM5_Init+0xb8>)
 8000dea:	f004 f939 	bl	8005060 <HAL_TIM_IC_ConfigChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000df4:	f000 f9de 	bl	80011b4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4806      	ldr	r0, [pc, #24]	@ (8000e18 <MX_TIM5_Init+0xb8>)
 8000e00:	f004 f92e 	bl	8005060 <HAL_TIM_IC_ConfigChannel>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8000e0a:	f000 f9d3 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	3720      	adds	r7, #32
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2000033c 	.word	0x2000033c
 8000e1c:	40000c00 	.word	0x40000c00

08000e20 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b096      	sub	sp, #88	@ 0x58
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e26:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	611a      	str	r2, [r3, #16]
 8000e42:	615a      	str	r2, [r3, #20]
 8000e44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	222c      	movs	r2, #44	@ 0x2c
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f005 fd92 	bl	8006976 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e52:	4b4b      	ldr	r3, [pc, #300]	@ (8000f80 <MX_TIM8_Init+0x160>)
 8000e54:	4a4b      	ldr	r2, [pc, #300]	@ (8000f84 <MX_TIM8_Init+0x164>)
 8000e56:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e58:	4b49      	ldr	r3, [pc, #292]	@ (8000f80 <MX_TIM8_Init+0x160>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5e:	4b48      	ldr	r3, [pc, #288]	@ (8000f80 <MX_TIM8_Init+0x160>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000e64:	4b46      	ldr	r3, [pc, #280]	@ (8000f80 <MX_TIM8_Init+0x160>)
 8000e66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e6a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6c:	4b44      	ldr	r3, [pc, #272]	@ (8000f80 <MX_TIM8_Init+0x160>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e72:	4b43      	ldr	r3, [pc, #268]	@ (8000f80 <MX_TIM8_Init+0x160>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e78:	4b41      	ldr	r3, [pc, #260]	@ (8000f80 <MX_TIM8_Init+0x160>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e7e:	4840      	ldr	r0, [pc, #256]	@ (8000f80 <MX_TIM8_Init+0x160>)
 8000e80:	f003 fe18 	bl	8004ab4 <HAL_TIM_PWM_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000e8a:	f000 f993 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e9a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4837      	ldr	r0, [pc, #220]	@ (8000f80 <MX_TIM8_Init+0x160>)
 8000ea2:	f004 ff47 	bl	8005d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000eac:	f000 f982 	bl	80011b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb0:	2360      	movs	r3, #96	@ 0x60
 8000eb2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ecc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	482a      	ldr	r0, [pc, #168]	@ (8000f80 <MX_TIM8_Init+0x160>)
 8000ed6:	f004 f95f 	bl	8005198 <HAL_TIM_PWM_ConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000ee0:	f000 f968 	bl	80011b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ee8:	2204      	movs	r2, #4
 8000eea:	4619      	mov	r1, r3
 8000eec:	4824      	ldr	r0, [pc, #144]	@ (8000f80 <MX_TIM8_Init+0x160>)
 8000eee:	f004 f953 	bl	8005198 <HAL_TIM_PWM_ConfigChannel>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000ef8:	f000 f95c 	bl	80011b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000efc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f00:	2208      	movs	r2, #8
 8000f02:	4619      	mov	r1, r3
 8000f04:	481e      	ldr	r0, [pc, #120]	@ (8000f80 <MX_TIM8_Init+0x160>)
 8000f06:	f004 f947 	bl	8005198 <HAL_TIM_PWM_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8000f10:	f000 f950 	bl	80011b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f14:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f18:	220c      	movs	r2, #12
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4818      	ldr	r0, [pc, #96]	@ (8000f80 <MX_TIM8_Init+0x160>)
 8000f1e:	f004 f93b 	bl	8005198 <HAL_TIM_PWM_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8000f28:	f000 f944 	bl	80011b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4807      	ldr	r0, [pc, #28]	@ (8000f80 <MX_TIM8_Init+0x160>)
 8000f62:	f004 ff6f 	bl	8005e44 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM8_Init+0x150>
  {
    Error_Handler();
 8000f6c:	f000 f922 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f70:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <MX_TIM8_Init+0x160>)
 8000f72:	f000 fc6d 	bl	8001850 <HAL_TIM_MspPostInit>

}
 8000f76:	bf00      	nop
 8000f78:	3758      	adds	r7, #88	@ 0x58
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000388 	.word	0x20000388
 8000f84:	40013400 	.word	0x40013400

08000f88 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000fa6:	4b27      	ldr	r3, [pc, #156]	@ (8001044 <MX_TIM15_Init+0xbc>)
 8000fa8:	4a27      	ldr	r2, [pc, #156]	@ (8001048 <MX_TIM15_Init+0xc0>)
 8000faa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000fac:	4b25      	ldr	r3, [pc, #148]	@ (8001044 <MX_TIM15_Init+0xbc>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb2:	4b24      	ldr	r3, [pc, #144]	@ (8001044 <MX_TIM15_Init+0xbc>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000fb8:	4b22      	ldr	r3, [pc, #136]	@ (8001044 <MX_TIM15_Init+0xbc>)
 8000fba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fbe:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc0:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <MX_TIM15_Init+0xbc>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8001044 <MX_TIM15_Init+0xbc>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <MX_TIM15_Init+0xbc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8000fd2:	481c      	ldr	r0, [pc, #112]	@ (8001044 <MX_TIM15_Init+0xbc>)
 8000fd4:	f003 fecc 	bl	8004d70 <HAL_TIM_IC_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000fde:	f000 f8e9 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4814      	ldr	r0, [pc, #80]	@ (8001044 <MX_TIM15_Init+0xbc>)
 8000ff2:	f004 fe9f 	bl	8005d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8000ffc:	f000 f8da 	bl	80011b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001004:	2301      	movs	r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	480b      	ldr	r0, [pc, #44]	@ (8001044 <MX_TIM15_Init+0xbc>)
 8001018:	f004 f822 	bl	8005060 <HAL_TIM_IC_ConfigChannel>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 8001022:	f000 f8c7 	bl	80011b4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	2204      	movs	r2, #4
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	@ (8001044 <MX_TIM15_Init+0xbc>)
 800102e:	f004 f817 	bl	8005060 <HAL_TIM_IC_ConfigChannel>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM15_Init+0xb4>
  {
    Error_Handler();
 8001038:	f000 f8bc 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200003d4 	.word	0x200003d4
 8001048:	40014000 	.word	0x40014000

0800104c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <MX_USART3_UART_Init+0x58>)
 8001052:	4a15      	ldr	r2, [pc, #84]	@ (80010a8 <MX_USART3_UART_Init+0x5c>)
 8001054:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001056:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <MX_USART3_UART_Init+0x58>)
 8001058:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800105c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <MX_USART3_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <MX_USART3_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <MX_USART3_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <MX_USART3_UART_Init+0x58>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <MX_USART3_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <MX_USART3_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <MX_USART3_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <MX_USART3_UART_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_USART3_UART_Init+0x58>)
 8001090:	f004 ff56 	bl	8005f40 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800109a:	f000 f88b 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000420 	.word	0x20000420
 80010a8:	40004800 	.word	0x40004800

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	@ 0x28
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c2:	4b39      	ldr	r3, [pc, #228]	@ (80011a8 <MX_GPIO_Init+0xfc>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	4a38      	ldr	r2, [pc, #224]	@ (80011a8 <MX_GPIO_Init+0xfc>)
 80010c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ce:	4b36      	ldr	r3, [pc, #216]	@ (80011a8 <MX_GPIO_Init+0xfc>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b33      	ldr	r3, [pc, #204]	@ (80011a8 <MX_GPIO_Init+0xfc>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	4a32      	ldr	r2, [pc, #200]	@ (80011a8 <MX_GPIO_Init+0xfc>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e6:	4b30      	ldr	r3, [pc, #192]	@ (80011a8 <MX_GPIO_Init+0xfc>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b2d      	ldr	r3, [pc, #180]	@ (80011a8 <MX_GPIO_Init+0xfc>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	4a2c      	ldr	r2, [pc, #176]	@ (80011a8 <MX_GPIO_Init+0xfc>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010fe:	4b2a      	ldr	r3, [pc, #168]	@ (80011a8 <MX_GPIO_Init+0xfc>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <MX_GPIO_Init+0xfc>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	4a26      	ldr	r2, [pc, #152]	@ (80011a8 <MX_GPIO_Init+0xfc>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001116:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <MX_GPIO_Init+0xfc>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2108      	movs	r1, #8
 8001126:	4821      	ldr	r0, [pc, #132]	@ (80011ac <MX_GPIO_Init+0x100>)
 8001128:	f001 ff86 	bl	8003038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8001132:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001136:	f001 ff7f 	bl	8003038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f243 0106 	movw	r1, #12294	@ 0x3006
 8001140:	481b      	ldr	r0, [pc, #108]	@ (80011b0 <MX_GPIO_Init+0x104>)
 8001142:	f001 ff79 	bl	8003038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001146:	2308      	movs	r3, #8
 8001148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	4813      	ldr	r0, [pc, #76]	@ (80011ac <MX_GPIO_Init+0x100>)
 800115e:	f001 fdc1 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 8001162:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800117e:	f001 fdb1 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13;
 8001182:	f243 0306 	movw	r3, #12294	@ 0x3006
 8001186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <MX_GPIO_Init+0x104>)
 800119c:	f001 fda2 	bl	8002ce4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	@ 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40021000 	.word	0x40021000
 80011ac:	48000800 	.word	0x48000800
 80011b0:	48000400 	.word	0x48000400

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <set_duty>:
 * @param[in] p_mot Pointer to the motor object structure.
 * @param[in] level Desired duty cycle percentage (-100 to 100).
 * @details This function constrains the level to the valid range and sets the
 * 			PWM duty cycle by updating the compare register pointer directly.
 */
void set_duty(motor_t* p_mot, int32_t level) {
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
	/// Constrain level to valid range
	if (level > 100) level = 100;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	2b64      	cmp	r3, #100	@ 0x64
 80011d2:	dd01      	ble.n	80011d8 <set_duty+0x14>
 80011d4:	2364      	movs	r3, #100	@ 0x64
 80011d6:	603b      	str	r3, [r7, #0]
    if (level < -100) level = -100;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80011de:	da02      	bge.n	80011e6 <set_duty+0x22>
 80011e0:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80011e4:	603b      	str	r3, [r7, #0]
	/// Initialize pulse width variables
    uint32_t pulse1 = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
    uint32_t pulse2 = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
    if(level > 0 ){
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	dd0c      	ble.n	800120e <set_duty+0x4a>
    	pulse2 = (uint32_t)((level * p_mot->Period) / 100);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	fb02 f303 	mul.w	r3, r2, r3
 80011fe:	4a13      	ldr	r2, [pc, #76]	@ (800124c <set_duty+0x88>)
 8001200:	fb82 1203 	smull	r1, r2, r2, r3
 8001204:	1152      	asrs	r2, r2, #5
 8001206:	17db      	asrs	r3, r3, #31
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	e00f      	b.n	800122e <set_duty+0x6a>
    }
    else if(level < 0){
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	da0c      	bge.n	800122e <set_duty+0x6a>
    	pulse1 = (uint32_t)((-level * p_mot->Period) / 100);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	425b      	negs	r3, r3
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	6892      	ldr	r2, [r2, #8]
 800121c:	fb02 f303 	mul.w	r3, r2, r3
 8001220:	4a0a      	ldr	r2, [pc, #40]	@ (800124c <set_duty+0x88>)
 8001222:	fb82 1203 	smull	r1, r2, r2, r3
 8001226:	1152      	asrs	r2, r2, #5
 8001228:	17db      	asrs	r3, r3, #31
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	60fb      	str	r3, [r7, #12]
    }
    /// Set the PWM duty cycle by updating the compare register
    *(p_mot->chA) = pulse1;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	601a      	str	r2, [r3, #0]
    *(p_mot->chB) = pulse2;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	601a      	str	r2, [r3, #0]

}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	51eb851f 	.word	0x51eb851f

08001250 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <HAL_MspInit+0x44>)
 8001258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800125a:	4a0e      	ldr	r2, [pc, #56]	@ (8001294 <HAL_MspInit+0x44>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6613      	str	r3, [r2, #96]	@ 0x60
 8001262:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <HAL_MspInit+0x44>)
 8001264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <HAL_MspInit+0x44>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	4a08      	ldr	r2, [pc, #32]	@ (8001294 <HAL_MspInit+0x44>)
 8001274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001278:	6593      	str	r3, [r2, #88]	@ 0x58
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_MspInit+0x44>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000

08001298 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08e      	sub	sp, #56	@ 0x38
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a58      	ldr	r2, [pc, #352]	@ (8001418 <HAL_ADC_MspInit+0x180>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d12d      	bne.n	8001316 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80012ba:	4b58      	ldr	r3, [pc, #352]	@ (800141c <HAL_ADC_MspInit+0x184>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	3301      	adds	r3, #1
 80012c0:	4a56      	ldr	r2, [pc, #344]	@ (800141c <HAL_ADC_MspInit+0x184>)
 80012c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80012c4:	4b55      	ldr	r3, [pc, #340]	@ (800141c <HAL_ADC_MspInit+0x184>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d10b      	bne.n	80012e4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80012cc:	4b54      	ldr	r3, [pc, #336]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d0:	4a53      	ldr	r2, [pc, #332]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 80012d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d8:	4b51      	ldr	r3, [pc, #324]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012e0:	623b      	str	r3, [r7, #32]
 80012e2:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 80012e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 80012ea:	f043 0304 	orr.w	r3, r3, #4
 80012ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 80012f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012fc:	2303      	movs	r3, #3
 80012fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001300:	2303      	movs	r3, #3
 8001302:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001308:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800130c:	4619      	mov	r1, r3
 800130e:	4845      	ldr	r0, [pc, #276]	@ (8001424 <HAL_ADC_MspInit+0x18c>)
 8001310:	f001 fce8 	bl	8002ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001314:	e07c      	b.n	8001410 <HAL_ADC_MspInit+0x178>
  else if(hadc->Instance==ADC2)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a43      	ldr	r2, [pc, #268]	@ (8001428 <HAL_ADC_MspInit+0x190>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d145      	bne.n	80013ac <HAL_ADC_MspInit+0x114>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001320:	4b3e      	ldr	r3, [pc, #248]	@ (800141c <HAL_ADC_MspInit+0x184>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	4a3d      	ldr	r2, [pc, #244]	@ (800141c <HAL_ADC_MspInit+0x184>)
 8001328:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800132a:	4b3c      	ldr	r3, [pc, #240]	@ (800141c <HAL_ADC_MspInit+0x184>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d10b      	bne.n	800134a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001332:	4b3b      	ldr	r3, [pc, #236]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	4a3a      	ldr	r2, [pc, #232]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 8001338:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800133c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133e:	4b38      	ldr	r3, [pc, #224]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001346:	61bb      	str	r3, [r7, #24]
 8001348:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	4b35      	ldr	r3, [pc, #212]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	4a34      	ldr	r2, [pc, #208]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001356:	4b32      	ldr	r3, [pc, #200]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	4b2f      	ldr	r3, [pc, #188]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	4a2e      	ldr	r2, [pc, #184]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136e:	4b2c      	ldr	r3, [pc, #176]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800137a:	2306      	movs	r3, #6
 800137c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137e:	2303      	movs	r3, #3
 8001380:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800138a:	4619      	mov	r1, r3
 800138c:	4825      	ldr	r0, [pc, #148]	@ (8001424 <HAL_ADC_MspInit+0x18c>)
 800138e:	f001 fca9 	bl	8002ce4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001392:	2301      	movs	r3, #1
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001396:	230b      	movs	r3, #11
 8001398:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a2:	4619      	mov	r1, r3
 80013a4:	4821      	ldr	r0, [pc, #132]	@ (800142c <HAL_ADC_MspInit+0x194>)
 80013a6:	f001 fc9d 	bl	8002ce4 <HAL_GPIO_Init>
}
 80013aa:	e031      	b.n	8001410 <HAL_ADC_MspInit+0x178>
  else if(hadc->Instance==ADC3)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001430 <HAL_ADC_MspInit+0x198>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d12c      	bne.n	8001410 <HAL_ADC_MspInit+0x178>
    HAL_RCC_ADC_CLK_ENABLED++;
 80013b6:	4b19      	ldr	r3, [pc, #100]	@ (800141c <HAL_ADC_MspInit+0x184>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4a17      	ldr	r2, [pc, #92]	@ (800141c <HAL_ADC_MspInit+0x184>)
 80013be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80013c0:	4b16      	ldr	r3, [pc, #88]	@ (800141c <HAL_ADC_MspInit+0x184>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d10b      	bne.n	80013e0 <HAL_ADC_MspInit+0x148>
      __HAL_RCC_ADC_CLK_ENABLE();
 80013c8:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013cc:	4a14      	ldr	r2, [pc, #80]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 80013ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d4:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 80013e6:	f043 0304 	orr.w	r3, r3, #4
 80013ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <HAL_ADC_MspInit+0x188>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013f8:	2304      	movs	r3, #4
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013fc:	2303      	movs	r3, #3
 80013fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001404:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001408:	4619      	mov	r1, r3
 800140a:	4806      	ldr	r0, [pc, #24]	@ (8001424 <HAL_ADC_MspInit+0x18c>)
 800140c:	f001 fc6a 	bl	8002ce4 <HAL_GPIO_Init>
}
 8001410:	bf00      	nop
 8001412:	3738      	adds	r7, #56	@ 0x38
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	50040000 	.word	0x50040000
 800141c:	200004a8 	.word	0x200004a8
 8001420:	40021000 	.word	0x40021000
 8001424:	48000800 	.word	0x48000800
 8001428:	50040100 	.word	0x50040100
 800142c:	48000400 	.word	0x48000400
 8001430:	50040200 	.word	0x50040200

08001434 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b0aa      	sub	sp, #168	@ 0xa8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	2284      	movs	r2, #132	@ 0x84
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f005 fa8e 	bl	8006976 <memset>
  if(hi2c->Instance==I2C2)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a21      	ldr	r2, [pc, #132]	@ (80014e4 <HAL_I2C_MspInit+0xb0>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d13b      	bne.n	80014dc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001464:	2380      	movs	r3, #128	@ 0x80
 8001466:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001468:	2300      	movs	r3, #0
 800146a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	4618      	mov	r0, r3
 8001472:	f002 fd8f 	bl	8003f94 <HAL_RCCEx_PeriphCLKConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800147c:	f7ff fe9a 	bl	80011b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001480:	4b19      	ldr	r3, [pc, #100]	@ (80014e8 <HAL_I2C_MspInit+0xb4>)
 8001482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001484:	4a18      	ldr	r2, [pc, #96]	@ (80014e8 <HAL_I2C_MspInit+0xb4>)
 8001486:	f043 0302 	orr.w	r3, r3, #2
 800148a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148c:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <HAL_I2C_MspInit+0xb4>)
 800148e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001498:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800149c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a0:	2312      	movs	r3, #18
 80014a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014b2:	2304      	movs	r3, #4
 80014b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014bc:	4619      	mov	r1, r3
 80014be:	480b      	ldr	r0, [pc, #44]	@ (80014ec <HAL_I2C_MspInit+0xb8>)
 80014c0:	f001 fc10 	bl	8002ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014c4:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <HAL_I2C_MspInit+0xb4>)
 80014c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c8:	4a07      	ldr	r2, [pc, #28]	@ (80014e8 <HAL_I2C_MspInit+0xb4>)
 80014ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80014d0:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <HAL_I2C_MspInit+0xb4>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014dc:	bf00      	nop
 80014de:	37a8      	adds	r7, #168	@ 0xa8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40005800 	.word	0x40005800
 80014e8:	40021000 	.word	0x40021000
 80014ec:	48000400 	.word	0x48000400

080014f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	@ 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a26      	ldr	r2, [pc, #152]	@ (80015a8 <HAL_SPI_MspInit+0xb8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d145      	bne.n	800159e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001512:	4b26      	ldr	r3, [pc, #152]	@ (80015ac <HAL_SPI_MspInit+0xbc>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001516:	4a25      	ldr	r2, [pc, #148]	@ (80015ac <HAL_SPI_MspInit+0xbc>)
 8001518:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800151c:	6593      	str	r3, [r2, #88]	@ 0x58
 800151e:	4b23      	ldr	r3, [pc, #140]	@ (80015ac <HAL_SPI_MspInit+0xbc>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b20      	ldr	r3, [pc, #128]	@ (80015ac <HAL_SPI_MspInit+0xbc>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	4a1f      	ldr	r2, [pc, #124]	@ (80015ac <HAL_SPI_MspInit+0xbc>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001536:	4b1d      	ldr	r3, [pc, #116]	@ (80015ac <HAL_SPI_MspInit+0xbc>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001542:	4b1a      	ldr	r3, [pc, #104]	@ (80015ac <HAL_SPI_MspInit+0xbc>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	4a19      	ldr	r2, [pc, #100]	@ (80015ac <HAL_SPI_MspInit+0xbc>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154e:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <HAL_SPI_MspInit+0xbc>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800155a:	2310      	movs	r3, #16
 800155c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800156a:	2306      	movs	r3, #6
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001578:	f001 fbb4 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800157c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800158e:	2306      	movs	r3, #6
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <HAL_SPI_MspInit+0xc0>)
 800159a:	f001 fba3 	bl	8002ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	@ 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40003c00 	.word	0x40003c00
 80015ac:	40021000 	.word	0x40021000
 80015b0:	48000800 	.word	0x48000800

080015b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a13      	ldr	r2, [pc, #76]	@ (8001610 <HAL_TIM_PWM_MspInit+0x5c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d10c      	bne.n	80015e0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015c6:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <HAL_TIM_PWM_MspInit+0x60>)
 80015c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ca:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <HAL_TIM_PWM_MspInit+0x60>)
 80015cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <HAL_TIM_PWM_MspInit+0x60>)
 80015d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80015de:	e010      	b.n	8001602 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001618 <HAL_TIM_PWM_MspInit+0x64>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d10b      	bne.n	8001602 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80015ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <HAL_TIM_PWM_MspInit+0x60>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ee:	4a09      	ldr	r2, [pc, #36]	@ (8001614 <HAL_TIM_PWM_MspInit+0x60>)
 80015f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80015f6:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <HAL_TIM_PWM_MspInit+0x60>)
 80015f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40012c00 	.word	0x40012c00
 8001614:	40021000 	.word	0x40021000
 8001618:	40013400 	.word	0x40013400

0800161c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08e      	sub	sp, #56	@ 0x38
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800163c:	d129      	bne.n	8001692 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800163e:	4b45      	ldr	r3, [pc, #276]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x138>)
 8001640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001642:	4a44      	ldr	r2, [pc, #272]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x138>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6593      	str	r3, [r2, #88]	@ 0x58
 800164a:	4b42      	ldr	r3, [pc, #264]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x138>)
 800164c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	623b      	str	r3, [r7, #32]
 8001654:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	4b3f      	ldr	r3, [pc, #252]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x138>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	4a3e      	ldr	r2, [pc, #248]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x138>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001662:	4b3c      	ldr	r3, [pc, #240]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x138>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800166e:	2303      	movs	r3, #3
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800167e:	2301      	movs	r3, #1
 8001680:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001686:	4619      	mov	r1, r3
 8001688:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800168c:	f001 fb2a 	bl	8002ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001690:	e05b      	b.n	800174a <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a30      	ldr	r2, [pc, #192]	@ (8001758 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d129      	bne.n	80016f0 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800169c:	4b2d      	ldr	r3, [pc, #180]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x138>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a0:	4a2c      	ldr	r2, [pc, #176]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x138>)
 80016a2:	f043 0302 	orr.w	r3, r3, #2
 80016a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x138>)
 80016aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	61bb      	str	r3, [r7, #24]
 80016b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b27      	ldr	r3, [pc, #156]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x138>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b8:	4a26      	ldr	r2, [pc, #152]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x138>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c0:	4b24      	ldr	r3, [pc, #144]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x138>)
 80016c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016cc:	23c0      	movs	r3, #192	@ 0xc0
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016dc:	2302      	movs	r3, #2
 80016de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016e4:	4619      	mov	r1, r3
 80016e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ea:	f001 fafb 	bl	8002ce4 <HAL_GPIO_Init>
}
 80016ee:	e02c      	b.n	800174a <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a19      	ldr	r2, [pc, #100]	@ (800175c <HAL_TIM_Encoder_MspInit+0x140>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d127      	bne.n	800174a <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016fa:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x138>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fe:	4a15      	ldr	r2, [pc, #84]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x138>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	6593      	str	r3, [r2, #88]	@ 0x58
 8001706:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x138>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x138>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001716:	4a0f      	ldr	r2, [pc, #60]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x138>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171e:	4b0d      	ldr	r3, [pc, #52]	@ (8001754 <HAL_TIM_Encoder_MspInit+0x138>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800172a:	23c0      	movs	r3, #192	@ 0xc0
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800173a:	2302      	movs	r3, #2
 800173c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001742:	4619      	mov	r1, r3
 8001744:	4806      	ldr	r0, [pc, #24]	@ (8001760 <HAL_TIM_Encoder_MspInit+0x144>)
 8001746:	f001 facd 	bl	8002ce4 <HAL_GPIO_Init>
}
 800174a:	bf00      	nop
 800174c:	3738      	adds	r7, #56	@ 0x38
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	40000400 	.word	0x40000400
 800175c:	40000800 	.word	0x40000800
 8001760:	48000400 	.word	0x48000400

08001764 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08c      	sub	sp, #48	@ 0x30
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a2f      	ldr	r2, [pc, #188]	@ (8001840 <HAL_TIM_IC_MspInit+0xdc>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d129      	bne.n	80017da <HAL_TIM_IC_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001786:	4b2f      	ldr	r3, [pc, #188]	@ (8001844 <HAL_TIM_IC_MspInit+0xe0>)
 8001788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178a:	4a2e      	ldr	r2, [pc, #184]	@ (8001844 <HAL_TIM_IC_MspInit+0xe0>)
 800178c:	f043 0308 	orr.w	r3, r3, #8
 8001790:	6593      	str	r3, [r2, #88]	@ 0x58
 8001792:	4b2c      	ldr	r3, [pc, #176]	@ (8001844 <HAL_TIM_IC_MspInit+0xe0>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	4b29      	ldr	r3, [pc, #164]	@ (8001844 <HAL_TIM_IC_MspInit+0xe0>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a2:	4a28      	ldr	r2, [pc, #160]	@ (8001844 <HAL_TIM_IC_MspInit+0xe0>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017aa:	4b26      	ldr	r3, [pc, #152]	@ (8001844 <HAL_TIM_IC_MspInit+0xe0>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017b6:	230c      	movs	r3, #12
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80017c6:	2302      	movs	r3, #2
 80017c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	4619      	mov	r1, r3
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d4:	f001 fa86 	bl	8002ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80017d8:	e02d      	b.n	8001836 <HAL_TIM_IC_MspInit+0xd2>
  else if(htim_ic->Instance==TIM15)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a1a      	ldr	r2, [pc, #104]	@ (8001848 <HAL_TIM_IC_MspInit+0xe4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d128      	bne.n	8001836 <HAL_TIM_IC_MspInit+0xd2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80017e4:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <HAL_TIM_IC_MspInit+0xe0>)
 80017e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e8:	4a16      	ldr	r2, [pc, #88]	@ (8001844 <HAL_TIM_IC_MspInit+0xe0>)
 80017ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80017f0:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <HAL_TIM_IC_MspInit+0xe0>)
 80017f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fc:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <HAL_TIM_IC_MspInit+0xe0>)
 80017fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001800:	4a10      	ldr	r2, [pc, #64]	@ (8001844 <HAL_TIM_IC_MspInit+0xe0>)
 8001802:	f043 0302 	orr.w	r3, r3, #2
 8001806:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001808:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <HAL_TIM_IC_MspInit+0xe0>)
 800180a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001814:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001826:	230e      	movs	r3, #14
 8001828:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	4619      	mov	r1, r3
 8001830:	4806      	ldr	r0, [pc, #24]	@ (800184c <HAL_TIM_IC_MspInit+0xe8>)
 8001832:	f001 fa57 	bl	8002ce4 <HAL_GPIO_Init>
}
 8001836:	bf00      	nop
 8001838:	3730      	adds	r7, #48	@ 0x30
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40000c00 	.word	0x40000c00
 8001844:	40021000 	.word	0x40021000
 8001848:	40014000 	.word	0x40014000
 800184c:	48000400 	.word	0x48000400

08001850 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	@ 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a23      	ldr	r2, [pc, #140]	@ (80018fc <HAL_TIM_MspPostInit+0xac>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d11e      	bne.n	80018b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	4b23      	ldr	r3, [pc, #140]	@ (8001900 <HAL_TIM_MspPostInit+0xb0>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	4a22      	ldr	r2, [pc, #136]	@ (8001900 <HAL_TIM_MspPostInit+0xb0>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187e:	4b20      	ldr	r3, [pc, #128]	@ (8001900 <HAL_TIM_MspPostInit+0xb0>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800188a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800188e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800189c:	2301      	movs	r3, #1
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018aa:	f001 fa1b 	bl	8002ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80018ae:	e021      	b.n	80018f4 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM8)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a13      	ldr	r2, [pc, #76]	@ (8001904 <HAL_TIM_MspPostInit+0xb4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d11c      	bne.n	80018f4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ba:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <HAL_TIM_MspPostInit+0xb0>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018be:	4a10      	ldr	r2, [pc, #64]	@ (8001900 <HAL_TIM_MspPostInit+0xb0>)
 80018c0:	f043 0304 	orr.w	r3, r3, #4
 80018c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <HAL_TIM_MspPostInit+0xb0>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80018d2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80018d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80018e4:	2303      	movs	r3, #3
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4619      	mov	r1, r3
 80018ee:	4806      	ldr	r0, [pc, #24]	@ (8001908 <HAL_TIM_MspPostInit+0xb8>)
 80018f0:	f001 f9f8 	bl	8002ce4 <HAL_GPIO_Init>
}
 80018f4:	bf00      	nop
 80018f6:	3728      	adds	r7, #40	@ 0x28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40012c00 	.word	0x40012c00
 8001900:	40021000 	.word	0x40021000
 8001904:	40013400 	.word	0x40013400
 8001908:	48000800 	.word	0x48000800

0800190c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b0aa      	sub	sp, #168	@ 0xa8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001924:	f107 0310 	add.w	r3, r7, #16
 8001928:	2284      	movs	r2, #132	@ 0x84
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f005 f822 	bl	8006976 <memset>
  if(huart->Instance==USART3)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a21      	ldr	r2, [pc, #132]	@ (80019bc <HAL_UART_MspInit+0xb0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d13a      	bne.n	80019b2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800193c:	2304      	movs	r3, #4
 800193e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001940:	2300      	movs	r3, #0
 8001942:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	4618      	mov	r0, r3
 800194a:	f002 fb23 	bl	8003f94 <HAL_RCCEx_PeriphCLKConfig>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001954:	f7ff fc2e 	bl	80011b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001958:	4b19      	ldr	r3, [pc, #100]	@ (80019c0 <HAL_UART_MspInit+0xb4>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195c:	4a18      	ldr	r2, [pc, #96]	@ (80019c0 <HAL_UART_MspInit+0xb4>)
 800195e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001962:	6593      	str	r3, [r2, #88]	@ 0x58
 8001964:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <HAL_UART_MspInit+0xb4>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001968:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001970:	4b13      	ldr	r3, [pc, #76]	@ (80019c0 <HAL_UART_MspInit+0xb4>)
 8001972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001974:	4a12      	ldr	r2, [pc, #72]	@ (80019c0 <HAL_UART_MspInit+0xb4>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800197c:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <HAL_UART_MspInit+0xb4>)
 800197e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001988:	2330      	movs	r3, #48	@ 0x30
 800198a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019a0:	2307      	movs	r3, #7
 80019a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80019aa:	4619      	mov	r1, r3
 80019ac:	4805      	ldr	r0, [pc, #20]	@ (80019c4 <HAL_UART_MspInit+0xb8>)
 80019ae:	f001 f999 	bl	8002ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019b2:	bf00      	nop
 80019b4:	37a8      	adds	r7, #168	@ 0xa8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40004800 	.word	0x40004800
 80019c0:	40021000 	.word	0x40021000
 80019c4:	48000800 	.word	0x48000800

080019c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <NMI_Handler+0x4>

080019d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <MemManage_Handler+0x4>

080019e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <BusFault_Handler+0x4>

080019e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <UsageFault_Handler+0x4>

080019f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1e:	f000 f893 	bl	8001b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <SystemInit+0x20>)
 8001a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a32:	4a05      	ldr	r2, [pc, #20]	@ (8001a48 <SystemInit+0x20>)
 8001a34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a50:	f7ff ffea 	bl	8001a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a54:	480c      	ldr	r0, [pc, #48]	@ (8001a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a56:	490d      	ldr	r1, [pc, #52]	@ (8001a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a58:	4a0d      	ldr	r2, [pc, #52]	@ (8001a90 <LoopForever+0xe>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a5c:	e002      	b.n	8001a64 <LoopCopyDataInit>

08001a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a62:	3304      	adds	r3, #4

08001a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a68:	d3f9      	bcc.n	8001a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a98 <LoopForever+0x16>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a70:	e001      	b.n	8001a76 <LoopFillZerobss>

08001a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a74:	3204      	adds	r2, #4

08001a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a78:	d3fb      	bcc.n	8001a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a7a:	f004 ff85 	bl	8006988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a7e:	f7fe fd1b 	bl	80004b8 <main>

08001a82 <LoopForever>:

LoopForever:
    b LoopForever
 8001a82:	e7fe      	b.n	8001a82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a90:	08006a40 	.word	0x08006a40
  ldr r2, =_sbss
 8001a94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a98:	200004b0 	.word	0x200004b0

08001a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a9c:	e7fe      	b.n	8001a9c <ADC1_2_IRQHandler>

08001a9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa8:	2003      	movs	r0, #3
 8001aaa:	f001 f8e7 	bl	8002c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aae:	200f      	movs	r0, #15
 8001ab0:	f000 f80e 	bl	8001ad0 <HAL_InitTick>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	71fb      	strb	r3, [r7, #7]
 8001abe:	e001      	b.n	8001ac4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ac0:	f7ff fbc6 	bl	8001250 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001adc:	4b17      	ldr	r3, [pc, #92]	@ (8001b3c <HAL_InitTick+0x6c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d023      	beq.n	8001b2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ae4:	4b16      	ldr	r3, [pc, #88]	@ (8001b40 <HAL_InitTick+0x70>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <HAL_InitTick+0x6c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 f8e5 	bl	8002cca <HAL_SYSTICK_Config>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10f      	bne.n	8001b26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b0f      	cmp	r3, #15
 8001b0a:	d809      	bhi.n	8001b20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f001 f8bd 	bl	8002c92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b18:	4a0a      	ldr	r2, [pc, #40]	@ (8001b44 <HAL_InitTick+0x74>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e007      	b.n	8001b30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
 8001b24:	e004      	b.n	8001b30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	73fb      	strb	r3, [r7, #15]
 8001b2a:	e001      	b.n	8001b30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000008 	.word	0x20000008
 8001b40:	20000000 	.word	0x20000000
 8001b44:	20000004 	.word	0x20000004

08001b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <HAL_IncTick+0x20>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <HAL_IncTick+0x24>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	4a04      	ldr	r2, [pc, #16]	@ (8001b6c <HAL_IncTick+0x24>)
 8001b5a:	6013      	str	r3, [r2, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	200004ac 	.word	0x200004ac

08001b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b03      	ldr	r3, [pc, #12]	@ (8001b84 <HAL_GetTick+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	200004ac 	.word	0x200004ac

08001b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff ffee 	bl	8001b70 <HAL_GetTick>
 8001b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba0:	d005      	beq.n	8001bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bcc <HAL_Delay+0x44>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bae:	bf00      	nop
 8001bb0:	f7ff ffde 	bl	8001b70 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d8f7      	bhi.n	8001bb0 <HAL_Delay+0x28>
  {
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000008 	.word	0x20000008

08001bd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	609a      	str	r2, [r3, #8]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3360      	adds	r3, #96	@ 0x60
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <LL_ADC_SetOffset+0x44>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c70:	bf00      	nop
 8001c72:	371c      	adds	r7, #28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	03fff000 	.word	0x03fff000

08001c80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3360      	adds	r3, #96	@ 0x60
 8001c8e:	461a      	mov	r2, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3360      	adds	r3, #96	@ 0x60
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cd6:	bf00      	nop
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b087      	sub	sp, #28
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3330      	adds	r3, #48	@ 0x30
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	0a1b      	lsrs	r3, r3, #8
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	4413      	add	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	211f      	movs	r1, #31
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	401a      	ands	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	0e9b      	lsrs	r3, r3, #26
 8001d1a:	f003 011f 	and.w	r1, r3, #31
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d2e:	bf00      	nop
 8001d30:	371c      	adds	r7, #28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b087      	sub	sp, #28
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3314      	adds	r3, #20
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	0e5b      	lsrs	r3, r3, #25
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	4413      	add	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	0d1b      	lsrs	r3, r3, #20
 8001d62:	f003 031f 	and.w	r3, r3, #31
 8001d66:	2107      	movs	r1, #7
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	401a      	ands	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	0d1b      	lsrs	r3, r3, #20
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d84:	bf00      	nop
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da8:	43db      	mvns	r3, r3
 8001daa:	401a      	ands	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f003 0318 	and.w	r3, r3, #24
 8001db2:	4908      	ldr	r1, [pc, #32]	@ (8001dd4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001db4:	40d9      	lsrs	r1, r3
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	400b      	ands	r3, r1
 8001dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	0007ffff 	.word	0x0007ffff

08001dd8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001de8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6093      	str	r3, [r2, #8]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e10:	d101      	bne.n	8001e16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e38:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e60:	d101      	bne.n	8001e66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <LL_ADC_IsEnabled+0x18>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <LL_ADC_IsEnabled+0x1a>
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d101      	bne.n	8001eb2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d101      	bne.n	8001ed8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b089      	sub	sp, #36	@ 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e130      	b.n	8002164 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff f9c1 	bl	8001298 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff67 	bl	8001dfc <LL_ADC_IsDeepPowerDownEnabled>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d004      	beq.n	8001f3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff4d 	bl	8001dd8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ff82 	bl	8001e4c <LL_ADC_IsInternalRegulatorEnabled>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d115      	bne.n	8001f7a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ff66 	bl	8001e24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f58:	4b84      	ldr	r3, [pc, #528]	@ (800216c <HAL_ADC_Init+0x284>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	099b      	lsrs	r3, r3, #6
 8001f5e:	4a84      	ldr	r2, [pc, #528]	@ (8002170 <HAL_ADC_Init+0x288>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	099b      	lsrs	r3, r3, #6
 8001f66:	3301      	adds	r3, #1
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f6c:	e002      	b.n	8001f74 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f9      	bne.n	8001f6e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff64 	bl	8001e4c <LL_ADC_IsInternalRegulatorEnabled>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10d      	bne.n	8001fa6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8e:	f043 0210 	orr.w	r2, r3, #16
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff ff75 	bl	8001e9a <LL_ADC_REG_IsConversionOngoing>
 8001fb0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f040 80c9 	bne.w	8002152 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f040 80c5 	bne.w	8002152 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fcc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001fd0:	f043 0202 	orr.w	r2, r3, #2
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff49 	bl	8001e74 <LL_ADC_IsEnabled>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d115      	bne.n	8002014 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fe8:	4862      	ldr	r0, [pc, #392]	@ (8002174 <HAL_ADC_Init+0x28c>)
 8001fea:	f7ff ff43 	bl	8001e74 <LL_ADC_IsEnabled>
 8001fee:	4604      	mov	r4, r0
 8001ff0:	4861      	ldr	r0, [pc, #388]	@ (8002178 <HAL_ADC_Init+0x290>)
 8001ff2:	f7ff ff3f 	bl	8001e74 <LL_ADC_IsEnabled>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	431c      	orrs	r4, r3
 8001ffa:	4860      	ldr	r0, [pc, #384]	@ (800217c <HAL_ADC_Init+0x294>)
 8001ffc:	f7ff ff3a 	bl	8001e74 <LL_ADC_IsEnabled>
 8002000:	4603      	mov	r3, r0
 8002002:	4323      	orrs	r3, r4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d105      	bne.n	8002014 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	4619      	mov	r1, r3
 800200e:	485c      	ldr	r0, [pc, #368]	@ (8002180 <HAL_ADC_Init+0x298>)
 8002010:	f7ff fdde 	bl	8001bd0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	7e5b      	ldrb	r3, [r3, #25]
 8002018:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800201e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002024:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800202a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002032:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d106      	bne.n	8002050 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002046:	3b01      	subs	r3, #1
 8002048:	045b      	lsls	r3, r3, #17
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002054:	2b00      	cmp	r3, #0
 8002056:	d009      	beq.n	800206c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002064:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	4b44      	ldr	r3, [pc, #272]	@ (8002184 <HAL_ADC_Init+0x29c>)
 8002074:	4013      	ands	r3, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	69b9      	ldr	r1, [r7, #24]
 800207c:	430b      	orrs	r3, r1
 800207e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff1b 	bl	8001ec0 <LL_ADC_INJ_IsConversionOngoing>
 800208a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d13d      	bne.n	800210e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d13a      	bne.n	800210e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800209c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020a4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020b4:	f023 0302 	bic.w	r3, r3, #2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	69b9      	ldr	r1, [r7, #24]
 80020be:	430b      	orrs	r3, r1
 80020c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d118      	bne.n	80020fe <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80020d6:	f023 0304 	bic.w	r3, r3, #4
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020e2:	4311      	orrs	r1, r2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80020e8:	4311      	orrs	r1, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020ee:	430a      	orrs	r2, r1
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	611a      	str	r2, [r3, #16]
 80020fc:	e007      	b.n	800210e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0201 	bic.w	r2, r2, #1
 800210c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d10c      	bne.n	8002130 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211c:	f023 010f 	bic.w	r1, r3, #15
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	1e5a      	subs	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	631a      	str	r2, [r3, #48]	@ 0x30
 800212e:	e007      	b.n	8002140 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 020f 	bic.w	r2, r2, #15
 800213e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002144:	f023 0303 	bic.w	r3, r3, #3
 8002148:	f043 0201 	orr.w	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002150:	e007      	b.n	8002162 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002156:	f043 0210 	orr.w	r2, r3, #16
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002162:	7ffb      	ldrb	r3, [r7, #31]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3724      	adds	r7, #36	@ 0x24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd90      	pop	{r4, r7, pc}
 800216c:	20000000 	.word	0x20000000
 8002170:	053e2d63 	.word	0x053e2d63
 8002174:	50040000 	.word	0x50040000
 8002178:	50040100 	.word	0x50040100
 800217c:	50040200 	.word	0x50040200
 8002180:	50040300 	.word	0x50040300
 8002184:	fff0c007 	.word	0xfff0c007

08002188 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b0b6      	sub	sp, #216	@ 0xd8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002198:	2300      	movs	r3, #0
 800219a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x22>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e3c9      	b.n	800293e <HAL_ADC_ConfigChannel+0x7b6>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fe6f 	bl	8001e9a <LL_ADC_REG_IsConversionOngoing>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 83aa 	bne.w	8002918 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b05      	cmp	r3, #5
 80021d2:	d824      	bhi.n	800221e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	3b02      	subs	r3, #2
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d81b      	bhi.n	8002216 <HAL_ADC_ConfigChannel+0x8e>
 80021de:	a201      	add	r2, pc, #4	@ (adr r2, 80021e4 <HAL_ADC_ConfigChannel+0x5c>)
 80021e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e4:	080021f5 	.word	0x080021f5
 80021e8:	080021fd 	.word	0x080021fd
 80021ec:	08002205 	.word	0x08002205
 80021f0:	0800220d 	.word	0x0800220d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80021f4:	230c      	movs	r3, #12
 80021f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80021fa:	e010      	b.n	800221e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80021fc:	2312      	movs	r3, #18
 80021fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002202:	e00c      	b.n	800221e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002204:	2318      	movs	r3, #24
 8002206:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800220a:	e008      	b.n	800221e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800220c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002210:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002214:	e003      	b.n	800221e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002216:	2306      	movs	r3, #6
 8002218:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800221c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800222c:	f7ff fd59 	bl	8001ce2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fe30 	bl	8001e9a <LL_ADC_REG_IsConversionOngoing>
 800223a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fe3c 	bl	8001ec0 <LL_ADC_INJ_IsConversionOngoing>
 8002248:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800224c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002250:	2b00      	cmp	r3, #0
 8002252:	f040 81a4 	bne.w	800259e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002256:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 819f 	bne.w	800259e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	461a      	mov	r2, r3
 800226e:	f7ff fd64 	bl	8001d3a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	08db      	lsrs	r3, r3, #3
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	2b04      	cmp	r3, #4
 8002292:	d00a      	beq.n	80022aa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	6919      	ldr	r1, [r3, #16]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022a4:	f7ff fcc8 	bl	8001c38 <LL_ADC_SetOffset>
 80022a8:	e179      	b.n	800259e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fce5 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10a      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x14e>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fcda 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 80022cc:	4603      	mov	r3, r0
 80022ce:	0e9b      	lsrs	r3, r3, #26
 80022d0:	f003 021f 	and.w	r2, r3, #31
 80022d4:	e01e      	b.n	8002314 <HAL_ADC_ConfigChannel+0x18c>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fccf 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80022f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002304:	2320      	movs	r3, #32
 8002306:	e004      	b.n	8002312 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002308:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <HAL_ADC_ConfigChannel+0x1a4>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	0e9b      	lsrs	r3, r3, #26
 8002326:	f003 031f 	and.w	r3, r3, #31
 800232a:	e018      	b.n	800235e <HAL_ADC_ConfigChannel+0x1d6>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002340:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002344:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002348:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002350:	2320      	movs	r3, #32
 8002352:	e004      	b.n	800235e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002354:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800235e:	429a      	cmp	r2, r3
 8002360:	d106      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fc9e 	bl	8001cac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2101      	movs	r1, #1
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fc82 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10a      	bne.n	800239c <HAL_ADC_ConfigChannel+0x214>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2101      	movs	r1, #1
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fc77 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002392:	4603      	mov	r3, r0
 8002394:	0e9b      	lsrs	r3, r3, #26
 8002396:	f003 021f 	and.w	r2, r3, #31
 800239a:	e01e      	b.n	80023da <HAL_ADC_ConfigChannel+0x252>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2101      	movs	r1, #1
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fc6c 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80023ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80023c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80023ca:	2320      	movs	r3, #32
 80023cc:	e004      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80023ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d105      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x26a>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	0e9b      	lsrs	r3, r3, #26
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	e018      	b.n	8002424 <HAL_ADC_ConfigChannel+0x29c>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002406:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800240a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800240e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002416:	2320      	movs	r3, #32
 8002418:	e004      	b.n	8002424 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800241a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002424:	429a      	cmp	r2, r3
 8002426:	d106      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2200      	movs	r2, #0
 800242e:	2101      	movs	r1, #1
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fc3b 	bl	8001cac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2102      	movs	r1, #2
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fc1f 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002442:	4603      	mov	r3, r0
 8002444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10a      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x2da>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2102      	movs	r1, #2
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fc14 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002458:	4603      	mov	r3, r0
 800245a:	0e9b      	lsrs	r3, r3, #26
 800245c:	f003 021f 	and.w	r2, r3, #31
 8002460:	e01e      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x318>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2102      	movs	r1, #2
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fc09 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002480:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002484:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002488:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002490:	2320      	movs	r3, #32
 8002492:	e004      	b.n	800249e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002494:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d105      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x330>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	0e9b      	lsrs	r3, r3, #26
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	e014      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x35a>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80024c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80024cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80024d4:	2320      	movs	r3, #32
 80024d6:	e004      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80024d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d106      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2200      	movs	r2, #0
 80024ec:	2102      	movs	r1, #2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fbdc 	bl	8001cac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2103      	movs	r1, #3
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fbc0 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002500:	4603      	mov	r3, r0
 8002502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10a      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x398>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2103      	movs	r1, #3
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fbb5 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002516:	4603      	mov	r3, r0
 8002518:	0e9b      	lsrs	r3, r3, #26
 800251a:	f003 021f 	and.w	r2, r3, #31
 800251e:	e017      	b.n	8002550 <HAL_ADC_ConfigChannel+0x3c8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2103      	movs	r1, #3
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fbaa 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 800252c:	4603      	mov	r3, r0
 800252e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800253a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800253c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002542:	2320      	movs	r3, #32
 8002544:	e003      	b.n	800254e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002546:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x3e0>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	0e9b      	lsrs	r3, r3, #26
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	e011      	b.n	800258c <HAL_ADC_ConfigChannel+0x404>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002576:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002578:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800257a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002580:	2320      	movs	r3, #32
 8002582:	e003      	b.n	800258c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002584:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800258c:	429a      	cmp	r2, r3
 800258e:	d106      	bne.n	800259e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2200      	movs	r2, #0
 8002596:	2103      	movs	r1, #3
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fb87 	bl	8001cac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fc66 	bl	8001e74 <LL_ADC_IsEnabled>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f040 8140 	bne.w	8002830 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6819      	ldr	r1, [r3, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	461a      	mov	r2, r3
 80025be:	f7ff fbe7 	bl	8001d90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	4a8f      	ldr	r2, [pc, #572]	@ (8002804 <HAL_ADC_ConfigChannel+0x67c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	f040 8131 	bne.w	8002830 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10b      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x46e>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	0e9b      	lsrs	r3, r3, #26
 80025e4:	3301      	adds	r3, #1
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	2b09      	cmp	r3, #9
 80025ec:	bf94      	ite	ls
 80025ee:	2301      	movls	r3, #1
 80025f0:	2300      	movhi	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	e019      	b.n	800262a <HAL_ADC_ConfigChannel+0x4a2>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002606:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002608:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800260e:	2320      	movs	r3, #32
 8002610:	e003      	b.n	800261a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002614:	fab3 f383 	clz	r3, r3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	3301      	adds	r3, #1
 800261c:	f003 031f 	and.w	r3, r3, #31
 8002620:	2b09      	cmp	r3, #9
 8002622:	bf94      	ite	ls
 8002624:	2301      	movls	r3, #1
 8002626:	2300      	movhi	r3, #0
 8002628:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800262a:	2b00      	cmp	r3, #0
 800262c:	d079      	beq.n	8002722 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002636:	2b00      	cmp	r3, #0
 8002638:	d107      	bne.n	800264a <HAL_ADC_ConfigChannel+0x4c2>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	0e9b      	lsrs	r3, r3, #26
 8002640:	3301      	adds	r3, #1
 8002642:	069b      	lsls	r3, r3, #26
 8002644:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002648:	e015      	b.n	8002676 <HAL_ADC_ConfigChannel+0x4ee>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002658:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800265a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800265c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002662:	2320      	movs	r3, #32
 8002664:	e003      	b.n	800266e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002666:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002668:	fab3 f383 	clz	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	3301      	adds	r3, #1
 8002670:	069b      	lsls	r3, r3, #26
 8002672:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x50e>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	0e9b      	lsrs	r3, r3, #26
 8002688:	3301      	adds	r3, #1
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	2101      	movs	r1, #1
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	e017      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x53e>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80026a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026a6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80026a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80026ae:	2320      	movs	r3, #32
 80026b0:	e003      	b.n	80026ba <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80026b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	2101      	movs	r1, #1
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	ea42 0103 	orr.w	r1, r2, r3
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10a      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x564>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	0e9b      	lsrs	r3, r3, #26
 80026dc:	3301      	adds	r3, #1
 80026de:	f003 021f 	and.w	r2, r3, #31
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	051b      	lsls	r3, r3, #20
 80026ea:	e018      	b.n	800271e <HAL_ADC_ConfigChannel+0x596>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f4:	fa93 f3a3 	rbit	r3, r3
 80026f8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80026fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80026fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002704:	2320      	movs	r3, #32
 8002706:	e003      	b.n	8002710 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	3301      	adds	r3, #1
 8002712:	f003 021f 	and.w	r2, r3, #31
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271e:	430b      	orrs	r3, r1
 8002720:	e081      	b.n	8002826 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272a:	2b00      	cmp	r3, #0
 800272c:	d107      	bne.n	800273e <HAL_ADC_ConfigChannel+0x5b6>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	0e9b      	lsrs	r3, r3, #26
 8002734:	3301      	adds	r3, #1
 8002736:	069b      	lsls	r3, r3, #26
 8002738:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800273c:	e015      	b.n	800276a <HAL_ADC_ConfigChannel+0x5e2>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002756:	2320      	movs	r3, #32
 8002758:	e003      	b.n	8002762 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800275a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	3301      	adds	r3, #1
 8002764:	069b      	lsls	r3, r3, #26
 8002766:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_ADC_ConfigChannel+0x602>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	0e9b      	lsrs	r3, r3, #26
 800277c:	3301      	adds	r3, #1
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	2101      	movs	r1, #1
 8002784:	fa01 f303 	lsl.w	r3, r1, r3
 8002788:	e017      	b.n	80027ba <HAL_ADC_ConfigChannel+0x632>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	61bb      	str	r3, [r7, #24]
  return result;
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80027a2:	2320      	movs	r3, #32
 80027a4:	e003      	b.n	80027ae <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	fab3 f383 	clz	r3, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	3301      	adds	r3, #1
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	2101      	movs	r1, #1
 80027b6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ba:	ea42 0103 	orr.w	r1, r2, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10d      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x65e>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	0e9b      	lsrs	r3, r3, #26
 80027d0:	3301      	adds	r3, #1
 80027d2:	f003 021f 	and.w	r2, r3, #31
 80027d6:	4613      	mov	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	4413      	add	r3, r2
 80027dc:	3b1e      	subs	r3, #30
 80027de:	051b      	lsls	r3, r3, #20
 80027e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027e4:	e01e      	b.n	8002824 <HAL_ADC_ConfigChannel+0x69c>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	60fb      	str	r3, [r7, #12]
  return result;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d104      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80027fe:	2320      	movs	r3, #32
 8002800:	e006      	b.n	8002810 <HAL_ADC_ConfigChannel+0x688>
 8002802:	bf00      	nop
 8002804:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	3301      	adds	r3, #1
 8002812:	f003 021f 	and.w	r2, r3, #31
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	3b1e      	subs	r3, #30
 800281e:	051b      	lsls	r3, r3, #20
 8002820:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002824:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800282a:	4619      	mov	r1, r3
 800282c:	f7ff fa85 	bl	8001d3a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b44      	ldr	r3, [pc, #272]	@ (8002948 <HAL_ADC_ConfigChannel+0x7c0>)
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d07a      	beq.n	8002932 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800283c:	4843      	ldr	r0, [pc, #268]	@ (800294c <HAL_ADC_ConfigChannel+0x7c4>)
 800283e:	f7ff f9ed 	bl	8001c1c <LL_ADC_GetCommonPathInternalCh>
 8002842:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a41      	ldr	r2, [pc, #260]	@ (8002950 <HAL_ADC_ConfigChannel+0x7c8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d12c      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002850:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002854:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d126      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a3c      	ldr	r2, [pc, #240]	@ (8002954 <HAL_ADC_ConfigChannel+0x7cc>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d004      	beq.n	8002870 <HAL_ADC_ConfigChannel+0x6e8>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a3b      	ldr	r2, [pc, #236]	@ (8002958 <HAL_ADC_ConfigChannel+0x7d0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d15d      	bne.n	800292c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002870:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002874:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002878:	4619      	mov	r1, r3
 800287a:	4834      	ldr	r0, [pc, #208]	@ (800294c <HAL_ADC_ConfigChannel+0x7c4>)
 800287c:	f7ff f9bb 	bl	8001bf6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002880:	4b36      	ldr	r3, [pc, #216]	@ (800295c <HAL_ADC_ConfigChannel+0x7d4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	099b      	lsrs	r3, r3, #6
 8002886:	4a36      	ldr	r2, [pc, #216]	@ (8002960 <HAL_ADC_ConfigChannel+0x7d8>)
 8002888:	fba2 2303 	umull	r2, r3, r2, r3
 800288c:	099b      	lsrs	r3, r3, #6
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	4613      	mov	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800289a:	e002      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	3b01      	subs	r3, #1
 80028a0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f9      	bne.n	800289c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028a8:	e040      	b.n	800292c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002964 <HAL_ADC_ConfigChannel+0x7dc>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d118      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d112      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a23      	ldr	r2, [pc, #140]	@ (8002954 <HAL_ADC_ConfigChannel+0x7cc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d004      	beq.n	80028d4 <HAL_ADC_ConfigChannel+0x74c>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a22      	ldr	r2, [pc, #136]	@ (8002958 <HAL_ADC_ConfigChannel+0x7d0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d12d      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028dc:	4619      	mov	r1, r3
 80028de:	481b      	ldr	r0, [pc, #108]	@ (800294c <HAL_ADC_ConfigChannel+0x7c4>)
 80028e0:	f7ff f989 	bl	8001bf6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028e4:	e024      	b.n	8002930 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002968 <HAL_ADC_ConfigChannel+0x7e0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d120      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d11a      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a14      	ldr	r2, [pc, #80]	@ (8002954 <HAL_ADC_ConfigChannel+0x7cc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d115      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002906:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800290a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800290e:	4619      	mov	r1, r3
 8002910:	480e      	ldr	r0, [pc, #56]	@ (800294c <HAL_ADC_ConfigChannel+0x7c4>)
 8002912:	f7ff f970 	bl	8001bf6 <LL_ADC_SetCommonPathInternalCh>
 8002916:	e00c      	b.n	8002932 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291c:	f043 0220 	orr.w	r2, r3, #32
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800292a:	e002      	b.n	8002932 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800292c:	bf00      	nop
 800292e:	e000      	b.n	8002932 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002930:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800293a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800293e:	4618      	mov	r0, r3
 8002940:	37d8      	adds	r7, #216	@ 0xd8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	80080000 	.word	0x80080000
 800294c:	50040300 	.word	0x50040300
 8002950:	c7520000 	.word	0xc7520000
 8002954:	50040000 	.word	0x50040000
 8002958:	50040200 	.word	0x50040200
 800295c:	20000000 	.word	0x20000000
 8002960:	053e2d63 	.word	0x053e2d63
 8002964:	cb840000 	.word	0xcb840000
 8002968:	80000001 	.word	0x80000001

0800296c <LL_ADC_IsEnabled>:
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <LL_ADC_IsEnabled+0x18>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <LL_ADC_IsEnabled+0x1a>
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <LL_ADC_REG_IsConversionOngoing>:
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d101      	bne.n	80029aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b09f      	sub	sp, #124	@ 0x7c
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e093      	b.n	8002afe <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80029de:	2300      	movs	r3, #0
 80029e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80029e2:	2300      	movs	r3, #0
 80029e4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a47      	ldr	r2, [pc, #284]	@ (8002b08 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d102      	bne.n	80029f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029f0:	4b46      	ldr	r3, [pc, #280]	@ (8002b0c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	e001      	b.n	80029fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10b      	bne.n	8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e072      	b.n	8002afe <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ffb9 	bl	8002992 <LL_ADC_REG_IsConversionOngoing>
 8002a20:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ffb3 	bl	8002992 <LL_ADC_REG_IsConversionOngoing>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d154      	bne.n	8002adc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002a32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d151      	bne.n	8002adc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a38:	4b35      	ldr	r3, [pc, #212]	@ (8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002a3a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d02c      	beq.n	8002a9e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a56:	035b      	lsls	r3, r3, #13
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a5e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a60:	4829      	ldr	r0, [pc, #164]	@ (8002b08 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a62:	f7ff ff83 	bl	800296c <LL_ADC_IsEnabled>
 8002a66:	4604      	mov	r4, r0
 8002a68:	4828      	ldr	r0, [pc, #160]	@ (8002b0c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a6a:	f7ff ff7f 	bl	800296c <LL_ADC_IsEnabled>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	431c      	orrs	r4, r3
 8002a72:	4828      	ldr	r0, [pc, #160]	@ (8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002a74:	f7ff ff7a 	bl	800296c <LL_ADC_IsEnabled>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4323      	orrs	r3, r4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d137      	bne.n	8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a88:	f023 030f 	bic.w	r3, r3, #15
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	6811      	ldr	r1, [r2, #0]
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	6892      	ldr	r2, [r2, #8]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	431a      	orrs	r2, r3
 8002a98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a9a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a9c:	e028      	b.n	8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aa8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aaa:	4817      	ldr	r0, [pc, #92]	@ (8002b08 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002aac:	f7ff ff5e 	bl	800296c <LL_ADC_IsEnabled>
 8002ab0:	4604      	mov	r4, r0
 8002ab2:	4816      	ldr	r0, [pc, #88]	@ (8002b0c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ab4:	f7ff ff5a 	bl	800296c <LL_ADC_IsEnabled>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	431c      	orrs	r4, r3
 8002abc:	4815      	ldr	r0, [pc, #84]	@ (8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002abe:	f7ff ff55 	bl	800296c <LL_ADC_IsEnabled>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4323      	orrs	r3, r4
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d112      	bne.n	8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002aca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002ad2:	f023 030f 	bic.w	r3, r3, #15
 8002ad6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ad8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ada:	e009      	b.n	8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae0:	f043 0220 	orr.w	r2, r3, #32
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002aee:	e000      	b.n	8002af2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002af0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002afa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	377c      	adds	r7, #124	@ 0x7c
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd90      	pop	{r4, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	50040000 	.word	0x50040000
 8002b0c:	50040100 	.word	0x50040100
 8002b10:	50040300 	.word	0x50040300
 8002b14:	50040200 	.word	0x50040200

08002b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b28:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <__NVIC_SetPriorityGrouping+0x44>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b34:	4013      	ands	r3, r2
 8002b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b4a:	4a04      	ldr	r2, [pc, #16]	@ (8002b5c <__NVIC_SetPriorityGrouping+0x44>)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	60d3      	str	r3, [r2, #12]
}
 8002b50:	bf00      	nop
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b64:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <__NVIC_GetPriorityGrouping+0x18>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	0a1b      	lsrs	r3, r3, #8
 8002b6a:	f003 0307 	and.w	r3, r3, #7
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	6039      	str	r1, [r7, #0]
 8002b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	db0a      	blt.n	8002ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	490c      	ldr	r1, [pc, #48]	@ (8002bc8 <__NVIC_SetPriority+0x4c>)
 8002b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9a:	0112      	lsls	r2, r2, #4
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba4:	e00a      	b.n	8002bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	4908      	ldr	r1, [pc, #32]	@ (8002bcc <__NVIC_SetPriority+0x50>)
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	3b04      	subs	r3, #4
 8002bb4:	0112      	lsls	r2, r2, #4
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	440b      	add	r3, r1
 8002bba:	761a      	strb	r2, [r3, #24]
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000e100 	.word	0xe000e100
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b089      	sub	sp, #36	@ 0x24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f1c3 0307 	rsb	r3, r3, #7
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	bf28      	it	cs
 8002bee:	2304      	movcs	r3, #4
 8002bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	d902      	bls.n	8002c00 <NVIC_EncodePriority+0x30>
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3b03      	subs	r3, #3
 8002bfe:	e000      	b.n	8002c02 <NVIC_EncodePriority+0x32>
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	f04f 32ff 	mov.w	r2, #4294967295
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	401a      	ands	r2, r3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c18:	f04f 31ff 	mov.w	r1, #4294967295
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c22:	43d9      	mvns	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c28:	4313      	orrs	r3, r2
         );
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3724      	adds	r7, #36	@ 0x24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c48:	d301      	bcc.n	8002c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00f      	b.n	8002c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c78 <SysTick_Config+0x40>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c56:	210f      	movs	r1, #15
 8002c58:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5c:	f7ff ff8e 	bl	8002b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c60:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <SysTick_Config+0x40>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c66:	4b04      	ldr	r3, [pc, #16]	@ (8002c78 <SysTick_Config+0x40>)
 8002c68:	2207      	movs	r2, #7
 8002c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	e000e010 	.word	0xe000e010

08002c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ff47 	bl	8002b18 <__NVIC_SetPriorityGrouping>
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4603      	mov	r3, r0
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca4:	f7ff ff5c 	bl	8002b60 <__NVIC_GetPriorityGrouping>
 8002ca8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	6978      	ldr	r0, [r7, #20]
 8002cb0:	f7ff ff8e 	bl	8002bd0 <NVIC_EncodePriority>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff5d 	bl	8002b7c <__NVIC_SetPriority>
}
 8002cc2:	bf00      	nop
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff ffb0 	bl	8002c38 <SysTick_Config>
 8002cd8:	4603      	mov	r3, r0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf2:	e17f      	b.n	8002ff4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	4013      	ands	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8171 	beq.w	8002fee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d005      	beq.n	8002d24 <HAL_GPIO_Init+0x40>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d130      	bne.n	8002d86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	2203      	movs	r2, #3
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4013      	ands	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	091b      	lsrs	r3, r3, #4
 8002d70:	f003 0201 	and.w	r2, r3, #1
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d118      	bne.n	8002dc4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d98:	2201      	movs	r2, #1
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4013      	ands	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	08db      	lsrs	r3, r3, #3
 8002dae:	f003 0201 	and.w	r2, r3, #1
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d017      	beq.n	8002e00 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2203      	movs	r2, #3
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d123      	bne.n	8002e54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	08da      	lsrs	r2, r3, #3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3208      	adds	r2, #8
 8002e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	220f      	movs	r2, #15
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	08da      	lsrs	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3208      	adds	r2, #8
 8002e4e:	6939      	ldr	r1, [r7, #16]
 8002e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0203 	and.w	r2, r3, #3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80ac 	beq.w	8002fee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e96:	4b5f      	ldr	r3, [pc, #380]	@ (8003014 <HAL_GPIO_Init+0x330>)
 8002e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9a:	4a5e      	ldr	r2, [pc, #376]	@ (8003014 <HAL_GPIO_Init+0x330>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ea2:	4b5c      	ldr	r3, [pc, #368]	@ (8003014 <HAL_GPIO_Init+0x330>)
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002eae:	4a5a      	ldr	r2, [pc, #360]	@ (8003018 <HAL_GPIO_Init+0x334>)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	089b      	lsrs	r3, r3, #2
 8002eb4:	3302      	adds	r3, #2
 8002eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	220f      	movs	r2, #15
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ed8:	d025      	beq.n	8002f26 <HAL_GPIO_Init+0x242>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a4f      	ldr	r2, [pc, #316]	@ (800301c <HAL_GPIO_Init+0x338>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d01f      	beq.n	8002f22 <HAL_GPIO_Init+0x23e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a4e      	ldr	r2, [pc, #312]	@ (8003020 <HAL_GPIO_Init+0x33c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d019      	beq.n	8002f1e <HAL_GPIO_Init+0x23a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a4d      	ldr	r2, [pc, #308]	@ (8003024 <HAL_GPIO_Init+0x340>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <HAL_GPIO_Init+0x236>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a4c      	ldr	r2, [pc, #304]	@ (8003028 <HAL_GPIO_Init+0x344>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00d      	beq.n	8002f16 <HAL_GPIO_Init+0x232>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4b      	ldr	r2, [pc, #300]	@ (800302c <HAL_GPIO_Init+0x348>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d007      	beq.n	8002f12 <HAL_GPIO_Init+0x22e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4a      	ldr	r2, [pc, #296]	@ (8003030 <HAL_GPIO_Init+0x34c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d101      	bne.n	8002f0e <HAL_GPIO_Init+0x22a>
 8002f0a:	2306      	movs	r3, #6
 8002f0c:	e00c      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f0e:	2307      	movs	r3, #7
 8002f10:	e00a      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f12:	2305      	movs	r3, #5
 8002f14:	e008      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f16:	2304      	movs	r3, #4
 8002f18:	e006      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e004      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e002      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_GPIO_Init+0x244>
 8002f26:	2300      	movs	r3, #0
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	f002 0203 	and.w	r2, r2, #3
 8002f2e:	0092      	lsls	r2, r2, #2
 8002f30:	4093      	lsls	r3, r2
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f38:	4937      	ldr	r1, [pc, #220]	@ (8003018 <HAL_GPIO_Init+0x334>)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	089b      	lsrs	r3, r3, #2
 8002f3e:	3302      	adds	r3, #2
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f46:	4b3b      	ldr	r3, [pc, #236]	@ (8003034 <HAL_GPIO_Init+0x350>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4013      	ands	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f6a:	4a32      	ldr	r2, [pc, #200]	@ (8003034 <HAL_GPIO_Init+0x350>)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f70:	4b30      	ldr	r3, [pc, #192]	@ (8003034 <HAL_GPIO_Init+0x350>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f94:	4a27      	ldr	r2, [pc, #156]	@ (8003034 <HAL_GPIO_Init+0x350>)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f9a:	4b26      	ldr	r3, [pc, #152]	@ (8003034 <HAL_GPIO_Init+0x350>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8003034 <HAL_GPIO_Init+0x350>)
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003034 <HAL_GPIO_Init+0x350>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fe8:	4a12      	ldr	r2, [pc, #72]	@ (8003034 <HAL_GPIO_Init+0x350>)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f47f ae78 	bne.w	8002cf4 <HAL_GPIO_Init+0x10>
  }
}
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	371c      	adds	r7, #28
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000
 8003018:	40010000 	.word	0x40010000
 800301c:	48000400 	.word	0x48000400
 8003020:	48000800 	.word	0x48000800
 8003024:	48000c00 	.word	0x48000c00
 8003028:	48001000 	.word	0x48001000
 800302c:	48001400 	.word	0x48001400
 8003030:	48001800 	.word	0x48001800
 8003034:	40010400 	.word	0x40010400

08003038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	807b      	strh	r3, [r7, #2]
 8003044:	4613      	mov	r3, r2
 8003046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003048:	787b      	ldrb	r3, [r7, #1]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800304e:	887a      	ldrh	r2, [r7, #2]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003054:	e002      	b.n	800305c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003056:	887a      	ldrh	r2, [r7, #2]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e08d      	b.n	8003196 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fe f9d0 	bl	8001434 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2224      	movs	r2, #36	@ 0x24
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d107      	bne.n	80030e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	e006      	b.n	80030f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80030ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d108      	bne.n	800310a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003106:	605a      	str	r2, [r3, #4]
 8003108:	e007      	b.n	800311a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003118:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003128:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800312c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800313c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69d9      	ldr	r1, [r3, #28]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1a      	ldr	r2, [r3, #32]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d138      	bne.n	8003226 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031be:	2302      	movs	r3, #2
 80031c0:	e032      	b.n	8003228 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2224      	movs	r2, #36	@ 0x24
 80031ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031f0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6819      	ldr	r1, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0201 	orr.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	e000      	b.n	8003228 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003226:	2302      	movs	r3, #2
  }
}
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b20      	cmp	r3, #32
 8003248:	d139      	bne.n	80032be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003254:	2302      	movs	r3, #2
 8003256:	e033      	b.n	80032c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2224      	movs	r2, #36	@ 0x24
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0201 	bic.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003286:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	021b      	lsls	r3, r3, #8
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0201 	orr.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e000      	b.n	80032c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032be:	2302      	movs	r3, #2
  }
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032d0:	4b04      	ldr	r3, [pc, #16]	@ (80032e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80032d8:	4618      	mov	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40007000 	.word	0x40007000

080032e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032f6:	d130      	bne.n	800335a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032f8:	4b23      	ldr	r3, [pc, #140]	@ (8003388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003304:	d038      	beq.n	8003378 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003306:	4b20      	ldr	r3, [pc, #128]	@ (8003388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800330e:	4a1e      	ldr	r2, [pc, #120]	@ (8003388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003310:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003314:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003316:	4b1d      	ldr	r3, [pc, #116]	@ (800338c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2232      	movs	r2, #50	@ 0x32
 800331c:	fb02 f303 	mul.w	r3, r2, r3
 8003320:	4a1b      	ldr	r2, [pc, #108]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	0c9b      	lsrs	r3, r3, #18
 8003328:	3301      	adds	r3, #1
 800332a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800332c:	e002      	b.n	8003334 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3b01      	subs	r3, #1
 8003332:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003334:	4b14      	ldr	r3, [pc, #80]	@ (8003388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800333c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003340:	d102      	bne.n	8003348 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f2      	bne.n	800332e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003348:	4b0f      	ldr	r3, [pc, #60]	@ (8003388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003354:	d110      	bne.n	8003378 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e00f      	b.n	800337a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800335a:	4b0b      	ldr	r3, [pc, #44]	@ (8003388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003366:	d007      	beq.n	8003378 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003368:	4b07      	ldr	r3, [pc, #28]	@ (8003388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003370:	4a05      	ldr	r2, [pc, #20]	@ (8003388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003372:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003376:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40007000 	.word	0x40007000
 800338c:	20000000 	.word	0x20000000
 8003390:	431bde83 	.word	0x431bde83

08003394 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e3ca      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a6:	4b97      	ldr	r3, [pc, #604]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033b0:	4b94      	ldr	r3, [pc, #592]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 80e4 	beq.w	8003590 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <HAL_RCC_OscConfig+0x4a>
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	2b0c      	cmp	r3, #12
 80033d2:	f040 808b 	bne.w	80034ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	f040 8087 	bne.w	80034ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033de:	4b89      	ldr	r3, [pc, #548]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d005      	beq.n	80033f6 <HAL_RCC_OscConfig+0x62>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e3a2      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1a      	ldr	r2, [r3, #32]
 80033fa:	4b82      	ldr	r3, [pc, #520]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d004      	beq.n	8003410 <HAL_RCC_OscConfig+0x7c>
 8003406:	4b7f      	ldr	r3, [pc, #508]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800340e:	e005      	b.n	800341c <HAL_RCC_OscConfig+0x88>
 8003410:	4b7c      	ldr	r3, [pc, #496]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003412:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800341c:	4293      	cmp	r3, r2
 800341e:	d223      	bcs.n	8003468 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fd55 	bl	8003ed4 <RCC_SetFlashLatencyFromMSIRange>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e383      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003434:	4b73      	ldr	r3, [pc, #460]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a72      	ldr	r2, [pc, #456]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 800343a:	f043 0308 	orr.w	r3, r3, #8
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	4b70      	ldr	r3, [pc, #448]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	496d      	ldr	r1, [pc, #436]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003452:	4b6c      	ldr	r3, [pc, #432]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	4968      	ldr	r1, [pc, #416]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
 8003466:	e025      	b.n	80034b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003468:	4b66      	ldr	r3, [pc, #408]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a65      	ldr	r2, [pc, #404]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 800346e:	f043 0308 	orr.w	r3, r3, #8
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b63      	ldr	r3, [pc, #396]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	4960      	ldr	r1, [pc, #384]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003486:	4b5f      	ldr	r3, [pc, #380]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	495b      	ldr	r1, [pc, #364]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003496:	4313      	orrs	r3, r2
 8003498:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d109      	bne.n	80034b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 fd15 	bl	8003ed4 <RCC_SetFlashLatencyFromMSIRange>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e343      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034b4:	f000 fc4a 	bl	8003d4c <HAL_RCC_GetSysClockFreq>
 80034b8:	4602      	mov	r2, r0
 80034ba:	4b52      	ldr	r3, [pc, #328]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	091b      	lsrs	r3, r3, #4
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	4950      	ldr	r1, [pc, #320]	@ (8003608 <HAL_RCC_OscConfig+0x274>)
 80034c6:	5ccb      	ldrb	r3, [r1, r3]
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
 80034d0:	4a4e      	ldr	r2, [pc, #312]	@ (800360c <HAL_RCC_OscConfig+0x278>)
 80034d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003610 <HAL_RCC_OscConfig+0x27c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fe faf9 	bl	8001ad0 <HAL_InitTick>
 80034de:	4603      	mov	r3, r0
 80034e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d052      	beq.n	800358e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	e327      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d032      	beq.n	800355a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034f4:	4b43      	ldr	r3, [pc, #268]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a42      	ldr	r2, [pc, #264]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003500:	f7fe fb36 	bl	8001b70 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003508:	f7fe fb32 	bl	8001b70 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e310      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800351a:	4b3a      	ldr	r3, [pc, #232]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003526:	4b37      	ldr	r3, [pc, #220]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a36      	ldr	r2, [pc, #216]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 800352c:	f043 0308 	orr.w	r3, r3, #8
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	4b34      	ldr	r3, [pc, #208]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	4931      	ldr	r1, [pc, #196]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003540:	4313      	orrs	r3, r2
 8003542:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003544:	4b2f      	ldr	r3, [pc, #188]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	021b      	lsls	r3, r3, #8
 8003552:	492c      	ldr	r1, [pc, #176]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003554:	4313      	orrs	r3, r2
 8003556:	604b      	str	r3, [r1, #4]
 8003558:	e01a      	b.n	8003590 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800355a:	4b2a      	ldr	r3, [pc, #168]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a29      	ldr	r2, [pc, #164]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003566:	f7fe fb03 	bl	8001b70 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800356e:	f7fe faff 	bl	8001b70 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e2dd      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003580:	4b20      	ldr	r3, [pc, #128]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1f0      	bne.n	800356e <HAL_RCC_OscConfig+0x1da>
 800358c:	e000      	b.n	8003590 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800358e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d074      	beq.n	8003686 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d005      	beq.n	80035ae <HAL_RCC_OscConfig+0x21a>
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	2b0c      	cmp	r3, #12
 80035a6:	d10e      	bne.n	80035c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d10b      	bne.n	80035c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ae:	4b15      	ldr	r3, [pc, #84]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d064      	beq.n	8003684 <HAL_RCC_OscConfig+0x2f0>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d160      	bne.n	8003684 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e2ba      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ce:	d106      	bne.n	80035de <HAL_RCC_OscConfig+0x24a>
 80035d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80035d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	e026      	b.n	800362c <HAL_RCC_OscConfig+0x298>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035e6:	d115      	bne.n	8003614 <HAL_RCC_OscConfig+0x280>
 80035e8:	4b06      	ldr	r3, [pc, #24]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a05      	ldr	r2, [pc, #20]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80035ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	4b03      	ldr	r3, [pc, #12]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a02      	ldr	r2, [pc, #8]	@ (8003604 <HAL_RCC_OscConfig+0x270>)
 80035fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	e014      	b.n	800362c <HAL_RCC_OscConfig+0x298>
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000
 8003608:	080069e8 	.word	0x080069e8
 800360c:	20000000 	.word	0x20000000
 8003610:	20000004 	.word	0x20000004
 8003614:	4ba0      	ldr	r3, [pc, #640]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a9f      	ldr	r2, [pc, #636]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 800361a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4b9d      	ldr	r3, [pc, #628]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a9c      	ldr	r2, [pc, #624]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800362a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fe fa9c 	bl	8001b70 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fe fa98 	bl	8001b70 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	@ 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e276      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364e:	4b92      	ldr	r3, [pc, #584]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0x2a8>
 800365a:	e014      	b.n	8003686 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fe fa88 	bl	8001b70 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003664:	f7fe fa84 	bl	8001b70 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	@ 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e262      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003676:	4b88      	ldr	r3, [pc, #544]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x2d0>
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d060      	beq.n	8003754 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	2b04      	cmp	r3, #4
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_OscConfig+0x310>
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2b0c      	cmp	r3, #12
 800369c:	d119      	bne.n	80036d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d116      	bne.n	80036d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036a4:	4b7c      	ldr	r3, [pc, #496]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <HAL_RCC_OscConfig+0x328>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e23f      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036bc:	4b76      	ldr	r3, [pc, #472]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	061b      	lsls	r3, r3, #24
 80036ca:	4973      	ldr	r1, [pc, #460]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036d0:	e040      	b.n	8003754 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d023      	beq.n	8003722 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036da:	4b6f      	ldr	r3, [pc, #444]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a6e      	ldr	r2, [pc, #440]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80036e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e6:	f7fe fa43 	bl	8001b70 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ee:	f7fe fa3f 	bl	8001b70 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e21d      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003700:	4b65      	ldr	r3, [pc, #404]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370c:	4b62      	ldr	r3, [pc, #392]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	061b      	lsls	r3, r3, #24
 800371a:	495f      	ldr	r1, [pc, #380]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
 8003720:	e018      	b.n	8003754 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003722:	4b5d      	ldr	r3, [pc, #372]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a5c      	ldr	r2, [pc, #368]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003728:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800372c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372e:	f7fe fa1f 	bl	8001b70 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003736:	f7fe fa1b 	bl	8001b70 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e1f9      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003748:	4b53      	ldr	r3, [pc, #332]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f0      	bne.n	8003736 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d03c      	beq.n	80037da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d01c      	beq.n	80037a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003768:	4b4b      	ldr	r3, [pc, #300]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 800376a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800376e:	4a4a      	ldr	r2, [pc, #296]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003778:	f7fe f9fa 	bl	8001b70 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003780:	f7fe f9f6 	bl	8001b70 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e1d4      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003792:	4b41      	ldr	r3, [pc, #260]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0ef      	beq.n	8003780 <HAL_RCC_OscConfig+0x3ec>
 80037a0:	e01b      	b.n	80037da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80037a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b2:	f7fe f9dd 	bl	8001b70 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ba:	f7fe f9d9 	bl	8001b70 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e1b7      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037cc:	4b32      	ldr	r3, [pc, #200]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80037ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1ef      	bne.n	80037ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 80a6 	beq.w	8003934 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e8:	2300      	movs	r3, #0
 80037ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80037ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10d      	bne.n	8003814 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f8:	4b27      	ldr	r3, [pc, #156]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fc:	4a26      	ldr	r2, [pc, #152]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 80037fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003802:	6593      	str	r3, [r2, #88]	@ 0x58
 8003804:	4b24      	ldr	r3, [pc, #144]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003810:	2301      	movs	r3, #1
 8003812:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003814:	4b21      	ldr	r3, [pc, #132]	@ (800389c <HAL_RCC_OscConfig+0x508>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381c:	2b00      	cmp	r3, #0
 800381e:	d118      	bne.n	8003852 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003820:	4b1e      	ldr	r3, [pc, #120]	@ (800389c <HAL_RCC_OscConfig+0x508>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1d      	ldr	r2, [pc, #116]	@ (800389c <HAL_RCC_OscConfig+0x508>)
 8003826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800382a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382c:	f7fe f9a0 	bl	8001b70 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003834:	f7fe f99c 	bl	8001b70 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e17a      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003846:	4b15      	ldr	r3, [pc, #84]	@ (800389c <HAL_RCC_OscConfig+0x508>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f0      	beq.n	8003834 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d108      	bne.n	800386c <HAL_RCC_OscConfig+0x4d8>
 800385a:	4b0f      	ldr	r3, [pc, #60]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003860:	4a0d      	ldr	r2, [pc, #52]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800386a:	e029      	b.n	80038c0 <HAL_RCC_OscConfig+0x52c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b05      	cmp	r3, #5
 8003872:	d115      	bne.n	80038a0 <HAL_RCC_OscConfig+0x50c>
 8003874:	4b08      	ldr	r3, [pc, #32]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387a:	4a07      	ldr	r2, [pc, #28]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 800387c:	f043 0304 	orr.w	r3, r3, #4
 8003880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003884:	4b04      	ldr	r3, [pc, #16]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388a:	4a03      	ldr	r2, [pc, #12]	@ (8003898 <HAL_RCC_OscConfig+0x504>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003894:	e014      	b.n	80038c0 <HAL_RCC_OscConfig+0x52c>
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000
 800389c:	40007000 	.word	0x40007000
 80038a0:	4b9c      	ldr	r3, [pc, #624]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a6:	4a9b      	ldr	r2, [pc, #620]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 80038a8:	f023 0301 	bic.w	r3, r3, #1
 80038ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038b0:	4b98      	ldr	r3, [pc, #608]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b6:	4a97      	ldr	r2, [pc, #604]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 80038b8:	f023 0304 	bic.w	r3, r3, #4
 80038bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d016      	beq.n	80038f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c8:	f7fe f952 	bl	8001b70 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d0:	f7fe f94e 	bl	8001b70 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e12a      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ed      	beq.n	80038d0 <HAL_RCC_OscConfig+0x53c>
 80038f4:	e015      	b.n	8003922 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f6:	f7fe f93b 	bl	8001b70 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038fc:	e00a      	b.n	8003914 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fe:	f7fe f937 	bl	8001b70 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f241 3288 	movw	r2, #5000	@ 0x1388
 800390c:	4293      	cmp	r3, r2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e113      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003914:	4b7f      	ldr	r3, [pc, #508]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 8003916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1ed      	bne.n	80038fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003922:	7ffb      	ldrb	r3, [r7, #31]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d105      	bne.n	8003934 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003928:	4b7a      	ldr	r3, [pc, #488]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 800392a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392c:	4a79      	ldr	r2, [pc, #484]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 800392e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003932:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 80fe 	beq.w	8003b3a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003942:	2b02      	cmp	r3, #2
 8003944:	f040 80d0 	bne.w	8003ae8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003948:	4b72      	ldr	r3, [pc, #456]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f003 0203 	and.w	r2, r3, #3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003958:	429a      	cmp	r2, r3
 800395a:	d130      	bne.n	80039be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003966:	3b01      	subs	r3, #1
 8003968:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800396a:	429a      	cmp	r2, r3
 800396c:	d127      	bne.n	80039be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003978:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800397a:	429a      	cmp	r2, r3
 800397c:	d11f      	bne.n	80039be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003988:	2a07      	cmp	r2, #7
 800398a:	bf14      	ite	ne
 800398c:	2201      	movne	r2, #1
 800398e:	2200      	moveq	r2, #0
 8003990:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003992:	4293      	cmp	r3, r2
 8003994:	d113      	bne.n	80039be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a0:	085b      	lsrs	r3, r3, #1
 80039a2:	3b01      	subs	r3, #1
 80039a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d109      	bne.n	80039be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b4:	085b      	lsrs	r3, r3, #1
 80039b6:	3b01      	subs	r3, #1
 80039b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d06e      	beq.n	8003a9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	2b0c      	cmp	r3, #12
 80039c2:	d069      	beq.n	8003a98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039c4:	4b53      	ldr	r3, [pc, #332]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d105      	bne.n	80039dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80039d0:	4b50      	ldr	r3, [pc, #320]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0ad      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039e0:	4b4c      	ldr	r3, [pc, #304]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 80039e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039ec:	f7fe f8c0 	bl	8001b70 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f4:	f7fe f8bc 	bl	8001b70 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e09a      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a06:	4b43      	ldr	r3, [pc, #268]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a12:	4b40      	ldr	r3, [pc, #256]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	4b40      	ldr	r3, [pc, #256]	@ (8003b18 <HAL_RCC_OscConfig+0x784>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a22:	3a01      	subs	r2, #1
 8003a24:	0112      	lsls	r2, r2, #4
 8003a26:	4311      	orrs	r1, r2
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a2c:	0212      	lsls	r2, r2, #8
 8003a2e:	4311      	orrs	r1, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a34:	0852      	lsrs	r2, r2, #1
 8003a36:	3a01      	subs	r2, #1
 8003a38:	0552      	lsls	r2, r2, #21
 8003a3a:	4311      	orrs	r1, r2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a40:	0852      	lsrs	r2, r2, #1
 8003a42:	3a01      	subs	r2, #1
 8003a44:	0652      	lsls	r2, r2, #25
 8003a46:	4311      	orrs	r1, r2
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a4c:	0912      	lsrs	r2, r2, #4
 8003a4e:	0452      	lsls	r2, r2, #17
 8003a50:	430a      	orrs	r2, r1
 8003a52:	4930      	ldr	r1, [pc, #192]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a58:	4b2e      	ldr	r3, [pc, #184]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a2d      	ldr	r2, [pc, #180]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 8003a5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a64:	4b2b      	ldr	r3, [pc, #172]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4a2a      	ldr	r2, [pc, #168]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 8003a6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a70:	f7fe f87e 	bl	8001b70 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a78:	f7fe f87a 	bl	8001b70 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e058      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a8a:	4b22      	ldr	r3, [pc, #136]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a96:	e050      	b.n	8003b3a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e04f      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d148      	bne.n	8003b3a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a19      	ldr	r2, [pc, #100]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 8003aae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ab2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ab4:	4b17      	ldr	r3, [pc, #92]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	4a16      	ldr	r2, [pc, #88]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 8003aba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003abe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ac0:	f7fe f856 	bl	8001b70 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac8:	f7fe f852 	bl	8001b70 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e030      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ada:	4b0e      	ldr	r3, [pc, #56]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x734>
 8003ae6:	e028      	b.n	8003b3a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	2b0c      	cmp	r3, #12
 8003aec:	d023      	beq.n	8003b36 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aee:	4b09      	ldr	r3, [pc, #36]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a08      	ldr	r2, [pc, #32]	@ (8003b14 <HAL_RCC_OscConfig+0x780>)
 8003af4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afa:	f7fe f839 	bl	8001b70 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b00:	e00c      	b.n	8003b1c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b02:	f7fe f835 	bl	8001b70 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d905      	bls.n	8003b1c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e013      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
 8003b14:	40021000 	.word	0x40021000
 8003b18:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b1c:	4b09      	ldr	r3, [pc, #36]	@ (8003b44 <HAL_RCC_OscConfig+0x7b0>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1ec      	bne.n	8003b02 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b28:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <HAL_RCC_OscConfig+0x7b0>)
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	4905      	ldr	r1, [pc, #20]	@ (8003b44 <HAL_RCC_OscConfig+0x7b0>)
 8003b2e:	4b06      	ldr	r3, [pc, #24]	@ (8003b48 <HAL_RCC_OscConfig+0x7b4>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	60cb      	str	r3, [r1, #12]
 8003b34:	e001      	b.n	8003b3a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3720      	adds	r7, #32
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000
 8003b48:	feeefffc 	.word	0xfeeefffc

08003b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e0e7      	b.n	8003d30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b60:	4b75      	ldr	r3, [pc, #468]	@ (8003d38 <HAL_RCC_ClockConfig+0x1ec>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d910      	bls.n	8003b90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6e:	4b72      	ldr	r3, [pc, #456]	@ (8003d38 <HAL_RCC_ClockConfig+0x1ec>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 0207 	bic.w	r2, r3, #7
 8003b76:	4970      	ldr	r1, [pc, #448]	@ (8003d38 <HAL_RCC_ClockConfig+0x1ec>)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7e:	4b6e      	ldr	r3, [pc, #440]	@ (8003d38 <HAL_RCC_ClockConfig+0x1ec>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0cf      	b.n	8003d30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d010      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	4b66      	ldr	r3, [pc, #408]	@ (8003d3c <HAL_RCC_ClockConfig+0x1f0>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d908      	bls.n	8003bbe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bac:	4b63      	ldr	r3, [pc, #396]	@ (8003d3c <HAL_RCC_ClockConfig+0x1f0>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	4960      	ldr	r1, [pc, #384]	@ (8003d3c <HAL_RCC_ClockConfig+0x1f0>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d04c      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bd2:	4b5a      	ldr	r3, [pc, #360]	@ (8003d3c <HAL_RCC_ClockConfig+0x1f0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d121      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e0a6      	b.n	8003d30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d107      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bea:	4b54      	ldr	r3, [pc, #336]	@ (8003d3c <HAL_RCC_ClockConfig+0x1f0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d115      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e09a      	b.n	8003d30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d107      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c02:	4b4e      	ldr	r3, [pc, #312]	@ (8003d3c <HAL_RCC_ClockConfig+0x1f0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d109      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e08e      	b.n	8003d30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c12:	4b4a      	ldr	r3, [pc, #296]	@ (8003d3c <HAL_RCC_ClockConfig+0x1f0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e086      	b.n	8003d30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c22:	4b46      	ldr	r3, [pc, #280]	@ (8003d3c <HAL_RCC_ClockConfig+0x1f0>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f023 0203 	bic.w	r2, r3, #3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	4943      	ldr	r1, [pc, #268]	@ (8003d3c <HAL_RCC_ClockConfig+0x1f0>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c34:	f7fd ff9c 	bl	8001b70 <HAL_GetTick>
 8003c38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c3c:	f7fd ff98 	bl	8001b70 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e06e      	b.n	8003d30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c52:	4b3a      	ldr	r3, [pc, #232]	@ (8003d3c <HAL_RCC_ClockConfig+0x1f0>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 020c 	and.w	r2, r3, #12
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d1eb      	bne.n	8003c3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d010      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	4b31      	ldr	r3, [pc, #196]	@ (8003d3c <HAL_RCC_ClockConfig+0x1f0>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d208      	bcs.n	8003c92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c80:	4b2e      	ldr	r3, [pc, #184]	@ (8003d3c <HAL_RCC_ClockConfig+0x1f0>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	492b      	ldr	r1, [pc, #172]	@ (8003d3c <HAL_RCC_ClockConfig+0x1f0>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c92:	4b29      	ldr	r3, [pc, #164]	@ (8003d38 <HAL_RCC_ClockConfig+0x1ec>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d210      	bcs.n	8003cc2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca0:	4b25      	ldr	r3, [pc, #148]	@ (8003d38 <HAL_RCC_ClockConfig+0x1ec>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f023 0207 	bic.w	r2, r3, #7
 8003ca8:	4923      	ldr	r1, [pc, #140]	@ (8003d38 <HAL_RCC_ClockConfig+0x1ec>)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb0:	4b21      	ldr	r3, [pc, #132]	@ (8003d38 <HAL_RCC_ClockConfig+0x1ec>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d001      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e036      	b.n	8003d30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cce:	4b1b      	ldr	r3, [pc, #108]	@ (8003d3c <HAL_RCC_ClockConfig+0x1f0>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	4918      	ldr	r1, [pc, #96]	@ (8003d3c <HAL_RCC_ClockConfig+0x1f0>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d009      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cec:	4b13      	ldr	r3, [pc, #76]	@ (8003d3c <HAL_RCC_ClockConfig+0x1f0>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4910      	ldr	r1, [pc, #64]	@ (8003d3c <HAL_RCC_ClockConfig+0x1f0>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d00:	f000 f824 	bl	8003d4c <HAL_RCC_GetSysClockFreq>
 8003d04:	4602      	mov	r2, r0
 8003d06:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <HAL_RCC_ClockConfig+0x1f0>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	091b      	lsrs	r3, r3, #4
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	490b      	ldr	r1, [pc, #44]	@ (8003d40 <HAL_RCC_ClockConfig+0x1f4>)
 8003d12:	5ccb      	ldrb	r3, [r1, r3]
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	fa22 f303 	lsr.w	r3, r2, r3
 8003d1c:	4a09      	ldr	r2, [pc, #36]	@ (8003d44 <HAL_RCC_ClockConfig+0x1f8>)
 8003d1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d20:	4b09      	ldr	r3, [pc, #36]	@ (8003d48 <HAL_RCC_ClockConfig+0x1fc>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fd fed3 	bl	8001ad0 <HAL_InitTick>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d2e:	7afb      	ldrb	r3, [r7, #11]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40022000 	.word	0x40022000
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	080069e8 	.word	0x080069e8
 8003d44:	20000000 	.word	0x20000000
 8003d48:	20000004 	.word	0x20000004

08003d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b089      	sub	sp, #36	@ 0x24
 8003d50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	2300      	movs	r3, #0
 8003d58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d64:	4b3b      	ldr	r3, [pc, #236]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_RCC_GetSysClockFreq+0x34>
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	2b0c      	cmp	r3, #12
 8003d78:	d121      	bne.n	8003dbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d11e      	bne.n	8003dbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d80:	4b34      	ldr	r3, [pc, #208]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d107      	bne.n	8003d9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d8c:	4b31      	ldr	r3, [pc, #196]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d92:	0a1b      	lsrs	r3, r3, #8
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	61fb      	str	r3, [r7, #28]
 8003d9a:	e005      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003da8:	4a2b      	ldr	r2, [pc, #172]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10d      	bne.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dbc:	e00a      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d102      	bne.n	8003dca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dc4:	4b25      	ldr	r3, [pc, #148]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x110>)
 8003dc6:	61bb      	str	r3, [r7, #24]
 8003dc8:	e004      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d101      	bne.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003dd0:	4b23      	ldr	r3, [pc, #140]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x114>)
 8003dd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	2b0c      	cmp	r3, #12
 8003dd8:	d134      	bne.n	8003e44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dda:	4b1e      	ldr	r3, [pc, #120]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d003      	beq.n	8003df2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d003      	beq.n	8003df8 <HAL_RCC_GetSysClockFreq+0xac>
 8003df0:	e005      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003df2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x110>)
 8003df4:	617b      	str	r3, [r7, #20]
      break;
 8003df6:	e005      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003df8:	4b19      	ldr	r3, [pc, #100]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x114>)
 8003dfa:	617b      	str	r3, [r7, #20]
      break;
 8003dfc:	e002      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	617b      	str	r3, [r7, #20]
      break;
 8003e02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e04:	4b13      	ldr	r3, [pc, #76]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	091b      	lsrs	r3, r3, #4
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	3301      	adds	r3, #1
 8003e10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e12:	4b10      	ldr	r3, [pc, #64]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	0a1b      	lsrs	r3, r3, #8
 8003e18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	fb03 f202 	mul.w	r2, r3, r2
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	0e5b      	lsrs	r3, r3, #25
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	3301      	adds	r3, #1
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e44:	69bb      	ldr	r3, [r7, #24]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3724      	adds	r7, #36	@ 0x24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000
 8003e58:	08006a00 	.word	0x08006a00
 8003e5c:	00f42400 	.word	0x00f42400
 8003e60:	017d7840 	.word	0x017d7840

08003e64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e68:	4b03      	ldr	r3, [pc, #12]	@ (8003e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20000000 	.word	0x20000000

08003e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e80:	f7ff fff0 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003e84:	4602      	mov	r2, r0
 8003e86:	4b06      	ldr	r3, [pc, #24]	@ (8003ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	0a1b      	lsrs	r3, r3, #8
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	4904      	ldr	r1, [pc, #16]	@ (8003ea4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e92:	5ccb      	ldrb	r3, [r1, r3]
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	080069f8 	.word	0x080069f8

08003ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003eac:	f7ff ffda 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	4b06      	ldr	r3, [pc, #24]	@ (8003ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	0adb      	lsrs	r3, r3, #11
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	4904      	ldr	r1, [pc, #16]	@ (8003ed0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ebe:	5ccb      	ldrb	r3, [r1, r3]
 8003ec0:	f003 031f 	and.w	r3, r3, #31
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	080069f8 	.word	0x080069f8

08003ed4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003edc:	2300      	movs	r3, #0
 8003ede:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003eec:	f7ff f9ee 	bl	80032cc <HAL_PWREx_GetVoltageRange>
 8003ef0:	6178      	str	r0, [r7, #20]
 8003ef2:	e014      	b.n	8003f1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ef4:	4b25      	ldr	r3, [pc, #148]	@ (8003f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef8:	4a24      	ldr	r2, [pc, #144]	@ (8003f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003efe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f00:	4b22      	ldr	r3, [pc, #136]	@ (8003f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f0c:	f7ff f9de 	bl	80032cc <HAL_PWREx_GetVoltageRange>
 8003f10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f12:	4b1e      	ldr	r3, [pc, #120]	@ (8003f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f16:	4a1d      	ldr	r2, [pc, #116]	@ (8003f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f24:	d10b      	bne.n	8003f3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b80      	cmp	r3, #128	@ 0x80
 8003f2a:	d919      	bls.n	8003f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f30:	d902      	bls.n	8003f38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f32:	2302      	movs	r3, #2
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	e013      	b.n	8003f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f38:	2301      	movs	r3, #1
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	e010      	b.n	8003f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b80      	cmp	r3, #128	@ 0x80
 8003f42:	d902      	bls.n	8003f4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f44:	2303      	movs	r3, #3
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	e00a      	b.n	8003f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b80      	cmp	r3, #128	@ 0x80
 8003f4e:	d102      	bne.n	8003f56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f50:	2302      	movs	r3, #2
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	e004      	b.n	8003f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b70      	cmp	r3, #112	@ 0x70
 8003f5a:	d101      	bne.n	8003f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f60:	4b0b      	ldr	r3, [pc, #44]	@ (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f023 0207 	bic.w	r2, r3, #7
 8003f68:	4909      	ldr	r1, [pc, #36]	@ (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f70:	4b07      	ldr	r3, [pc, #28]	@ (8003f90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d001      	beq.n	8003f82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40022000 	.word	0x40022000

08003f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d041      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fb4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003fb8:	d02a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003fba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003fbe:	d824      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fc0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fc4:	d008      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003fc6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fca:	d81e      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003fd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fd4:	d010      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fd6:	e018      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fd8:	4b86      	ldr	r3, [pc, #536]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4a85      	ldr	r2, [pc, #532]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fe4:	e015      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	2100      	movs	r1, #0
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fa8b 	bl	8004508 <RCCEx_PLLSAI1_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ff6:	e00c      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3320      	adds	r3, #32
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fb76 	bl	80046f0 <RCCEx_PLLSAI2_Config>
 8004004:	4603      	mov	r3, r0
 8004006:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004008:	e003      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	74fb      	strb	r3, [r7, #19]
      break;
 800400e:	e000      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004010:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004012:	7cfb      	ldrb	r3, [r7, #19]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10b      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004018:	4b76      	ldr	r3, [pc, #472]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004026:	4973      	ldr	r1, [pc, #460]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800402e:	e001      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d041      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004044:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004048:	d02a      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800404a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800404e:	d824      	bhi.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004050:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004054:	d008      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004056:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800405a:	d81e      	bhi.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004064:	d010      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004066:	e018      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004068:	4b62      	ldr	r3, [pc, #392]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4a61      	ldr	r2, [pc, #388]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004072:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004074:	e015      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3304      	adds	r3, #4
 800407a:	2100      	movs	r1, #0
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fa43 	bl	8004508 <RCCEx_PLLSAI1_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004086:	e00c      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3320      	adds	r3, #32
 800408c:	2100      	movs	r1, #0
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fb2e 	bl	80046f0 <RCCEx_PLLSAI2_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004098:	e003      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	74fb      	strb	r3, [r7, #19]
      break;
 800409e:	e000      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80040a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a2:	7cfb      	ldrb	r3, [r7, #19]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10b      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040a8:	4b52      	ldr	r3, [pc, #328]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040b6:	494f      	ldr	r1, [pc, #316]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80040be:	e001      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	7cfb      	ldrb	r3, [r7, #19]
 80040c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 80a0 	beq.w	8004212 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040d2:	2300      	movs	r3, #0
 80040d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040d6:	4b47      	ldr	r3, [pc, #284]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80040e6:	2300      	movs	r3, #0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00d      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ec:	4b41      	ldr	r3, [pc, #260]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f0:	4a40      	ldr	r2, [pc, #256]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80040f8:	4b3e      	ldr	r3, [pc, #248]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004104:	2301      	movs	r3, #1
 8004106:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004108:	4b3b      	ldr	r3, [pc, #236]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a3a      	ldr	r2, [pc, #232]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800410e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004112:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004114:	f7fd fd2c 	bl	8001b70 <HAL_GetTick>
 8004118:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800411a:	e009      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800411c:	f7fd fd28 	bl	8001b70 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d902      	bls.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	74fb      	strb	r3, [r7, #19]
        break;
 800412e:	e005      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004130:	4b31      	ldr	r3, [pc, #196]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0ef      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d15c      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004142:	4b2c      	ldr	r3, [pc, #176]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004148:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800414c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01f      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	429a      	cmp	r2, r3
 800415e:	d019      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004160:	4b24      	ldr	r3, [pc, #144]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800416a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800416c:	4b21      	ldr	r3, [pc, #132]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	4a20      	ldr	r2, [pc, #128]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800417c:	4b1d      	ldr	r3, [pc, #116]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004182:	4a1c      	ldr	r2, [pc, #112]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004184:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800418c:	4a19      	ldr	r2, [pc, #100]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d016      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419e:	f7fd fce7 	bl	8001b70 <HAL_GetTick>
 80041a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041a4:	e00b      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a6:	f7fd fce3 	bl	8001b70 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d902      	bls.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	74fb      	strb	r3, [r7, #19]
            break;
 80041bc:	e006      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041be:	4b0d      	ldr	r3, [pc, #52]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0ec      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80041cc:	7cfb      	ldrb	r3, [r7, #19]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10c      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041d2:	4b08      	ldr	r3, [pc, #32]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041e2:	4904      	ldr	r1, [pc, #16]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80041ea:	e009      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041ec:	7cfb      	ldrb	r3, [r7, #19]
 80041ee:	74bb      	strb	r3, [r7, #18]
 80041f0:	e006      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80041f2:	bf00      	nop
 80041f4:	40021000 	.word	0x40021000
 80041f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fc:	7cfb      	ldrb	r3, [r7, #19]
 80041fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004200:	7c7b      	ldrb	r3, [r7, #17]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d105      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004206:	4ba1      	ldr	r3, [pc, #644]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420a:	4aa0      	ldr	r2, [pc, #640]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800420c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004210:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800421e:	4b9b      	ldr	r3, [pc, #620]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004224:	f023 0203 	bic.w	r2, r3, #3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422c:	4997      	ldr	r1, [pc, #604]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004240:	4b92      	ldr	r3, [pc, #584]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004246:	f023 020c 	bic.w	r2, r3, #12
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800424e:	498f      	ldr	r1, [pc, #572]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004262:	4b8a      	ldr	r3, [pc, #552]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004268:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004270:	4986      	ldr	r1, [pc, #536]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004284:	4b81      	ldr	r3, [pc, #516]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800428a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	497e      	ldr	r1, [pc, #504]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0310 	and.w	r3, r3, #16
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042a6:	4b79      	ldr	r3, [pc, #484]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042b4:	4975      	ldr	r1, [pc, #468]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042c8:	4b70      	ldr	r3, [pc, #448]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d6:	496d      	ldr	r1, [pc, #436]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042ea:	4b68      	ldr	r3, [pc, #416]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f8:	4964      	ldr	r1, [pc, #400]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800430c:	4b5f      	ldr	r3, [pc, #380]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004312:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800431a:	495c      	ldr	r1, [pc, #368]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800432e:	4b57      	ldr	r3, [pc, #348]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004334:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800433c:	4953      	ldr	r1, [pc, #332]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004350:	4b4e      	ldr	r3, [pc, #312]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004356:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435e:	494b      	ldr	r1, [pc, #300]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004372:	4b46      	ldr	r3, [pc, #280]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004378:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004380:	4942      	ldr	r1, [pc, #264]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d028      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004394:	4b3d      	ldr	r3, [pc, #244]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800439a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043a2:	493a      	ldr	r1, [pc, #232]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043b2:	d106      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043b4:	4b35      	ldr	r3, [pc, #212]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4a34      	ldr	r2, [pc, #208]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80043ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043be:	60d3      	str	r3, [r2, #12]
 80043c0:	e011      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043ca:	d10c      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3304      	adds	r3, #4
 80043d0:	2101      	movs	r1, #1
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 f898 	bl	8004508 <RCCEx_PLLSAI1_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043dc:	7cfb      	ldrb	r3, [r7, #19]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 80043e2:	7cfb      	ldrb	r3, [r7, #19]
 80043e4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d028      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043f2:	4b26      	ldr	r3, [pc, #152]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004400:	4922      	ldr	r1, [pc, #136]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004410:	d106      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004412:	4b1e      	ldr	r3, [pc, #120]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	4a1d      	ldr	r2, [pc, #116]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004418:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800441c:	60d3      	str	r3, [r2, #12]
 800441e:	e011      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004424:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004428:	d10c      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3304      	adds	r3, #4
 800442e:	2101      	movs	r1, #1
 8004430:	4618      	mov	r0, r3
 8004432:	f000 f869 	bl	8004508 <RCCEx_PLLSAI1_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800443a:	7cfb      	ldrb	r3, [r7, #19]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004440:	7cfb      	ldrb	r3, [r7, #19]
 8004442:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d031      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004450:	4b0e      	ldr	r3, [pc, #56]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004456:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445e:	490b      	ldr	r1, [pc, #44]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800446a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800446e:	d10f      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	2102      	movs	r1, #2
 8004476:	4618      	mov	r0, r3
 8004478:	f000 f846 	bl	8004508 <RCCEx_PLLSAI1_Config>
 800447c:	4603      	mov	r3, r0
 800447e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004480:	7cfb      	ldrb	r3, [r7, #19]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d016      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8004486:	7cfb      	ldrb	r3, [r7, #19]
 8004488:	74bb      	strb	r3, [r7, #18]
 800448a:	e013      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800448c:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004494:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004498:	d10c      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3320      	adds	r3, #32
 800449e:	2102      	movs	r1, #2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 f925 	bl	80046f0 <RCCEx_PLLSAI2_Config>
 80044a6:	4603      	mov	r3, r0
 80044a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044aa:	7cfb      	ldrb	r3, [r7, #19]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 80044b0:	7cfb      	ldrb	r3, [r7, #19]
 80044b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044c0:	4b10      	ldr	r3, [pc, #64]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044ce:	490d      	ldr	r1, [pc, #52]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044e2:	4b08      	ldr	r3, [pc, #32]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044f0:	4904      	ldr	r1, [pc, #16]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40021000 	.word	0x40021000

08004508 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004516:	4b75      	ldr	r3, [pc, #468]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d018      	beq.n	8004554 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004522:	4b72      	ldr	r3, [pc, #456]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f003 0203 	and.w	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d10d      	bne.n	800454e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
       ||
 8004536:	2b00      	cmp	r3, #0
 8004538:	d009      	beq.n	800454e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800453a:	4b6c      	ldr	r3, [pc, #432]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	091b      	lsrs	r3, r3, #4
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
       ||
 800454a:	429a      	cmp	r2, r3
 800454c:	d047      	beq.n	80045de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	73fb      	strb	r3, [r7, #15]
 8004552:	e044      	b.n	80045de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b03      	cmp	r3, #3
 800455a:	d018      	beq.n	800458e <RCCEx_PLLSAI1_Config+0x86>
 800455c:	2b03      	cmp	r3, #3
 800455e:	d825      	bhi.n	80045ac <RCCEx_PLLSAI1_Config+0xa4>
 8004560:	2b01      	cmp	r3, #1
 8004562:	d002      	beq.n	800456a <RCCEx_PLLSAI1_Config+0x62>
 8004564:	2b02      	cmp	r3, #2
 8004566:	d009      	beq.n	800457c <RCCEx_PLLSAI1_Config+0x74>
 8004568:	e020      	b.n	80045ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800456a:	4b60      	ldr	r3, [pc, #384]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d11d      	bne.n	80045b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800457a:	e01a      	b.n	80045b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800457c:	4b5b      	ldr	r3, [pc, #364]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004584:	2b00      	cmp	r3, #0
 8004586:	d116      	bne.n	80045b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800458c:	e013      	b.n	80045b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800458e:	4b57      	ldr	r3, [pc, #348]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10f      	bne.n	80045ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800459a:	4b54      	ldr	r3, [pc, #336]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045aa:	e006      	b.n	80045ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
      break;
 80045b0:	e004      	b.n	80045bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045b2:	bf00      	nop
 80045b4:	e002      	b.n	80045bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045b6:	bf00      	nop
 80045b8:	e000      	b.n	80045bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10d      	bne.n	80045de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045c2:	4b4a      	ldr	r3, [pc, #296]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6819      	ldr	r1, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	430b      	orrs	r3, r1
 80045d8:	4944      	ldr	r1, [pc, #272]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d17d      	bne.n	80046e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045e4:	4b41      	ldr	r3, [pc, #260]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a40      	ldr	r2, [pc, #256]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80045ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f0:	f7fd fabe 	bl	8001b70 <HAL_GetTick>
 80045f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045f6:	e009      	b.n	800460c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045f8:	f7fd faba 	bl	8001b70 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d902      	bls.n	800460c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	73fb      	strb	r3, [r7, #15]
        break;
 800460a:	e005      	b.n	8004618 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800460c:	4b37      	ldr	r3, [pc, #220]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1ef      	bne.n	80045f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d160      	bne.n	80046e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d111      	bne.n	8004648 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004624:	4b31      	ldr	r3, [pc, #196]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800462c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6892      	ldr	r2, [r2, #8]
 8004634:	0211      	lsls	r1, r2, #8
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	68d2      	ldr	r2, [r2, #12]
 800463a:	0912      	lsrs	r2, r2, #4
 800463c:	0452      	lsls	r2, r2, #17
 800463e:	430a      	orrs	r2, r1
 8004640:	492a      	ldr	r1, [pc, #168]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004642:	4313      	orrs	r3, r2
 8004644:	610b      	str	r3, [r1, #16]
 8004646:	e027      	b.n	8004698 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d112      	bne.n	8004674 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800464e:	4b27      	ldr	r3, [pc, #156]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004656:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6892      	ldr	r2, [r2, #8]
 800465e:	0211      	lsls	r1, r2, #8
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6912      	ldr	r2, [r2, #16]
 8004664:	0852      	lsrs	r2, r2, #1
 8004666:	3a01      	subs	r2, #1
 8004668:	0552      	lsls	r2, r2, #21
 800466a:	430a      	orrs	r2, r1
 800466c:	491f      	ldr	r1, [pc, #124]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800466e:	4313      	orrs	r3, r2
 8004670:	610b      	str	r3, [r1, #16]
 8004672:	e011      	b.n	8004698 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004674:	4b1d      	ldr	r3, [pc, #116]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800467c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6892      	ldr	r2, [r2, #8]
 8004684:	0211      	lsls	r1, r2, #8
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6952      	ldr	r2, [r2, #20]
 800468a:	0852      	lsrs	r2, r2, #1
 800468c:	3a01      	subs	r2, #1
 800468e:	0652      	lsls	r2, r2, #25
 8004690:	430a      	orrs	r2, r1
 8004692:	4916      	ldr	r1, [pc, #88]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004694:	4313      	orrs	r3, r2
 8004696:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004698:	4b14      	ldr	r3, [pc, #80]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a13      	ldr	r2, [pc, #76]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800469e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a4:	f7fd fa64 	bl	8001b70 <HAL_GetTick>
 80046a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046aa:	e009      	b.n	80046c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046ac:	f7fd fa60 	bl	8001b70 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d902      	bls.n	80046c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	73fb      	strb	r3, [r7, #15]
          break;
 80046be:	e005      	b.n	80046cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046c0:	4b0a      	ldr	r3, [pc, #40]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0ef      	beq.n	80046ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046d2:	4b06      	ldr	r3, [pc, #24]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	4904      	ldr	r1, [pc, #16]	@ (80046ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40021000 	.word	0x40021000

080046f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046fe:	4b6a      	ldr	r3, [pc, #424]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d018      	beq.n	800473c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800470a:	4b67      	ldr	r3, [pc, #412]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f003 0203 	and.w	r2, r3, #3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d10d      	bne.n	8004736 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
       ||
 800471e:	2b00      	cmp	r3, #0
 8004720:	d009      	beq.n	8004736 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004722:	4b61      	ldr	r3, [pc, #388]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	091b      	lsrs	r3, r3, #4
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
       ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d047      	beq.n	80047c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	73fb      	strb	r3, [r7, #15]
 800473a:	e044      	b.n	80047c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b03      	cmp	r3, #3
 8004742:	d018      	beq.n	8004776 <RCCEx_PLLSAI2_Config+0x86>
 8004744:	2b03      	cmp	r3, #3
 8004746:	d825      	bhi.n	8004794 <RCCEx_PLLSAI2_Config+0xa4>
 8004748:	2b01      	cmp	r3, #1
 800474a:	d002      	beq.n	8004752 <RCCEx_PLLSAI2_Config+0x62>
 800474c:	2b02      	cmp	r3, #2
 800474e:	d009      	beq.n	8004764 <RCCEx_PLLSAI2_Config+0x74>
 8004750:	e020      	b.n	8004794 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004752:	4b55      	ldr	r3, [pc, #340]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d11d      	bne.n	800479a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004762:	e01a      	b.n	800479a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004764:	4b50      	ldr	r3, [pc, #320]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800476c:	2b00      	cmp	r3, #0
 800476e:	d116      	bne.n	800479e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004774:	e013      	b.n	800479e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004776:	4b4c      	ldr	r3, [pc, #304]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10f      	bne.n	80047a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004782:	4b49      	ldr	r3, [pc, #292]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004792:	e006      	b.n	80047a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
      break;
 8004798:	e004      	b.n	80047a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800479a:	bf00      	nop
 800479c:	e002      	b.n	80047a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800479e:	bf00      	nop
 80047a0:	e000      	b.n	80047a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10d      	bne.n	80047c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047aa:	4b3f      	ldr	r3, [pc, #252]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6819      	ldr	r1, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	430b      	orrs	r3, r1
 80047c0:	4939      	ldr	r1, [pc, #228]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d167      	bne.n	800489c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047cc:	4b36      	ldr	r3, [pc, #216]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a35      	ldr	r2, [pc, #212]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d8:	f7fd f9ca 	bl	8001b70 <HAL_GetTick>
 80047dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047de:	e009      	b.n	80047f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047e0:	f7fd f9c6 	bl	8001b70 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d902      	bls.n	80047f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	73fb      	strb	r3, [r7, #15]
        break;
 80047f2:	e005      	b.n	8004800 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047f4:	4b2c      	ldr	r3, [pc, #176]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1ef      	bne.n	80047e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d14a      	bne.n	800489c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d111      	bne.n	8004830 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800480c:	4b26      	ldr	r3, [pc, #152]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004814:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6892      	ldr	r2, [r2, #8]
 800481c:	0211      	lsls	r1, r2, #8
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68d2      	ldr	r2, [r2, #12]
 8004822:	0912      	lsrs	r2, r2, #4
 8004824:	0452      	lsls	r2, r2, #17
 8004826:	430a      	orrs	r2, r1
 8004828:	491f      	ldr	r1, [pc, #124]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800482a:	4313      	orrs	r3, r2
 800482c:	614b      	str	r3, [r1, #20]
 800482e:	e011      	b.n	8004854 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004830:	4b1d      	ldr	r3, [pc, #116]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004838:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6892      	ldr	r2, [r2, #8]
 8004840:	0211      	lsls	r1, r2, #8
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6912      	ldr	r2, [r2, #16]
 8004846:	0852      	lsrs	r2, r2, #1
 8004848:	3a01      	subs	r2, #1
 800484a:	0652      	lsls	r2, r2, #25
 800484c:	430a      	orrs	r2, r1
 800484e:	4916      	ldr	r1, [pc, #88]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004850:	4313      	orrs	r3, r2
 8004852:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004854:	4b14      	ldr	r3, [pc, #80]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a13      	ldr	r2, [pc, #76]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800485a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800485e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004860:	f7fd f986 	bl	8001b70 <HAL_GetTick>
 8004864:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004866:	e009      	b.n	800487c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004868:	f7fd f982 	bl	8001b70 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d902      	bls.n	800487c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	73fb      	strb	r3, [r7, #15]
          break;
 800487a:	e005      	b.n	8004888 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800487c:	4b0a      	ldr	r3, [pc, #40]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0ef      	beq.n	8004868 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800488e:	4b06      	ldr	r3, [pc, #24]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004890:	695a      	ldr	r2, [r3, #20]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	4904      	ldr	r1, [pc, #16]	@ (80048a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004898:	4313      	orrs	r3, r2
 800489a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800489c:	7bfb      	ldrb	r3, [r7, #15]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40021000 	.word	0x40021000

080048ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e095      	b.n	80049ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d108      	bne.n	80048d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048ce:	d009      	beq.n	80048e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	61da      	str	r2, [r3, #28]
 80048d6:	e005      	b.n	80048e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fc fdf6 	bl	80014f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800491a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004924:	d902      	bls.n	800492c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	e002      	b.n	8004932 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800492c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004930:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800493a:	d007      	beq.n	800494c <HAL_SPI_Init+0xa0>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004944:	d002      	beq.n	800494c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800498e:	ea42 0103 	orr.w	r1, r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004996:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	0c1b      	lsrs	r3, r3, #16
 80049a8:	f003 0204 	and.w	r2, r3, #4
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80049c8:	ea42 0103 	orr.w	r1, r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e049      	b.n	8004a98 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d106      	bne.n	8004a1e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f841 	bl	8004aa0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4610      	mov	r0, r2
 8004a32:	f000 fcc5 	bl	80053c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e049      	b.n	8004b5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d106      	bne.n	8004ae0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7fc fd6a 	bl	80015b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3304      	adds	r3, #4
 8004af0:	4619      	mov	r1, r3
 8004af2:	4610      	mov	r0, r2
 8004af4:	f000 fc64 	bl	80053c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <HAL_TIM_PWM_Start+0x24>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	bf14      	ite	ne
 8004b80:	2301      	movne	r3, #1
 8004b82:	2300      	moveq	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	e03c      	b.n	8004c02 <HAL_TIM_PWM_Start+0x9e>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d109      	bne.n	8004ba2 <HAL_TIM_PWM_Start+0x3e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	bf14      	ite	ne
 8004b9a:	2301      	movne	r3, #1
 8004b9c:	2300      	moveq	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	e02f      	b.n	8004c02 <HAL_TIM_PWM_Start+0x9e>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d109      	bne.n	8004bbc <HAL_TIM_PWM_Start+0x58>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	bf14      	ite	ne
 8004bb4:	2301      	movne	r3, #1
 8004bb6:	2300      	moveq	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	e022      	b.n	8004c02 <HAL_TIM_PWM_Start+0x9e>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b0c      	cmp	r3, #12
 8004bc0:	d109      	bne.n	8004bd6 <HAL_TIM_PWM_Start+0x72>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	bf14      	ite	ne
 8004bce:	2301      	movne	r3, #1
 8004bd0:	2300      	moveq	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	e015      	b.n	8004c02 <HAL_TIM_PWM_Start+0x9e>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d109      	bne.n	8004bf0 <HAL_TIM_PWM_Start+0x8c>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	bf14      	ite	ne
 8004be8:	2301      	movne	r3, #1
 8004bea:	2300      	moveq	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	e008      	b.n	8004c02 <HAL_TIM_PWM_Start+0x9e>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	bf14      	ite	ne
 8004bfc:	2301      	movne	r3, #1
 8004bfe:	2300      	moveq	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e09c      	b.n	8004d44 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d104      	bne.n	8004c1a <HAL_TIM_PWM_Start+0xb6>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c18:	e023      	b.n	8004c62 <HAL_TIM_PWM_Start+0xfe>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d104      	bne.n	8004c2a <HAL_TIM_PWM_Start+0xc6>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c28:	e01b      	b.n	8004c62 <HAL_TIM_PWM_Start+0xfe>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d104      	bne.n	8004c3a <HAL_TIM_PWM_Start+0xd6>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c38:	e013      	b.n	8004c62 <HAL_TIM_PWM_Start+0xfe>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b0c      	cmp	r3, #12
 8004c3e:	d104      	bne.n	8004c4a <HAL_TIM_PWM_Start+0xe6>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c48:	e00b      	b.n	8004c62 <HAL_TIM_PWM_Start+0xfe>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d104      	bne.n	8004c5a <HAL_TIM_PWM_Start+0xf6>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c58:	e003      	b.n	8004c62 <HAL_TIM_PWM_Start+0xfe>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2201      	movs	r2, #1
 8004c68:	6839      	ldr	r1, [r7, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f001 f83c 	bl	8005ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a35      	ldr	r2, [pc, #212]	@ (8004d4c <HAL_TIM_PWM_Start+0x1e8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <HAL_TIM_PWM_Start+0x13e>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a34      	ldr	r2, [pc, #208]	@ (8004d50 <HAL_TIM_PWM_Start+0x1ec>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00e      	beq.n	8004ca2 <HAL_TIM_PWM_Start+0x13e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a32      	ldr	r2, [pc, #200]	@ (8004d54 <HAL_TIM_PWM_Start+0x1f0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d009      	beq.n	8004ca2 <HAL_TIM_PWM_Start+0x13e>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a31      	ldr	r2, [pc, #196]	@ (8004d58 <HAL_TIM_PWM_Start+0x1f4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d004      	beq.n	8004ca2 <HAL_TIM_PWM_Start+0x13e>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a2f      	ldr	r2, [pc, #188]	@ (8004d5c <HAL_TIM_PWM_Start+0x1f8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d101      	bne.n	8004ca6 <HAL_TIM_PWM_Start+0x142>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <HAL_TIM_PWM_Start+0x144>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a22      	ldr	r2, [pc, #136]	@ (8004d4c <HAL_TIM_PWM_Start+0x1e8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d01d      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x19e>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cce:	d018      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x19e>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a22      	ldr	r2, [pc, #136]	@ (8004d60 <HAL_TIM_PWM_Start+0x1fc>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d013      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x19e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a21      	ldr	r2, [pc, #132]	@ (8004d64 <HAL_TIM_PWM_Start+0x200>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00e      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x19e>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d68 <HAL_TIM_PWM_Start+0x204>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d009      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x19e>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a17      	ldr	r2, [pc, #92]	@ (8004d50 <HAL_TIM_PWM_Start+0x1ec>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d004      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x19e>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a15      	ldr	r2, [pc, #84]	@ (8004d54 <HAL_TIM_PWM_Start+0x1f0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d115      	bne.n	8004d2e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	4b18      	ldr	r3, [pc, #96]	@ (8004d6c <HAL_TIM_PWM_Start+0x208>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b06      	cmp	r3, #6
 8004d12:	d015      	beq.n	8004d40 <HAL_TIM_PWM_Start+0x1dc>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d1a:	d011      	beq.n	8004d40 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0201 	orr.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2c:	e008      	b.n	8004d40 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 0201 	orr.w	r2, r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	e000      	b.n	8004d42 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40012c00 	.word	0x40012c00
 8004d50:	40013400 	.word	0x40013400
 8004d54:	40014000 	.word	0x40014000
 8004d58:	40014400 	.word	0x40014400
 8004d5c:	40014800 	.word	0x40014800
 8004d60:	40000400 	.word	0x40000400
 8004d64:	40000800 	.word	0x40000800
 8004d68:	40000c00 	.word	0x40000c00
 8004d6c:	00010007 	.word	0x00010007

08004d70 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e049      	b.n	8004e16 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fc fce4 	bl	8001764 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3304      	adds	r3, #4
 8004dac:	4619      	mov	r1, r3
 8004dae:	4610      	mov	r0, r2
 8004db0:	f000 fb06 	bl	80053c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b086      	sub	sp, #24
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e097      	b.n	8004f62 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fc fbe8 	bl	800161c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004e62:	f023 0307 	bic.w	r3, r3, #7
 8004e66:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	4619      	mov	r1, r3
 8004e72:	4610      	mov	r0, r2
 8004e74:	f000 faa4 	bl	80053c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ea0:	f023 0303 	bic.w	r3, r3, #3
 8004ea4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	021b      	lsls	r3, r3, #8
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004ebe:	f023 030c 	bic.w	r3, r3, #12
 8004ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004eca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	021b      	lsls	r3, r3, #8
 8004eda:	4313      	orrs	r3, r2
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	011a      	lsls	r2, r3, #4
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	031b      	lsls	r3, r3, #12
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004efc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004f04:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	4313      	orrs	r3, r2
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d101      	bne.n	8004f8a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004f86:	2302      	movs	r3, #2
 8004f88:	e066      	b.n	8005058 <HAL_TIM_OC_ConfigChannel+0xec>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b14      	cmp	r3, #20
 8004f96:	d857      	bhi.n	8005048 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004f98:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9e:	bf00      	nop
 8004fa0:	08004ff5 	.word	0x08004ff5
 8004fa4:	08005049 	.word	0x08005049
 8004fa8:	08005049 	.word	0x08005049
 8004fac:	08005049 	.word	0x08005049
 8004fb0:	08005003 	.word	0x08005003
 8004fb4:	08005049 	.word	0x08005049
 8004fb8:	08005049 	.word	0x08005049
 8004fbc:	08005049 	.word	0x08005049
 8004fc0:	08005011 	.word	0x08005011
 8004fc4:	08005049 	.word	0x08005049
 8004fc8:	08005049 	.word	0x08005049
 8004fcc:	08005049 	.word	0x08005049
 8004fd0:	0800501f 	.word	0x0800501f
 8004fd4:	08005049 	.word	0x08005049
 8004fd8:	08005049 	.word	0x08005049
 8004fdc:	08005049 	.word	0x08005049
 8004fe0:	0800502d 	.word	0x0800502d
 8004fe4:	08005049 	.word	0x08005049
 8004fe8:	08005049 	.word	0x08005049
 8004fec:	08005049 	.word	0x08005049
 8004ff0:	0800503b 	.word	0x0800503b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fa7a 	bl	80054f4 <TIM_OC1_SetConfig>
      break;
 8005000:	e025      	b.n	800504e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68b9      	ldr	r1, [r7, #8]
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fb03 	bl	8005614 <TIM_OC2_SetConfig>
      break;
 800500e:	e01e      	b.n	800504e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fb86 	bl	8005728 <TIM_OC3_SetConfig>
      break;
 800501c:	e017      	b.n	800504e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68b9      	ldr	r1, [r7, #8]
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fc07 	bl	8005838 <TIM_OC4_SetConfig>
      break;
 800502a:	e010      	b.n	800504e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fc6a 	bl	800590c <TIM_OC5_SetConfig>
      break;
 8005038:	e009      	b.n	800504e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	4618      	mov	r0, r3
 8005042:	f000 fcc7 	bl	80059d4 <TIM_OC6_SetConfig>
      break;
 8005046:	e002      	b.n	800504e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	75fb      	strb	r3, [r7, #23]
      break;
 800504c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005056:	7dfb      	ldrb	r3, [r7, #23]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005076:	2b01      	cmp	r3, #1
 8005078:	d101      	bne.n	800507e <HAL_TIM_IC_ConfigChannel+0x1e>
 800507a:	2302      	movs	r3, #2
 800507c:	e088      	b.n	8005190 <HAL_TIM_IC_ConfigChannel+0x130>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d11b      	bne.n	80050c4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800509c:	f000 fd00 	bl	8005aa0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 020c 	bic.w	r2, r2, #12
 80050ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6999      	ldr	r1, [r3, #24]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	619a      	str	r2, [r3, #24]
 80050c2:	e060      	b.n	8005186 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d11c      	bne.n	8005104 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80050da:	f000 fd4f 	bl	8005b7c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	699a      	ldr	r2, [r3, #24]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80050ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6999      	ldr	r1, [r3, #24]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	021a      	lsls	r2, r3, #8
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	619a      	str	r2, [r3, #24]
 8005102:	e040      	b.n	8005186 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b08      	cmp	r3, #8
 8005108:	d11b      	bne.n	8005142 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800511a:	f000 fd6c 	bl	8005bf6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69da      	ldr	r2, [r3, #28]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 020c 	bic.w	r2, r2, #12
 800512c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69d9      	ldr	r1, [r3, #28]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	61da      	str	r2, [r3, #28]
 8005140:	e021      	b.n	8005186 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b0c      	cmp	r3, #12
 8005146:	d11c      	bne.n	8005182 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005158:	f000 fd89 	bl	8005c6e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	69da      	ldr	r2, [r3, #28]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800516a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	69d9      	ldr	r1, [r3, #28]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	021a      	lsls	r2, r3, #8
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	61da      	str	r2, [r3, #28]
 8005180:	e001      	b.n	8005186 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800518e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d101      	bne.n	80051b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051b2:	2302      	movs	r3, #2
 80051b4:	e0ff      	b.n	80053b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b14      	cmp	r3, #20
 80051c2:	f200 80f0 	bhi.w	80053a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051c6:	a201      	add	r2, pc, #4	@ (adr r2, 80051cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	08005221 	.word	0x08005221
 80051d0:	080053a7 	.word	0x080053a7
 80051d4:	080053a7 	.word	0x080053a7
 80051d8:	080053a7 	.word	0x080053a7
 80051dc:	08005261 	.word	0x08005261
 80051e0:	080053a7 	.word	0x080053a7
 80051e4:	080053a7 	.word	0x080053a7
 80051e8:	080053a7 	.word	0x080053a7
 80051ec:	080052a3 	.word	0x080052a3
 80051f0:	080053a7 	.word	0x080053a7
 80051f4:	080053a7 	.word	0x080053a7
 80051f8:	080053a7 	.word	0x080053a7
 80051fc:	080052e3 	.word	0x080052e3
 8005200:	080053a7 	.word	0x080053a7
 8005204:	080053a7 	.word	0x080053a7
 8005208:	080053a7 	.word	0x080053a7
 800520c:	08005325 	.word	0x08005325
 8005210:	080053a7 	.word	0x080053a7
 8005214:	080053a7 	.word	0x080053a7
 8005218:	080053a7 	.word	0x080053a7
 800521c:	08005365 	.word	0x08005365
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68b9      	ldr	r1, [r7, #8]
 8005226:	4618      	mov	r0, r3
 8005228:	f000 f964 	bl	80054f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0208 	orr.w	r2, r2, #8
 800523a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0204 	bic.w	r2, r2, #4
 800524a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6999      	ldr	r1, [r3, #24]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	691a      	ldr	r2, [r3, #16]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	619a      	str	r2, [r3, #24]
      break;
 800525e:	e0a5      	b.n	80053ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	4618      	mov	r0, r3
 8005268:	f000 f9d4 	bl	8005614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699a      	ldr	r2, [r3, #24]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800527a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699a      	ldr	r2, [r3, #24]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800528a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6999      	ldr	r1, [r3, #24]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	021a      	lsls	r2, r3, #8
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	619a      	str	r2, [r3, #24]
      break;
 80052a0:	e084      	b.n	80053ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68b9      	ldr	r1, [r7, #8]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 fa3d 	bl	8005728 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0208 	orr.w	r2, r2, #8
 80052bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69da      	ldr	r2, [r3, #28]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0204 	bic.w	r2, r2, #4
 80052cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69d9      	ldr	r1, [r3, #28]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	61da      	str	r2, [r3, #28]
      break;
 80052e0:	e064      	b.n	80053ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68b9      	ldr	r1, [r7, #8]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 faa5 	bl	8005838 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69da      	ldr	r2, [r3, #28]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800530c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69d9      	ldr	r1, [r3, #28]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	021a      	lsls	r2, r3, #8
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	61da      	str	r2, [r3, #28]
      break;
 8005322:	e043      	b.n	80053ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68b9      	ldr	r1, [r7, #8]
 800532a:	4618      	mov	r0, r3
 800532c:	f000 faee 	bl	800590c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0208 	orr.w	r2, r2, #8
 800533e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0204 	bic.w	r2, r2, #4
 800534e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	691a      	ldr	r2, [r3, #16]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005362:	e023      	b.n	80053ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fb32 	bl	80059d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800537e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800538e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	021a      	lsls	r2, r3, #8
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80053a4:	e002      	b.n	80053ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	75fb      	strb	r3, [r7, #23]
      break;
 80053aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop

080053c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a40      	ldr	r2, [pc, #256]	@ (80054d4 <TIM_Base_SetConfig+0x114>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d013      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053de:	d00f      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a3d      	ldr	r2, [pc, #244]	@ (80054d8 <TIM_Base_SetConfig+0x118>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00b      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a3c      	ldr	r2, [pc, #240]	@ (80054dc <TIM_Base_SetConfig+0x11c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d007      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a3b      	ldr	r2, [pc, #236]	@ (80054e0 <TIM_Base_SetConfig+0x120>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a3a      	ldr	r2, [pc, #232]	@ (80054e4 <TIM_Base_SetConfig+0x124>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d108      	bne.n	8005412 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a2f      	ldr	r2, [pc, #188]	@ (80054d4 <TIM_Base_SetConfig+0x114>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d01f      	beq.n	800545a <TIM_Base_SetConfig+0x9a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005420:	d01b      	beq.n	800545a <TIM_Base_SetConfig+0x9a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a2c      	ldr	r2, [pc, #176]	@ (80054d8 <TIM_Base_SetConfig+0x118>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d017      	beq.n	800545a <TIM_Base_SetConfig+0x9a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a2b      	ldr	r2, [pc, #172]	@ (80054dc <TIM_Base_SetConfig+0x11c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d013      	beq.n	800545a <TIM_Base_SetConfig+0x9a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a2a      	ldr	r2, [pc, #168]	@ (80054e0 <TIM_Base_SetConfig+0x120>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d00f      	beq.n	800545a <TIM_Base_SetConfig+0x9a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a29      	ldr	r2, [pc, #164]	@ (80054e4 <TIM_Base_SetConfig+0x124>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00b      	beq.n	800545a <TIM_Base_SetConfig+0x9a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a28      	ldr	r2, [pc, #160]	@ (80054e8 <TIM_Base_SetConfig+0x128>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d007      	beq.n	800545a <TIM_Base_SetConfig+0x9a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a27      	ldr	r2, [pc, #156]	@ (80054ec <TIM_Base_SetConfig+0x12c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d003      	beq.n	800545a <TIM_Base_SetConfig+0x9a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a26      	ldr	r2, [pc, #152]	@ (80054f0 <TIM_Base_SetConfig+0x130>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d108      	bne.n	800546c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a10      	ldr	r2, [pc, #64]	@ (80054d4 <TIM_Base_SetConfig+0x114>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00f      	beq.n	80054b8 <TIM_Base_SetConfig+0xf8>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a12      	ldr	r2, [pc, #72]	@ (80054e4 <TIM_Base_SetConfig+0x124>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00b      	beq.n	80054b8 <TIM_Base_SetConfig+0xf8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a11      	ldr	r2, [pc, #68]	@ (80054e8 <TIM_Base_SetConfig+0x128>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d007      	beq.n	80054b8 <TIM_Base_SetConfig+0xf8>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a10      	ldr	r2, [pc, #64]	@ (80054ec <TIM_Base_SetConfig+0x12c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d003      	beq.n	80054b8 <TIM_Base_SetConfig+0xf8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a0f      	ldr	r2, [pc, #60]	@ (80054f0 <TIM_Base_SetConfig+0x130>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d103      	bne.n	80054c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	615a      	str	r2, [r3, #20]
}
 80054c6:	bf00      	nop
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40012c00 	.word	0x40012c00
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800
 80054e0:	40000c00 	.word	0x40000c00
 80054e4:	40013400 	.word	0x40013400
 80054e8:	40014000 	.word	0x40014000
 80054ec:	40014400 	.word	0x40014400
 80054f0:	40014800 	.word	0x40014800

080054f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	f023 0201 	bic.w	r2, r3, #1
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 0303 	bic.w	r3, r3, #3
 800552e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f023 0302 	bic.w	r3, r3, #2
 8005540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a2c      	ldr	r2, [pc, #176]	@ (8005600 <TIM_OC1_SetConfig+0x10c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d00f      	beq.n	8005574 <TIM_OC1_SetConfig+0x80>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a2b      	ldr	r2, [pc, #172]	@ (8005604 <TIM_OC1_SetConfig+0x110>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00b      	beq.n	8005574 <TIM_OC1_SetConfig+0x80>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a2a      	ldr	r2, [pc, #168]	@ (8005608 <TIM_OC1_SetConfig+0x114>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d007      	beq.n	8005574 <TIM_OC1_SetConfig+0x80>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a29      	ldr	r2, [pc, #164]	@ (800560c <TIM_OC1_SetConfig+0x118>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <TIM_OC1_SetConfig+0x80>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a28      	ldr	r2, [pc, #160]	@ (8005610 <TIM_OC1_SetConfig+0x11c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d10c      	bne.n	800558e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f023 0308 	bic.w	r3, r3, #8
 800557a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	4313      	orrs	r3, r2
 8005584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f023 0304 	bic.w	r3, r3, #4
 800558c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a1b      	ldr	r2, [pc, #108]	@ (8005600 <TIM_OC1_SetConfig+0x10c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d00f      	beq.n	80055b6 <TIM_OC1_SetConfig+0xc2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a1a      	ldr	r2, [pc, #104]	@ (8005604 <TIM_OC1_SetConfig+0x110>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00b      	beq.n	80055b6 <TIM_OC1_SetConfig+0xc2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a19      	ldr	r2, [pc, #100]	@ (8005608 <TIM_OC1_SetConfig+0x114>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d007      	beq.n	80055b6 <TIM_OC1_SetConfig+0xc2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a18      	ldr	r2, [pc, #96]	@ (800560c <TIM_OC1_SetConfig+0x118>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d003      	beq.n	80055b6 <TIM_OC1_SetConfig+0xc2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a17      	ldr	r2, [pc, #92]	@ (8005610 <TIM_OC1_SetConfig+0x11c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d111      	bne.n	80055da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	621a      	str	r2, [r3, #32]
}
 80055f4:	bf00      	nop
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	40012c00 	.word	0x40012c00
 8005604:	40013400 	.word	0x40013400
 8005608:	40014000 	.word	0x40014000
 800560c:	40014400 	.word	0x40014400
 8005610:	40014800 	.word	0x40014800

08005614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	f023 0210 	bic.w	r2, r3, #16
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800564e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	021b      	lsls	r3, r3, #8
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4313      	orrs	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f023 0320 	bic.w	r3, r3, #32
 8005662:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	4313      	orrs	r3, r2
 800566e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a28      	ldr	r2, [pc, #160]	@ (8005714 <TIM_OC2_SetConfig+0x100>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d003      	beq.n	8005680 <TIM_OC2_SetConfig+0x6c>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a27      	ldr	r2, [pc, #156]	@ (8005718 <TIM_OC2_SetConfig+0x104>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d10d      	bne.n	800569c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800569a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a1d      	ldr	r2, [pc, #116]	@ (8005714 <TIM_OC2_SetConfig+0x100>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00f      	beq.n	80056c4 <TIM_OC2_SetConfig+0xb0>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005718 <TIM_OC2_SetConfig+0x104>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d00b      	beq.n	80056c4 <TIM_OC2_SetConfig+0xb0>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a1b      	ldr	r2, [pc, #108]	@ (800571c <TIM_OC2_SetConfig+0x108>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d007      	beq.n	80056c4 <TIM_OC2_SetConfig+0xb0>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005720 <TIM_OC2_SetConfig+0x10c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d003      	beq.n	80056c4 <TIM_OC2_SetConfig+0xb0>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a19      	ldr	r2, [pc, #100]	@ (8005724 <TIM_OC2_SetConfig+0x110>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d113      	bne.n	80056ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	621a      	str	r2, [r3, #32]
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40012c00 	.word	0x40012c00
 8005718:	40013400 	.word	0x40013400
 800571c:	40014000 	.word	0x40014000
 8005720:	40014400 	.word	0x40014400
 8005724:	40014800 	.word	0x40014800

08005728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0303 	bic.w	r3, r3, #3
 8005762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a27      	ldr	r2, [pc, #156]	@ (8005824 <TIM_OC3_SetConfig+0xfc>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d003      	beq.n	8005792 <TIM_OC3_SetConfig+0x6a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a26      	ldr	r2, [pc, #152]	@ (8005828 <TIM_OC3_SetConfig+0x100>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d10d      	bne.n	80057ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005798:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	021b      	lsls	r3, r3, #8
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005824 <TIM_OC3_SetConfig+0xfc>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00f      	beq.n	80057d6 <TIM_OC3_SetConfig+0xae>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005828 <TIM_OC3_SetConfig+0x100>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00b      	beq.n	80057d6 <TIM_OC3_SetConfig+0xae>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a1a      	ldr	r2, [pc, #104]	@ (800582c <TIM_OC3_SetConfig+0x104>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d007      	beq.n	80057d6 <TIM_OC3_SetConfig+0xae>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a19      	ldr	r2, [pc, #100]	@ (8005830 <TIM_OC3_SetConfig+0x108>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d003      	beq.n	80057d6 <TIM_OC3_SetConfig+0xae>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a18      	ldr	r2, [pc, #96]	@ (8005834 <TIM_OC3_SetConfig+0x10c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d113      	bne.n	80057fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	621a      	str	r2, [r3, #32]
}
 8005818:	bf00      	nop
 800581a:	371c      	adds	r7, #28
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40013400 	.word	0x40013400
 800582c:	40014000 	.word	0x40014000
 8005830:	40014400 	.word	0x40014400
 8005834:	40014800 	.word	0x40014800

08005838 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005866:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800586a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005886:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	031b      	lsls	r3, r3, #12
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a18      	ldr	r2, [pc, #96]	@ (80058f8 <TIM_OC4_SetConfig+0xc0>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00f      	beq.n	80058bc <TIM_OC4_SetConfig+0x84>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a17      	ldr	r2, [pc, #92]	@ (80058fc <TIM_OC4_SetConfig+0xc4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00b      	beq.n	80058bc <TIM_OC4_SetConfig+0x84>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a16      	ldr	r2, [pc, #88]	@ (8005900 <TIM_OC4_SetConfig+0xc8>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d007      	beq.n	80058bc <TIM_OC4_SetConfig+0x84>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a15      	ldr	r2, [pc, #84]	@ (8005904 <TIM_OC4_SetConfig+0xcc>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d003      	beq.n	80058bc <TIM_OC4_SetConfig+0x84>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a14      	ldr	r2, [pc, #80]	@ (8005908 <TIM_OC4_SetConfig+0xd0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d109      	bne.n	80058d0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	019b      	lsls	r3, r3, #6
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	621a      	str	r2, [r3, #32]
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40012c00 	.word	0x40012c00
 80058fc:	40013400 	.word	0x40013400
 8005900:	40014000 	.word	0x40014000
 8005904:	40014400 	.word	0x40014400
 8005908:	40014800 	.word	0x40014800

0800590c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800593a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800593e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005950:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	041b      	lsls	r3, r3, #16
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a17      	ldr	r2, [pc, #92]	@ (80059c0 <TIM_OC5_SetConfig+0xb4>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d00f      	beq.n	8005986 <TIM_OC5_SetConfig+0x7a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a16      	ldr	r2, [pc, #88]	@ (80059c4 <TIM_OC5_SetConfig+0xb8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00b      	beq.n	8005986 <TIM_OC5_SetConfig+0x7a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a15      	ldr	r2, [pc, #84]	@ (80059c8 <TIM_OC5_SetConfig+0xbc>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d007      	beq.n	8005986 <TIM_OC5_SetConfig+0x7a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a14      	ldr	r2, [pc, #80]	@ (80059cc <TIM_OC5_SetConfig+0xc0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d003      	beq.n	8005986 <TIM_OC5_SetConfig+0x7a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a13      	ldr	r2, [pc, #76]	@ (80059d0 <TIM_OC5_SetConfig+0xc4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d109      	bne.n	800599a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800598c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	621a      	str	r2, [r3, #32]
}
 80059b4:	bf00      	nop
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	40012c00 	.word	0x40012c00
 80059c4:	40013400 	.word	0x40013400
 80059c8:	40014000 	.word	0x40014000
 80059cc:	40014400 	.word	0x40014400
 80059d0:	40014800 	.word	0x40014800

080059d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	021b      	lsls	r3, r3, #8
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	051b      	lsls	r3, r3, #20
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a18      	ldr	r2, [pc, #96]	@ (8005a8c <TIM_OC6_SetConfig+0xb8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d00f      	beq.n	8005a50 <TIM_OC6_SetConfig+0x7c>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a17      	ldr	r2, [pc, #92]	@ (8005a90 <TIM_OC6_SetConfig+0xbc>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d00b      	beq.n	8005a50 <TIM_OC6_SetConfig+0x7c>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a16      	ldr	r2, [pc, #88]	@ (8005a94 <TIM_OC6_SetConfig+0xc0>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d007      	beq.n	8005a50 <TIM_OC6_SetConfig+0x7c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a15      	ldr	r2, [pc, #84]	@ (8005a98 <TIM_OC6_SetConfig+0xc4>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d003      	beq.n	8005a50 <TIM_OC6_SetConfig+0x7c>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a14      	ldr	r2, [pc, #80]	@ (8005a9c <TIM_OC6_SetConfig+0xc8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d109      	bne.n	8005a64 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	029b      	lsls	r3, r3, #10
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	621a      	str	r2, [r3, #32]
}
 8005a7e:	bf00      	nop
 8005a80:	371c      	adds	r7, #28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40012c00 	.word	0x40012c00
 8005a90:	40013400 	.word	0x40013400
 8005a94:	40014000 	.word	0x40014000
 8005a98:	40014400 	.word	0x40014400
 8005a9c:	40014800 	.word	0x40014800

08005aa0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	f023 0201 	bic.w	r2, r3, #1
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4a26      	ldr	r2, [pc, #152]	@ (8005b64 <TIM_TI1_SetConfig+0xc4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d017      	beq.n	8005afe <TIM_TI1_SetConfig+0x5e>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ad4:	d013      	beq.n	8005afe <TIM_TI1_SetConfig+0x5e>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	4a23      	ldr	r2, [pc, #140]	@ (8005b68 <TIM_TI1_SetConfig+0xc8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00f      	beq.n	8005afe <TIM_TI1_SetConfig+0x5e>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4a22      	ldr	r2, [pc, #136]	@ (8005b6c <TIM_TI1_SetConfig+0xcc>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d00b      	beq.n	8005afe <TIM_TI1_SetConfig+0x5e>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4a21      	ldr	r2, [pc, #132]	@ (8005b70 <TIM_TI1_SetConfig+0xd0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d007      	beq.n	8005afe <TIM_TI1_SetConfig+0x5e>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4a20      	ldr	r2, [pc, #128]	@ (8005b74 <TIM_TI1_SetConfig+0xd4>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d003      	beq.n	8005afe <TIM_TI1_SetConfig+0x5e>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4a1f      	ldr	r2, [pc, #124]	@ (8005b78 <TIM_TI1_SetConfig+0xd8>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d101      	bne.n	8005b02 <TIM_TI1_SetConfig+0x62>
 8005afe:	2301      	movs	r3, #1
 8005b00:	e000      	b.n	8005b04 <TIM_TI1_SetConfig+0x64>
 8005b02:	2300      	movs	r3, #0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d008      	beq.n	8005b1a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f023 0303 	bic.w	r3, r3, #3
 8005b0e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	e003      	b.n	8005b22 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f043 0301 	orr.w	r3, r3, #1
 8005b20:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f023 030a 	bic.w	r3, r3, #10
 8005b3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f003 030a 	and.w	r3, r3, #10
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	621a      	str	r2, [r3, #32]
}
 8005b56:	bf00      	nop
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	40012c00 	.word	0x40012c00
 8005b68:	40000400 	.word	0x40000400
 8005b6c:	40000800 	.word	0x40000800
 8005b70:	40000c00 	.word	0x40000c00
 8005b74:	40013400 	.word	0x40013400
 8005b78:	40014000 	.word	0x40014000

08005b7c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	f023 0210 	bic.w	r2, r3, #16
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	021b      	lsls	r3, r3, #8
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	031b      	lsls	r3, r3, #12
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	011b      	lsls	r3, r3, #4
 8005bd4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	621a      	str	r2, [r3, #32]
}
 8005bea:	bf00      	nop
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b087      	sub	sp, #28
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	607a      	str	r2, [r7, #4]
 8005c02:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f023 0303 	bic.w	r3, r3, #3
 8005c22:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c32:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005c46:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	021b      	lsls	r3, r3, #8
 8005c4c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	621a      	str	r2, [r3, #32]
}
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b087      	sub	sp, #28
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
 8005c7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c9a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	021b      	lsls	r3, r3, #8
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	031b      	lsls	r3, r3, #12
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005cc0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	031b      	lsls	r3, r3, #12
 8005cc6:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	621a      	str	r2, [r3, #32]
}
 8005cdc:	bf00      	nop
 8005cde:	371c      	adds	r7, #28
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f003 031f 	and.w	r3, r3, #31
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a1a      	ldr	r2, [r3, #32]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	43db      	mvns	r3, r3
 8005d0a:	401a      	ands	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a1a      	ldr	r2, [r3, #32]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f003 031f 	and.w	r3, r3, #31
 8005d1a:	6879      	ldr	r1, [r7, #4]
 8005d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d20:	431a      	orrs	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
	...

08005d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e068      	b.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a2e      	ldr	r2, [pc, #184]	@ (8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d004      	beq.n	8005d80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a2d      	ldr	r2, [pc, #180]	@ (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d108      	bne.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a1e      	ldr	r2, [pc, #120]	@ (8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d01d      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dbe:	d018      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1b      	ldr	r2, [pc, #108]	@ (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d013      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a1a      	ldr	r2, [pc, #104]	@ (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00e      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a18      	ldr	r2, [pc, #96]	@ (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d009      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a13      	ldr	r2, [pc, #76]	@ (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d004      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a14      	ldr	r2, [pc, #80]	@ (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d10c      	bne.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005df8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	40012c00 	.word	0x40012c00
 8005e30:	40013400 	.word	0x40013400
 8005e34:	40000400 	.word	0x40000400
 8005e38:	40000800 	.word	0x40000800
 8005e3c:	40000c00 	.word	0x40000c00
 8005e40:	40014000 	.word	0x40014000

08005e44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d101      	bne.n	8005e60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e065      	b.n	8005f2c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	041b      	lsls	r3, r3, #16
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a16      	ldr	r2, [pc, #88]	@ (8005f38 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d004      	beq.n	8005eee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a14      	ldr	r2, [pc, #80]	@ (8005f3c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d115      	bne.n	8005f1a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef8:	051b      	lsls	r3, r3, #20
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	40012c00 	.word	0x40012c00
 8005f3c:	40013400 	.word	0x40013400

08005f40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e040      	b.n	8005fd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d106      	bne.n	8005f68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7fb fcd2 	bl	800190c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2224      	movs	r2, #36	@ 0x24
 8005f6c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 0201 	bic.w	r2, r2, #1
 8005f7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fae0 	bl	800654c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f825 	bl	8005fdc <UART_SetConfig>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d101      	bne.n	8005f9c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e01b      	b.n	8005fd4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005faa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0201 	orr.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fb5f 	bl	8006690 <UART_CheckIdleState>
 8005fd2:	4603      	mov	r3, r0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fe0:	b08a      	sub	sp, #40	@ 0x28
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	4313      	orrs	r3, r2
 8006002:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	4ba4      	ldr	r3, [pc, #656]	@ (800629c <UART_SetConfig+0x2c0>)
 800600c:	4013      	ands	r3, r2
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	6812      	ldr	r2, [r2, #0]
 8006012:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006014:	430b      	orrs	r3, r1
 8006016:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	68da      	ldr	r2, [r3, #12]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a99      	ldr	r2, [pc, #612]	@ (80062a0 <UART_SetConfig+0x2c4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d004      	beq.n	8006048 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006044:	4313      	orrs	r3, r2
 8006046:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006058:	430a      	orrs	r2, r1
 800605a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a90      	ldr	r2, [pc, #576]	@ (80062a4 <UART_SetConfig+0x2c8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d126      	bne.n	80060b4 <UART_SetConfig+0xd8>
 8006066:	4b90      	ldr	r3, [pc, #576]	@ (80062a8 <UART_SetConfig+0x2cc>)
 8006068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800606c:	f003 0303 	and.w	r3, r3, #3
 8006070:	2b03      	cmp	r3, #3
 8006072:	d81b      	bhi.n	80060ac <UART_SetConfig+0xd0>
 8006074:	a201      	add	r2, pc, #4	@ (adr r2, 800607c <UART_SetConfig+0xa0>)
 8006076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607a:	bf00      	nop
 800607c:	0800608d 	.word	0x0800608d
 8006080:	0800609d 	.word	0x0800609d
 8006084:	08006095 	.word	0x08006095
 8006088:	080060a5 	.word	0x080060a5
 800608c:	2301      	movs	r3, #1
 800608e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006092:	e116      	b.n	80062c2 <UART_SetConfig+0x2e6>
 8006094:	2302      	movs	r3, #2
 8006096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800609a:	e112      	b.n	80062c2 <UART_SetConfig+0x2e6>
 800609c:	2304      	movs	r3, #4
 800609e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060a2:	e10e      	b.n	80062c2 <UART_SetConfig+0x2e6>
 80060a4:	2308      	movs	r3, #8
 80060a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060aa:	e10a      	b.n	80062c2 <UART_SetConfig+0x2e6>
 80060ac:	2310      	movs	r3, #16
 80060ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060b2:	e106      	b.n	80062c2 <UART_SetConfig+0x2e6>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a7c      	ldr	r2, [pc, #496]	@ (80062ac <UART_SetConfig+0x2d0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d138      	bne.n	8006130 <UART_SetConfig+0x154>
 80060be:	4b7a      	ldr	r3, [pc, #488]	@ (80062a8 <UART_SetConfig+0x2cc>)
 80060c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c4:	f003 030c 	and.w	r3, r3, #12
 80060c8:	2b0c      	cmp	r3, #12
 80060ca:	d82d      	bhi.n	8006128 <UART_SetConfig+0x14c>
 80060cc:	a201      	add	r2, pc, #4	@ (adr r2, 80060d4 <UART_SetConfig+0xf8>)
 80060ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d2:	bf00      	nop
 80060d4:	08006109 	.word	0x08006109
 80060d8:	08006129 	.word	0x08006129
 80060dc:	08006129 	.word	0x08006129
 80060e0:	08006129 	.word	0x08006129
 80060e4:	08006119 	.word	0x08006119
 80060e8:	08006129 	.word	0x08006129
 80060ec:	08006129 	.word	0x08006129
 80060f0:	08006129 	.word	0x08006129
 80060f4:	08006111 	.word	0x08006111
 80060f8:	08006129 	.word	0x08006129
 80060fc:	08006129 	.word	0x08006129
 8006100:	08006129 	.word	0x08006129
 8006104:	08006121 	.word	0x08006121
 8006108:	2300      	movs	r3, #0
 800610a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800610e:	e0d8      	b.n	80062c2 <UART_SetConfig+0x2e6>
 8006110:	2302      	movs	r3, #2
 8006112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006116:	e0d4      	b.n	80062c2 <UART_SetConfig+0x2e6>
 8006118:	2304      	movs	r3, #4
 800611a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800611e:	e0d0      	b.n	80062c2 <UART_SetConfig+0x2e6>
 8006120:	2308      	movs	r3, #8
 8006122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006126:	e0cc      	b.n	80062c2 <UART_SetConfig+0x2e6>
 8006128:	2310      	movs	r3, #16
 800612a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800612e:	e0c8      	b.n	80062c2 <UART_SetConfig+0x2e6>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a5e      	ldr	r2, [pc, #376]	@ (80062b0 <UART_SetConfig+0x2d4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d125      	bne.n	8006186 <UART_SetConfig+0x1aa>
 800613a:	4b5b      	ldr	r3, [pc, #364]	@ (80062a8 <UART_SetConfig+0x2cc>)
 800613c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006140:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006144:	2b30      	cmp	r3, #48	@ 0x30
 8006146:	d016      	beq.n	8006176 <UART_SetConfig+0x19a>
 8006148:	2b30      	cmp	r3, #48	@ 0x30
 800614a:	d818      	bhi.n	800617e <UART_SetConfig+0x1a2>
 800614c:	2b20      	cmp	r3, #32
 800614e:	d00a      	beq.n	8006166 <UART_SetConfig+0x18a>
 8006150:	2b20      	cmp	r3, #32
 8006152:	d814      	bhi.n	800617e <UART_SetConfig+0x1a2>
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <UART_SetConfig+0x182>
 8006158:	2b10      	cmp	r3, #16
 800615a:	d008      	beq.n	800616e <UART_SetConfig+0x192>
 800615c:	e00f      	b.n	800617e <UART_SetConfig+0x1a2>
 800615e:	2300      	movs	r3, #0
 8006160:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006164:	e0ad      	b.n	80062c2 <UART_SetConfig+0x2e6>
 8006166:	2302      	movs	r3, #2
 8006168:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800616c:	e0a9      	b.n	80062c2 <UART_SetConfig+0x2e6>
 800616e:	2304      	movs	r3, #4
 8006170:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006174:	e0a5      	b.n	80062c2 <UART_SetConfig+0x2e6>
 8006176:	2308      	movs	r3, #8
 8006178:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800617c:	e0a1      	b.n	80062c2 <UART_SetConfig+0x2e6>
 800617e:	2310      	movs	r3, #16
 8006180:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006184:	e09d      	b.n	80062c2 <UART_SetConfig+0x2e6>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a4a      	ldr	r2, [pc, #296]	@ (80062b4 <UART_SetConfig+0x2d8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d125      	bne.n	80061dc <UART_SetConfig+0x200>
 8006190:	4b45      	ldr	r3, [pc, #276]	@ (80062a8 <UART_SetConfig+0x2cc>)
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006196:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800619a:	2bc0      	cmp	r3, #192	@ 0xc0
 800619c:	d016      	beq.n	80061cc <UART_SetConfig+0x1f0>
 800619e:	2bc0      	cmp	r3, #192	@ 0xc0
 80061a0:	d818      	bhi.n	80061d4 <UART_SetConfig+0x1f8>
 80061a2:	2b80      	cmp	r3, #128	@ 0x80
 80061a4:	d00a      	beq.n	80061bc <UART_SetConfig+0x1e0>
 80061a6:	2b80      	cmp	r3, #128	@ 0x80
 80061a8:	d814      	bhi.n	80061d4 <UART_SetConfig+0x1f8>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <UART_SetConfig+0x1d8>
 80061ae:	2b40      	cmp	r3, #64	@ 0x40
 80061b0:	d008      	beq.n	80061c4 <UART_SetConfig+0x1e8>
 80061b2:	e00f      	b.n	80061d4 <UART_SetConfig+0x1f8>
 80061b4:	2300      	movs	r3, #0
 80061b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ba:	e082      	b.n	80062c2 <UART_SetConfig+0x2e6>
 80061bc:	2302      	movs	r3, #2
 80061be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061c2:	e07e      	b.n	80062c2 <UART_SetConfig+0x2e6>
 80061c4:	2304      	movs	r3, #4
 80061c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ca:	e07a      	b.n	80062c2 <UART_SetConfig+0x2e6>
 80061cc:	2308      	movs	r3, #8
 80061ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061d2:	e076      	b.n	80062c2 <UART_SetConfig+0x2e6>
 80061d4:	2310      	movs	r3, #16
 80061d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061da:	e072      	b.n	80062c2 <UART_SetConfig+0x2e6>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a35      	ldr	r2, [pc, #212]	@ (80062b8 <UART_SetConfig+0x2dc>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d12a      	bne.n	800623c <UART_SetConfig+0x260>
 80061e6:	4b30      	ldr	r3, [pc, #192]	@ (80062a8 <UART_SetConfig+0x2cc>)
 80061e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061f4:	d01a      	beq.n	800622c <UART_SetConfig+0x250>
 80061f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061fa:	d81b      	bhi.n	8006234 <UART_SetConfig+0x258>
 80061fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006200:	d00c      	beq.n	800621c <UART_SetConfig+0x240>
 8006202:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006206:	d815      	bhi.n	8006234 <UART_SetConfig+0x258>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d003      	beq.n	8006214 <UART_SetConfig+0x238>
 800620c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006210:	d008      	beq.n	8006224 <UART_SetConfig+0x248>
 8006212:	e00f      	b.n	8006234 <UART_SetConfig+0x258>
 8006214:	2300      	movs	r3, #0
 8006216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800621a:	e052      	b.n	80062c2 <UART_SetConfig+0x2e6>
 800621c:	2302      	movs	r3, #2
 800621e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006222:	e04e      	b.n	80062c2 <UART_SetConfig+0x2e6>
 8006224:	2304      	movs	r3, #4
 8006226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800622a:	e04a      	b.n	80062c2 <UART_SetConfig+0x2e6>
 800622c:	2308      	movs	r3, #8
 800622e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006232:	e046      	b.n	80062c2 <UART_SetConfig+0x2e6>
 8006234:	2310      	movs	r3, #16
 8006236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800623a:	e042      	b.n	80062c2 <UART_SetConfig+0x2e6>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a17      	ldr	r2, [pc, #92]	@ (80062a0 <UART_SetConfig+0x2c4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d13a      	bne.n	80062bc <UART_SetConfig+0x2e0>
 8006246:	4b18      	ldr	r3, [pc, #96]	@ (80062a8 <UART_SetConfig+0x2cc>)
 8006248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800624c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006250:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006254:	d01a      	beq.n	800628c <UART_SetConfig+0x2b0>
 8006256:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800625a:	d81b      	bhi.n	8006294 <UART_SetConfig+0x2b8>
 800625c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006260:	d00c      	beq.n	800627c <UART_SetConfig+0x2a0>
 8006262:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006266:	d815      	bhi.n	8006294 <UART_SetConfig+0x2b8>
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <UART_SetConfig+0x298>
 800626c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006270:	d008      	beq.n	8006284 <UART_SetConfig+0x2a8>
 8006272:	e00f      	b.n	8006294 <UART_SetConfig+0x2b8>
 8006274:	2300      	movs	r3, #0
 8006276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800627a:	e022      	b.n	80062c2 <UART_SetConfig+0x2e6>
 800627c:	2302      	movs	r3, #2
 800627e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006282:	e01e      	b.n	80062c2 <UART_SetConfig+0x2e6>
 8006284:	2304      	movs	r3, #4
 8006286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800628a:	e01a      	b.n	80062c2 <UART_SetConfig+0x2e6>
 800628c:	2308      	movs	r3, #8
 800628e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006292:	e016      	b.n	80062c2 <UART_SetConfig+0x2e6>
 8006294:	2310      	movs	r3, #16
 8006296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800629a:	e012      	b.n	80062c2 <UART_SetConfig+0x2e6>
 800629c:	efff69f3 	.word	0xefff69f3
 80062a0:	40008000 	.word	0x40008000
 80062a4:	40013800 	.word	0x40013800
 80062a8:	40021000 	.word	0x40021000
 80062ac:	40004400 	.word	0x40004400
 80062b0:	40004800 	.word	0x40004800
 80062b4:	40004c00 	.word	0x40004c00
 80062b8:	40005000 	.word	0x40005000
 80062bc:	2310      	movs	r3, #16
 80062be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a9f      	ldr	r2, [pc, #636]	@ (8006544 <UART_SetConfig+0x568>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d17a      	bne.n	80063c2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80062d0:	2b08      	cmp	r3, #8
 80062d2:	d824      	bhi.n	800631e <UART_SetConfig+0x342>
 80062d4:	a201      	add	r2, pc, #4	@ (adr r2, 80062dc <UART_SetConfig+0x300>)
 80062d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062da:	bf00      	nop
 80062dc:	08006301 	.word	0x08006301
 80062e0:	0800631f 	.word	0x0800631f
 80062e4:	08006309 	.word	0x08006309
 80062e8:	0800631f 	.word	0x0800631f
 80062ec:	0800630f 	.word	0x0800630f
 80062f0:	0800631f 	.word	0x0800631f
 80062f4:	0800631f 	.word	0x0800631f
 80062f8:	0800631f 	.word	0x0800631f
 80062fc:	08006317 	.word	0x08006317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006300:	f7fd fdbc 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 8006304:	61f8      	str	r0, [r7, #28]
        break;
 8006306:	e010      	b.n	800632a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006308:	4b8f      	ldr	r3, [pc, #572]	@ (8006548 <UART_SetConfig+0x56c>)
 800630a:	61fb      	str	r3, [r7, #28]
        break;
 800630c:	e00d      	b.n	800632a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800630e:	f7fd fd1d 	bl	8003d4c <HAL_RCC_GetSysClockFreq>
 8006312:	61f8      	str	r0, [r7, #28]
        break;
 8006314:	e009      	b.n	800632a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800631a:	61fb      	str	r3, [r7, #28]
        break;
 800631c:	e005      	b.n	800632a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006328:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 80fb 	beq.w	8006528 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	4613      	mov	r3, r2
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	4413      	add	r3, r2
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	429a      	cmp	r2, r3
 8006340:	d305      	bcc.n	800634e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006348:	69fa      	ldr	r2, [r7, #28]
 800634a:	429a      	cmp	r2, r3
 800634c:	d903      	bls.n	8006356 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006354:	e0e8      	b.n	8006528 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	2200      	movs	r2, #0
 800635a:	461c      	mov	r4, r3
 800635c:	4615      	mov	r5, r2
 800635e:	f04f 0200 	mov.w	r2, #0
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	022b      	lsls	r3, r5, #8
 8006368:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800636c:	0222      	lsls	r2, r4, #8
 800636e:	68f9      	ldr	r1, [r7, #12]
 8006370:	6849      	ldr	r1, [r1, #4]
 8006372:	0849      	lsrs	r1, r1, #1
 8006374:	2000      	movs	r0, #0
 8006376:	4688      	mov	r8, r1
 8006378:	4681      	mov	r9, r0
 800637a:	eb12 0a08 	adds.w	sl, r2, r8
 800637e:	eb43 0b09 	adc.w	fp, r3, r9
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	603b      	str	r3, [r7, #0]
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006390:	4650      	mov	r0, sl
 8006392:	4659      	mov	r1, fp
 8006394:	f7f9 ff18 	bl	80001c8 <__aeabi_uldivmod>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4613      	mov	r3, r2
 800639e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063a6:	d308      	bcc.n	80063ba <UART_SetConfig+0x3de>
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063ae:	d204      	bcs.n	80063ba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	60da      	str	r2, [r3, #12]
 80063b8:	e0b6      	b.n	8006528 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80063c0:	e0b2      	b.n	8006528 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ca:	d15e      	bne.n	800648a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80063cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d828      	bhi.n	8006426 <UART_SetConfig+0x44a>
 80063d4:	a201      	add	r2, pc, #4	@ (adr r2, 80063dc <UART_SetConfig+0x400>)
 80063d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063da:	bf00      	nop
 80063dc:	08006401 	.word	0x08006401
 80063e0:	08006409 	.word	0x08006409
 80063e4:	08006411 	.word	0x08006411
 80063e8:	08006427 	.word	0x08006427
 80063ec:	08006417 	.word	0x08006417
 80063f0:	08006427 	.word	0x08006427
 80063f4:	08006427 	.word	0x08006427
 80063f8:	08006427 	.word	0x08006427
 80063fc:	0800641f 	.word	0x0800641f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006400:	f7fd fd3c 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 8006404:	61f8      	str	r0, [r7, #28]
        break;
 8006406:	e014      	b.n	8006432 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006408:	f7fd fd4e 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 800640c:	61f8      	str	r0, [r7, #28]
        break;
 800640e:	e010      	b.n	8006432 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006410:	4b4d      	ldr	r3, [pc, #308]	@ (8006548 <UART_SetConfig+0x56c>)
 8006412:	61fb      	str	r3, [r7, #28]
        break;
 8006414:	e00d      	b.n	8006432 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006416:	f7fd fc99 	bl	8003d4c <HAL_RCC_GetSysClockFreq>
 800641a:	61f8      	str	r0, [r7, #28]
        break;
 800641c:	e009      	b.n	8006432 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800641e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006422:	61fb      	str	r3, [r7, #28]
        break;
 8006424:	e005      	b.n	8006432 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006426:	2300      	movs	r3, #0
 8006428:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006430:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d077      	beq.n	8006528 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	005a      	lsls	r2, r3, #1
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	085b      	lsrs	r3, r3, #1
 8006442:	441a      	add	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	fbb2 f3f3 	udiv	r3, r2, r3
 800644c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b0f      	cmp	r3, #15
 8006452:	d916      	bls.n	8006482 <UART_SetConfig+0x4a6>
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800645a:	d212      	bcs.n	8006482 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f023 030f 	bic.w	r3, r3, #15
 8006464:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	085b      	lsrs	r3, r3, #1
 800646a:	b29b      	uxth	r3, r3
 800646c:	f003 0307 	and.w	r3, r3, #7
 8006470:	b29a      	uxth	r2, r3
 8006472:	8afb      	ldrh	r3, [r7, #22]
 8006474:	4313      	orrs	r3, r2
 8006476:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	8afa      	ldrh	r2, [r7, #22]
 800647e:	60da      	str	r2, [r3, #12]
 8006480:	e052      	b.n	8006528 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006488:	e04e      	b.n	8006528 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800648a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800648e:	2b08      	cmp	r3, #8
 8006490:	d827      	bhi.n	80064e2 <UART_SetConfig+0x506>
 8006492:	a201      	add	r2, pc, #4	@ (adr r2, 8006498 <UART_SetConfig+0x4bc>)
 8006494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006498:	080064bd 	.word	0x080064bd
 800649c:	080064c5 	.word	0x080064c5
 80064a0:	080064cd 	.word	0x080064cd
 80064a4:	080064e3 	.word	0x080064e3
 80064a8:	080064d3 	.word	0x080064d3
 80064ac:	080064e3 	.word	0x080064e3
 80064b0:	080064e3 	.word	0x080064e3
 80064b4:	080064e3 	.word	0x080064e3
 80064b8:	080064db 	.word	0x080064db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064bc:	f7fd fcde 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 80064c0:	61f8      	str	r0, [r7, #28]
        break;
 80064c2:	e014      	b.n	80064ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064c4:	f7fd fcf0 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 80064c8:	61f8      	str	r0, [r7, #28]
        break;
 80064ca:	e010      	b.n	80064ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064cc:	4b1e      	ldr	r3, [pc, #120]	@ (8006548 <UART_SetConfig+0x56c>)
 80064ce:	61fb      	str	r3, [r7, #28]
        break;
 80064d0:	e00d      	b.n	80064ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064d2:	f7fd fc3b 	bl	8003d4c <HAL_RCC_GetSysClockFreq>
 80064d6:	61f8      	str	r0, [r7, #28]
        break;
 80064d8:	e009      	b.n	80064ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064de:	61fb      	str	r3, [r7, #28]
        break;
 80064e0:	e005      	b.n	80064ee <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80064ec:	bf00      	nop
    }

    if (pclk != 0U)
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d019      	beq.n	8006528 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	085a      	lsrs	r2, r3, #1
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	441a      	add	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	fbb2 f3f3 	udiv	r3, r2, r3
 8006506:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	2b0f      	cmp	r3, #15
 800650c:	d909      	bls.n	8006522 <UART_SetConfig+0x546>
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006514:	d205      	bcs.n	8006522 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	b29a      	uxth	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60da      	str	r2, [r3, #12]
 8006520:	e002      	b.n	8006528 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006534:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006538:	4618      	mov	r0, r3
 800653a:	3728      	adds	r7, #40	@ 0x28
 800653c:	46bd      	mov	sp, r7
 800653e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006542:	bf00      	nop
 8006544:	40008000 	.word	0x40008000
 8006548:	00f42400 	.word	0x00f42400

0800654c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006558:	f003 0308 	and.w	r3, r3, #8
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00a      	beq.n	8006576 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00a      	beq.n	8006598 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00a      	beq.n	80065ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065be:	f003 0304 	and.w	r3, r3, #4
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e0:	f003 0310 	and.w	r3, r3, #16
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00a      	beq.n	80065fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01a      	beq.n	8006662 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006646:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800664a:	d10a      	bne.n	8006662 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	605a      	str	r2, [r3, #4]
  }
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b098      	sub	sp, #96	@ 0x60
 8006694:	af02      	add	r7, sp, #8
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066a0:	f7fb fa66 	bl	8001b70 <HAL_GetTick>
 80066a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0308 	and.w	r3, r3, #8
 80066b0:	2b08      	cmp	r3, #8
 80066b2:	d12e      	bne.n	8006712 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066bc:	2200      	movs	r2, #0
 80066be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f88c 	bl	80067e0 <UART_WaitOnFlagUntilTimeout>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d021      	beq.n	8006712 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d6:	e853 3f00 	ldrex	r3, [r3]
 80066da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	461a      	mov	r2, r3
 80066ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80066ee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066f4:	e841 2300 	strex	r3, r2, [r1]
 80066f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e6      	bne.n	80066ce <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2220      	movs	r2, #32
 8006704:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e062      	b.n	80067d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b04      	cmp	r3, #4
 800671e:	d149      	bne.n	80067b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006720:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006728:	2200      	movs	r2, #0
 800672a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f856 	bl	80067e0 <UART_WaitOnFlagUntilTimeout>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d03c      	beq.n	80067b4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	e853 3f00 	ldrex	r3, [r3]
 8006746:	623b      	str	r3, [r7, #32]
   return(result);
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800674e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006758:	633b      	str	r3, [r7, #48]	@ 0x30
 800675a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800675e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e6      	bne.n	800673a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3308      	adds	r3, #8
 8006772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	e853 3f00 	ldrex	r3, [r3]
 800677a:	60fb      	str	r3, [r7, #12]
   return(result);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0301 	bic.w	r3, r3, #1
 8006782:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3308      	adds	r3, #8
 800678a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800678c:	61fa      	str	r2, [r7, #28]
 800678e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006790:	69b9      	ldr	r1, [r7, #24]
 8006792:	69fa      	ldr	r2, [r7, #28]
 8006794:	e841 2300 	strex	r3, r2, [r1]
 8006798:	617b      	str	r3, [r7, #20]
   return(result);
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e5      	bne.n	800676c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e011      	b.n	80067d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2220      	movs	r2, #32
 80067b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2220      	movs	r2, #32
 80067be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3758      	adds	r7, #88	@ 0x58
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	603b      	str	r3, [r7, #0]
 80067ec:	4613      	mov	r3, r2
 80067ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067f0:	e049      	b.n	8006886 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f8:	d045      	beq.n	8006886 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fa:	f7fb f9b9 	bl	8001b70 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	429a      	cmp	r2, r3
 8006808:	d302      	bcc.n	8006810 <UART_WaitOnFlagUntilTimeout+0x30>
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e048      	b.n	80068a6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0304 	and.w	r3, r3, #4
 800681e:	2b00      	cmp	r3, #0
 8006820:	d031      	beq.n	8006886 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	f003 0308 	and.w	r3, r3, #8
 800682c:	2b08      	cmp	r3, #8
 800682e:	d110      	bne.n	8006852 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2208      	movs	r2, #8
 8006836:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 f838 	bl	80068ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2208      	movs	r2, #8
 8006842:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e029      	b.n	80068a6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800685c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006860:	d111      	bne.n	8006886 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800686a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f81e 	bl	80068ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2220      	movs	r2, #32
 8006876:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e00f      	b.n	80068a6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69da      	ldr	r2, [r3, #28]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	4013      	ands	r3, r2
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	429a      	cmp	r2, r3
 8006894:	bf0c      	ite	eq
 8006896:	2301      	moveq	r3, #1
 8006898:	2300      	movne	r3, #0
 800689a:	b2db      	uxtb	r3, r3
 800689c:	461a      	mov	r2, r3
 800689e:	79fb      	ldrb	r3, [r7, #7]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d0a6      	beq.n	80067f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b095      	sub	sp, #84	@ 0x54
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068be:	e853 3f00 	ldrex	r3, [r3]
 80068c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	461a      	mov	r2, r3
 80068d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80068d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e6      	bne.n	80068b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3308      	adds	r3, #8
 80068ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	e853 3f00 	ldrex	r3, [r3]
 80068f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	f023 0301 	bic.w	r3, r3, #1
 80068fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	3308      	adds	r3, #8
 8006906:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006908:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800690a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800690e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006910:	e841 2300 	strex	r3, r2, [r1]
 8006914:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1e5      	bne.n	80068e8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006920:	2b01      	cmp	r3, #1
 8006922:	d118      	bne.n	8006956 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	60bb      	str	r3, [r7, #8]
   return(result);
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f023 0310 	bic.w	r3, r3, #16
 8006938:	647b      	str	r3, [r7, #68]	@ 0x44
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006942:	61bb      	str	r3, [r7, #24]
 8006944:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6979      	ldr	r1, [r7, #20]
 8006948:	69ba      	ldr	r2, [r7, #24]
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	613b      	str	r3, [r7, #16]
   return(result);
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e6      	bne.n	8006924 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2220      	movs	r2, #32
 800695a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800696a:	bf00      	nop
 800696c:	3754      	adds	r7, #84	@ 0x54
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <memset>:
 8006976:	4402      	add	r2, r0
 8006978:	4603      	mov	r3, r0
 800697a:	4293      	cmp	r3, r2
 800697c:	d100      	bne.n	8006980 <memset+0xa>
 800697e:	4770      	bx	lr
 8006980:	f803 1b01 	strb.w	r1, [r3], #1
 8006984:	e7f9      	b.n	800697a <memset+0x4>
	...

08006988 <__libc_init_array>:
 8006988:	b570      	push	{r4, r5, r6, lr}
 800698a:	4d0d      	ldr	r5, [pc, #52]	@ (80069c0 <__libc_init_array+0x38>)
 800698c:	4c0d      	ldr	r4, [pc, #52]	@ (80069c4 <__libc_init_array+0x3c>)
 800698e:	1b64      	subs	r4, r4, r5
 8006990:	10a4      	asrs	r4, r4, #2
 8006992:	2600      	movs	r6, #0
 8006994:	42a6      	cmp	r6, r4
 8006996:	d109      	bne.n	80069ac <__libc_init_array+0x24>
 8006998:	4d0b      	ldr	r5, [pc, #44]	@ (80069c8 <__libc_init_array+0x40>)
 800699a:	4c0c      	ldr	r4, [pc, #48]	@ (80069cc <__libc_init_array+0x44>)
 800699c:	f000 f818 	bl	80069d0 <_init>
 80069a0:	1b64      	subs	r4, r4, r5
 80069a2:	10a4      	asrs	r4, r4, #2
 80069a4:	2600      	movs	r6, #0
 80069a6:	42a6      	cmp	r6, r4
 80069a8:	d105      	bne.n	80069b6 <__libc_init_array+0x2e>
 80069aa:	bd70      	pop	{r4, r5, r6, pc}
 80069ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80069b0:	4798      	blx	r3
 80069b2:	3601      	adds	r6, #1
 80069b4:	e7ee      	b.n	8006994 <__libc_init_array+0xc>
 80069b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ba:	4798      	blx	r3
 80069bc:	3601      	adds	r6, #1
 80069be:	e7f2      	b.n	80069a6 <__libc_init_array+0x1e>
 80069c0:	08006a38 	.word	0x08006a38
 80069c4:	08006a38 	.word	0x08006a38
 80069c8:	08006a38 	.word	0x08006a38
 80069cc:	08006a3c 	.word	0x08006a3c

080069d0 <_init>:
 80069d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d2:	bf00      	nop
 80069d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d6:	bc08      	pop	{r3}
 80069d8:	469e      	mov	lr, r3
 80069da:	4770      	bx	lr

080069dc <_fini>:
 80069dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069de:	bf00      	nop
 80069e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e2:	bc08      	pop	{r3}
 80069e4:	469e      	mov	lr, r3
 80069e6:	4770      	bx	lr
