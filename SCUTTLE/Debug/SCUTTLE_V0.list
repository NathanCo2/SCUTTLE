
SCUTTLE_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081ac  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08008334  08008334  00009334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800837c  0800837c  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000008  0800837c  0800837c  0000937c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008384  08008384  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008384  08008384  00009384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008388  08008388  00009388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800838c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  2000000c  08008398  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08008398  0000a4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e52  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d81  00000000  00000000  00022e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  00025c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011c0  00000000  00000000  00027288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000029d4  00000000  00000000  00028448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ad04  00000000  00000000  0002ae1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f76ed  00000000  00000000  00045b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d20d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061ac  00000000  00000000  0013d250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001433fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800831c 	.word	0x0800831c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800831c 	.word	0x0800831c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f001 fbb6 	bl	8001c2e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f8b1 	bl	8000628 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004c6:	f000 f8fe 	bl	80006c6 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ca:	f000 fe6b 	bl	80011a4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004ce:	f000 fab3 	bl	8000a38 <MX_TIM1_Init>
  MX_ADC1_Init();
 80004d2:	f000 f923 	bl	800071c <MX_ADC1_Init>
  MX_ADC2_Init();
 80004d6:	f000 f997 	bl	8000808 <MX_ADC2_Init>
  MX_ADC3_Init();
 80004da:	f000 fa09 	bl	80008f0 <MX_ADC3_Init>
  MX_TIM2_Init();
 80004de:	f000 fb9b 	bl	8000c18 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004e2:	f000 fbed 	bl	8000cc0 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80004e6:	f000 fe29 	bl	800113c <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80004ea:	f000 fc3f 	bl	8000d6c <MX_TIM4_Init>
  MX_TIM5_Init();
 80004ee:	f000 fc93 	bl	8000e18 <MX_TIM5_Init>
  MX_I2C2_Init();
 80004f2:	f000 fa61 	bl	80009b8 <MX_I2C2_Init>
  MX_TIM8_Init();
 80004f6:	f000 fcef 	bl	8000ed8 <MX_TIM8_Init>
  MX_TIM15_Init();
 80004fa:	f000 fda1 	bl	8001040 <MX_TIM15_Init>
  MX_TIM17_Init();
 80004fe:	f000 fdf7 	bl	80010f0 <MX_TIM17_Init>

  //Put timers in correct mode
  ;


  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8000502:	2100      	movs	r1, #0
 8000504:	483e      	ldr	r0, [pc, #248]	@ (8000600 <main+0x148>)
 8000506:	f004 fea1 	bl	800524c <HAL_TIM_IC_Start_IT>
  //Set ADC in correct mode
  HAL_ADC_Start(&hadc1);
 800050a:	483e      	ldr	r0, [pc, #248]	@ (8000604 <main+0x14c>)
 800050c:	f001 ff16 	bl	800233c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000510:	483d      	ldr	r0, [pc, #244]	@ (8000608 <main+0x150>)
 8000512:	f001 ff13 	bl	800233c <HAL_ADC_Start>
  //hadc1.Init.EOCSelection = DISABLE; //Apparently important
  //hadc2.Init.EOCSelection = DISABLE; //Apparently important
  HAL_ADC_Start(&hadc3);
 8000516:	483d      	ldr	r0, [pc, #244]	@ (800060c <main+0x154>)
 8000518:	f001 ff10 	bl	800233c <HAL_ADC_Start>
  //hadc3.Init.EOCSelection = DISABLE; //Apparently important


	// Start PWM for motor 1 and motor 2 channels
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800051c:	2100      	movs	r1, #0
 800051e:	483c      	ldr	r0, [pc, #240]	@ (8000610 <main+0x158>)
 8000520:	f004 fd36 	bl	8004f90 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000524:	2104      	movs	r1, #4
 8000526:	483a      	ldr	r0, [pc, #232]	@ (8000610 <main+0x158>)
 8000528:	f004 fd32 	bl	8004f90 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800052c:	2108      	movs	r1, #8
 800052e:	4838      	ldr	r0, [pc, #224]	@ (8000610 <main+0x158>)
 8000530:	f004 fd2e 	bl	8004f90 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000534:	210c      	movs	r1, #12
 8000536:	4836      	ldr	r0, [pc, #216]	@ (8000610 <main+0x158>)
 8000538:	f004 fd2a 	bl	8004f90 <HAL_TIM_PWM_Start>

  	// Enable motors 1 (PB1) and 2 (PB2)
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	f243 0106 	movw	r1, #12294	@ 0x3006
 8000542:	4834      	ldr	r0, [pc, #208]	@ (8000614 <main+0x15c>)
 8000544:	f003 f83c 	bl	80035c0 <HAL_GPIO_WritePin>

	// Start the encoders and enable interrupts
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000548:	213c      	movs	r1, #60	@ 0x3c
 800054a:	4833      	ldr	r0, [pc, #204]	@ (8000618 <main+0x160>)
 800054c:	f005 f86e 	bl	800562c <HAL_TIM_Encoder_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8000550:	4b31      	ldr	r3, [pc, #196]	@ (8000618 <main+0x160>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2200      	movs	r2, #0
 8000556:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000558:	213c      	movs	r1, #60	@ 0x3c
 800055a:	4830      	ldr	r0, [pc, #192]	@ (800061c <main+0x164>)
 800055c:	f005 f866 	bl	800562c <HAL_TIM_Encoder_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim4,0);
 8000560:	4b2e      	ldr	r3, [pc, #184]	@ (800061c <main+0x164>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2200      	movs	r2, #0
 8000566:	625a      	str	r2, [r3, #36]	@ 0x24




  uint8_t task = 0; //State variable for main loop
 8000568:	2300      	movs	r3, #0
 800056a:	73fb      	strb	r3, [r7, #15]
  uint8_t T1State = 0; //Task 1 State
 800056c:	2300      	movs	r3, #0
 800056e:	73bb      	strb	r3, [r7, #14]
  uint8_t T2State = 0; //Task 2 State
 8000570:	2300      	movs	r3, #0
 8000572:	737b      	strb	r3, [r7, #13]
  uint8_t T3State = 0; //Task 3 State
 8000574:	2300      	movs	r3, #0
 8000576:	733b      	strb	r3, [r7, #12]
  uint8_t T4State = 0; //Task 4 State
 8000578:	2300      	movs	r3, #0
 800057a:	72fb      	strb	r3, [r7, #11]
  uint8_t T5State = 0; //Task 5 State
 800057c:	2300      	movs	r3, #0
 800057e:	72bb      	strb	r3, [r7, #10]
  uint8_t T6State = 0; //Task 6 State
 8000580:	2300      	movs	r3, #0
 8000582:	727b      	strb	r3, [r7, #9]

  //Set motors, metal detector, and camera to ON by default. Will turn off if battery too low or killswitch active
   uint8_t DriveON_Rad = 1; //Radio Drive ON
 8000584:	2301      	movs	r3, #1
 8000586:	723b      	strb	r3, [r7, #8]
   uint8_t ArmON = 1;
 8000588:	2301      	movs	r3, #1
 800058a:	71fb      	strb	r3, [r7, #7]

   uint8_t OpenMV = 1; //Camera Update On
 800058c:	2301      	movs	r3, #1
 800058e:	71bb      	strb	r3, [r7, #6]


   uint8_t Follow = 1; //Follow mode
 8000590:	2301      	movs	r3, #1
 8000592:	717b      	strb	r3, [r7, #5]



   //Set Kill switch to be off by default
   uint8_t BatKill = 0; //If Kill is 1 then turn everything off
 8000594:	2300      	movs	r3, #0
 8000596:	713b      	strb	r3, [r7, #4]
   uint8_t RadKill = 0; //Radio Kill switch
 8000598:	2300      	movs	r3, #0
 800059a:	70fb      	strb	r3, [r7, #3]

   HAL_UART_Receive_IT(&huart3, rx_buff, 8);
 800059c:	2208      	movs	r2, #8
 800059e:	4920      	ldr	r1, [pc, #128]	@ (8000620 <main+0x168>)
 80005a0:	4820      	ldr	r0, [pc, #128]	@ (8000624 <main+0x16c>)
 80005a2:	f006 fb9f 	bl	8006ce4 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  //Run FSM
	  switch(task){
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	2b06      	cmp	r3, #6
 80005aa:	d8fc      	bhi.n	80005a6 <main+0xee>
 80005ac:	a201      	add	r2, pc, #4	@ (adr r2, 80005b4 <main+0xfc>)
 80005ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b2:	bf00      	nop
 80005b4:	080005d1 	.word	0x080005d1
 80005b8:	080005d7 	.word	0x080005d7
 80005bc:	080005dd 	.word	0x080005dd
 80005c0:	080005e3 	.word	0x080005e3
 80005c4:	080005e9 	.word	0x080005e9
 80005c8:	080005ef 	.word	0x080005ef
 80005cc:	080005f5 	.word	0x080005f5

	  case 0: //State 0
		  //State 0: INIT
		  //Do not make file for this, just Initialize as necessary
		  task = 1;
 80005d0:	2301      	movs	r3, #1
 80005d2:	73fb      	strb	r3, [r7, #15]
		  break;
 80005d4:	e012      	b.n	80005fc <main+0x144>

	  case 1: //State 1
		  //State 1: Diagnostics
		  //Check battery and shut off if necessary
		  //task1_run(&T1State, hadc2,&BatKill);
		  task = 2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	73fb      	strb	r3, [r7, #15]
		  break;
 80005da:	e00f      	b.n	80005fc <main+0x144>

	  case 2: //State 2
		  //State 2: Radio
		  //Check killswitches and radio, act accordingly
		  //task2_run(&T2State,&BatKill,&RadKill,&usWidth,&DriveON_Rad,&ArmON,&MDON,&OpenMV);
	  	  task = 3;
 80005dc:	2303      	movs	r3, #3
 80005de:	73fb      	strb	r3, [r7, #15]
	  	  break;
 80005e0:	e00c      	b.n	80005fc <main+0x144>

	  case 3: //State 3
		  //State 3: OpenMV Camera
	  	  //task3_run(&T3State,&Distance_Target,&Angle_Target,&SPI_Rec,&Follow,&OpenMV, huart3);
		  task = 4;
 80005e2:	2304      	movs	r3, #4
 80005e4:	73fb      	strb	r3, [r7, #15]
	  	  break;
 80005e6:	e009      	b.n	80005fc <main+0x144>

	  case 4: //State 4
		  //State 4: Metal Detector
	  	  //task4_run(&T4State,&MDON,&sumval,htim17,&Metal_Found, hadc1, hadc2, hadc3);
	  	  task = 5;
 80005e8:	2305      	movs	r3, #5
 80005ea:	73fb      	strb	r3, [r7, #15]
	  	  break;
 80005ec:	e006      	b.n	80005fc <main+0x144>

	  case 5: //State 5
		  //State 5: Arm Motor
	  	  //task5_run(&T5State,&ArmON,&Metal_Found,htim17,&sumval);
	  	  task = 6;
 80005ee:	2306      	movs	r3, #6
 80005f0:	73fb      	strb	r3, [r7, #15]
	  	  break;
 80005f2:	e003      	b.n	80005fc <main+0x144>

	  case 6: //State 6
		  //State 6:
	  	  //Insert State 6 class here
		  //task6_run(&T6State, &Metal_Found, &DriveON_Rad, &Follow,&Distance_Target,&Angle_Target,htim1,htim3,htim4);
	  	  task = 1; //Do not go back to init
 80005f4:	2301      	movs	r3, #1
 80005f6:	73fb      	strb	r3, [r7, #15]
	  	  break;
 80005f8:	bf00      	nop
 80005fa:	e7d4      	b.n	80005a6 <main+0xee>
	  switch(task){
 80005fc:	e7d3      	b.n	80005a6 <main+0xee>
 80005fe:	bf00      	nop
 8000600:	20000370 	.word	0x20000370
 8000604:	20000028 	.word	0x20000028
 8000608:	2000008c 	.word	0x2000008c
 800060c:	200000f0 	.word	0x200000f0
 8000610:	200001a8 	.word	0x200001a8
 8000614:	48000400 	.word	0x48000400
 8000618:	20000240 	.word	0x20000240
 800061c:	2000028c 	.word	0x2000028c
 8000620:	200004ac 	.word	0x200004ac
 8000624:	20000408 	.word	0x20000408

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b096      	sub	sp, #88	@ 0x58
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	2244      	movs	r2, #68	@ 0x44
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f007 fe44 	bl	80082c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800064a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800064e:	f003 f90f 	bl	8003870 <HAL_PWREx_ControlVoltageScaling>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000658:	f000 fec2 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000660:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	2303      	movs	r3, #3
 800066c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 800066e:	2305      	movs	r3, #5
 8000670:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000672:	2320      	movs	r3, #32
 8000674:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000676:	2307      	movs	r3, #7
 8000678:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4618      	mov	r0, r3
 8000688:	f003 f948 	bl	800391c <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000692:	f000 fea5 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2303      	movs	r3, #3
 800069c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	2104      	movs	r1, #4
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 fd10 	bl	80040d4 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ba:	f000 fe91 	bl	80013e0 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3758      	adds	r7, #88	@ 0x58
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b0a2      	sub	sp, #136	@ 0x88
 80006ca:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2284      	movs	r2, #132	@ 0x84
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f007 fdf6 	bl	80082c4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006de:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80006e2:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80006e4:	2303      	movs	r3, #3
 80006e6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 80006e8:	2305      	movs	r3, #5
 80006ea:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80006ec:	2318      	movs	r3, #24
 80006ee:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006f0:	2307      	movs	r3, #7
 80006f2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000700:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4618      	mov	r0, r3
 8000706:	f003 ff09 	bl	800451c <HAL_RCCEx_PeriphCLKConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000710:	f000 fe66 	bl	80013e0 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3788      	adds	r7, #136	@ 0x88
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	@ 0x28
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
 800073c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800073e:	4b2f      	ldr	r3, [pc, #188]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000740:	4a2f      	ldr	r2, [pc, #188]	@ (8000800 <MX_ADC1_Init+0xe4>)
 8000742:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000744:	4b2d      	ldr	r3, [pc, #180]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074a:	4b2c      	ldr	r3, [pc, #176]	@ (80007fc <MX_ADC1_Init+0xe0>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000750:	4b2a      	ldr	r3, [pc, #168]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000756:	4b29      	ldr	r3, [pc, #164]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800075c:	4b27      	ldr	r3, [pc, #156]	@ (80007fc <MX_ADC1_Init+0xe0>)
 800075e:	2204      	movs	r2, #4
 8000760:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000762:	4b26      	ldr	r3, [pc, #152]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000764:	2200      	movs	r2, #0
 8000766:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000768:	4b24      	ldr	r3, [pc, #144]	@ (80007fc <MX_ADC1_Init+0xe0>)
 800076a:	2200      	movs	r2, #0
 800076c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800076e:	4b23      	ldr	r3, [pc, #140]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000770:	2201      	movs	r2, #1
 8000772:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000774:	4b21      	ldr	r3, [pc, #132]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000776:	2200      	movs	r2, #0
 8000778:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800077c:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <MX_ADC1_Init+0xe0>)
 800077e:	2200      	movs	r2, #0
 8000780:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000782:	4b1e      	ldr	r3, [pc, #120]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000784:	2200      	movs	r2, #0
 8000786:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000788:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <MX_ADC1_Init+0xe0>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000790:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000792:	2200      	movs	r2, #0
 8000794:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000796:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800079e:	4817      	ldr	r0, [pc, #92]	@ (80007fc <MX_ADC1_Init+0xe0>)
 80007a0:	f001 fc7c 	bl	800209c <HAL_ADC_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007aa:	f000 fe19 	bl	80013e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	4810      	ldr	r0, [pc, #64]	@ (80007fc <MX_ADC1_Init+0xe0>)
 80007ba:	f002 fb17 	bl	8002dec <HAL_ADCEx_MultiModeConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007c4:	f000 fe0c 	bl	80013e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_ADC1_Init+0xe8>)
 80007ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007cc:	2306      	movs	r3, #6
 80007ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007d4:	237f      	movs	r3, #127	@ 0x7f
 80007d6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007d8:	2304      	movs	r3, #4
 80007da:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_ADC1_Init+0xe0>)
 80007e6:	f001 fe63 	bl	80024b0 <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007f0:	f000 fdf6 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	@ 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000028 	.word	0x20000028
 8000800:	50040000 	.word	0x50040000
 8000804:	04300002 	.word	0x04300002

08000808 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800080e:	463b      	mov	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
 800081c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800081e:	4b30      	ldr	r3, [pc, #192]	@ (80008e0 <MX_ADC2_Init+0xd8>)
 8000820:	4a30      	ldr	r2, [pc, #192]	@ (80008e4 <MX_ADC2_Init+0xdc>)
 8000822:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000824:	4b2e      	ldr	r3, [pc, #184]	@ (80008e0 <MX_ADC2_Init+0xd8>)
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800082a:	4b2d      	ldr	r3, [pc, #180]	@ (80008e0 <MX_ADC2_Init+0xd8>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000830:	4b2b      	ldr	r3, [pc, #172]	@ (80008e0 <MX_ADC2_Init+0xd8>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000836:	4b2a      	ldr	r3, [pc, #168]	@ (80008e0 <MX_ADC2_Init+0xd8>)
 8000838:	2201      	movs	r2, #1
 800083a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800083c:	4b28      	ldr	r3, [pc, #160]	@ (80008e0 <MX_ADC2_Init+0xd8>)
 800083e:	2204      	movs	r2, #4
 8000840:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000842:	4b27      	ldr	r3, [pc, #156]	@ (80008e0 <MX_ADC2_Init+0xd8>)
 8000844:	2200      	movs	r2, #0
 8000846:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000848:	4b25      	ldr	r3, [pc, #148]	@ (80008e0 <MX_ADC2_Init+0xd8>)
 800084a:	2200      	movs	r2, #0
 800084c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 2;
 800084e:	4b24      	ldr	r3, [pc, #144]	@ (80008e0 <MX_ADC2_Init+0xd8>)
 8000850:	2202      	movs	r2, #2
 8000852:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000854:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <MX_ADC2_Init+0xd8>)
 8000856:	2200      	movs	r2, #0
 8000858:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800085c:	4b20      	ldr	r3, [pc, #128]	@ (80008e0 <MX_ADC2_Init+0xd8>)
 800085e:	2200      	movs	r2, #0
 8000860:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000862:	4b1f      	ldr	r3, [pc, #124]	@ (80008e0 <MX_ADC2_Init+0xd8>)
 8000864:	2200      	movs	r2, #0
 8000866:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000868:	4b1d      	ldr	r3, [pc, #116]	@ (80008e0 <MX_ADC2_Init+0xd8>)
 800086a:	2200      	movs	r2, #0
 800086c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000870:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <MX_ADC2_Init+0xd8>)
 8000872:	2200      	movs	r2, #0
 8000874:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000876:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <MX_ADC2_Init+0xd8>)
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800087e:	4818      	ldr	r0, [pc, #96]	@ (80008e0 <MX_ADC2_Init+0xd8>)
 8000880:	f001 fc0c 	bl	800209c <HAL_ADC_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800088a:	f000 fda9 	bl	80013e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800088e:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <MX_ADC2_Init+0xe0>)
 8000890:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000892:	2306      	movs	r3, #6
 8000894:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800089a:	237f      	movs	r3, #127	@ 0x7f
 800089c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800089e:	2304      	movs	r3, #4
 80008a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008a6:	463b      	mov	r3, r7
 80008a8:	4619      	mov	r1, r3
 80008aa:	480d      	ldr	r0, [pc, #52]	@ (80008e0 <MX_ADC2_Init+0xd8>)
 80008ac:	f001 fe00 	bl	80024b0 <HAL_ADC_ConfigChannel>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80008b6:	f000 fd93 	bl	80013e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_ADC2_Init+0xe4>)
 80008bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008be:	230c      	movs	r3, #12
 80008c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008c2:	463b      	mov	r3, r7
 80008c4:	4619      	mov	r1, r3
 80008c6:	4806      	ldr	r0, [pc, #24]	@ (80008e0 <MX_ADC2_Init+0xd8>)
 80008c8:	f001 fdf2 	bl	80024b0 <HAL_ADC_ConfigChannel>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 80008d2:	f000 fd85 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000008c 	.word	0x2000008c
 80008e4:	50040100 	.word	0x50040100
 80008e8:	08600004 	.word	0x08600004
 80008ec:	3ef08000 	.word	0x3ef08000

080008f0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f6:	463b      	mov	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
 8000904:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000906:	4b29      	ldr	r3, [pc, #164]	@ (80009ac <MX_ADC3_Init+0xbc>)
 8000908:	4a29      	ldr	r2, [pc, #164]	@ (80009b0 <MX_ADC3_Init+0xc0>)
 800090a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800090c:	4b27      	ldr	r3, [pc, #156]	@ (80009ac <MX_ADC3_Init+0xbc>)
 800090e:	2200      	movs	r2, #0
 8000910:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000912:	4b26      	ldr	r3, [pc, #152]	@ (80009ac <MX_ADC3_Init+0xbc>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000918:	4b24      	ldr	r3, [pc, #144]	@ (80009ac <MX_ADC3_Init+0xbc>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800091e:	4b23      	ldr	r3, [pc, #140]	@ (80009ac <MX_ADC3_Init+0xbc>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000924:	4b21      	ldr	r3, [pc, #132]	@ (80009ac <MX_ADC3_Init+0xbc>)
 8000926:	2204      	movs	r2, #4
 8000928:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800092a:	4b20      	ldr	r3, [pc, #128]	@ (80009ac <MX_ADC3_Init+0xbc>)
 800092c:	2200      	movs	r2, #0
 800092e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000930:	4b1e      	ldr	r3, [pc, #120]	@ (80009ac <MX_ADC3_Init+0xbc>)
 8000932:	2200      	movs	r2, #0
 8000934:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000936:	4b1d      	ldr	r3, [pc, #116]	@ (80009ac <MX_ADC3_Init+0xbc>)
 8000938:	2201      	movs	r2, #1
 800093a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800093c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ac <MX_ADC3_Init+0xbc>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000944:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <MX_ADC3_Init+0xbc>)
 8000946:	2200      	movs	r2, #0
 8000948:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800094a:	4b18      	ldr	r3, [pc, #96]	@ (80009ac <MX_ADC3_Init+0xbc>)
 800094c:	2200      	movs	r2, #0
 800094e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000950:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <MX_ADC3_Init+0xbc>)
 8000952:	2200      	movs	r2, #0
 8000954:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_ADC3_Init+0xbc>)
 800095a:	2200      	movs	r2, #0
 800095c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800095e:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <MX_ADC3_Init+0xbc>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000966:	4811      	ldr	r0, [pc, #68]	@ (80009ac <MX_ADC3_Init+0xbc>)
 8000968:	f001 fb98 	bl	800209c <HAL_ADC_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000972:	f000 fd35 	bl	80013e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000976:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <MX_ADC3_Init+0xc4>)
 8000978:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800097a:	2306      	movs	r3, #6
 800097c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000982:	237f      	movs	r3, #127	@ 0x7f
 8000984:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000986:	2304      	movs	r3, #4
 8000988:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800098e:	463b      	mov	r3, r7
 8000990:	4619      	mov	r1, r3
 8000992:	4806      	ldr	r0, [pc, #24]	@ (80009ac <MX_ADC3_Init+0xbc>)
 8000994:	f001 fd8c 	bl	80024b0 <HAL_ADC_ConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800099e:	f000 fd1f 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200000f0 	.word	0x200000f0
 80009b0:	50040200 	.word	0x50040200
 80009b4:	0c900008 	.word	0x0c900008

080009b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <MX_I2C2_Init+0x74>)
 80009be:	4a1c      	ldr	r2, [pc, #112]	@ (8000a30 <MX_I2C2_Init+0x78>)
 80009c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <MX_I2C2_Init+0x74>)
 80009c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a34 <MX_I2C2_Init+0x7c>)
 80009c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009c8:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <MX_I2C2_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ce:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <MX_I2C2_Init+0x74>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d4:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <MX_I2C2_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009da:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <MX_I2C2_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <MX_I2C2_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <MX_I2C2_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <MX_I2C2_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009f2:	480e      	ldr	r0, [pc, #56]	@ (8000a2c <MX_I2C2_Init+0x74>)
 80009f4:	f002 fdfc 	bl	80035f0 <HAL_I2C_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009fe:	f000 fcef 	bl	80013e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a02:	2100      	movs	r1, #0
 8000a04:	4809      	ldr	r0, [pc, #36]	@ (8000a2c <MX_I2C2_Init+0x74>)
 8000a06:	f002 fe8e 	bl	8003726 <HAL_I2CEx_ConfigAnalogFilter>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a10:	f000 fce6 	bl	80013e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a14:	2100      	movs	r1, #0
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_I2C2_Init+0x74>)
 8000a18:	f002 fed0 	bl	80037bc <HAL_I2CEx_ConfigDigitalFilter>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a22:	f000 fcdd 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000154 	.word	0x20000154
 8000a30:	40005800 	.word	0x40005800
 8000a34:	10909cec 	.word	0x10909cec

08000a38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b09a      	sub	sp, #104	@ 0x68
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
 8000a68:	615a      	str	r2, [r3, #20]
 8000a6a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	222c      	movs	r2, #44	@ 0x2c
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f007 fc26 	bl	80082c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a78:	4b65      	ldr	r3, [pc, #404]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000a7a:	4a66      	ldr	r2, [pc, #408]	@ (8000c14 <MX_TIM1_Init+0x1dc>)
 8000a7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a7e:	4b64      	ldr	r3, [pc, #400]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a84:	4b62      	ldr	r3, [pc, #392]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8000a8a:	4b61      	ldr	r3, [pc, #388]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000a8c:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000a90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a92:	4b5f      	ldr	r3, [pc, #380]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a98:	4b5d      	ldr	r3, [pc, #372]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9e:	4b5c      	ldr	r3, [pc, #368]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aa4:	485a      	ldr	r0, [pc, #360]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000aa6:	f004 f9c5 	bl	8004e34 <HAL_TIM_Base_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ab0:	f000 fc96 	bl	80013e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4853      	ldr	r0, [pc, #332]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000ac2:	f005 f913 	bl	8005cec <HAL_TIM_ConfigClockSource>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000acc:	f000 fc88 	bl	80013e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ad0:	484f      	ldr	r0, [pc, #316]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000ad2:	f004 fa06 	bl	8004ee2 <HAL_TIM_PWM_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000adc:	f000 fc80 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000af0:	4619      	mov	r1, r3
 8000af2:	4847      	ldr	r0, [pc, #284]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000af4:	f005 ff84 	bl	8006a00 <HAL_TIMEx_MasterConfigSynchronization>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000afe:	f000 fc6f 	bl	80013e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b02:	2360      	movs	r3, #96	@ 0x60
 8000b04:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b22:	2200      	movs	r2, #0
 8000b24:	4619      	mov	r1, r3
 8000b26:	483a      	ldr	r0, [pc, #232]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000b28:	f004 ffcc 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000b32:	f000 fc55 	bl	80013e0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8000b36:	4b36      	ldr	r3, [pc, #216]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	699a      	ldr	r2, [r3, #24]
 8000b3c:	4b34      	ldr	r3, [pc, #208]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f022 0208 	bic.w	r2, r2, #8
 8000b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b46:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4830      	ldr	r0, [pc, #192]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000b50:	f004 ffb8 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000b5a:	f000 fc41 	bl	80013e0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8000b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	699a      	ldr	r2, [r3, #24]
 8000b64:	4b2a      	ldr	r3, [pc, #168]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b6e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b72:	2208      	movs	r2, #8
 8000b74:	4619      	mov	r1, r3
 8000b76:	4826      	ldr	r0, [pc, #152]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000b78:	f004 ffa4 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000b82:	f000 fc2d 	bl	80013e0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 8000b86:	4b22      	ldr	r3, [pc, #136]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	69da      	ldr	r2, [r3, #28]
 8000b8c:	4b20      	ldr	r3, [pc, #128]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f022 0208 	bic.w	r2, r2, #8
 8000b94:	61da      	str	r2, [r3, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	481c      	ldr	r0, [pc, #112]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000ba0:	f004 ff90 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 8000baa:	f000 fc19 	bl	80013e0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8000bae:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	69da      	ldr	r2, [r3, #28]
 8000bb4:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000bbc:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000be0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4807      	ldr	r0, [pc, #28]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000bf4:	f005 ff8c 	bl	8006b10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM1_Init+0x1ca>
  {
    Error_Handler();
 8000bfe:	f000 fbef 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c02:	4803      	ldr	r0, [pc, #12]	@ (8000c10 <MX_TIM1_Init+0x1d8>)
 8000c04:	f000 fec6 	bl	8001994 <HAL_TIM_MspPostInit>

}
 8000c08:	bf00      	nop
 8000c0a:	3768      	adds	r7, #104	@ 0x68
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200001a8 	.word	0x200001a8
 8000c14:	40012c00 	.word	0x40012c00

08000c18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08c      	sub	sp, #48	@ 0x30
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	2224      	movs	r2, #36	@ 0x24
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f007 fb4c 	bl	80082c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c36:	4b21      	ldr	r3, [pc, #132]	@ (8000cbc <MX_TIM2_Init+0xa4>)
 8000c38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cbc <MX_TIM2_Init+0xa4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c44:	4b1d      	ldr	r3, [pc, #116]	@ (8000cbc <MX_TIM2_Init+0xa4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <MX_TIM2_Init+0xa4>)
 8000c4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c52:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <MX_TIM2_Init+0xa4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c58:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <MX_TIM2_Init+0xa4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c66:	2301      	movs	r3, #1
 8000c68:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c76:	2301      	movs	r3, #1
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	4619      	mov	r1, r3
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <MX_TIM2_Init+0xa4>)
 8000c8a:	f004 fc29 	bl	80054e0 <HAL_TIM_Encoder_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000c94:	f000 fba4 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <MX_TIM2_Init+0xa4>)
 8000ca6:	f005 feab 	bl	8006a00 <HAL_TIMEx_MasterConfigSynchronization>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000cb0:	f000 fb96 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	3730      	adds	r7, #48	@ 0x30
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200001f4 	.word	0x200001f4

08000cc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	@ 0x30
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	2224      	movs	r2, #36	@ 0x24
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f007 faf8 	bl	80082c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cde:	4b21      	ldr	r3, [pc, #132]	@ (8000d64 <MX_TIM3_Init+0xa4>)
 8000ce0:	4a21      	ldr	r2, [pc, #132]	@ (8000d68 <MX_TIM3_Init+0xa8>)
 8000ce2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d64 <MX_TIM3_Init+0xa4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cea:	4b1e      	ldr	r3, [pc, #120]	@ (8000d64 <MX_TIM3_Init+0xa4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <MX_TIM3_Init+0xa4>)
 8000cf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cf6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <MX_TIM3_Init+0xa4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <MX_TIM3_Init+0xa4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d04:	2301      	movs	r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480d      	ldr	r0, [pc, #52]	@ (8000d64 <MX_TIM3_Init+0xa4>)
 8000d30:	f004 fbd6 	bl	80054e0 <HAL_TIM_Encoder_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d3a:	f000 fb51 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d46:	463b      	mov	r3, r7
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4806      	ldr	r0, [pc, #24]	@ (8000d64 <MX_TIM3_Init+0xa4>)
 8000d4c:	f005 fe58 	bl	8006a00 <HAL_TIMEx_MasterConfigSynchronization>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d56:	f000 fb43 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	3730      	adds	r7, #48	@ 0x30
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000240 	.word	0x20000240
 8000d68:	40000400 	.word	0x40000400

08000d6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08c      	sub	sp, #48	@ 0x30
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	2224      	movs	r2, #36	@ 0x24
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f007 faa2 	bl	80082c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d80:	463b      	mov	r3, r7
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d8a:	4b21      	ldr	r3, [pc, #132]	@ (8000e10 <MX_TIM4_Init+0xa4>)
 8000d8c:	4a21      	ldr	r2, [pc, #132]	@ (8000e14 <MX_TIM4_Init+0xa8>)
 8000d8e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d90:	4b1f      	ldr	r3, [pc, #124]	@ (8000e10 <MX_TIM4_Init+0xa4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b1e      	ldr	r3, [pc, #120]	@ (8000e10 <MX_TIM4_Init+0xa4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e10 <MX_TIM4_Init+0xa4>)
 8000d9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000da2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <MX_TIM4_Init+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000daa:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <MX_TIM4_Init+0xa4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000db0:	2301      	movs	r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000db8:	2301      	movs	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480d      	ldr	r0, [pc, #52]	@ (8000e10 <MX_TIM4_Init+0xa4>)
 8000ddc:	f004 fb80 	bl	80054e0 <HAL_TIM_Encoder_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000de6:	f000 fafb 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	4619      	mov	r1, r3
 8000df6:	4806      	ldr	r0, [pc, #24]	@ (8000e10 <MX_TIM4_Init+0xa4>)
 8000df8:	f005 fe02 	bl	8006a00 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000e02:	f000 faed 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	3730      	adds	r7, #48	@ 0x30
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	2000028c 	.word	0x2000028c
 8000e14:	40000800 	.word	0x40000800

08000e18 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e36:	4b26      	ldr	r3, [pc, #152]	@ (8000ed0 <MX_TIM5_Init+0xb8>)
 8000e38:	4a26      	ldr	r2, [pc, #152]	@ (8000ed4 <MX_TIM5_Init+0xbc>)
 8000e3a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e3c:	4b24      	ldr	r3, [pc, #144]	@ (8000ed0 <MX_TIM5_Init+0xb8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e42:	4b23      	ldr	r3, [pc, #140]	@ (8000ed0 <MX_TIM5_Init+0xb8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000e48:	4b21      	ldr	r3, [pc, #132]	@ (8000ed0 <MX_TIM5_Init+0xb8>)
 8000e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed0 <MX_TIM5_Init+0xb8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e56:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed0 <MX_TIM5_Init+0xb8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000e5c:	481c      	ldr	r0, [pc, #112]	@ (8000ed0 <MX_TIM5_Init+0xb8>)
 8000e5e:	f004 f99d 	bl	800519c <HAL_TIM_IC_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000e68:	f000 faba 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4815      	ldr	r0, [pc, #84]	@ (8000ed0 <MX_TIM5_Init+0xb8>)
 8000e7c:	f005 fdc0 	bl	8006a00 <HAL_TIMEx_MasterConfigSynchronization>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8000e86:	f000 faab 	bl	80013e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2208      	movs	r2, #8
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480b      	ldr	r0, [pc, #44]	@ (8000ed0 <MX_TIM5_Init+0xb8>)
 8000ea2:	f004 fd73 	bl	800598c <HAL_TIM_IC_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000eac:	f000 fa98 	bl	80013e0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4806      	ldr	r0, [pc, #24]	@ (8000ed0 <MX_TIM5_Init+0xb8>)
 8000eb8:	f004 fd68 	bl	800598c <HAL_TIM_IC_ConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8000ec2:	f000 fa8d 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	3720      	adds	r7, #32
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200002d8 	.word	0x200002d8
 8000ed4:	40000c00 	.word	0x40000c00

08000ed8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b096      	sub	sp, #88	@ 0x58
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ede:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]
 8000efa:	615a      	str	r2, [r3, #20]
 8000efc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	222c      	movs	r2, #44	@ 0x2c
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f007 f9dd 	bl	80082c4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f0a:	4b4b      	ldr	r3, [pc, #300]	@ (8001038 <MX_TIM8_Init+0x160>)
 8000f0c:	4a4b      	ldr	r2, [pc, #300]	@ (800103c <MX_TIM8_Init+0x164>)
 8000f0e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f10:	4b49      	ldr	r3, [pc, #292]	@ (8001038 <MX_TIM8_Init+0x160>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f16:	4b48      	ldr	r3, [pc, #288]	@ (8001038 <MX_TIM8_Init+0x160>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 59999;
 8000f1c:	4b46      	ldr	r3, [pc, #280]	@ (8001038 <MX_TIM8_Init+0x160>)
 8000f1e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000f22:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f24:	4b44      	ldr	r3, [pc, #272]	@ (8001038 <MX_TIM8_Init+0x160>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f2a:	4b43      	ldr	r3, [pc, #268]	@ (8001038 <MX_TIM8_Init+0x160>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f30:	4b41      	ldr	r3, [pc, #260]	@ (8001038 <MX_TIM8_Init+0x160>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000f36:	4840      	ldr	r0, [pc, #256]	@ (8001038 <MX_TIM8_Init+0x160>)
 8000f38:	f003 ffd3 	bl	8004ee2 <HAL_TIM_PWM_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000f42:	f000 fa4d 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f52:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f56:	4619      	mov	r1, r3
 8000f58:	4837      	ldr	r0, [pc, #220]	@ (8001038 <MX_TIM8_Init+0x160>)
 8000f5a:	f005 fd51 	bl	8006a00 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000f64:	f000 fa3c 	bl	80013e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f68:	2360      	movs	r3, #96	@ 0x60
 8000f6a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f70:	2300      	movs	r3, #0
 8000f72:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f74:	2300      	movs	r3, #0
 8000f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f84:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	482a      	ldr	r0, [pc, #168]	@ (8001038 <MX_TIM8_Init+0x160>)
 8000f8e:	f004 fd99 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000f98:	f000 fa22 	bl	80013e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4824      	ldr	r0, [pc, #144]	@ (8001038 <MX_TIM8_Init+0x160>)
 8000fa6:	f004 fd8d 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000fb0:	f000 fa16 	bl	80013e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fb4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fb8:	2208      	movs	r2, #8
 8000fba:	4619      	mov	r1, r3
 8000fbc:	481e      	ldr	r0, [pc, #120]	@ (8001038 <MX_TIM8_Init+0x160>)
 8000fbe:	f004 fd81 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8000fc8:	f000 fa0a 	bl	80013e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fcc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fd0:	220c      	movs	r2, #12
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4818      	ldr	r0, [pc, #96]	@ (8001038 <MX_TIM8_Init+0x160>)
 8000fd6:	f004 fd75 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8000fe0:	f000 f9fe 	bl	80013e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ff8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ffc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001006:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	4619      	mov	r1, r3
 8001018:	4807      	ldr	r0, [pc, #28]	@ (8001038 <MX_TIM8_Init+0x160>)
 800101a:	f005 fd79 	bl	8006b10 <HAL_TIMEx_ConfigBreakDeadTime>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM8_Init+0x150>
  {
    Error_Handler();
 8001024:	f000 f9dc 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001028:	4803      	ldr	r0, [pc, #12]	@ (8001038 <MX_TIM8_Init+0x160>)
 800102a:	f000 fcb3 	bl	8001994 <HAL_TIM_MspPostInit>

}
 800102e:	bf00      	nop
 8001030:	3758      	adds	r7, #88	@ 0x58
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000324 	.word	0x20000324
 800103c:	40013400 	.word	0x40013400

08001040 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800105e:	4b22      	ldr	r3, [pc, #136]	@ (80010e8 <MX_TIM15_Init+0xa8>)
 8001060:	4a22      	ldr	r2, [pc, #136]	@ (80010ec <MX_TIM15_Init+0xac>)
 8001062:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 79;
 8001064:	4b20      	ldr	r3, [pc, #128]	@ (80010e8 <MX_TIM15_Init+0xa8>)
 8001066:	224f      	movs	r2, #79	@ 0x4f
 8001068:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106a:	4b1f      	ldr	r3, [pc, #124]	@ (80010e8 <MX_TIM15_Init+0xa8>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001070:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <MX_TIM15_Init+0xa8>)
 8001072:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001076:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001078:	4b1b      	ldr	r3, [pc, #108]	@ (80010e8 <MX_TIM15_Init+0xa8>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800107e:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <MX_TIM15_Init+0xa8>)
 8001080:	2200      	movs	r2, #0
 8001082:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001084:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <MX_TIM15_Init+0xa8>)
 8001086:	2280      	movs	r2, #128	@ 0x80
 8001088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800108a:	4817      	ldr	r0, [pc, #92]	@ (80010e8 <MX_TIM15_Init+0xa8>)
 800108c:	f004 f886 	bl	800519c <HAL_TIM_IC_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001096:	f000 f9a3 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	480f      	ldr	r0, [pc, #60]	@ (80010e8 <MX_TIM15_Init+0xa8>)
 80010aa:	f005 fca9 	bl	8006a00 <HAL_TIMEx_MasterConfigSynchronization>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80010b4:	f000 f994 	bl	80013e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010b8:	230a      	movs	r3, #10
 80010ba:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010bc:	2301      	movs	r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	@ (80010e8 <MX_TIM15_Init+0xa8>)
 80010d0:	f004 fc5c 	bl	800598c <HAL_TIM_IC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 80010da:	f000 f981 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3720      	adds	r7, #32
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000370 	.word	0x20000370
 80010ec:	40014000 	.word	0x40014000

080010f0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <MX_TIM17_Init+0x44>)
 80010f6:	4a10      	ldr	r2, [pc, #64]	@ (8001138 <MX_TIM17_Init+0x48>)
 80010f8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 79;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <MX_TIM17_Init+0x44>)
 80010fc:	224f      	movs	r2, #79	@ 0x4f
 80010fe:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <MX_TIM17_Init+0x44>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <MX_TIM17_Init+0x44>)
 8001108:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800110c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110e:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <MX_TIM17_Init+0x44>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001114:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <MX_TIM17_Init+0x44>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <MX_TIM17_Init+0x44>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	@ (8001134 <MX_TIM17_Init+0x44>)
 8001122:	f003 fe87 	bl	8004e34 <HAL_TIM_Base_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 800112c:	f000 f958 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200003bc 	.word	0x200003bc
 8001138:	40014800 	.word	0x40014800

0800113c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001140:	4b16      	ldr	r3, [pc, #88]	@ (800119c <MX_USART3_UART_Init+0x60>)
 8001142:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <MX_USART3_UART_Init+0x64>)
 8001144:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <MX_USART3_UART_Init+0x60>)
 8001148:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800114c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800114e:	4b13      	ldr	r3, [pc, #76]	@ (800119c <MX_USART3_UART_Init+0x60>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001154:	4b11      	ldr	r3, [pc, #68]	@ (800119c <MX_USART3_UART_Init+0x60>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800115a:	4b10      	ldr	r3, [pc, #64]	@ (800119c <MX_USART3_UART_Init+0x60>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <MX_USART3_UART_Init+0x60>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <MX_USART3_UART_Init+0x60>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800116c:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <MX_USART3_UART_Init+0x60>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <MX_USART3_UART_Init+0x60>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <MX_USART3_UART_Init+0x60>)
 800117a:	2220      	movs	r2, #32
 800117c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800117e:	4b07      	ldr	r3, [pc, #28]	@ (800119c <MX_USART3_UART_Init+0x60>)
 8001180:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001184:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <MX_USART3_UART_Init+0x60>)
 8001188:	f005 fd5e 	bl	8006c48 <HAL_UART_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8001192:	f000 f925 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000408 	.word	0x20000408
 80011a0:	40004800 	.word	0x40004800

080011a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	@ 0x28
 80011a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ba:	4b42      	ldr	r3, [pc, #264]	@ (80012c4 <MX_GPIO_Init+0x120>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	4a41      	ldr	r2, [pc, #260]	@ (80012c4 <MX_GPIO_Init+0x120>)
 80011c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c6:	4b3f      	ldr	r3, [pc, #252]	@ (80012c4 <MX_GPIO_Init+0x120>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	4b3c      	ldr	r3, [pc, #240]	@ (80012c4 <MX_GPIO_Init+0x120>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	4a3b      	ldr	r2, [pc, #236]	@ (80012c4 <MX_GPIO_Init+0x120>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011de:	4b39      	ldr	r3, [pc, #228]	@ (80012c4 <MX_GPIO_Init+0x120>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	4b36      	ldr	r3, [pc, #216]	@ (80012c4 <MX_GPIO_Init+0x120>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	4a35      	ldr	r2, [pc, #212]	@ (80012c4 <MX_GPIO_Init+0x120>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f6:	4b33      	ldr	r3, [pc, #204]	@ (80012c4 <MX_GPIO_Init+0x120>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	4b30      	ldr	r3, [pc, #192]	@ (80012c4 <MX_GPIO_Init+0x120>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001206:	4a2f      	ldr	r2, [pc, #188]	@ (80012c4 <MX_GPIO_Init+0x120>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120e:	4b2d      	ldr	r3, [pc, #180]	@ (80012c4 <MX_GPIO_Init+0x120>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	2108      	movs	r1, #8
 800121e:	482a      	ldr	r0, [pc, #168]	@ (80012c8 <MX_GPIO_Init+0x124>)
 8001220:	f002 f9ce 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 800122a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800122e:	f002 f9c7 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f243 0106 	movw	r1, #12294	@ 0x3006
 8001238:	4824      	ldr	r0, [pc, #144]	@ (80012cc <MX_GPIO_Init+0x128>)
 800123a:	f002 f9c1 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800123e:	2308      	movs	r3, #8
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	481c      	ldr	r0, [pc, #112]	@ (80012c8 <MX_GPIO_Init+0x124>)
 8001256:	f002 f809 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800125a:	2310      	movs	r3, #16
 800125c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800126a:	2306      	movs	r3, #6
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001278:	f001 fff8 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 800127c:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001298:	f001 ffe8 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13;
 800129c:	f243 0306 	movw	r3, #12294	@ 0x3006
 80012a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	@ (80012cc <MX_GPIO_Init+0x128>)
 80012b6:	f001 ffd9 	bl	800326c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	@ 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	48000800 	.word	0x48000800
 80012cc:	48000400 	.word	0x48000400

080012d0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	// Interpret the received bytes as float values
	Distance_Target = *(float *)&rx_buff[0];
 80012d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <HAL_UART_RxCpltCallback+0x34>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001308 <HAL_UART_RxCpltCallback+0x38>)
 80012de:	6013      	str	r3, [r2, #0]
	Angle_Target = *(float *)&rx_buff[4];
 80012e0:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <HAL_UART_RxCpltCallback+0x3c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <HAL_UART_RxCpltCallback+0x40>)
 80012e6:	6013      	str	r3, [r2, #0]
	//printf("Captured");

	// Clear the receive buffer
	memset(rx_buff, 0, sizeof(rx_buff));
 80012e8:	2208      	movs	r2, #8
 80012ea:	2100      	movs	r1, #0
 80012ec:	4805      	ldr	r0, [pc, #20]	@ (8001304 <HAL_UART_RxCpltCallback+0x34>)
 80012ee:	f006 ffe9 	bl	80082c4 <memset>

	// Restart UART reception
	HAL_UART_Receive_IT(&huart3, rx_buff, 8);
 80012f2:	2208      	movs	r2, #8
 80012f4:	4903      	ldr	r1, [pc, #12]	@ (8001304 <HAL_UART_RxCpltCallback+0x34>)
 80012f6:	4807      	ldr	r0, [pc, #28]	@ (8001314 <HAL_UART_RxCpltCallback+0x44>)
 80012f8:	f005 fcf4 	bl	8006ce4 <HAL_UART_Receive_IT>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200004ac 	.word	0x200004ac
 8001308:	200004a4 	.word	0x200004a4
 800130c:	200004b0 	.word	0x200004b0
 8001310:	200004a8 	.word	0x200004a8
 8001314:	20000408 	.word	0x20000408

08001318 <HAL_TIM_IC_CaptureCallback>:
//}



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) //Function from https://controllerstech.com/input-capture-in-stm32/
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7f1b      	ldrb	r3, [r3, #28]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d14a      	bne.n	80013be <HAL_TIM_IC_CaptureCallback+0xa6>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001328:	4b27      	ldr	r3, [pc, #156]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10b      	bne.n	8001348 <HAL_TIM_IC_CaptureCallback+0x30>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001330:	2100      	movs	r1, #0
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f004 fda4 	bl	8005e80 <HAL_TIM_ReadCapturedValue>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	4b23      	ldr	r3, [pc, #140]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0xb4>)
 800133e:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001340:	4b21      	ldr	r3, [pc, #132]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
 8001346:	e03a      	b.n	80013be <HAL_TIM_IC_CaptureCallback+0xa6>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001348:	2100      	movs	r1, #0
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f004 fd98 	bl	8005e80 <HAL_TIM_ReadCapturedValue>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	4b1e      	ldr	r3, [pc, #120]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001356:	601a      	str	r2, [r3, #0]
			if (IC_Val2 > IC_Val1)
 8001358:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b1b      	ldr	r3, [pc, #108]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0xb4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	dd07      	ble.n	8001374 <HAL_TIM_IC_CaptureCallback+0x5c>
				Difference = IC_Val2-IC_Val1;
 8001364:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0xb4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	4a19      	ldr	r2, [pc, #100]	@ (80013d4 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	e00f      	b.n	8001394 <HAL_TIM_IC_CaptureCallback+0x7c>
			else if (IC_Val1 > IC_Val2)
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	dd09      	ble.n	8001394 <HAL_TIM_IC_CaptureCallback+0x7c>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001388:	33ff      	adds	r3, #255	@ 0xff
 800138a:	4a11      	ldr	r2, [pc, #68]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a10      	ldr	r2, [pc, #64]	@ (80013d4 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001392:	6013      	str	r3, [r2, #0]
			int refClock = TIMCLOCK/(PRESCALAR);
 8001394:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001396:	60fb      	str	r3, [r7, #12]
			int mFactor = 1000000/refClock;
 8001398:	4a0f      	ldr	r2, [pc, #60]	@ (80013d8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	fb92 f3f3 	sdiv	r3, r2, r3
 80013a0:	60bb      	str	r3, [r7, #8]
			usWidth = Difference*mFactor;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
 80013ac:	4a0b      	ldr	r2, [pc, #44]	@ (80013dc <HAL_TIM_IC_CaptureCallback+0xc4>)
 80013ae:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2200      	movs	r2, #0
 80013b6:	625a      	str	r2, [r3, #36]	@ 0x24
			Is_First_Captured = 0; // set it back to false
 80013b8:	4b03      	ldr	r3, [pc, #12]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200004a0 	.word	0x200004a0
 80013cc:	20000494 	.word	0x20000494
 80013d0:	20000498 	.word	0x20000498
 80013d4:	2000049c 	.word	0x2000049c
 80013d8:	000f4240 	.word	0x000f4240
 80013dc:	20000490 	.word	0x20000490

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <HAL_MspInit+0x50>)
 80013f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013fa:	4a11      	ldr	r2, [pc, #68]	@ (8001440 <HAL_MspInit+0x50>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6613      	str	r3, [r2, #96]	@ 0x60
 8001402:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <HAL_MspInit+0x50>)
 8001404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <HAL_MspInit+0x50>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001412:	4a0b      	ldr	r2, [pc, #44]	@ (8001440 <HAL_MspInit+0x50>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001418:	6593      	str	r3, [r2, #88]	@ 0x58
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <HAL_MspInit+0x50>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	2005      	movs	r0, #5
 800142c:	f001 fe69 	bl	8003102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001430:	2005      	movs	r0, #5
 8001432:	f001 fe82 	bl	800313a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000

08001444 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08e      	sub	sp, #56	@ 0x38
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a58      	ldr	r2, [pc, #352]	@ (80015c4 <HAL_ADC_MspInit+0x180>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d12d      	bne.n	80014c2 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001466:	4b58      	ldr	r3, [pc, #352]	@ (80015c8 <HAL_ADC_MspInit+0x184>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	4a56      	ldr	r2, [pc, #344]	@ (80015c8 <HAL_ADC_MspInit+0x184>)
 800146e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001470:	4b55      	ldr	r3, [pc, #340]	@ (80015c8 <HAL_ADC_MspInit+0x184>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d10b      	bne.n	8001490 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001478:	4b54      	ldr	r3, [pc, #336]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 800147a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147c:	4a53      	ldr	r2, [pc, #332]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 800147e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001482:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001484:	4b51      	ldr	r3, [pc, #324]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 8001486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001488:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800148c:	623b      	str	r3, [r7, #32]
 800148e:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001490:	4b4e      	ldr	r3, [pc, #312]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 8001492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001494:	4a4d      	ldr	r2, [pc, #308]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 8001496:	f043 0304 	orr.w	r3, r3, #4
 800149a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149c:	4b4b      	ldr	r3, [pc, #300]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014a8:	2303      	movs	r3, #3
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ac:	2303      	movs	r3, #3
 80014ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b8:	4619      	mov	r1, r3
 80014ba:	4845      	ldr	r0, [pc, #276]	@ (80015d0 <HAL_ADC_MspInit+0x18c>)
 80014bc:	f001 fed6 	bl	800326c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80014c0:	e07c      	b.n	80015bc <HAL_ADC_MspInit+0x178>
  else if(hadc->Instance==ADC2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a43      	ldr	r2, [pc, #268]	@ (80015d4 <HAL_ADC_MspInit+0x190>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d145      	bne.n	8001558 <HAL_ADC_MspInit+0x114>
    HAL_RCC_ADC_CLK_ENABLED++;
 80014cc:	4b3e      	ldr	r3, [pc, #248]	@ (80015c8 <HAL_ADC_MspInit+0x184>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	4a3d      	ldr	r2, [pc, #244]	@ (80015c8 <HAL_ADC_MspInit+0x184>)
 80014d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80014d6:	4b3c      	ldr	r3, [pc, #240]	@ (80015c8 <HAL_ADC_MspInit+0x184>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d10b      	bne.n	80014f6 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80014de:	4b3b      	ldr	r3, [pc, #236]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	4a3a      	ldr	r2, [pc, #232]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 80014e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ea:	4b38      	ldr	r3, [pc, #224]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	4b35      	ldr	r3, [pc, #212]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	4a34      	ldr	r2, [pc, #208]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001502:	4b32      	ldr	r3, [pc, #200]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4b2f      	ldr	r3, [pc, #188]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	4a2e      	ldr	r2, [pc, #184]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800151a:	4b2c      	ldr	r3, [pc, #176]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001526:	2306      	movs	r3, #6
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152a:	2303      	movs	r3, #3
 800152c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001536:	4619      	mov	r1, r3
 8001538:	4825      	ldr	r0, [pc, #148]	@ (80015d0 <HAL_ADC_MspInit+0x18c>)
 800153a:	f001 fe97 	bl	800326c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800153e:	2301      	movs	r3, #1
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001542:	230b      	movs	r3, #11
 8001544:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154e:	4619      	mov	r1, r3
 8001550:	4821      	ldr	r0, [pc, #132]	@ (80015d8 <HAL_ADC_MspInit+0x194>)
 8001552:	f001 fe8b 	bl	800326c <HAL_GPIO_Init>
}
 8001556:	e031      	b.n	80015bc <HAL_ADC_MspInit+0x178>
  else if(hadc->Instance==ADC3)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a1f      	ldr	r2, [pc, #124]	@ (80015dc <HAL_ADC_MspInit+0x198>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d12c      	bne.n	80015bc <HAL_ADC_MspInit+0x178>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001562:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <HAL_ADC_MspInit+0x184>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	3301      	adds	r3, #1
 8001568:	4a17      	ldr	r2, [pc, #92]	@ (80015c8 <HAL_ADC_MspInit+0x184>)
 800156a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800156c:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <HAL_ADC_MspInit+0x184>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d10b      	bne.n	800158c <HAL_ADC_MspInit+0x148>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001574:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 8001576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001578:	4a14      	ldr	r2, [pc, #80]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 800157a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800157e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001580:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001584:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800158c:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 800158e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001590:	4a0e      	ldr	r2, [pc, #56]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <HAL_ADC_MspInit+0x188>)
 800159a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015a4:	2304      	movs	r3, #4
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a8:	2303      	movs	r3, #3
 80015aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b4:	4619      	mov	r1, r3
 80015b6:	4806      	ldr	r0, [pc, #24]	@ (80015d0 <HAL_ADC_MspInit+0x18c>)
 80015b8:	f001 fe58 	bl	800326c <HAL_GPIO_Init>
}
 80015bc:	bf00      	nop
 80015be:	3738      	adds	r7, #56	@ 0x38
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	50040000 	.word	0x50040000
 80015c8:	200004b4 	.word	0x200004b4
 80015cc:	40021000 	.word	0x40021000
 80015d0:	48000800 	.word	0x48000800
 80015d4:	50040100 	.word	0x50040100
 80015d8:	48000400 	.word	0x48000400
 80015dc:	50040200 	.word	0x50040200

080015e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b0aa      	sub	sp, #168	@ 0xa8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	2284      	movs	r2, #132	@ 0x84
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f006 fe5f 	bl	80082c4 <memset>
  if(hi2c->Instance==I2C2)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a21      	ldr	r2, [pc, #132]	@ (8001690 <HAL_I2C_MspInit+0xb0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d13b      	bne.n	8001688 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001614:	2300      	movs	r3, #0
 8001616:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	4618      	mov	r0, r3
 800161e:	f002 ff7d 	bl	800451c <HAL_RCCEx_PeriphCLKConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001628:	f7ff feda 	bl	80013e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162c:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <HAL_I2C_MspInit+0xb4>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001630:	4a18      	ldr	r2, [pc, #96]	@ (8001694 <HAL_I2C_MspInit+0xb4>)
 8001632:	f043 0302 	orr.w	r3, r3, #2
 8001636:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001638:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <HAL_I2C_MspInit+0xb4>)
 800163a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001644:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001648:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164c:	2312      	movs	r3, #18
 800164e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001658:	2303      	movs	r3, #3
 800165a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800165e:	2304      	movs	r3, #4
 8001660:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001664:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001668:	4619      	mov	r1, r3
 800166a:	480b      	ldr	r0, [pc, #44]	@ (8001698 <HAL_I2C_MspInit+0xb8>)
 800166c:	f001 fdfe 	bl	800326c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <HAL_I2C_MspInit+0xb4>)
 8001672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001674:	4a07      	ldr	r2, [pc, #28]	@ (8001694 <HAL_I2C_MspInit+0xb4>)
 8001676:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800167a:	6593      	str	r3, [r2, #88]	@ 0x58
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <HAL_I2C_MspInit+0xb4>)
 800167e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001680:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001688:	bf00      	nop
 800168a:	37a8      	adds	r7, #168	@ 0xa8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40005800 	.word	0x40005800
 8001694:	40021000 	.word	0x40021000
 8001698:	48000400 	.word	0x48000400

0800169c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a16      	ldr	r2, [pc, #88]	@ (8001704 <HAL_TIM_Base_MspInit+0x68>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d114      	bne.n	80016d8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016ae:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <HAL_TIM_Base_MspInit+0x6c>)
 80016b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b2:	4a15      	ldr	r2, [pc, #84]	@ (8001708 <HAL_TIM_Base_MspInit+0x6c>)
 80016b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ba:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <HAL_TIM_Base_MspInit+0x6c>)
 80016bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	2018      	movs	r0, #24
 80016cc:	f001 fd19 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80016d0:	2018      	movs	r0, #24
 80016d2:	f001 fd32 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80016d6:	e010      	b.n	80016fa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0b      	ldr	r2, [pc, #44]	@ (800170c <HAL_TIM_Base_MspInit+0x70>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d10b      	bne.n	80016fa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80016e2:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <HAL_TIM_Base_MspInit+0x6c>)
 80016e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e6:	4a08      	ldr	r2, [pc, #32]	@ (8001708 <HAL_TIM_Base_MspInit+0x6c>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_TIM_Base_MspInit+0x6c>)
 80016f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40012c00 	.word	0x40012c00
 8001708:	40021000 	.word	0x40021000
 800170c:	40014800 	.word	0x40014800

08001710 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08e      	sub	sp, #56	@ 0x38
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001730:	d129      	bne.n	8001786 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001732:	4b45      	ldr	r3, [pc, #276]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x138>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001736:	4a44      	ldr	r2, [pc, #272]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x138>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6593      	str	r3, [r2, #88]	@ 0x58
 800173e:	4b42      	ldr	r3, [pc, #264]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x138>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	623b      	str	r3, [r7, #32]
 8001748:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	4b3f      	ldr	r3, [pc, #252]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x138>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174e:	4a3e      	ldr	r2, [pc, #248]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x138>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001756:	4b3c      	ldr	r3, [pc, #240]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x138>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001762:	2303      	movs	r3, #3
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001772:	2301      	movs	r3, #1
 8001774:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800177a:	4619      	mov	r1, r3
 800177c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001780:	f001 fd74 	bl	800326c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001784:	e05b      	b.n	800183e <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a30      	ldr	r2, [pc, #192]	@ (800184c <HAL_TIM_Encoder_MspInit+0x13c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d129      	bne.n	80017e4 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001790:	4b2d      	ldr	r3, [pc, #180]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x138>)
 8001792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001794:	4a2c      	ldr	r2, [pc, #176]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x138>)
 8001796:	f043 0302 	orr.w	r3, r3, #2
 800179a:	6593      	str	r3, [r2, #88]	@ 0x58
 800179c:	4b2a      	ldr	r3, [pc, #168]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x138>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a8:	4b27      	ldr	r3, [pc, #156]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x138>)
 80017aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ac:	4a26      	ldr	r2, [pc, #152]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x138>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b4:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x138>)
 80017b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017c0:	23c0      	movs	r3, #192	@ 0xc0
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017d0:	2302      	movs	r3, #2
 80017d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d8:	4619      	mov	r1, r3
 80017da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017de:	f001 fd45 	bl	800326c <HAL_GPIO_Init>
}
 80017e2:	e02c      	b.n	800183e <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a19      	ldr	r2, [pc, #100]	@ (8001850 <HAL_TIM_Encoder_MspInit+0x140>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d127      	bne.n	800183e <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017ee:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x138>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f2:	4a15      	ldr	r2, [pc, #84]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x138>)
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017fa:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x138>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x138>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180a:	4a0f      	ldr	r2, [pc, #60]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x138>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001812:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <HAL_TIM_Encoder_MspInit+0x138>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800181e:	23c0      	movs	r3, #192	@ 0xc0
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800182e:	2302      	movs	r3, #2
 8001830:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001836:	4619      	mov	r1, r3
 8001838:	4806      	ldr	r0, [pc, #24]	@ (8001854 <HAL_TIM_Encoder_MspInit+0x144>)
 800183a:	f001 fd17 	bl	800326c <HAL_GPIO_Init>
}
 800183e:	bf00      	nop
 8001840:	3738      	adds	r7, #56	@ 0x38
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	40000400 	.word	0x40000400
 8001850:	40000800 	.word	0x40000800
 8001854:	48000400 	.word	0x48000400

08001858 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08c      	sub	sp, #48	@ 0x30
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a33      	ldr	r2, [pc, #204]	@ (8001944 <HAL_TIM_IC_MspInit+0xec>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d129      	bne.n	80018ce <HAL_TIM_IC_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800187a:	4b33      	ldr	r3, [pc, #204]	@ (8001948 <HAL_TIM_IC_MspInit+0xf0>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187e:	4a32      	ldr	r2, [pc, #200]	@ (8001948 <HAL_TIM_IC_MspInit+0xf0>)
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	6593      	str	r3, [r2, #88]	@ 0x58
 8001886:	4b30      	ldr	r3, [pc, #192]	@ (8001948 <HAL_TIM_IC_MspInit+0xf0>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	61bb      	str	r3, [r7, #24]
 8001890:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	4b2d      	ldr	r3, [pc, #180]	@ (8001948 <HAL_TIM_IC_MspInit+0xf0>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	4a2c      	ldr	r2, [pc, #176]	@ (8001948 <HAL_TIM_IC_MspInit+0xf0>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189e:	4b2a      	ldr	r3, [pc, #168]	@ (8001948 <HAL_TIM_IC_MspInit+0xf0>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018aa:	230c      	movs	r3, #12
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018ba:	2302      	movs	r3, #2
 80018bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c8:	f001 fcd0 	bl	800326c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80018cc:	e035      	b.n	800193a <HAL_TIM_IC_MspInit+0xe2>
  else if(htim_ic->Instance==TIM15)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a1e      	ldr	r2, [pc, #120]	@ (800194c <HAL_TIM_IC_MspInit+0xf4>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d130      	bne.n	800193a <HAL_TIM_IC_MspInit+0xe2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80018d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <HAL_TIM_IC_MspInit+0xf0>)
 80018da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001948 <HAL_TIM_IC_MspInit+0xf0>)
 80018de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80018e4:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <HAL_TIM_IC_MspInit+0xf0>)
 80018e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f0:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <HAL_TIM_IC_MspInit+0xf0>)
 80018f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f4:	4a14      	ldr	r2, [pc, #80]	@ (8001948 <HAL_TIM_IC_MspInit+0xf0>)
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <HAL_TIM_IC_MspInit+0xf0>)
 80018fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001908:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800190c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800191a:	230e      	movs	r3, #14
 800191c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4619      	mov	r1, r3
 8001924:	480a      	ldr	r0, [pc, #40]	@ (8001950 <HAL_TIM_IC_MspInit+0xf8>)
 8001926:	f001 fca1 	bl	800326c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	2018      	movs	r0, #24
 8001930:	f001 fbe7 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001934:	2018      	movs	r0, #24
 8001936:	f001 fc00 	bl	800313a <HAL_NVIC_EnableIRQ>
}
 800193a:	bf00      	nop
 800193c:	3730      	adds	r7, #48	@ 0x30
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40000c00 	.word	0x40000c00
 8001948:	40021000 	.word	0x40021000
 800194c:	40014000 	.word	0x40014000
 8001950:	48000400 	.word	0x48000400

08001954 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <HAL_TIM_PWM_MspInit+0x38>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d10b      	bne.n	800197e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001966:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <HAL_TIM_PWM_MspInit+0x3c>)
 8001968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800196a:	4a09      	ldr	r2, [pc, #36]	@ (8001990 <HAL_TIM_PWM_MspInit+0x3c>)
 800196c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001970:	6613      	str	r3, [r2, #96]	@ 0x60
 8001972:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <HAL_TIM_PWM_MspInit+0x3c>)
 8001974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001976:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40013400 	.word	0x40013400
 8001990:	40021000 	.word	0x40021000

08001994 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	@ 0x28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a23      	ldr	r2, [pc, #140]	@ (8001a40 <HAL_TIM_MspPostInit+0xac>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d11e      	bne.n	80019f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	4b23      	ldr	r3, [pc, #140]	@ (8001a44 <HAL_TIM_MspPostInit+0xb0>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ba:	4a22      	ldr	r2, [pc, #136]	@ (8001a44 <HAL_TIM_MspPostInit+0xb0>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c2:	4b20      	ldr	r3, [pc, #128]	@ (8001a44 <HAL_TIM_MspPostInit+0xb0>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80019ce:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80019d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019e0:	2301      	movs	r3, #1
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ee:	f001 fc3d 	bl	800326c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80019f2:	e021      	b.n	8001a38 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM8)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a13      	ldr	r2, [pc, #76]	@ (8001a48 <HAL_TIM_MspPostInit+0xb4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d11c      	bne.n	8001a38 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fe:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <HAL_TIM_MspPostInit+0xb0>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a02:	4a10      	ldr	r2, [pc, #64]	@ (8001a44 <HAL_TIM_MspPostInit+0xb0>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a44 <HAL_TIM_MspPostInit+0xb0>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001a16:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	4806      	ldr	r0, [pc, #24]	@ (8001a4c <HAL_TIM_MspPostInit+0xb8>)
 8001a34:	f001 fc1a 	bl	800326c <HAL_GPIO_Init>
}
 8001a38:	bf00      	nop
 8001a3a:	3728      	adds	r7, #40	@ 0x28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40012c00 	.word	0x40012c00
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40013400 	.word	0x40013400
 8001a4c:	48000800 	.word	0x48000800

08001a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b0aa      	sub	sp, #168	@ 0xa8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	2284      	movs	r2, #132	@ 0x84
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f006 fc27 	bl	80082c4 <memset>
  if(huart->Instance==USART3)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a25      	ldr	r2, [pc, #148]	@ (8001b10 <HAL_UART_MspInit+0xc0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d142      	bne.n	8001b06 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a80:	2304      	movs	r3, #4
 8001a82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 fd45 	bl	800451c <HAL_RCCEx_PeriphCLKConfig>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a98:	f7ff fca2 	bl	80013e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b14 <HAL_UART_MspInit+0xc4>)
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8001b14 <HAL_UART_MspInit+0xc4>)
 8001aa2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b14 <HAL_UART_MspInit+0xc4>)
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab4:	4b17      	ldr	r3, [pc, #92]	@ (8001b14 <HAL_UART_MspInit+0xc4>)
 8001ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab8:	4a16      	ldr	r2, [pc, #88]	@ (8001b14 <HAL_UART_MspInit+0xc4>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ac0:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <HAL_UART_MspInit+0xc4>)
 8001ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001acc:	2330      	movs	r3, #48	@ 0x30
 8001ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ae4:	2307      	movs	r3, #7
 8001ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aea:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001aee:	4619      	mov	r1, r3
 8001af0:	4809      	ldr	r0, [pc, #36]	@ (8001b18 <HAL_UART_MspInit+0xc8>)
 8001af2:	f001 fbbb 	bl	800326c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	2027      	movs	r0, #39	@ 0x27
 8001afc:	f001 fb01 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b00:	2027      	movs	r0, #39	@ 0x27
 8001b02:	f001 fb1a 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b06:	bf00      	nop
 8001b08:	37a8      	adds	r7, #168	@ 0xa8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40004800 	.word	0x40004800
 8001b14:	40021000 	.word	0x40021000
 8001b18:	48000800 	.word	0x48000800

08001b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <NMI_Handler+0x4>

08001b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <MemManage_Handler+0x4>

08001b34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <BusFault_Handler+0x4>

08001b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <UsageFault_Handler+0x4>

08001b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b72:	f000 f8b1 	bl	8001cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b8c:	4803      	ldr	r0, [pc, #12]	@ (8001b9c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001b8e:	f003 fdfb 	bl	8005788 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001b92:	4803      	ldr	r0, [pc, #12]	@ (8001ba0 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001b94:	f003 fdf8 	bl	8005788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	200001a8 	.word	0x200001a8
 8001ba0:	20000370 	.word	0x20000370

08001ba4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ba8:	4802      	ldr	r0, [pc, #8]	@ (8001bb4 <USART3_IRQHandler+0x10>)
 8001baa:	f005 f8e7 	bl	8006d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000408 	.word	0x20000408

08001bb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <SystemInit+0x20>)
 8001bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bc2:	4a05      	ldr	r2, [pc, #20]	@ (8001bd8 <SystemInit+0x20>)
 8001bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001be0:	f7ff ffea 	bl	8001bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be4:	480c      	ldr	r0, [pc, #48]	@ (8001c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001be6:	490d      	ldr	r1, [pc, #52]	@ (8001c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001be8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <LoopForever+0xe>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bec:	e002      	b.n	8001bf4 <LoopCopyDataInit>

08001bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf2:	3304      	adds	r3, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf8:	d3f9      	bcc.n	8001bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8001c28 <LoopForever+0x16>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c00:	e001      	b.n	8001c06 <LoopFillZerobss>

08001c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c04:	3204      	adds	r2, #4

08001c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c08:	d3fb      	bcc.n	8001c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c0a:	f006 fb63 	bl	80082d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c0e:	f7fe fc53 	bl	80004b8 <main>

08001c12 <LoopForever>:

LoopForever:
    b LoopForever
 8001c12:	e7fe      	b.n	8001c12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c20:	0800838c 	.word	0x0800838c
  ldr r2, =_sbss
 8001c24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c28:	200004bc 	.word	0x200004bc

08001c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c2c:	e7fe      	b.n	8001c2c <ADC1_2_IRQHandler>

08001c2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f001 fa57 	bl	80030ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c3e:	200f      	movs	r0, #15
 8001c40:	f000 f80e 	bl	8001c60 <HAL_InitTick>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	71fb      	strb	r3, [r7, #7]
 8001c4e:	e001      	b.n	8001c54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c50:	f7ff fbce 	bl	80013f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c54:	79fb      	ldrb	r3, [r7, #7]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c6c:	4b17      	ldr	r3, [pc, #92]	@ (8001ccc <HAL_InitTick+0x6c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d023      	beq.n	8001cbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c74:	4b16      	ldr	r3, [pc, #88]	@ (8001cd0 <HAL_InitTick+0x70>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b14      	ldr	r3, [pc, #80]	@ (8001ccc <HAL_InitTick+0x6c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f001 fa63 	bl	8003156 <HAL_SYSTICK_Config>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10f      	bne.n	8001cb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b0f      	cmp	r3, #15
 8001c9a:	d809      	bhi.n	8001cb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f001 fa2d 	bl	8003102 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd4 <HAL_InitTick+0x74>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e007      	b.n	8001cc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
 8001cb4:	e004      	b.n	8001cc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	73fb      	strb	r3, [r7, #15]
 8001cba:	e001      	b.n	8001cc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000008 	.word	0x20000008
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	20000004 	.word	0x20000004

08001cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_IncTick+0x20>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_IncTick+0x24>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a04      	ldr	r2, [pc, #16]	@ (8001cfc <HAL_IncTick+0x24>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	200004b8 	.word	0x200004b8

08001d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return uwTick;
 8001d04:	4b03      	ldr	r3, [pc, #12]	@ (8001d14 <HAL_GetTick+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	200004b8 	.word	0x200004b8

08001d18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	609a      	str	r2, [r3, #8]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	609a      	str	r2, [r3, #8]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3360      	adds	r3, #96	@ 0x60
 8001d92:	461a      	mov	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <LL_ADC_SetOffset+0x44>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001db8:	bf00      	nop
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	03fff000 	.word	0x03fff000

08001dc8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3360      	adds	r3, #96	@ 0x60
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	3360      	adds	r3, #96	@ 0x60
 8001e04:	461a      	mov	r2, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e1e:	bf00      	nop
 8001e20:	371c      	adds	r7, #28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b087      	sub	sp, #28
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3330      	adds	r3, #48	@ 0x30
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	4413      	add	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	211f      	movs	r1, #31
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	401a      	ands	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	0e9b      	lsrs	r3, r3, #26
 8001e62:	f003 011f 	and.w	r1, r3, #31
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	431a      	orrs	r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e76:	bf00      	nop
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b087      	sub	sp, #28
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3314      	adds	r3, #20
 8001e92:	461a      	mov	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	0e5b      	lsrs	r3, r3, #25
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	4413      	add	r3, r2
 8001ea0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	0d1b      	lsrs	r3, r3, #20
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	2107      	movs	r1, #7
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	0d1b      	lsrs	r3, r3, #20
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ecc:	bf00      	nop
 8001ece:	371c      	adds	r7, #28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0318 	and.w	r3, r3, #24
 8001efa:	4908      	ldr	r1, [pc, #32]	@ (8001f1c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001efc:	40d9      	lsrs	r1, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	400b      	ands	r3, r1
 8001f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f06:	431a      	orrs	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	0007ffff 	.word	0x0007ffff

08001f20 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 031f 	and.w	r3, r3, #31
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6093      	str	r3, [r2, #8]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f74:	d101      	bne.n	8001f7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f9c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fc4:	d101      	bne.n	8001fca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fe8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fec:	f043 0201 	orr.w	r2, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <LL_ADC_IsEnabled+0x18>
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <LL_ADC_IsEnabled+0x1a>
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002036:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800203a:	f043 0204 	orr.w	r2, r3, #4
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b04      	cmp	r3, #4
 8002060:	d101      	bne.n	8002066 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b08      	cmp	r3, #8
 8002086:	d101      	bne.n	800208c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b089      	sub	sp, #36	@ 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e130      	b.n	8002318 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d109      	bne.n	80020d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff f9bd 	bl	8001444 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff3f 	bl	8001f60 <LL_ADC_IsDeepPowerDownEnabled>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d004      	beq.n	80020f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff25 	bl	8001f3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff5a 	bl	8001fb0 <LL_ADC_IsInternalRegulatorEnabled>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d115      	bne.n	800212e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ff3e 	bl	8001f88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800210c:	4b84      	ldr	r3, [pc, #528]	@ (8002320 <HAL_ADC_Init+0x284>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	099b      	lsrs	r3, r3, #6
 8002112:	4a84      	ldr	r2, [pc, #528]	@ (8002324 <HAL_ADC_Init+0x288>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	099b      	lsrs	r3, r3, #6
 800211a:	3301      	adds	r3, #1
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002120:	e002      	b.n	8002128 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3b01      	subs	r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f9      	bne.n	8002122 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff3c 	bl	8001fb0 <LL_ADC_IsInternalRegulatorEnabled>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10d      	bne.n	800215a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002142:	f043 0210 	orr.w	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214e:	f043 0201 	orr.w	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ff75 	bl	800204e <LL_ADC_REG_IsConversionOngoing>
 8002164:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	2b00      	cmp	r3, #0
 8002170:	f040 80c9 	bne.w	8002306 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 80c5 	bne.w	8002306 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002180:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002184:	f043 0202 	orr.w	r2, r3, #2
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff35 	bl	8002000 <LL_ADC_IsEnabled>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d115      	bne.n	80021c8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800219c:	4862      	ldr	r0, [pc, #392]	@ (8002328 <HAL_ADC_Init+0x28c>)
 800219e:	f7ff ff2f 	bl	8002000 <LL_ADC_IsEnabled>
 80021a2:	4604      	mov	r4, r0
 80021a4:	4861      	ldr	r0, [pc, #388]	@ (800232c <HAL_ADC_Init+0x290>)
 80021a6:	f7ff ff2b 	bl	8002000 <LL_ADC_IsEnabled>
 80021aa:	4603      	mov	r3, r0
 80021ac:	431c      	orrs	r4, r3
 80021ae:	4860      	ldr	r0, [pc, #384]	@ (8002330 <HAL_ADC_Init+0x294>)
 80021b0:	f7ff ff26 	bl	8002000 <LL_ADC_IsEnabled>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4323      	orrs	r3, r4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	4619      	mov	r1, r3
 80021c2:	485c      	ldr	r0, [pc, #368]	@ (8002334 <HAL_ADC_Init+0x298>)
 80021c4:	f7ff fda8 	bl	8001d18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7e5b      	ldrb	r3, [r3, #25]
 80021cc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021d2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80021d8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80021de:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d106      	bne.n	8002204 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fa:	3b01      	subs	r3, #1
 80021fc:	045b      	lsls	r3, r3, #17
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002208:	2b00      	cmp	r3, #0
 800220a:	d009      	beq.n	8002220 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002218:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	4b44      	ldr	r3, [pc, #272]	@ (8002338 <HAL_ADC_Init+0x29c>)
 8002228:	4013      	ands	r3, r2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	69b9      	ldr	r1, [r7, #24]
 8002230:	430b      	orrs	r3, r1
 8002232:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff1b 	bl	8002074 <LL_ADC_INJ_IsConversionOngoing>
 800223e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d13d      	bne.n	80022c2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d13a      	bne.n	80022c2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002250:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002258:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002268:	f023 0302 	bic.w	r3, r3, #2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	69b9      	ldr	r1, [r7, #24]
 8002272:	430b      	orrs	r3, r1
 8002274:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800227c:	2b01      	cmp	r3, #1
 800227e:	d118      	bne.n	80022b2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800228a:	f023 0304 	bic.w	r3, r3, #4
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002296:	4311      	orrs	r1, r2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800229c:	4311      	orrs	r1, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022a2:	430a      	orrs	r2, r1
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	611a      	str	r2, [r3, #16]
 80022b0:	e007      	b.n	80022c2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0201 	bic.w	r2, r2, #1
 80022c0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d10c      	bne.n	80022e4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d0:	f023 010f 	bic.w	r1, r3, #15
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	1e5a      	subs	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80022e2:	e007      	b.n	80022f4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 020f 	bic.w	r2, r2, #15
 80022f2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f8:	f023 0303 	bic.w	r3, r3, #3
 80022fc:	f043 0201 	orr.w	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	655a      	str	r2, [r3, #84]	@ 0x54
 8002304:	e007      	b.n	8002316 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230a:	f043 0210 	orr.w	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002316:	7ffb      	ldrb	r3, [r7, #31]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3724      	adds	r7, #36	@ 0x24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd90      	pop	{r4, r7, pc}
 8002320:	20000000 	.word	0x20000000
 8002324:	053e2d63 	.word	0x053e2d63
 8002328:	50040000 	.word	0x50040000
 800232c:	50040100 	.word	0x50040100
 8002330:	50040200 	.word	0x50040200
 8002334:	50040300 	.word	0x50040300
 8002338:	fff0c007 	.word	0xfff0c007

0800233c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002344:	4857      	ldr	r0, [pc, #348]	@ (80024a4 <HAL_ADC_Start+0x168>)
 8002346:	f7ff fdeb 	bl	8001f20 <LL_ADC_GetMultimode>
 800234a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fe7c 	bl	800204e <LL_ADC_REG_IsConversionOngoing>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	f040 809c 	bne.w	8002496 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_ADC_Start+0x30>
 8002368:	2302      	movs	r3, #2
 800236a:	e097      	b.n	800249c <HAL_ADC_Start+0x160>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fc8d 	bl	8002c94 <ADC_Enable>
 800237a:	4603      	mov	r3, r0
 800237c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800237e:	7dfb      	ldrb	r3, [r7, #23]
 8002380:	2b00      	cmp	r3, #0
 8002382:	f040 8083 	bne.w	800248c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800238e:	f023 0301 	bic.w	r3, r3, #1
 8002392:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a42      	ldr	r2, [pc, #264]	@ (80024a8 <HAL_ADC_Start+0x16c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d002      	beq.n	80023aa <HAL_ADC_Start+0x6e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	e000      	b.n	80023ac <HAL_ADC_Start+0x70>
 80023aa:	4b40      	ldr	r3, [pc, #256]	@ (80024ac <HAL_ADC_Start+0x170>)
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d002      	beq.n	80023ba <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d105      	bne.n	80023c6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023be:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023d2:	d106      	bne.n	80023e2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d8:	f023 0206 	bic.w	r2, r3, #6
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	659a      	str	r2, [r3, #88]	@ 0x58
 80023e0:	e002      	b.n	80023e8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	221c      	movs	r2, #28
 80023ee:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a2a      	ldr	r2, [pc, #168]	@ (80024a8 <HAL_ADC_Start+0x16c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d002      	beq.n	8002408 <HAL_ADC_Start+0xcc>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	e000      	b.n	800240a <HAL_ADC_Start+0xce>
 8002408:	4b28      	ldr	r3, [pc, #160]	@ (80024ac <HAL_ADC_Start+0x170>)
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	4293      	cmp	r3, r2
 8002410:	d008      	beq.n	8002424 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b05      	cmp	r3, #5
 800241c:	d002      	beq.n	8002424 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b09      	cmp	r3, #9
 8002422:	d114      	bne.n	800244e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002436:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800243a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fded 	bl	8002026 <LL_ADC_REG_StartConversion>
 800244c:	e025      	b.n	800249a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002452:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a12      	ldr	r2, [pc, #72]	@ (80024a8 <HAL_ADC_Start+0x16c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d002      	beq.n	800246a <HAL_ADC_Start+0x12e>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	e000      	b.n	800246c <HAL_ADC_Start+0x130>
 800246a:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <HAL_ADC_Start+0x170>)
 800246c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00f      	beq.n	800249a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002482:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	655a      	str	r2, [r3, #84]	@ 0x54
 800248a:	e006      	b.n	800249a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002494:	e001      	b.n	800249a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002496:	2302      	movs	r3, #2
 8002498:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800249a:	7dfb      	ldrb	r3, [r7, #23]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	50040300 	.word	0x50040300
 80024a8:	50040100 	.word	0x50040100
 80024ac:	50040000 	.word	0x50040000

080024b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b0b6      	sub	sp, #216	@ 0xd8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x22>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e3c9      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x7b6>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fdb5 	bl	800204e <LL_ADC_REG_IsConversionOngoing>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f040 83aa 	bne.w	8002c40 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b05      	cmp	r3, #5
 80024fa:	d824      	bhi.n	8002546 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	3b02      	subs	r3, #2
 8002502:	2b03      	cmp	r3, #3
 8002504:	d81b      	bhi.n	800253e <HAL_ADC_ConfigChannel+0x8e>
 8002506:	a201      	add	r2, pc, #4	@ (adr r2, 800250c <HAL_ADC_ConfigChannel+0x5c>)
 8002508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250c:	0800251d 	.word	0x0800251d
 8002510:	08002525 	.word	0x08002525
 8002514:	0800252d 	.word	0x0800252d
 8002518:	08002535 	.word	0x08002535
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800251c:	230c      	movs	r3, #12
 800251e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002522:	e010      	b.n	8002546 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002524:	2312      	movs	r3, #18
 8002526:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800252a:	e00c      	b.n	8002546 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800252c:	2318      	movs	r3, #24
 800252e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002532:	e008      	b.n	8002546 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002534:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002538:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800253c:	e003      	b.n	8002546 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800253e:	2306      	movs	r3, #6
 8002540:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002544:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002554:	f7ff fc69 	bl	8001e2a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fd76 	bl	800204e <LL_ADC_REG_IsConversionOngoing>
 8002562:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fd82 	bl	8002074 <LL_ADC_INJ_IsConversionOngoing>
 8002570:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002574:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002578:	2b00      	cmp	r3, #0
 800257a:	f040 81a4 	bne.w	80028c6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800257e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 819f 	bne.w	80028c6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	6819      	ldr	r1, [r3, #0]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	461a      	mov	r2, r3
 8002596:	f7ff fc74 	bl	8001e82 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	08db      	lsrs	r3, r3, #3
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d00a      	beq.n	80025d2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6919      	ldr	r1, [r3, #16]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025cc:	f7ff fbd8 	bl	8001d80 <LL_ADC_SetOffset>
 80025d0:	e179      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fbf5 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 80025de:	4603      	mov	r3, r0
 80025e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10a      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x14e>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2100      	movs	r1, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fbea 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 80025f4:	4603      	mov	r3, r0
 80025f6:	0e9b      	lsrs	r3, r3, #26
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	e01e      	b.n	800263c <HAL_ADC_ConfigChannel+0x18c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fbdf 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800261c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002620:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002624:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800262c:	2320      	movs	r3, #32
 800262e:	e004      	b.n	800263a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002630:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002634:	fab3 f383 	clz	r3, r3
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x1a4>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	0e9b      	lsrs	r3, r3, #26
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	e018      	b.n	8002686 <HAL_ADC_ConfigChannel+0x1d6>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002668:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800266c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002670:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002678:	2320      	movs	r3, #32
 800267a:	e004      	b.n	8002686 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800267c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002686:	429a      	cmp	r2, r3
 8002688:	d106      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2200      	movs	r2, #0
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fbae 	bl	8001df4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2101      	movs	r1, #1
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fb92 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10a      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x214>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2101      	movs	r1, #1
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fb87 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	f003 021f 	and.w	r2, r3, #31
 80026c2:	e01e      	b.n	8002702 <HAL_ADC_ConfigChannel+0x252>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2101      	movs	r1, #1
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fb7c 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80026e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80026ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80026f2:	2320      	movs	r3, #32
 80026f4:	e004      	b.n	8002700 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80026f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270a:	2b00      	cmp	r3, #0
 800270c:	d105      	bne.n	800271a <HAL_ADC_ConfigChannel+0x26a>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	0e9b      	lsrs	r3, r3, #26
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	e018      	b.n	800274c <HAL_ADC_ConfigChannel+0x29c>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800272e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002732:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002736:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800273e:	2320      	movs	r3, #32
 8002740:	e004      	b.n	800274c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002742:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800274c:	429a      	cmp	r2, r3
 800274e:	d106      	bne.n	800275e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2200      	movs	r2, #0
 8002756:	2101      	movs	r1, #1
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fb4b 	bl	8001df4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2102      	movs	r1, #2
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fb2f 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 800276a:	4603      	mov	r3, r0
 800276c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <HAL_ADC_ConfigChannel+0x2da>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2102      	movs	r1, #2
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fb24 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 8002780:	4603      	mov	r3, r0
 8002782:	0e9b      	lsrs	r3, r3, #26
 8002784:	f003 021f 	and.w	r2, r3, #31
 8002788:	e01e      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x318>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2102      	movs	r1, #2
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fb19 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80027a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80027b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80027b8:	2320      	movs	r3, #32
 80027ba:	e004      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80027bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d105      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x330>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	0e9b      	lsrs	r3, r3, #26
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	e014      	b.n	800280a <HAL_ADC_ConfigChannel+0x35a>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80027ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80027f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80027fc:	2320      	movs	r3, #32
 80027fe:	e004      	b.n	800280a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002800:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002804:	fab3 f383 	clz	r3, r3
 8002808:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800280a:	429a      	cmp	r2, r3
 800280c:	d106      	bne.n	800281c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2200      	movs	r2, #0
 8002814:	2102      	movs	r1, #2
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff faec 	bl	8001df4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2103      	movs	r1, #3
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fad0 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 8002828:	4603      	mov	r3, r0
 800282a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10a      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x398>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2103      	movs	r1, #3
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fac5 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	0e9b      	lsrs	r3, r3, #26
 8002842:	f003 021f 	and.w	r2, r3, #31
 8002846:	e017      	b.n	8002878 <HAL_ADC_ConfigChannel+0x3c8>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2103      	movs	r1, #3
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff faba 	bl	8001dc8 <LL_ADC_GetOffsetChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002860:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002862:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002864:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800286a:	2320      	movs	r3, #32
 800286c:	e003      	b.n	8002876 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800286e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002870:	fab3 f383 	clz	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x3e0>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0e9b      	lsrs	r3, r3, #26
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	e011      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x404>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800289e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028a0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80028a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80028a8:	2320      	movs	r3, #32
 80028aa:	e003      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80028ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d106      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2200      	movs	r2, #0
 80028be:	2103      	movs	r1, #3
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fa97 	bl	8001df4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fb98 	bl	8002000 <LL_ADC_IsEnabled>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 8140 	bne.w	8002b58 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	6819      	ldr	r1, [r3, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	461a      	mov	r2, r3
 80028e6:	f7ff faf7 	bl	8001ed8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	4a8f      	ldr	r2, [pc, #572]	@ (8002b2c <HAL_ADC_ConfigChannel+0x67c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	f040 8131 	bne.w	8002b58 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10b      	bne.n	800291e <HAL_ADC_ConfigChannel+0x46e>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	0e9b      	lsrs	r3, r3, #26
 800290c:	3301      	adds	r3, #1
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	2b09      	cmp	r3, #9
 8002914:	bf94      	ite	ls
 8002916:	2301      	movls	r3, #1
 8002918:	2300      	movhi	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	e019      	b.n	8002952 <HAL_ADC_ConfigChannel+0x4a2>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800292c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800292e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002930:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002936:	2320      	movs	r3, #32
 8002938:	e003      	b.n	8002942 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800293a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800293c:	fab3 f383 	clz	r3, r3
 8002940:	b2db      	uxtb	r3, r3
 8002942:	3301      	adds	r3, #1
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	2b09      	cmp	r3, #9
 800294a:	bf94      	ite	ls
 800294c:	2301      	movls	r3, #1
 800294e:	2300      	movhi	r3, #0
 8002950:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002952:	2b00      	cmp	r3, #0
 8002954:	d079      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295e:	2b00      	cmp	r3, #0
 8002960:	d107      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x4c2>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	0e9b      	lsrs	r3, r3, #26
 8002968:	3301      	adds	r3, #1
 800296a:	069b      	lsls	r3, r3, #26
 800296c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002970:	e015      	b.n	800299e <HAL_ADC_ConfigChannel+0x4ee>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002980:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002982:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002984:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800298a:	2320      	movs	r3, #32
 800298c:	e003      	b.n	8002996 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800298e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	3301      	adds	r3, #1
 8002998:	069b      	lsls	r3, r3, #26
 800299a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <HAL_ADC_ConfigChannel+0x50e>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	0e9b      	lsrs	r3, r3, #26
 80029b0:	3301      	adds	r3, #1
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	2101      	movs	r1, #1
 80029b8:	fa01 f303 	lsl.w	r3, r1, r3
 80029bc:	e017      	b.n	80029ee <HAL_ADC_ConfigChannel+0x53e>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029c6:	fa93 f3a3 	rbit	r3, r3
 80029ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80029cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ce:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80029d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80029d6:	2320      	movs	r3, #32
 80029d8:	e003      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80029da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029dc:	fab3 f383 	clz	r3, r3
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	3301      	adds	r3, #1
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	2101      	movs	r1, #1
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	ea42 0103 	orr.w	r1, r2, r3
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10a      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x564>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	0e9b      	lsrs	r3, r3, #26
 8002a04:	3301      	adds	r3, #1
 8002a06:	f003 021f 	and.w	r2, r3, #31
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	051b      	lsls	r3, r3, #20
 8002a12:	e018      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x596>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a24:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	e003      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f003 021f 	and.w	r2, r3, #31
 8002a3e:	4613      	mov	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a46:	430b      	orrs	r3, r1
 8002a48:	e081      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d107      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x5b6>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	0e9b      	lsrs	r3, r3, #26
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	069b      	lsls	r3, r3, #26
 8002a60:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a64:	e015      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x5e2>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002a7e:	2320      	movs	r3, #32
 8002a80:	e003      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	069b      	lsls	r3, r3, #26
 8002a8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x602>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	0e9b      	lsrs	r3, r3, #26
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	2101      	movs	r1, #1
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	e017      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x632>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	61bb      	str	r3, [r7, #24]
  return result;
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002aca:	2320      	movs	r3, #32
 8002acc:	e003      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	fab3 f383 	clz	r3, r3
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	2101      	movs	r1, #1
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	ea42 0103 	orr.w	r1, r2, r3
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10d      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x65e>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	0e9b      	lsrs	r3, r3, #26
 8002af8:	3301      	adds	r3, #1
 8002afa:	f003 021f 	and.w	r2, r3, #31
 8002afe:	4613      	mov	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4413      	add	r3, r2
 8002b04:	3b1e      	subs	r3, #30
 8002b06:	051b      	lsls	r3, r3, #20
 8002b08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b0c:	e01e      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x69c>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	60fb      	str	r3, [r7, #12]
  return result;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d104      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002b26:	2320      	movs	r3, #32
 8002b28:	e006      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x688>
 8002b2a:	bf00      	nop
 8002b2c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	f003 021f 	and.w	r2, r3, #31
 8002b3e:	4613      	mov	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	4413      	add	r3, r2
 8002b44:	3b1e      	subs	r3, #30
 8002b46:	051b      	lsls	r3, r3, #20
 8002b48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b4c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b52:	4619      	mov	r1, r3
 8002b54:	f7ff f995 	bl	8001e82 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4b44      	ldr	r3, [pc, #272]	@ (8002c70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d07a      	beq.n	8002c5a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b64:	4843      	ldr	r0, [pc, #268]	@ (8002c74 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b66:	f7ff f8fd 	bl	8001d64 <LL_ADC_GetCommonPathInternalCh>
 8002b6a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a41      	ldr	r2, [pc, #260]	@ (8002c78 <HAL_ADC_ConfigChannel+0x7c8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d12c      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d126      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a3c      	ldr	r2, [pc, #240]	@ (8002c7c <HAL_ADC_ConfigChannel+0x7cc>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d004      	beq.n	8002b98 <HAL_ADC_ConfigChannel+0x6e8>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a3b      	ldr	r2, [pc, #236]	@ (8002c80 <HAL_ADC_ConfigChannel+0x7d0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d15d      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4834      	ldr	r0, [pc, #208]	@ (8002c74 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ba4:	f7ff f8cb 	bl	8001d3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ba8:	4b36      	ldr	r3, [pc, #216]	@ (8002c84 <HAL_ADC_ConfigChannel+0x7d4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	099b      	lsrs	r3, r3, #6
 8002bae:	4a36      	ldr	r2, [pc, #216]	@ (8002c88 <HAL_ADC_ConfigChannel+0x7d8>)
 8002bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb4:	099b      	lsrs	r3, r3, #6
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002bc2:	e002      	b.n	8002bca <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f9      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bd0:	e040      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a2d      	ldr	r2, [pc, #180]	@ (8002c8c <HAL_ADC_ConfigChannel+0x7dc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d118      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002be0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d112      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a23      	ldr	r2, [pc, #140]	@ (8002c7c <HAL_ADC_ConfigChannel+0x7cc>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d004      	beq.n	8002bfc <HAL_ADC_ConfigChannel+0x74c>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a22      	ldr	r2, [pc, #136]	@ (8002c80 <HAL_ADC_ConfigChannel+0x7d0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d12d      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c04:	4619      	mov	r1, r3
 8002c06:	481b      	ldr	r0, [pc, #108]	@ (8002c74 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c08:	f7ff f899 	bl	8001d3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c0c:	e024      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1f      	ldr	r2, [pc, #124]	@ (8002c90 <HAL_ADC_ConfigChannel+0x7e0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d120      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d11a      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a14      	ldr	r2, [pc, #80]	@ (8002c7c <HAL_ADC_ConfigChannel+0x7cc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d115      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c36:	4619      	mov	r1, r3
 8002c38:	480e      	ldr	r0, [pc, #56]	@ (8002c74 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c3a:	f7ff f880 	bl	8001d3e <LL_ADC_SetCommonPathInternalCh>
 8002c3e:	e00c      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c44:	f043 0220 	orr.w	r2, r3, #32
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002c52:	e002      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c54:	bf00      	nop
 8002c56:	e000      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c62:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	37d8      	adds	r7, #216	@ 0xd8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	80080000 	.word	0x80080000
 8002c74:	50040300 	.word	0x50040300
 8002c78:	c7520000 	.word	0xc7520000
 8002c7c:	50040000 	.word	0x50040000
 8002c80:	50040200 	.word	0x50040200
 8002c84:	20000000 	.word	0x20000000
 8002c88:	053e2d63 	.word	0x053e2d63
 8002c8c:	cb840000 	.word	0xcb840000
 8002c90:	80000001 	.word	0x80000001

08002c94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff f9ab 	bl	8002000 <LL_ADC_IsEnabled>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d169      	bne.n	8002d84 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	4b36      	ldr	r3, [pc, #216]	@ (8002d90 <ADC_Enable+0xfc>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00d      	beq.n	8002cda <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc2:	f043 0210 	orr.w	r2, r3, #16
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cce:	f043 0201 	orr.w	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e055      	b.n	8002d86 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff f97a 	bl	8001fd8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ce4:	482b      	ldr	r0, [pc, #172]	@ (8002d94 <ADC_Enable+0x100>)
 8002ce6:	f7ff f83d 	bl	8001d64 <LL_ADC_GetCommonPathInternalCh>
 8002cea:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002cec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d013      	beq.n	8002d1c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cf4:	4b28      	ldr	r3, [pc, #160]	@ (8002d98 <ADC_Enable+0x104>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	4a28      	ldr	r2, [pc, #160]	@ (8002d9c <ADC_Enable+0x108>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	099b      	lsrs	r3, r3, #6
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	4613      	mov	r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d0e:	e002      	b.n	8002d16 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1f9      	bne.n	8002d10 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d1c:	f7fe fff0 	bl	8001d00 <HAL_GetTick>
 8002d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d22:	e028      	b.n	8002d76 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff f969 	bl	8002000 <LL_ADC_IsEnabled>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d104      	bne.n	8002d3e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff f94d 	bl	8001fd8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d3e:	f7fe ffdf 	bl	8001d00 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d914      	bls.n	8002d76 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d00d      	beq.n	8002d76 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5e:	f043 0210 	orr.w	r2, r3, #16
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6a:	f043 0201 	orr.w	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e007      	b.n	8002d86 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d1cf      	bne.n	8002d24 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	8000003f 	.word	0x8000003f
 8002d94:	50040300 	.word	0x50040300
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	053e2d63 	.word	0x053e2d63

08002da0 <LL_ADC_IsEnabled>:
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <LL_ADC_IsEnabled+0x18>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <LL_ADC_IsEnabled+0x1a>
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 0304 	and.w	r3, r3, #4
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d101      	bne.n	8002dde <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b09f      	sub	sp, #124	@ 0x7c
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e093      	b.n	8002f32 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002e12:	2300      	movs	r3, #0
 8002e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002e16:	2300      	movs	r3, #0
 8002e18:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a47      	ldr	r2, [pc, #284]	@ (8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d102      	bne.n	8002e2a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e24:	4b46      	ldr	r3, [pc, #280]	@ (8002f40 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	e001      	b.n	8002e2e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10b      	bne.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e38:	f043 0220 	orr.w	r2, r3, #32
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e072      	b.n	8002f32 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff ffb9 	bl	8002dc6 <LL_ADC_REG_IsConversionOngoing>
 8002e54:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff ffb3 	bl	8002dc6 <LL_ADC_REG_IsConversionOngoing>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d154      	bne.n	8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002e66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d151      	bne.n	8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e6c:	4b35      	ldr	r3, [pc, #212]	@ (8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002e6e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d02c      	beq.n	8002ed2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6859      	ldr	r1, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e8a:	035b      	lsls	r3, r3, #13
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e92:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e94:	4829      	ldr	r0, [pc, #164]	@ (8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e96:	f7ff ff83 	bl	8002da0 <LL_ADC_IsEnabled>
 8002e9a:	4604      	mov	r4, r0
 8002e9c:	4828      	ldr	r0, [pc, #160]	@ (8002f40 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e9e:	f7ff ff7f 	bl	8002da0 <LL_ADC_IsEnabled>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	431c      	orrs	r4, r3
 8002ea6:	4828      	ldr	r0, [pc, #160]	@ (8002f48 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002ea8:	f7ff ff7a 	bl	8002da0 <LL_ADC_IsEnabled>
 8002eac:	4603      	mov	r3, r0
 8002eae:	4323      	orrs	r3, r4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d137      	bne.n	8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002eb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002ebc:	f023 030f 	bic.w	r3, r3, #15
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	6811      	ldr	r1, [r2, #0]
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	6892      	ldr	r2, [r2, #8]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ece:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ed0:	e028      	b.n	8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ed2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002eda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002edc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ede:	4817      	ldr	r0, [pc, #92]	@ (8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ee0:	f7ff ff5e 	bl	8002da0 <LL_ADC_IsEnabled>
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	4816      	ldr	r0, [pc, #88]	@ (8002f40 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ee8:	f7ff ff5a 	bl	8002da0 <LL_ADC_IsEnabled>
 8002eec:	4603      	mov	r3, r0
 8002eee:	431c      	orrs	r4, r3
 8002ef0:	4815      	ldr	r0, [pc, #84]	@ (8002f48 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002ef2:	f7ff ff55 	bl	8002da0 <LL_ADC_IsEnabled>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4323      	orrs	r3, r4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d112      	bne.n	8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f06:	f023 030f 	bic.w	r3, r3, #15
 8002f0a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f0c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f0e:	e009      	b.n	8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002f22:	e000      	b.n	8002f26 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f2e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	377c      	adds	r7, #124	@ 0x7c
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd90      	pop	{r4, r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	50040000 	.word	0x50040000
 8002f40:	50040100 	.word	0x50040100
 8002f44:	50040300 	.word	0x50040300
 8002f48:	50040200 	.word	0x50040200

08002f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f90 <__NVIC_SetPriorityGrouping+0x44>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f7e:	4a04      	ldr	r2, [pc, #16]	@ (8002f90 <__NVIC_SetPriorityGrouping+0x44>)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	60d3      	str	r3, [r2, #12]
}
 8002f84:	bf00      	nop
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f98:	4b04      	ldr	r3, [pc, #16]	@ (8002fac <__NVIC_GetPriorityGrouping+0x18>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	0a1b      	lsrs	r3, r3, #8
 8002f9e:	f003 0307 	and.w	r3, r3, #7
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	db0b      	blt.n	8002fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	f003 021f 	and.w	r2, r3, #31
 8002fc8:	4907      	ldr	r1, [pc, #28]	@ (8002fe8 <__NVIC_EnableIRQ+0x38>)
 8002fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	e000e100 	.word	0xe000e100

08002fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	6039      	str	r1, [r7, #0]
 8002ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	db0a      	blt.n	8003016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	b2da      	uxtb	r2, r3
 8003004:	490c      	ldr	r1, [pc, #48]	@ (8003038 <__NVIC_SetPriority+0x4c>)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	0112      	lsls	r2, r2, #4
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	440b      	add	r3, r1
 8003010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003014:	e00a      	b.n	800302c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4908      	ldr	r1, [pc, #32]	@ (800303c <__NVIC_SetPriority+0x50>)
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	3b04      	subs	r3, #4
 8003024:	0112      	lsls	r2, r2, #4
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	440b      	add	r3, r1
 800302a:	761a      	strb	r2, [r3, #24]
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000e100 	.word	0xe000e100
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003040:	b480      	push	{r7}
 8003042:	b089      	sub	sp, #36	@ 0x24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f1c3 0307 	rsb	r3, r3, #7
 800305a:	2b04      	cmp	r3, #4
 800305c:	bf28      	it	cs
 800305e:	2304      	movcs	r3, #4
 8003060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3304      	adds	r3, #4
 8003066:	2b06      	cmp	r3, #6
 8003068:	d902      	bls.n	8003070 <NVIC_EncodePriority+0x30>
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3b03      	subs	r3, #3
 800306e:	e000      	b.n	8003072 <NVIC_EncodePriority+0x32>
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	f04f 32ff 	mov.w	r2, #4294967295
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43da      	mvns	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	401a      	ands	r2, r3
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003088:	f04f 31ff 	mov.w	r1, #4294967295
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	43d9      	mvns	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	4313      	orrs	r3, r2
         );
}
 800309a:	4618      	mov	r0, r3
 800309c:	3724      	adds	r7, #36	@ 0x24
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
	...

080030a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030b8:	d301      	bcc.n	80030be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ba:	2301      	movs	r3, #1
 80030bc:	e00f      	b.n	80030de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030be:	4a0a      	ldr	r2, [pc, #40]	@ (80030e8 <SysTick_Config+0x40>)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030c6:	210f      	movs	r1, #15
 80030c8:	f04f 30ff 	mov.w	r0, #4294967295
 80030cc:	f7ff ff8e 	bl	8002fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d0:	4b05      	ldr	r3, [pc, #20]	@ (80030e8 <SysTick_Config+0x40>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030d6:	4b04      	ldr	r3, [pc, #16]	@ (80030e8 <SysTick_Config+0x40>)
 80030d8:	2207      	movs	r2, #7
 80030da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	e000e010 	.word	0xe000e010

080030ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff ff29 	bl	8002f4c <__NVIC_SetPriorityGrouping>
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b086      	sub	sp, #24
 8003106:	af00      	add	r7, sp, #0
 8003108:	4603      	mov	r3, r0
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003114:	f7ff ff3e 	bl	8002f94 <__NVIC_GetPriorityGrouping>
 8003118:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	6978      	ldr	r0, [r7, #20]
 8003120:	f7ff ff8e 	bl	8003040 <NVIC_EncodePriority>
 8003124:	4602      	mov	r2, r0
 8003126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff ff5d 	bl	8002fec <__NVIC_SetPriority>
}
 8003132:	bf00      	nop
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	4603      	mov	r3, r0
 8003142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ff31 	bl	8002fb0 <__NVIC_EnableIRQ>
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff ffa2 	bl	80030a8 <SysTick_Config>
 8003164:	4603      	mov	r3, r0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d008      	beq.n	8003198 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2204      	movs	r2, #4
 800318a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e022      	b.n	80031de <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 020e 	bic.w	r2, r2, #14
 80031a6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0201 	bic.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031bc:	f003 021c 	and.w	r2, r3, #28
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	2101      	movs	r1, #1
 80031c6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ca:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d005      	beq.n	800320e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2204      	movs	r2, #4
 8003206:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
 800320c:	e029      	b.n	8003262 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 020e 	bic.w	r2, r2, #14
 800321c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003232:	f003 021c 	and.w	r2, r3, #28
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323a:	2101      	movs	r1, #1
 800323c:	fa01 f202 	lsl.w	r2, r1, r2
 8003240:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	4798      	blx	r3
    }
  }
  return status;
 8003262:	7bfb      	ldrb	r3, [r7, #15]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800327a:	e17f      	b.n	800357c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	2101      	movs	r1, #1
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	fa01 f303 	lsl.w	r3, r1, r3
 8003288:	4013      	ands	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 8171 	beq.w	8003576 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d005      	beq.n	80032ac <HAL_GPIO_Init+0x40>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d130      	bne.n	800330e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2203      	movs	r2, #3
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032e2:	2201      	movs	r2, #1
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4013      	ands	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	091b      	lsrs	r3, r3, #4
 80032f8:	f003 0201 	and.w	r2, r3, #1
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	2b03      	cmp	r3, #3
 8003318:	d118      	bne.n	800334c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003320:	2201      	movs	r2, #1
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	08db      	lsrs	r3, r3, #3
 8003336:	f003 0201 	and.w	r2, r3, #1
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	2b03      	cmp	r3, #3
 8003356:	d017      	beq.n	8003388 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	2203      	movs	r2, #3
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d123      	bne.n	80033dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	08da      	lsrs	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3208      	adds	r2, #8
 800339c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	220f      	movs	r2, #15
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	08da      	lsrs	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3208      	adds	r2, #8
 80033d6:	6939      	ldr	r1, [r7, #16]
 80033d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	2203      	movs	r2, #3
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4013      	ands	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0203 	and.w	r2, r3, #3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80ac 	beq.w	8003576 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800341e:	4b5f      	ldr	r3, [pc, #380]	@ (800359c <HAL_GPIO_Init+0x330>)
 8003420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003422:	4a5e      	ldr	r2, [pc, #376]	@ (800359c <HAL_GPIO_Init+0x330>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	6613      	str	r3, [r2, #96]	@ 0x60
 800342a:	4b5c      	ldr	r3, [pc, #368]	@ (800359c <HAL_GPIO_Init+0x330>)
 800342c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003436:	4a5a      	ldr	r2, [pc, #360]	@ (80035a0 <HAL_GPIO_Init+0x334>)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	3302      	adds	r3, #2
 800343e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003442:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	220f      	movs	r2, #15
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4013      	ands	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003460:	d025      	beq.n	80034ae <HAL_GPIO_Init+0x242>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a4f      	ldr	r2, [pc, #316]	@ (80035a4 <HAL_GPIO_Init+0x338>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d01f      	beq.n	80034aa <HAL_GPIO_Init+0x23e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a4e      	ldr	r2, [pc, #312]	@ (80035a8 <HAL_GPIO_Init+0x33c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d019      	beq.n	80034a6 <HAL_GPIO_Init+0x23a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a4d      	ldr	r2, [pc, #308]	@ (80035ac <HAL_GPIO_Init+0x340>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d013      	beq.n	80034a2 <HAL_GPIO_Init+0x236>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a4c      	ldr	r2, [pc, #304]	@ (80035b0 <HAL_GPIO_Init+0x344>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d00d      	beq.n	800349e <HAL_GPIO_Init+0x232>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a4b      	ldr	r2, [pc, #300]	@ (80035b4 <HAL_GPIO_Init+0x348>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d007      	beq.n	800349a <HAL_GPIO_Init+0x22e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a4a      	ldr	r2, [pc, #296]	@ (80035b8 <HAL_GPIO_Init+0x34c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d101      	bne.n	8003496 <HAL_GPIO_Init+0x22a>
 8003492:	2306      	movs	r3, #6
 8003494:	e00c      	b.n	80034b0 <HAL_GPIO_Init+0x244>
 8003496:	2307      	movs	r3, #7
 8003498:	e00a      	b.n	80034b0 <HAL_GPIO_Init+0x244>
 800349a:	2305      	movs	r3, #5
 800349c:	e008      	b.n	80034b0 <HAL_GPIO_Init+0x244>
 800349e:	2304      	movs	r3, #4
 80034a0:	e006      	b.n	80034b0 <HAL_GPIO_Init+0x244>
 80034a2:	2303      	movs	r3, #3
 80034a4:	e004      	b.n	80034b0 <HAL_GPIO_Init+0x244>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e002      	b.n	80034b0 <HAL_GPIO_Init+0x244>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <HAL_GPIO_Init+0x244>
 80034ae:	2300      	movs	r3, #0
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	f002 0203 	and.w	r2, r2, #3
 80034b6:	0092      	lsls	r2, r2, #2
 80034b8:	4093      	lsls	r3, r2
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034c0:	4937      	ldr	r1, [pc, #220]	@ (80035a0 <HAL_GPIO_Init+0x334>)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	089b      	lsrs	r3, r3, #2
 80034c6:	3302      	adds	r3, #2
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034ce:	4b3b      	ldr	r3, [pc, #236]	@ (80035bc <HAL_GPIO_Init+0x350>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	43db      	mvns	r3, r3
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4013      	ands	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034f2:	4a32      	ldr	r2, [pc, #200]	@ (80035bc <HAL_GPIO_Init+0x350>)
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034f8:	4b30      	ldr	r3, [pc, #192]	@ (80035bc <HAL_GPIO_Init+0x350>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	43db      	mvns	r3, r3
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4013      	ands	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800351c:	4a27      	ldr	r2, [pc, #156]	@ (80035bc <HAL_GPIO_Init+0x350>)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003522:	4b26      	ldr	r3, [pc, #152]	@ (80035bc <HAL_GPIO_Init+0x350>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	43db      	mvns	r3, r3
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4013      	ands	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003546:	4a1d      	ldr	r2, [pc, #116]	@ (80035bc <HAL_GPIO_Init+0x350>)
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800354c:	4b1b      	ldr	r3, [pc, #108]	@ (80035bc <HAL_GPIO_Init+0x350>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	43db      	mvns	r3, r3
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003570:	4a12      	ldr	r2, [pc, #72]	@ (80035bc <HAL_GPIO_Init+0x350>)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	3301      	adds	r3, #1
 800357a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	fa22 f303 	lsr.w	r3, r2, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	f47f ae78 	bne.w	800327c <HAL_GPIO_Init+0x10>
  }
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000
 80035a0:	40010000 	.word	0x40010000
 80035a4:	48000400 	.word	0x48000400
 80035a8:	48000800 	.word	0x48000800
 80035ac:	48000c00 	.word	0x48000c00
 80035b0:	48001000 	.word	0x48001000
 80035b4:	48001400 	.word	0x48001400
 80035b8:	48001800 	.word	0x48001800
 80035bc:	40010400 	.word	0x40010400

080035c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	807b      	strh	r3, [r7, #2]
 80035cc:	4613      	mov	r3, r2
 80035ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d0:	787b      	ldrb	r3, [r7, #1]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035d6:	887a      	ldrh	r2, [r7, #2]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035dc:	e002      	b.n	80035e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e08d      	b.n	800371e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd ffe2 	bl	80015e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2224      	movs	r2, #36	@ 0x24
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003640:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003650:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d107      	bne.n	800366a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	e006      	b.n	8003678 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003676:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d108      	bne.n	8003692 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	e007      	b.n	80036a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69d9      	ldr	r1, [r3, #28]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1a      	ldr	r2, [r3, #32]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b20      	cmp	r3, #32
 800373a:	d138      	bne.n	80037ae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003746:	2302      	movs	r3, #2
 8003748:	e032      	b.n	80037b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2224      	movs	r2, #36	@ 0x24
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0201 	bic.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003778:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6819      	ldr	r1, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0201 	orr.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e000      	b.n	80037b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
  }
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	d139      	bne.n	8003846 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037dc:	2302      	movs	r3, #2
 80037de:	e033      	b.n	8003848 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	@ 0x24
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800380e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0201 	orr.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	e000      	b.n	8003848 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003846:	2302      	movs	r3, #2
  }
}
 8003848:	4618      	mov	r0, r3
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003858:	4b04      	ldr	r3, [pc, #16]	@ (800386c <HAL_PWREx_GetVoltageRange+0x18>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003860:	4618      	mov	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40007000 	.word	0x40007000

08003870 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800387e:	d130      	bne.n	80038e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003880:	4b23      	ldr	r3, [pc, #140]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800388c:	d038      	beq.n	8003900 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800388e:	4b20      	ldr	r3, [pc, #128]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003896:	4a1e      	ldr	r2, [pc, #120]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003898:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800389c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800389e:	4b1d      	ldr	r3, [pc, #116]	@ (8003914 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2232      	movs	r2, #50	@ 0x32
 80038a4:	fb02 f303 	mul.w	r3, r2, r3
 80038a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003918 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	0c9b      	lsrs	r3, r3, #18
 80038b0:	3301      	adds	r3, #1
 80038b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038b4:	e002      	b.n	80038bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038bc:	4b14      	ldr	r3, [pc, #80]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c8:	d102      	bne.n	80038d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1f2      	bne.n	80038b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038dc:	d110      	bne.n	8003900 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e00f      	b.n	8003902 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ee:	d007      	beq.n	8003900 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038f0:	4b07      	ldr	r3, [pc, #28]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038f8:	4a05      	ldr	r2, [pc, #20]	@ (8003910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40007000 	.word	0x40007000
 8003914:	20000000 	.word	0x20000000
 8003918:	431bde83 	.word	0x431bde83

0800391c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e3ca      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800392e:	4b97      	ldr	r3, [pc, #604]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003938:	4b94      	ldr	r3, [pc, #592]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0310 	and.w	r3, r3, #16
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 80e4 	beq.w	8003b18 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d007      	beq.n	8003966 <HAL_RCC_OscConfig+0x4a>
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b0c      	cmp	r3, #12
 800395a:	f040 808b 	bne.w	8003a74 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2b01      	cmp	r3, #1
 8003962:	f040 8087 	bne.w	8003a74 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003966:	4b89      	ldr	r3, [pc, #548]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <HAL_RCC_OscConfig+0x62>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e3a2      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1a      	ldr	r2, [r3, #32]
 8003982:	4b82      	ldr	r3, [pc, #520]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d004      	beq.n	8003998 <HAL_RCC_OscConfig+0x7c>
 800398e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003996:	e005      	b.n	80039a4 <HAL_RCC_OscConfig+0x88>
 8003998:	4b7c      	ldr	r3, [pc, #496]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 800399a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d223      	bcs.n	80039f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 fd55 	bl	800445c <RCC_SetFlashLatencyFromMSIRange>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e383      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039bc:	4b73      	ldr	r3, [pc, #460]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a72      	ldr	r2, [pc, #456]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 80039c2:	f043 0308 	orr.w	r3, r3, #8
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	4b70      	ldr	r3, [pc, #448]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	496d      	ldr	r1, [pc, #436]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039da:	4b6c      	ldr	r3, [pc, #432]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	4968      	ldr	r1, [pc, #416]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	604b      	str	r3, [r1, #4]
 80039ee:	e025      	b.n	8003a3c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039f0:	4b66      	ldr	r3, [pc, #408]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a65      	ldr	r2, [pc, #404]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 80039f6:	f043 0308 	orr.w	r3, r3, #8
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	4b63      	ldr	r3, [pc, #396]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	4960      	ldr	r1, [pc, #384]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a0e:	4b5f      	ldr	r3, [pc, #380]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	495b      	ldr	r1, [pc, #364]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d109      	bne.n	8003a3c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fd15 	bl	800445c <RCC_SetFlashLatencyFromMSIRange>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e343      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a3c:	f000 fc4a 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 8003a40:	4602      	mov	r2, r0
 8003a42:	4b52      	ldr	r3, [pc, #328]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	091b      	lsrs	r3, r3, #4
 8003a48:	f003 030f 	and.w	r3, r3, #15
 8003a4c:	4950      	ldr	r1, [pc, #320]	@ (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003a4e:	5ccb      	ldrb	r3, [r1, r3]
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
 8003a58:	4a4e      	ldr	r2, [pc, #312]	@ (8003b94 <HAL_RCC_OscConfig+0x278>)
 8003a5a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a5c:	4b4e      	ldr	r3, [pc, #312]	@ (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe f8fd 	bl	8001c60 <HAL_InitTick>
 8003a66:	4603      	mov	r3, r0
 8003a68:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d052      	beq.n	8003b16 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
 8003a72:	e327      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d032      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a7c:	4b43      	ldr	r3, [pc, #268]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a42      	ldr	r2, [pc, #264]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a88:	f7fe f93a 	bl	8001d00 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a90:	f7fe f936 	bl	8001d00 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e310      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aae:	4b37      	ldr	r3, [pc, #220]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a36      	ldr	r2, [pc, #216]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003ab4:	f043 0308 	orr.w	r3, r3, #8
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	4b34      	ldr	r3, [pc, #208]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	4931      	ldr	r1, [pc, #196]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003acc:	4b2f      	ldr	r3, [pc, #188]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	021b      	lsls	r3, r3, #8
 8003ada:	492c      	ldr	r1, [pc, #176]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	604b      	str	r3, [r1, #4]
 8003ae0:	e01a      	b.n	8003b18 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a29      	ldr	r2, [pc, #164]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003ae8:	f023 0301 	bic.w	r3, r3, #1
 8003aec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003aee:	f7fe f907 	bl	8001d00 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003af6:	f7fe f903 	bl	8001d00 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e2dd      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b08:	4b20      	ldr	r3, [pc, #128]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1f0      	bne.n	8003af6 <HAL_RCC_OscConfig+0x1da>
 8003b14:	e000      	b.n	8003b18 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d074      	beq.n	8003c0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d005      	beq.n	8003b36 <HAL_RCC_OscConfig+0x21a>
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2b0c      	cmp	r3, #12
 8003b2e:	d10e      	bne.n	8003b4e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d10b      	bne.n	8003b4e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b36:	4b15      	ldr	r3, [pc, #84]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d064      	beq.n	8003c0c <HAL_RCC_OscConfig+0x2f0>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d160      	bne.n	8003c0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e2ba      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b56:	d106      	bne.n	8003b66 <HAL_RCC_OscConfig+0x24a>
 8003b58:	4b0c      	ldr	r3, [pc, #48]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	e026      	b.n	8003bb4 <HAL_RCC_OscConfig+0x298>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b6e:	d115      	bne.n	8003b9c <HAL_RCC_OscConfig+0x280>
 8003b70:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a05      	ldr	r2, [pc, #20]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003b76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	4b03      	ldr	r3, [pc, #12]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a02      	ldr	r2, [pc, #8]	@ (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003b82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	e014      	b.n	8003bb4 <HAL_RCC_OscConfig+0x298>
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	08008334 	.word	0x08008334
 8003b94:	20000000 	.word	0x20000000
 8003b98:	20000004 	.word	0x20000004
 8003b9c:	4ba0      	ldr	r3, [pc, #640]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a9f      	ldr	r2, [pc, #636]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003ba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	4b9d      	ldr	r3, [pc, #628]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a9c      	ldr	r2, [pc, #624]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003bae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d013      	beq.n	8003be4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fe f8a0 	bl	8001d00 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7fe f89c 	bl	8001d00 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	@ 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e276      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bd6:	4b92      	ldr	r3, [pc, #584]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x2a8>
 8003be2:	e014      	b.n	8003c0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fe f88c 	bl	8001d00 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bec:	f7fe f888 	bl	8001d00 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	@ 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e262      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bfe:	4b88      	ldr	r3, [pc, #544]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x2d0>
 8003c0a:	e000      	b.n	8003c0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d060      	beq.n	8003cdc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d005      	beq.n	8003c2c <HAL_RCC_OscConfig+0x310>
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	2b0c      	cmp	r3, #12
 8003c24:	d119      	bne.n	8003c5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d116      	bne.n	8003c5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c2c:	4b7c      	ldr	r3, [pc, #496]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_RCC_OscConfig+0x328>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e23f      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c44:	4b76      	ldr	r3, [pc, #472]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	061b      	lsls	r3, r3, #24
 8003c52:	4973      	ldr	r1, [pc, #460]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c58:	e040      	b.n	8003cdc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d023      	beq.n	8003caa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c62:	4b6f      	ldr	r3, [pc, #444]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a6e      	ldr	r2, [pc, #440]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6e:	f7fe f847 	bl	8001d00 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c76:	f7fe f843 	bl	8001d00 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e21d      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c88:	4b65      	ldr	r3, [pc, #404]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c94:	4b62      	ldr	r3, [pc, #392]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	061b      	lsls	r3, r3, #24
 8003ca2:	495f      	ldr	r1, [pc, #380]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	604b      	str	r3, [r1, #4]
 8003ca8:	e018      	b.n	8003cdc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003caa:	4b5d      	ldr	r3, [pc, #372]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a5c      	ldr	r2, [pc, #368]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003cb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7fe f823 	bl	8001d00 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cbe:	f7fe f81f 	bl	8001d00 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e1f9      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cd0:	4b53      	ldr	r3, [pc, #332]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d03c      	beq.n	8003d62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01c      	beq.n	8003d2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cf0:	4b4b      	ldr	r3, [pc, #300]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf6:	4a4a      	ldr	r2, [pc, #296]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d00:	f7fd fffe 	bl	8001d00 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d08:	f7fd fffa 	bl	8001d00 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e1d4      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d1a:	4b41      	ldr	r3, [pc, #260]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0ef      	beq.n	8003d08 <HAL_RCC_OscConfig+0x3ec>
 8003d28:	e01b      	b.n	8003d62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d30:	4a3b      	ldr	r2, [pc, #236]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3a:	f7fd ffe1 	bl	8001d00 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d42:	f7fd ffdd 	bl	8001d00 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e1b7      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d54:	4b32      	ldr	r3, [pc, #200]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1ef      	bne.n	8003d42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80a6 	beq.w	8003ebc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d70:	2300      	movs	r3, #0
 8003d72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d74:	4b2a      	ldr	r3, [pc, #168]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10d      	bne.n	8003d9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d80:	4b27      	ldr	r3, [pc, #156]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d84:	4a26      	ldr	r2, [pc, #152]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003d86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d8c:	4b24      	ldr	r3, [pc, #144]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d9c:	4b21      	ldr	r3, [pc, #132]	@ (8003e24 <HAL_RCC_OscConfig+0x508>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d118      	bne.n	8003dda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003da8:	4b1e      	ldr	r3, [pc, #120]	@ (8003e24 <HAL_RCC_OscConfig+0x508>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a1d      	ldr	r2, [pc, #116]	@ (8003e24 <HAL_RCC_OscConfig+0x508>)
 8003dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db4:	f7fd ffa4 	bl	8001d00 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dbc:	f7fd ffa0 	bl	8001d00 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e17a      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dce:	4b15      	ldr	r3, [pc, #84]	@ (8003e24 <HAL_RCC_OscConfig+0x508>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d108      	bne.n	8003df4 <HAL_RCC_OscConfig+0x4d8>
 8003de2:	4b0f      	ldr	r3, [pc, #60]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de8:	4a0d      	ldr	r2, [pc, #52]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003dea:	f043 0301 	orr.w	r3, r3, #1
 8003dee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003df2:	e029      	b.n	8003e48 <HAL_RCC_OscConfig+0x52c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b05      	cmp	r3, #5
 8003dfa:	d115      	bne.n	8003e28 <HAL_RCC_OscConfig+0x50c>
 8003dfc:	4b08      	ldr	r3, [pc, #32]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e02:	4a07      	ldr	r2, [pc, #28]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003e04:	f043 0304 	orr.w	r3, r3, #4
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e0c:	4b04      	ldr	r3, [pc, #16]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e12:	4a03      	ldr	r2, [pc, #12]	@ (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e1c:	e014      	b.n	8003e48 <HAL_RCC_OscConfig+0x52c>
 8003e1e:	bf00      	nop
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40007000 	.word	0x40007000
 8003e28:	4b9c      	ldr	r3, [pc, #624]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2e:	4a9b      	ldr	r2, [pc, #620]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e38:	4b98      	ldr	r3, [pc, #608]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3e:	4a97      	ldr	r2, [pc, #604]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003e40:	f023 0304 	bic.w	r3, r3, #4
 8003e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d016      	beq.n	8003e7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e50:	f7fd ff56 	bl	8001d00 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e58:	f7fd ff52 	bl	8001d00 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e12a      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6e:	4b8b      	ldr	r3, [pc, #556]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0ed      	beq.n	8003e58 <HAL_RCC_OscConfig+0x53c>
 8003e7c:	e015      	b.n	8003eaa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7e:	f7fd ff3f 	bl	8001d00 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e84:	e00a      	b.n	8003e9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e86:	f7fd ff3b 	bl	8001d00 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e113      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e9c:	4b7f      	ldr	r3, [pc, #508]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1ed      	bne.n	8003e86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eaa:	7ffb      	ldrb	r3, [r7, #31]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d105      	bne.n	8003ebc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb0:	4b7a      	ldr	r3, [pc, #488]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb4:	4a79      	ldr	r2, [pc, #484]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003eb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eba:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80fe 	beq.w	80040c2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	f040 80d0 	bne.w	8004070 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ed0:	4b72      	ldr	r3, [pc, #456]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f003 0203 	and.w	r2, r3, #3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d130      	bne.n	8003f46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d127      	bne.n	8003f46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f00:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d11f      	bne.n	8003f46 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f10:	2a07      	cmp	r2, #7
 8003f12:	bf14      	ite	ne
 8003f14:	2201      	movne	r2, #1
 8003f16:	2200      	moveq	r2, #0
 8003f18:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d113      	bne.n	8003f46 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f28:	085b      	lsrs	r3, r3, #1
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d109      	bne.n	8003f46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d06e      	beq.n	8004024 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b0c      	cmp	r3, #12
 8003f4a:	d069      	beq.n	8004020 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f4c:	4b53      	ldr	r3, [pc, #332]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d105      	bne.n	8003f64 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f58:	4b50      	ldr	r3, [pc, #320]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0ad      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f68:	4b4c      	ldr	r3, [pc, #304]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a4b      	ldr	r2, [pc, #300]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003f6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f74:	f7fd fec4 	bl	8001d00 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fd fec0 	bl	8001d00 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e09a      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f8e:	4b43      	ldr	r3, [pc, #268]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f9a:	4b40      	ldr	r3, [pc, #256]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	4b40      	ldr	r3, [pc, #256]	@ (80040a0 <HAL_RCC_OscConfig+0x784>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003faa:	3a01      	subs	r2, #1
 8003fac:	0112      	lsls	r2, r2, #4
 8003fae:	4311      	orrs	r1, r2
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fb4:	0212      	lsls	r2, r2, #8
 8003fb6:	4311      	orrs	r1, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003fbc:	0852      	lsrs	r2, r2, #1
 8003fbe:	3a01      	subs	r2, #1
 8003fc0:	0552      	lsls	r2, r2, #21
 8003fc2:	4311      	orrs	r1, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003fc8:	0852      	lsrs	r2, r2, #1
 8003fca:	3a01      	subs	r2, #1
 8003fcc:	0652      	lsls	r2, r2, #25
 8003fce:	4311      	orrs	r1, r2
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003fd4:	0912      	lsrs	r2, r2, #4
 8003fd6:	0452      	lsls	r2, r2, #17
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	4930      	ldr	r1, [pc, #192]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a2d      	ldr	r2, [pc, #180]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fec:	4b2b      	ldr	r3, [pc, #172]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4a2a      	ldr	r2, [pc, #168]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8003ff2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ff6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ff8:	f7fd fe82 	bl	8001d00 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004000:	f7fd fe7e 	bl	8001d00 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e058      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004012:	4b22      	ldr	r3, [pc, #136]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800401e:	e050      	b.n	80040c2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e04f      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004024:	4b1d      	ldr	r3, [pc, #116]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d148      	bne.n	80040c2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004030:	4b1a      	ldr	r3, [pc, #104]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a19      	ldr	r2, [pc, #100]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8004036:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800403a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800403c:	4b17      	ldr	r3, [pc, #92]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	4a16      	ldr	r2, [pc, #88]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8004042:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004046:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004048:	f7fd fe5a 	bl	8001d00 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004050:	f7fd fe56 	bl	8001d00 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e030      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004062:	4b0e      	ldr	r3, [pc, #56]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x734>
 800406e:	e028      	b.n	80040c2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	2b0c      	cmp	r3, #12
 8004074:	d023      	beq.n	80040be <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a08      	ldr	r2, [pc, #32]	@ (800409c <HAL_RCC_OscConfig+0x780>)
 800407c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004082:	f7fd fe3d 	bl	8001d00 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004088:	e00c      	b.n	80040a4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408a:	f7fd fe39 	bl	8001d00 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d905      	bls.n	80040a4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e013      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
 800409c:	40021000 	.word	0x40021000
 80040a0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040a4:	4b09      	ldr	r3, [pc, #36]	@ (80040cc <HAL_RCC_OscConfig+0x7b0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1ec      	bne.n	800408a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040b0:	4b06      	ldr	r3, [pc, #24]	@ (80040cc <HAL_RCC_OscConfig+0x7b0>)
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	4905      	ldr	r1, [pc, #20]	@ (80040cc <HAL_RCC_OscConfig+0x7b0>)
 80040b6:	4b06      	ldr	r3, [pc, #24]	@ (80040d0 <HAL_RCC_OscConfig+0x7b4>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	60cb      	str	r3, [r1, #12]
 80040bc:	e001      	b.n	80040c2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000
 80040d0:	feeefffc 	.word	0xfeeefffc

080040d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0e7      	b.n	80042b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040e8:	4b75      	ldr	r3, [pc, #468]	@ (80042c0 <HAL_RCC_ClockConfig+0x1ec>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d910      	bls.n	8004118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f6:	4b72      	ldr	r3, [pc, #456]	@ (80042c0 <HAL_RCC_ClockConfig+0x1ec>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f023 0207 	bic.w	r2, r3, #7
 80040fe:	4970      	ldr	r1, [pc, #448]	@ (80042c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	4313      	orrs	r3, r2
 8004104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004106:	4b6e      	ldr	r3, [pc, #440]	@ (80042c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0cf      	b.n	80042b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d010      	beq.n	8004146 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	4b66      	ldr	r3, [pc, #408]	@ (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004130:	429a      	cmp	r2, r3
 8004132:	d908      	bls.n	8004146 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004134:	4b63      	ldr	r3, [pc, #396]	@ (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4960      	ldr	r1, [pc, #384]	@ (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004142:	4313      	orrs	r3, r2
 8004144:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d04c      	beq.n	80041ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b03      	cmp	r3, #3
 8004158:	d107      	bne.n	800416a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800415a:	4b5a      	ldr	r3, [pc, #360]	@ (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d121      	bne.n	80041aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e0a6      	b.n	80042b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d107      	bne.n	8004182 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004172:	4b54      	ldr	r3, [pc, #336]	@ (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d115      	bne.n	80041aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e09a      	b.n	80042b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d107      	bne.n	800419a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800418a:	4b4e      	ldr	r3, [pc, #312]	@ (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e08e      	b.n	80042b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800419a:	4b4a      	ldr	r3, [pc, #296]	@ (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e086      	b.n	80042b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041aa:	4b46      	ldr	r3, [pc, #280]	@ (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f023 0203 	bic.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4943      	ldr	r1, [pc, #268]	@ (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041bc:	f7fd fda0 	bl	8001d00 <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c2:	e00a      	b.n	80041da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c4:	f7fd fd9c 	bl	8001d00 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e06e      	b.n	80042b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	4b3a      	ldr	r3, [pc, #232]	@ (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 020c 	and.w	r2, r3, #12
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d1eb      	bne.n	80041c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d010      	beq.n	800421a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	4b31      	ldr	r3, [pc, #196]	@ (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004204:	429a      	cmp	r2, r3
 8004206:	d208      	bcs.n	800421a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004208:	4b2e      	ldr	r3, [pc, #184]	@ (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	492b      	ldr	r1, [pc, #172]	@ (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004216:	4313      	orrs	r3, r2
 8004218:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800421a:	4b29      	ldr	r3, [pc, #164]	@ (80042c0 <HAL_RCC_ClockConfig+0x1ec>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d210      	bcs.n	800424a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004228:	4b25      	ldr	r3, [pc, #148]	@ (80042c0 <HAL_RCC_ClockConfig+0x1ec>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f023 0207 	bic.w	r2, r3, #7
 8004230:	4923      	ldr	r1, [pc, #140]	@ (80042c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	4313      	orrs	r3, r2
 8004236:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004238:	4b21      	ldr	r3, [pc, #132]	@ (80042c0 <HAL_RCC_ClockConfig+0x1ec>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d001      	beq.n	800424a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e036      	b.n	80042b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004256:	4b1b      	ldr	r3, [pc, #108]	@ (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	4918      	ldr	r1, [pc, #96]	@ (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004264:	4313      	orrs	r3, r2
 8004266:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d009      	beq.n	8004288 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004274:	4b13      	ldr	r3, [pc, #76]	@ (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4910      	ldr	r1, [pc, #64]	@ (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004284:	4313      	orrs	r3, r2
 8004286:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004288:	f000 f824 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 800428c:	4602      	mov	r2, r0
 800428e:	4b0d      	ldr	r3, [pc, #52]	@ (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	091b      	lsrs	r3, r3, #4
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	490b      	ldr	r1, [pc, #44]	@ (80042c8 <HAL_RCC_ClockConfig+0x1f4>)
 800429a:	5ccb      	ldrb	r3, [r1, r3]
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
 80042a4:	4a09      	ldr	r2, [pc, #36]	@ (80042cc <HAL_RCC_ClockConfig+0x1f8>)
 80042a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042a8:	4b09      	ldr	r3, [pc, #36]	@ (80042d0 <HAL_RCC_ClockConfig+0x1fc>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fd fcd7 	bl	8001c60 <HAL_InitTick>
 80042b2:	4603      	mov	r3, r0
 80042b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80042b6:	7afb      	ldrb	r3, [r7, #11]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40022000 	.word	0x40022000
 80042c4:	40021000 	.word	0x40021000
 80042c8:	08008334 	.word	0x08008334
 80042cc:	20000000 	.word	0x20000000
 80042d0:	20000004 	.word	0x20000004

080042d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b089      	sub	sp, #36	@ 0x24
 80042d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	2300      	movs	r3, #0
 80042e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042e2:	4b3e      	ldr	r3, [pc, #248]	@ (80043dc <HAL_RCC_GetSysClockFreq+0x108>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042ec:	4b3b      	ldr	r3, [pc, #236]	@ (80043dc <HAL_RCC_GetSysClockFreq+0x108>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0303 	and.w	r3, r3, #3
 80042f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_GetSysClockFreq+0x34>
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	2b0c      	cmp	r3, #12
 8004300:	d121      	bne.n	8004346 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d11e      	bne.n	8004346 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004308:	4b34      	ldr	r3, [pc, #208]	@ (80043dc <HAL_RCC_GetSysClockFreq+0x108>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d107      	bne.n	8004324 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004314:	4b31      	ldr	r3, [pc, #196]	@ (80043dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800431a:	0a1b      	lsrs	r3, r3, #8
 800431c:	f003 030f 	and.w	r3, r3, #15
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	e005      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004324:	4b2d      	ldr	r3, [pc, #180]	@ (80043dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004330:	4a2b      	ldr	r2, [pc, #172]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004338:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10d      	bne.n	800435c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004344:	e00a      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b04      	cmp	r3, #4
 800434a:	d102      	bne.n	8004352 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800434c:	4b25      	ldr	r3, [pc, #148]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800434e:	61bb      	str	r3, [r7, #24]
 8004350:	e004      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b08      	cmp	r3, #8
 8004356:	d101      	bne.n	800435c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004358:	4b23      	ldr	r3, [pc, #140]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800435a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b0c      	cmp	r3, #12
 8004360:	d134      	bne.n	80043cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004362:	4b1e      	ldr	r3, [pc, #120]	@ (80043dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b02      	cmp	r3, #2
 8004370:	d003      	beq.n	800437a <HAL_RCC_GetSysClockFreq+0xa6>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d003      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0xac>
 8004378:	e005      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800437a:	4b1a      	ldr	r3, [pc, #104]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800437c:	617b      	str	r3, [r7, #20]
      break;
 800437e:	e005      	b.n	800438c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004380:	4b19      	ldr	r3, [pc, #100]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004382:	617b      	str	r3, [r7, #20]
      break;
 8004384:	e002      	b.n	800438c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	617b      	str	r3, [r7, #20]
      break;
 800438a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800438c:	4b13      	ldr	r3, [pc, #76]	@ (80043dc <HAL_RCC_GetSysClockFreq+0x108>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	091b      	lsrs	r3, r3, #4
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	3301      	adds	r3, #1
 8004398:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800439a:	4b10      	ldr	r3, [pc, #64]	@ (80043dc <HAL_RCC_GetSysClockFreq+0x108>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	0a1b      	lsrs	r3, r3, #8
 80043a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	fb03 f202 	mul.w	r2, r3, r2
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043b2:	4b0a      	ldr	r3, [pc, #40]	@ (80043dc <HAL_RCC_GetSysClockFreq+0x108>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	0e5b      	lsrs	r3, r3, #25
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	3301      	adds	r3, #1
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043cc:	69bb      	ldr	r3, [r7, #24]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3724      	adds	r7, #36	@ 0x24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40021000 	.word	0x40021000
 80043e0:	0800834c 	.word	0x0800834c
 80043e4:	00f42400 	.word	0x00f42400
 80043e8:	017d7840 	.word	0x017d7840

080043ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f0:	4b03      	ldr	r3, [pc, #12]	@ (8004400 <HAL_RCC_GetHCLKFreq+0x14>)
 80043f2:	681b      	ldr	r3, [r3, #0]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000000 	.word	0x20000000

08004404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004408:	f7ff fff0 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 800440c:	4602      	mov	r2, r0
 800440e:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	0a1b      	lsrs	r3, r3, #8
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4904      	ldr	r1, [pc, #16]	@ (800442c <HAL_RCC_GetPCLK1Freq+0x28>)
 800441a:	5ccb      	ldrb	r3, [r1, r3]
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004424:	4618      	mov	r0, r3
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40021000 	.word	0x40021000
 800442c:	08008344 	.word	0x08008344

08004430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004434:	f7ff ffda 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 8004438:	4602      	mov	r2, r0
 800443a:	4b06      	ldr	r3, [pc, #24]	@ (8004454 <HAL_RCC_GetPCLK2Freq+0x24>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	0adb      	lsrs	r3, r3, #11
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	4904      	ldr	r1, [pc, #16]	@ (8004458 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004446:	5ccb      	ldrb	r3, [r1, r3]
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40021000 	.word	0x40021000
 8004458:	08008344 	.word	0x08008344

0800445c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004464:	2300      	movs	r3, #0
 8004466:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004468:	4b2a      	ldr	r3, [pc, #168]	@ (8004514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800446a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800446c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004474:	f7ff f9ee 	bl	8003854 <HAL_PWREx_GetVoltageRange>
 8004478:	6178      	str	r0, [r7, #20]
 800447a:	e014      	b.n	80044a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800447c:	4b25      	ldr	r3, [pc, #148]	@ (8004514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800447e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004480:	4a24      	ldr	r2, [pc, #144]	@ (8004514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004486:	6593      	str	r3, [r2, #88]	@ 0x58
 8004488:	4b22      	ldr	r3, [pc, #136]	@ (8004514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800448a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004494:	f7ff f9de 	bl	8003854 <HAL_PWREx_GetVoltageRange>
 8004498:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800449a:	4b1e      	ldr	r3, [pc, #120]	@ (8004514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800449c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449e:	4a1d      	ldr	r2, [pc, #116]	@ (8004514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ac:	d10b      	bne.n	80044c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b80      	cmp	r3, #128	@ 0x80
 80044b2:	d919      	bls.n	80044e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2ba0      	cmp	r3, #160	@ 0xa0
 80044b8:	d902      	bls.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044ba:	2302      	movs	r3, #2
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	e013      	b.n	80044e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044c0:	2301      	movs	r3, #1
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	e010      	b.n	80044e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b80      	cmp	r3, #128	@ 0x80
 80044ca:	d902      	bls.n	80044d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044cc:	2303      	movs	r3, #3
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	e00a      	b.n	80044e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b80      	cmp	r3, #128	@ 0x80
 80044d6:	d102      	bne.n	80044de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044d8:	2302      	movs	r3, #2
 80044da:	613b      	str	r3, [r7, #16]
 80044dc:	e004      	b.n	80044e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b70      	cmp	r3, #112	@ 0x70
 80044e2:	d101      	bne.n	80044e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044e4:	2301      	movs	r3, #1
 80044e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f023 0207 	bic.w	r2, r3, #7
 80044f0:	4909      	ldr	r1, [pc, #36]	@ (8004518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044f8:	4b07      	ldr	r3, [pc, #28]	@ (8004518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	429a      	cmp	r2, r3
 8004504:	d001      	beq.n	800450a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40021000 	.word	0x40021000
 8004518:	40022000 	.word	0x40022000

0800451c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004524:	2300      	movs	r3, #0
 8004526:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004528:	2300      	movs	r3, #0
 800452a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004534:	2b00      	cmp	r3, #0
 8004536:	d041      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800453c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004540:	d02a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004542:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004546:	d824      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004548:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800454c:	d008      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800454e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004552:	d81e      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004558:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800455c:	d010      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800455e:	e018      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004560:	4b86      	ldr	r3, [pc, #536]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	4a85      	ldr	r2, [pc, #532]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004566:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800456a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800456c:	e015      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3304      	adds	r3, #4
 8004572:	2100      	movs	r1, #0
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fa8b 	bl	8004a90 <RCCEx_PLLSAI1_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800457e:	e00c      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3320      	adds	r3, #32
 8004584:	2100      	movs	r1, #0
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fb76 	bl	8004c78 <RCCEx_PLLSAI2_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004590:	e003      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	74fb      	strb	r3, [r7, #19]
      break;
 8004596:	e000      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800459a:	7cfb      	ldrb	r3, [r7, #19]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10b      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045a0:	4b76      	ldr	r3, [pc, #472]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045ae:	4973      	ldr	r1, [pc, #460]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80045b6:	e001      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b8:	7cfb      	ldrb	r3, [r7, #19]
 80045ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d041      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045d0:	d02a      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80045d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045d6:	d824      	bhi.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045dc:	d008      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045e2:	d81e      	bhi.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80045e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045ec:	d010      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045ee:	e018      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045f0:	4b62      	ldr	r3, [pc, #392]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	4a61      	ldr	r2, [pc, #388]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045fc:	e015      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3304      	adds	r3, #4
 8004602:	2100      	movs	r1, #0
 8004604:	4618      	mov	r0, r3
 8004606:	f000 fa43 	bl	8004a90 <RCCEx_PLLSAI1_Config>
 800460a:	4603      	mov	r3, r0
 800460c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800460e:	e00c      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3320      	adds	r3, #32
 8004614:	2100      	movs	r1, #0
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fb2e 	bl	8004c78 <RCCEx_PLLSAI2_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004620:	e003      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	74fb      	strb	r3, [r7, #19]
      break;
 8004626:	e000      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004628:	bf00      	nop
    }

    if(ret == HAL_OK)
 800462a:	7cfb      	ldrb	r3, [r7, #19]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10b      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004630:	4b52      	ldr	r3, [pc, #328]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004636:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800463e:	494f      	ldr	r1, [pc, #316]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004646:	e001      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004648:	7cfb      	ldrb	r3, [r7, #19]
 800464a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80a0 	beq.w	800479a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465a:	2300      	movs	r3, #0
 800465c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800465e:	4b47      	ldr	r3, [pc, #284]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800466e:	2300      	movs	r3, #0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00d      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004674:	4b41      	ldr	r3, [pc, #260]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004678:	4a40      	ldr	r2, [pc, #256]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800467e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004680:	4b3e      	ldr	r3, [pc, #248]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800468c:	2301      	movs	r3, #1
 800468e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004690:	4b3b      	ldr	r3, [pc, #236]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a3a      	ldr	r2, [pc, #232]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800469a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800469c:	f7fd fb30 	bl	8001d00 <HAL_GetTick>
 80046a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046a2:	e009      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a4:	f7fd fb2c 	bl	8001d00 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d902      	bls.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	74fb      	strb	r3, [r7, #19]
        break;
 80046b6:	e005      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046b8:	4b31      	ldr	r3, [pc, #196]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0ef      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80046c4:	7cfb      	ldrb	r3, [r7, #19]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d15c      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046ca:	4b2c      	ldr	r3, [pc, #176]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d01f      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d019      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046e8:	4b24      	ldr	r3, [pc, #144]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046f4:	4b21      	ldr	r3, [pc, #132]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fa:	4a20      	ldr	r2, [pc, #128]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004700:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004704:	4b1d      	ldr	r3, [pc, #116]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470a:	4a1c      	ldr	r2, [pc, #112]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004710:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004714:	4a19      	ldr	r2, [pc, #100]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d016      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004726:	f7fd faeb 	bl	8001d00 <HAL_GetTick>
 800472a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800472c:	e00b      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472e:	f7fd fae7 	bl	8001d00 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800473c:	4293      	cmp	r3, r2
 800473e:	d902      	bls.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	74fb      	strb	r3, [r7, #19]
            break;
 8004744:	e006      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004746:	4b0d      	ldr	r3, [pc, #52]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0ec      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004754:	7cfb      	ldrb	r3, [r7, #19]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10c      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800475a:	4b08      	ldr	r3, [pc, #32]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004760:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800476a:	4904      	ldr	r1, [pc, #16]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004772:	e009      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004774:	7cfb      	ldrb	r3, [r7, #19]
 8004776:	74bb      	strb	r3, [r7, #18]
 8004778:	e006      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800477a:	bf00      	nop
 800477c:	40021000 	.word	0x40021000
 8004780:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004784:	7cfb      	ldrb	r3, [r7, #19]
 8004786:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004788:	7c7b      	ldrb	r3, [r7, #17]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d105      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800478e:	4ba1      	ldr	r3, [pc, #644]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004792:	4aa0      	ldr	r2, [pc, #640]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004794:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004798:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047a6:	4b9b      	ldr	r3, [pc, #620]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ac:	f023 0203 	bic.w	r2, r3, #3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b4:	4997      	ldr	r1, [pc, #604]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047c8:	4b92      	ldr	r3, [pc, #584]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ce:	f023 020c 	bic.w	r2, r3, #12
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d6:	498f      	ldr	r1, [pc, #572]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047ea:	4b8a      	ldr	r3, [pc, #552]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f8:	4986      	ldr	r1, [pc, #536]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800480c:	4b81      	ldr	r3, [pc, #516]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004812:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481a:	497e      	ldr	r1, [pc, #504]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0310 	and.w	r3, r3, #16
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800482e:	4b79      	ldr	r3, [pc, #484]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004834:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800483c:	4975      	ldr	r1, [pc, #468]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0320 	and.w	r3, r3, #32
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004850:	4b70      	ldr	r3, [pc, #448]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004856:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800485e:	496d      	ldr	r1, [pc, #436]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004872:	4b68      	ldr	r3, [pc, #416]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004878:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004880:	4964      	ldr	r1, [pc, #400]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004894:	4b5f      	ldr	r3, [pc, #380]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a2:	495c      	ldr	r1, [pc, #368]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048b6:	4b57      	ldr	r3, [pc, #348]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c4:	4953      	ldr	r1, [pc, #332]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e6:	494b      	ldr	r1, [pc, #300]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048fa:	4b46      	ldr	r3, [pc, #280]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004900:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004908:	4942      	ldr	r1, [pc, #264]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d028      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800491c:	4b3d      	ldr	r3, [pc, #244]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004922:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800492a:	493a      	ldr	r1, [pc, #232]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004936:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800493a:	d106      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800493c:	4b35      	ldr	r3, [pc, #212]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	4a34      	ldr	r2, [pc, #208]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004942:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004946:	60d3      	str	r3, [r2, #12]
 8004948:	e011      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800494e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004952:	d10c      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3304      	adds	r3, #4
 8004958:	2101      	movs	r1, #1
 800495a:	4618      	mov	r0, r3
 800495c:	f000 f898 	bl	8004a90 <RCCEx_PLLSAI1_Config>
 8004960:	4603      	mov	r3, r0
 8004962:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004964:	7cfb      	ldrb	r3, [r7, #19]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 800496a:	7cfb      	ldrb	r3, [r7, #19]
 800496c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d028      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800497a:	4b26      	ldr	r3, [pc, #152]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800497c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004980:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004988:	4922      	ldr	r1, [pc, #136]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004994:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004998:	d106      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800499a:	4b1e      	ldr	r3, [pc, #120]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	4a1d      	ldr	r2, [pc, #116]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80049a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049a4:	60d3      	str	r3, [r2, #12]
 80049a6:	e011      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049b0:	d10c      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3304      	adds	r3, #4
 80049b6:	2101      	movs	r1, #1
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 f869 	bl	8004a90 <RCCEx_PLLSAI1_Config>
 80049be:	4603      	mov	r3, r0
 80049c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049c2:	7cfb      	ldrb	r3, [r7, #19]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80049c8:	7cfb      	ldrb	r3, [r7, #19]
 80049ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d031      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049e6:	490b      	ldr	r1, [pc, #44]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049f6:	d10f      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3304      	adds	r3, #4
 80049fc:	2102      	movs	r1, #2
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 f846 	bl	8004a90 <RCCEx_PLLSAI1_Config>
 8004a04:	4603      	mov	r3, r0
 8004a06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a08:	7cfb      	ldrb	r3, [r7, #19]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d016      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8004a0e:	7cfb      	ldrb	r3, [r7, #19]
 8004a10:	74bb      	strb	r3, [r7, #18]
 8004a12:	e013      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004a14:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a20:	d10c      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3320      	adds	r3, #32
 8004a26:	2102      	movs	r1, #2
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 f925 	bl	8004c78 <RCCEx_PLLSAI2_Config>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a32:	7cfb      	ldrb	r3, [r7, #19]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8004a38:	7cfb      	ldrb	r3, [r7, #19]
 8004a3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a48:	4b10      	ldr	r3, [pc, #64]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8004a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a56:	490d      	ldr	r1, [pc, #52]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a6a:	4b08      	ldr	r3, [pc, #32]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a70:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a78:	4904      	ldr	r1, [pc, #16]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a80:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40021000 	.word	0x40021000

08004a90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a9e:	4b75      	ldr	r3, [pc, #468]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d018      	beq.n	8004adc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004aaa:	4b72      	ldr	r3, [pc, #456]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 0203 	and.w	r2, r3, #3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d10d      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
       ||
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d009      	beq.n	8004ad6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ac2:	4b6c      	ldr	r3, [pc, #432]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	091b      	lsrs	r3, r3, #4
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
       ||
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d047      	beq.n	8004b66 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	73fb      	strb	r3, [r7, #15]
 8004ada:	e044      	b.n	8004b66 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d018      	beq.n	8004b16 <RCCEx_PLLSAI1_Config+0x86>
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	d825      	bhi.n	8004b34 <RCCEx_PLLSAI1_Config+0xa4>
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d002      	beq.n	8004af2 <RCCEx_PLLSAI1_Config+0x62>
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d009      	beq.n	8004b04 <RCCEx_PLLSAI1_Config+0x74>
 8004af0:	e020      	b.n	8004b34 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004af2:	4b60      	ldr	r3, [pc, #384]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d11d      	bne.n	8004b3a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b02:	e01a      	b.n	8004b3a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b04:	4b5b      	ldr	r3, [pc, #364]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d116      	bne.n	8004b3e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b14:	e013      	b.n	8004b3e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b16:	4b57      	ldr	r3, [pc, #348]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10f      	bne.n	8004b42 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b22:	4b54      	ldr	r3, [pc, #336]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d109      	bne.n	8004b42 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b32:	e006      	b.n	8004b42 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
      break;
 8004b38:	e004      	b.n	8004b44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b3a:	bf00      	nop
 8004b3c:	e002      	b.n	8004b44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b3e:	bf00      	nop
 8004b40:	e000      	b.n	8004b44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b42:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10d      	bne.n	8004b66 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6819      	ldr	r1, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	4944      	ldr	r1, [pc, #272]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d17d      	bne.n	8004c68 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b6c:	4b41      	ldr	r3, [pc, #260]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a40      	ldr	r2, [pc, #256]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b78:	f7fd f8c2 	bl	8001d00 <HAL_GetTick>
 8004b7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b7e:	e009      	b.n	8004b94 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b80:	f7fd f8be 	bl	8001d00 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d902      	bls.n	8004b94 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	73fb      	strb	r3, [r7, #15]
        break;
 8004b92:	e005      	b.n	8004ba0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b94:	4b37      	ldr	r3, [pc, #220]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1ef      	bne.n	8004b80 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d160      	bne.n	8004c68 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d111      	bne.n	8004bd0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bac:	4b31      	ldr	r3, [pc, #196]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6892      	ldr	r2, [r2, #8]
 8004bbc:	0211      	lsls	r1, r2, #8
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	68d2      	ldr	r2, [r2, #12]
 8004bc2:	0912      	lsrs	r2, r2, #4
 8004bc4:	0452      	lsls	r2, r2, #17
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	492a      	ldr	r1, [pc, #168]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	610b      	str	r3, [r1, #16]
 8004bce:	e027      	b.n	8004c20 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d112      	bne.n	8004bfc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bd6:	4b27      	ldr	r3, [pc, #156]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004bde:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6892      	ldr	r2, [r2, #8]
 8004be6:	0211      	lsls	r1, r2, #8
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6912      	ldr	r2, [r2, #16]
 8004bec:	0852      	lsrs	r2, r2, #1
 8004bee:	3a01      	subs	r2, #1
 8004bf0:	0552      	lsls	r2, r2, #21
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	491f      	ldr	r1, [pc, #124]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	610b      	str	r3, [r1, #16]
 8004bfa:	e011      	b.n	8004c20 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6892      	ldr	r2, [r2, #8]
 8004c0c:	0211      	lsls	r1, r2, #8
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6952      	ldr	r2, [r2, #20]
 8004c12:	0852      	lsrs	r2, r2, #1
 8004c14:	3a01      	subs	r2, #1
 8004c16:	0652      	lsls	r2, r2, #25
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	4916      	ldr	r1, [pc, #88]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c20:	4b14      	ldr	r3, [pc, #80]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a13      	ldr	r2, [pc, #76]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2c:	f7fd f868 	bl	8001d00 <HAL_GetTick>
 8004c30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c32:	e009      	b.n	8004c48 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c34:	f7fd f864 	bl	8001d00 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d902      	bls.n	8004c48 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	73fb      	strb	r3, [r7, #15]
          break;
 8004c46:	e005      	b.n	8004c54 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c48:	4b0a      	ldr	r3, [pc, #40]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0ef      	beq.n	8004c34 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c5a:	4b06      	ldr	r3, [pc, #24]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	4904      	ldr	r1, [pc, #16]	@ (8004c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40021000 	.word	0x40021000

08004c78 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c86:	4b6a      	ldr	r3, [pc, #424]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d018      	beq.n	8004cc4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c92:	4b67      	ldr	r3, [pc, #412]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f003 0203 	and.w	r2, r3, #3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d10d      	bne.n	8004cbe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004caa:	4b61      	ldr	r3, [pc, #388]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
       ||
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d047      	beq.n	8004d4e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	73fb      	strb	r3, [r7, #15]
 8004cc2:	e044      	b.n	8004d4e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d018      	beq.n	8004cfe <RCCEx_PLLSAI2_Config+0x86>
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d825      	bhi.n	8004d1c <RCCEx_PLLSAI2_Config+0xa4>
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d002      	beq.n	8004cda <RCCEx_PLLSAI2_Config+0x62>
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d009      	beq.n	8004cec <RCCEx_PLLSAI2_Config+0x74>
 8004cd8:	e020      	b.n	8004d1c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cda:	4b55      	ldr	r3, [pc, #340]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d11d      	bne.n	8004d22 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cea:	e01a      	b.n	8004d22 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cec:	4b50      	ldr	r3, [pc, #320]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d116      	bne.n	8004d26 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cfc:	e013      	b.n	8004d26 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cfe:	4b4c      	ldr	r3, [pc, #304]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10f      	bne.n	8004d2a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d0a:	4b49      	ldr	r3, [pc, #292]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d109      	bne.n	8004d2a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d1a:	e006      	b.n	8004d2a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d20:	e004      	b.n	8004d2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d22:	bf00      	nop
 8004d24:	e002      	b.n	8004d2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d26:	bf00      	nop
 8004d28:	e000      	b.n	8004d2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10d      	bne.n	8004d4e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d32:	4b3f      	ldr	r3, [pc, #252]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6819      	ldr	r1, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	430b      	orrs	r3, r1
 8004d48:	4939      	ldr	r1, [pc, #228]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d167      	bne.n	8004e24 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d54:	4b36      	ldr	r3, [pc, #216]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a35      	ldr	r2, [pc, #212]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d60:	f7fc ffce 	bl	8001d00 <HAL_GetTick>
 8004d64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d66:	e009      	b.n	8004d7c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d68:	f7fc ffca 	bl	8001d00 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d902      	bls.n	8004d7c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	73fb      	strb	r3, [r7, #15]
        break;
 8004d7a:	e005      	b.n	8004d88 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1ef      	bne.n	8004d68 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d14a      	bne.n	8004e24 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d111      	bne.n	8004db8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d94:	4b26      	ldr	r3, [pc, #152]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004d9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6892      	ldr	r2, [r2, #8]
 8004da4:	0211      	lsls	r1, r2, #8
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	68d2      	ldr	r2, [r2, #12]
 8004daa:	0912      	lsrs	r2, r2, #4
 8004dac:	0452      	lsls	r2, r2, #17
 8004dae:	430a      	orrs	r2, r1
 8004db0:	491f      	ldr	r1, [pc, #124]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	614b      	str	r3, [r1, #20]
 8004db6:	e011      	b.n	8004ddc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004db8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004dc0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6892      	ldr	r2, [r2, #8]
 8004dc8:	0211      	lsls	r1, r2, #8
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6912      	ldr	r2, [r2, #16]
 8004dce:	0852      	lsrs	r2, r2, #1
 8004dd0:	3a01      	subs	r2, #1
 8004dd2:	0652      	lsls	r2, r2, #25
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	4916      	ldr	r1, [pc, #88]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ddc:	4b14      	ldr	r3, [pc, #80]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a13      	ldr	r2, [pc, #76]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004de6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de8:	f7fc ff8a 	bl	8001d00 <HAL_GetTick>
 8004dec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dee:	e009      	b.n	8004e04 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004df0:	f7fc ff86 	bl	8001d00 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d902      	bls.n	8004e04 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	73fb      	strb	r3, [r7, #15]
          break;
 8004e02:	e005      	b.n	8004e10 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e04:	4b0a      	ldr	r3, [pc, #40]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0ef      	beq.n	8004df0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e16:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e18:	695a      	ldr	r2, [r3, #20]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	4904      	ldr	r1, [pc, #16]	@ (8004e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40021000 	.word	0x40021000

08004e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e049      	b.n	8004eda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fc fc1e 	bl	800169c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	4619      	mov	r1, r3
 8004e72:	4610      	mov	r0, r2
 8004e74:	f001 f870 	bl	8005f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e049      	b.n	8004f88 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7fc fd23 	bl	8001954 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2202      	movs	r2, #2
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4610      	mov	r0, r2
 8004f22:	f001 f819 	bl	8005f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d109      	bne.n	8004fb4 <HAL_TIM_PWM_Start+0x24>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	bf14      	ite	ne
 8004fac:	2301      	movne	r3, #1
 8004fae:	2300      	moveq	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	e03c      	b.n	800502e <HAL_TIM_PWM_Start+0x9e>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d109      	bne.n	8004fce <HAL_TIM_PWM_Start+0x3e>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	bf14      	ite	ne
 8004fc6:	2301      	movne	r3, #1
 8004fc8:	2300      	moveq	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	e02f      	b.n	800502e <HAL_TIM_PWM_Start+0x9e>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d109      	bne.n	8004fe8 <HAL_TIM_PWM_Start+0x58>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	bf14      	ite	ne
 8004fe0:	2301      	movne	r3, #1
 8004fe2:	2300      	moveq	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	e022      	b.n	800502e <HAL_TIM_PWM_Start+0x9e>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2b0c      	cmp	r3, #12
 8004fec:	d109      	bne.n	8005002 <HAL_TIM_PWM_Start+0x72>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	bf14      	ite	ne
 8004ffa:	2301      	movne	r3, #1
 8004ffc:	2300      	moveq	r3, #0
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	e015      	b.n	800502e <HAL_TIM_PWM_Start+0x9e>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b10      	cmp	r3, #16
 8005006:	d109      	bne.n	800501c <HAL_TIM_PWM_Start+0x8c>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b01      	cmp	r3, #1
 8005012:	bf14      	ite	ne
 8005014:	2301      	movne	r3, #1
 8005016:	2300      	moveq	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	e008      	b.n	800502e <HAL_TIM_PWM_Start+0x9e>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b01      	cmp	r3, #1
 8005026:	bf14      	ite	ne
 8005028:	2301      	movne	r3, #1
 800502a:	2300      	moveq	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e09c      	b.n	8005170 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d104      	bne.n	8005046 <HAL_TIM_PWM_Start+0xb6>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005044:	e023      	b.n	800508e <HAL_TIM_PWM_Start+0xfe>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b04      	cmp	r3, #4
 800504a:	d104      	bne.n	8005056 <HAL_TIM_PWM_Start+0xc6>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005054:	e01b      	b.n	800508e <HAL_TIM_PWM_Start+0xfe>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b08      	cmp	r3, #8
 800505a:	d104      	bne.n	8005066 <HAL_TIM_PWM_Start+0xd6>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005064:	e013      	b.n	800508e <HAL_TIM_PWM_Start+0xfe>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b0c      	cmp	r3, #12
 800506a:	d104      	bne.n	8005076 <HAL_TIM_PWM_Start+0xe6>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005074:	e00b      	b.n	800508e <HAL_TIM_PWM_Start+0xfe>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b10      	cmp	r3, #16
 800507a:	d104      	bne.n	8005086 <HAL_TIM_PWM_Start+0xf6>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005084:	e003      	b.n	800508e <HAL_TIM_PWM_Start+0xfe>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2202      	movs	r2, #2
 800508a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2201      	movs	r2, #1
 8005094:	6839      	ldr	r1, [r7, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f001 fc8c 	bl	80069b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a35      	ldr	r2, [pc, #212]	@ (8005178 <HAL_TIM_PWM_Start+0x1e8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d013      	beq.n	80050ce <HAL_TIM_PWM_Start+0x13e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a34      	ldr	r2, [pc, #208]	@ (800517c <HAL_TIM_PWM_Start+0x1ec>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00e      	beq.n	80050ce <HAL_TIM_PWM_Start+0x13e>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a32      	ldr	r2, [pc, #200]	@ (8005180 <HAL_TIM_PWM_Start+0x1f0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d009      	beq.n	80050ce <HAL_TIM_PWM_Start+0x13e>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a31      	ldr	r2, [pc, #196]	@ (8005184 <HAL_TIM_PWM_Start+0x1f4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d004      	beq.n	80050ce <HAL_TIM_PWM_Start+0x13e>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a2f      	ldr	r2, [pc, #188]	@ (8005188 <HAL_TIM_PWM_Start+0x1f8>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d101      	bne.n	80050d2 <HAL_TIM_PWM_Start+0x142>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <HAL_TIM_PWM_Start+0x144>
 80050d2:	2300      	movs	r3, #0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d007      	beq.n	80050e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a22      	ldr	r2, [pc, #136]	@ (8005178 <HAL_TIM_PWM_Start+0x1e8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d01d      	beq.n	800512e <HAL_TIM_PWM_Start+0x19e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050fa:	d018      	beq.n	800512e <HAL_TIM_PWM_Start+0x19e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a22      	ldr	r2, [pc, #136]	@ (800518c <HAL_TIM_PWM_Start+0x1fc>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <HAL_TIM_PWM_Start+0x19e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a21      	ldr	r2, [pc, #132]	@ (8005190 <HAL_TIM_PWM_Start+0x200>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00e      	beq.n	800512e <HAL_TIM_PWM_Start+0x19e>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1f      	ldr	r2, [pc, #124]	@ (8005194 <HAL_TIM_PWM_Start+0x204>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d009      	beq.n	800512e <HAL_TIM_PWM_Start+0x19e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a17      	ldr	r2, [pc, #92]	@ (800517c <HAL_TIM_PWM_Start+0x1ec>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d004      	beq.n	800512e <HAL_TIM_PWM_Start+0x19e>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a15      	ldr	r2, [pc, #84]	@ (8005180 <HAL_TIM_PWM_Start+0x1f0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d115      	bne.n	800515a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	4b18      	ldr	r3, [pc, #96]	@ (8005198 <HAL_TIM_PWM_Start+0x208>)
 8005136:	4013      	ands	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b06      	cmp	r3, #6
 800513e:	d015      	beq.n	800516c <HAL_TIM_PWM_Start+0x1dc>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005146:	d011      	beq.n	800516c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005158:	e008      	b.n	800516c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0201 	orr.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	e000      	b.n	800516e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40012c00 	.word	0x40012c00
 800517c:	40013400 	.word	0x40013400
 8005180:	40014000 	.word	0x40014000
 8005184:	40014400 	.word	0x40014400
 8005188:	40014800 	.word	0x40014800
 800518c:	40000400 	.word	0x40000400
 8005190:	40000800 	.word	0x40000800
 8005194:	40000c00 	.word	0x40000c00
 8005198:	00010007 	.word	0x00010007

0800519c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e049      	b.n	8005242 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fc fb48 	bl	8001858 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3304      	adds	r3, #4
 80051d8:	4619      	mov	r1, r3
 80051da:	4610      	mov	r0, r2
 80051dc:	f000 febc 	bl	8005f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d104      	bne.n	800526a <HAL_TIM_IC_Start_IT+0x1e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005266:	b2db      	uxtb	r3, r3
 8005268:	e023      	b.n	80052b2 <HAL_TIM_IC_Start_IT+0x66>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b04      	cmp	r3, #4
 800526e:	d104      	bne.n	800527a <HAL_TIM_IC_Start_IT+0x2e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005276:	b2db      	uxtb	r3, r3
 8005278:	e01b      	b.n	80052b2 <HAL_TIM_IC_Start_IT+0x66>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b08      	cmp	r3, #8
 800527e:	d104      	bne.n	800528a <HAL_TIM_IC_Start_IT+0x3e>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005286:	b2db      	uxtb	r3, r3
 8005288:	e013      	b.n	80052b2 <HAL_TIM_IC_Start_IT+0x66>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b0c      	cmp	r3, #12
 800528e:	d104      	bne.n	800529a <HAL_TIM_IC_Start_IT+0x4e>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005296:	b2db      	uxtb	r3, r3
 8005298:	e00b      	b.n	80052b2 <HAL_TIM_IC_Start_IT+0x66>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b10      	cmp	r3, #16
 800529e:	d104      	bne.n	80052aa <HAL_TIM_IC_Start_IT+0x5e>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	e003      	b.n	80052b2 <HAL_TIM_IC_Start_IT+0x66>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d104      	bne.n	80052c4 <HAL_TIM_IC_Start_IT+0x78>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	e013      	b.n	80052ec <HAL_TIM_IC_Start_IT+0xa0>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d104      	bne.n	80052d4 <HAL_TIM_IC_Start_IT+0x88>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	e00b      	b.n	80052ec <HAL_TIM_IC_Start_IT+0xa0>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	d104      	bne.n	80052e4 <HAL_TIM_IC_Start_IT+0x98>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	e003      	b.n	80052ec <HAL_TIM_IC_Start_IT+0xa0>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80052ee:	7bbb      	ldrb	r3, [r7, #14]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d102      	bne.n	80052fa <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80052f4:	7b7b      	ldrb	r3, [r7, #13]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d001      	beq.n	80052fe <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e0dd      	b.n	80054ba <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d104      	bne.n	800530e <HAL_TIM_IC_Start_IT+0xc2>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800530c:	e023      	b.n	8005356 <HAL_TIM_IC_Start_IT+0x10a>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b04      	cmp	r3, #4
 8005312:	d104      	bne.n	800531e <HAL_TIM_IC_Start_IT+0xd2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800531c:	e01b      	b.n	8005356 <HAL_TIM_IC_Start_IT+0x10a>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d104      	bne.n	800532e <HAL_TIM_IC_Start_IT+0xe2>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800532c:	e013      	b.n	8005356 <HAL_TIM_IC_Start_IT+0x10a>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b0c      	cmp	r3, #12
 8005332:	d104      	bne.n	800533e <HAL_TIM_IC_Start_IT+0xf2>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800533c:	e00b      	b.n	8005356 <HAL_TIM_IC_Start_IT+0x10a>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b10      	cmp	r3, #16
 8005342:	d104      	bne.n	800534e <HAL_TIM_IC_Start_IT+0x102>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800534c:	e003      	b.n	8005356 <HAL_TIM_IC_Start_IT+0x10a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d104      	bne.n	8005366 <HAL_TIM_IC_Start_IT+0x11a>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005364:	e013      	b.n	800538e <HAL_TIM_IC_Start_IT+0x142>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b04      	cmp	r3, #4
 800536a:	d104      	bne.n	8005376 <HAL_TIM_IC_Start_IT+0x12a>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005374:	e00b      	b.n	800538e <HAL_TIM_IC_Start_IT+0x142>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b08      	cmp	r3, #8
 800537a:	d104      	bne.n	8005386 <HAL_TIM_IC_Start_IT+0x13a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005384:	e003      	b.n	800538e <HAL_TIM_IC_Start_IT+0x142>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b0c      	cmp	r3, #12
 8005392:	d841      	bhi.n	8005418 <HAL_TIM_IC_Start_IT+0x1cc>
 8005394:	a201      	add	r2, pc, #4	@ (adr r2, 800539c <HAL_TIM_IC_Start_IT+0x150>)
 8005396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539a:	bf00      	nop
 800539c:	080053d1 	.word	0x080053d1
 80053a0:	08005419 	.word	0x08005419
 80053a4:	08005419 	.word	0x08005419
 80053a8:	08005419 	.word	0x08005419
 80053ac:	080053e3 	.word	0x080053e3
 80053b0:	08005419 	.word	0x08005419
 80053b4:	08005419 	.word	0x08005419
 80053b8:	08005419 	.word	0x08005419
 80053bc:	080053f5 	.word	0x080053f5
 80053c0:	08005419 	.word	0x08005419
 80053c4:	08005419 	.word	0x08005419
 80053c8:	08005419 	.word	0x08005419
 80053cc:	08005407 	.word	0x08005407
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0202 	orr.w	r2, r2, #2
 80053de:	60da      	str	r2, [r3, #12]
      break;
 80053e0:	e01d      	b.n	800541e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f042 0204 	orr.w	r2, r2, #4
 80053f0:	60da      	str	r2, [r3, #12]
      break;
 80053f2:	e014      	b.n	800541e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0208 	orr.w	r2, r2, #8
 8005402:	60da      	str	r2, [r3, #12]
      break;
 8005404:	e00b      	b.n	800541e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0210 	orr.w	r2, r2, #16
 8005414:	60da      	str	r2, [r3, #12]
      break;
 8005416:	e002      	b.n	800541e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	73fb      	strb	r3, [r7, #15]
      break;
 800541c:	bf00      	nop
  }

  if (status == HAL_OK)
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d149      	bne.n	80054b8 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2201      	movs	r2, #1
 800542a:	6839      	ldr	r1, [r7, #0]
 800542c:	4618      	mov	r0, r3
 800542e:	f001 fac1 	bl	80069b4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a23      	ldr	r2, [pc, #140]	@ (80054c4 <HAL_TIM_IC_Start_IT+0x278>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d01d      	beq.n	8005478 <HAL_TIM_IC_Start_IT+0x22c>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005444:	d018      	beq.n	8005478 <HAL_TIM_IC_Start_IT+0x22c>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1f      	ldr	r2, [pc, #124]	@ (80054c8 <HAL_TIM_IC_Start_IT+0x27c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d013      	beq.n	8005478 <HAL_TIM_IC_Start_IT+0x22c>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1d      	ldr	r2, [pc, #116]	@ (80054cc <HAL_TIM_IC_Start_IT+0x280>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00e      	beq.n	8005478 <HAL_TIM_IC_Start_IT+0x22c>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1c      	ldr	r2, [pc, #112]	@ (80054d0 <HAL_TIM_IC_Start_IT+0x284>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d009      	beq.n	8005478 <HAL_TIM_IC_Start_IT+0x22c>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1a      	ldr	r2, [pc, #104]	@ (80054d4 <HAL_TIM_IC_Start_IT+0x288>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d004      	beq.n	8005478 <HAL_TIM_IC_Start_IT+0x22c>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a19      	ldr	r2, [pc, #100]	@ (80054d8 <HAL_TIM_IC_Start_IT+0x28c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d115      	bne.n	80054a4 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	4b17      	ldr	r3, [pc, #92]	@ (80054dc <HAL_TIM_IC_Start_IT+0x290>)
 8005480:	4013      	ands	r3, r2
 8005482:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b06      	cmp	r3, #6
 8005488:	d015      	beq.n	80054b6 <HAL_TIM_IC_Start_IT+0x26a>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005490:	d011      	beq.n	80054b6 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0201 	orr.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a2:	e008      	b.n	80054b6 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	e000      	b.n	80054b8 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40000800 	.word	0x40000800
 80054d0:	40000c00 	.word	0x40000c00
 80054d4:	40013400 	.word	0x40013400
 80054d8:	40014000 	.word	0x40014000
 80054dc:	00010007 	.word	0x00010007

080054e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e097      	b.n	8005624 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d106      	bne.n	800550e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7fc f901 	bl	8001710 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2202      	movs	r2, #2
 8005512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6812      	ldr	r2, [r2, #0]
 8005520:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005524:	f023 0307 	bic.w	r3, r3, #7
 8005528:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	3304      	adds	r3, #4
 8005532:	4619      	mov	r1, r3
 8005534:	4610      	mov	r0, r2
 8005536:	f000 fd0f 	bl	8005f58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005562:	f023 0303 	bic.w	r3, r3, #3
 8005566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	021b      	lsls	r3, r3, #8
 8005572:	4313      	orrs	r3, r2
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005580:	f023 030c 	bic.w	r3, r3, #12
 8005584:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800558c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005590:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	021b      	lsls	r3, r3, #8
 800559c:	4313      	orrs	r3, r2
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	011a      	lsls	r2, r3, #4
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	031b      	lsls	r3, r3, #12
 80055b0:	4313      	orrs	r3, r2
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80055be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80055c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	4313      	orrs	r3, r2
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800563c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005644:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800564c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005654:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d110      	bne.n	800567e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800565c:	7bfb      	ldrb	r3, [r7, #15]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d102      	bne.n	8005668 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005662:	7b7b      	ldrb	r3, [r7, #13]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d001      	beq.n	800566c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e089      	b.n	8005780 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800567c:	e031      	b.n	80056e2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b04      	cmp	r3, #4
 8005682:	d110      	bne.n	80056a6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005684:	7bbb      	ldrb	r3, [r7, #14]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d102      	bne.n	8005690 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800568a:	7b3b      	ldrb	r3, [r7, #12]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d001      	beq.n	8005694 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e075      	b.n	8005780 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056a4:	e01d      	b.n	80056e2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d108      	bne.n	80056be <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056ac:	7bbb      	ldrb	r3, [r7, #14]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d105      	bne.n	80056be <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056b2:	7b7b      	ldrb	r3, [r7, #13]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d102      	bne.n	80056be <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056b8:	7b3b      	ldrb	r3, [r7, #12]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d001      	beq.n	80056c2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e05e      	b.n	8005780 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2202      	movs	r2, #2
 80056c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2202      	movs	r2, #2
 80056ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2202      	movs	r2, #2
 80056d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2202      	movs	r2, #2
 80056de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <HAL_TIM_Encoder_Start_IT+0xc4>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d010      	beq.n	8005710 <HAL_TIM_Encoder_Start_IT+0xe4>
 80056ee:	e01f      	b.n	8005730 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2201      	movs	r2, #1
 80056f6:	2100      	movs	r1, #0
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 f95b 	bl	80069b4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0202 	orr.w	r2, r2, #2
 800570c:	60da      	str	r2, [r3, #12]
      break;
 800570e:	e02e      	b.n	800576e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2201      	movs	r2, #1
 8005716:	2104      	movs	r1, #4
 8005718:	4618      	mov	r0, r3
 800571a:	f001 f94b 	bl	80069b4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0204 	orr.w	r2, r2, #4
 800572c:	60da      	str	r2, [r3, #12]
      break;
 800572e:	e01e      	b.n	800576e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2201      	movs	r2, #1
 8005736:	2100      	movs	r1, #0
 8005738:	4618      	mov	r0, r3
 800573a:	f001 f93b 	bl	80069b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2201      	movs	r2, #1
 8005744:	2104      	movs	r1, #4
 8005746:	4618      	mov	r0, r3
 8005748:	f001 f934 	bl	80069b4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0202 	orr.w	r2, r2, #2
 800575a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0204 	orr.w	r2, r2, #4
 800576a:	60da      	str	r2, [r3, #12]
      break;
 800576c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0201 	orr.w	r2, r2, #1
 800577c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d020      	beq.n	80057ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d01b      	beq.n	80057ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0202 	mvn.w	r2, #2
 80057bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fb fda0 	bl	8001318 <HAL_TIM_IC_CaptureCallback>
 80057d8:	e005      	b.n	80057e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fb9e 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fba5 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f003 0304 	and.w	r3, r3, #4
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d020      	beq.n	8005838 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d01b      	beq.n	8005838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0204 	mvn.w	r2, #4
 8005808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2202      	movs	r2, #2
 800580e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fb fd7a 	bl	8001318 <HAL_TIM_IC_CaptureCallback>
 8005824:	e005      	b.n	8005832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fb78 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fb7f 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b00      	cmp	r3, #0
 8005840:	d020      	beq.n	8005884 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f003 0308 	and.w	r3, r3, #8
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01b      	beq.n	8005884 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f06f 0208 	mvn.w	r2, #8
 8005854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2204      	movs	r2, #4
 800585a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fb fd54 	bl	8001318 <HAL_TIM_IC_CaptureCallback>
 8005870:	e005      	b.n	800587e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fb52 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 fb59 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	f003 0310 	and.w	r3, r3, #16
 800588a:	2b00      	cmp	r3, #0
 800588c:	d020      	beq.n	80058d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f003 0310 	and.w	r3, r3, #16
 8005894:	2b00      	cmp	r3, #0
 8005896:	d01b      	beq.n	80058d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f06f 0210 	mvn.w	r2, #16
 80058a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2208      	movs	r2, #8
 80058a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fb fd2e 	bl	8001318 <HAL_TIM_IC_CaptureCallback>
 80058bc:	e005      	b.n	80058ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fb2c 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fb33 	bl	8005f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00c      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d007      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0201 	mvn.w	r2, #1
 80058ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fb0a 	bl	8005f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00c      	beq.n	8005918 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005904:	2b00      	cmp	r3, #0
 8005906:	d007      	beq.n	8005918 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f001 f984 	bl	8006c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00c      	beq.n	800593c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005928:	2b00      	cmp	r3, #0
 800592a:	d007      	beq.n	800593c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f001 f97c 	bl	8006c34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00c      	beq.n	8005960 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	d007      	beq.n	8005960 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 faf2 	bl	8005f44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00c      	beq.n	8005984 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f003 0320 	and.w	r3, r3, #32
 8005970:	2b00      	cmp	r3, #0
 8005972:	d007      	beq.n	8005984 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0220 	mvn.w	r2, #32
 800597c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f001 f944 	bl	8006c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005984:	bf00      	nop
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005998:	2300      	movs	r3, #0
 800599a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_TIM_IC_ConfigChannel+0x1e>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e088      	b.n	8005abc <HAL_TIM_IC_ConfigChannel+0x130>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d11b      	bne.n	80059f0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80059c8:	f000 fe36 	bl	8006638 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 020c 	bic.w	r2, r2, #12
 80059da:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6999      	ldr	r1, [r3, #24]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	619a      	str	r2, [r3, #24]
 80059ee:	e060      	b.n	8005ab2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d11c      	bne.n	8005a30 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005a06:	f000 feb4 	bl	8006772 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	699a      	ldr	r2, [r3, #24]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005a18:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6999      	ldr	r1, [r3, #24]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	021a      	lsls	r2, r3, #8
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	619a      	str	r2, [r3, #24]
 8005a2e:	e040      	b.n	8005ab2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d11b      	bne.n	8005a6e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005a46:	f000 ff01 	bl	800684c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69da      	ldr	r2, [r3, #28]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 020c 	bic.w	r2, r2, #12
 8005a58:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69d9      	ldr	r1, [r3, #28]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	61da      	str	r2, [r3, #28]
 8005a6c:	e021      	b.n	8005ab2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b0c      	cmp	r3, #12
 8005a72:	d11c      	bne.n	8005aae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005a84:	f000 ff1e 	bl	80068c4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	69da      	ldr	r2, [r3, #28]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005a96:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69d9      	ldr	r1, [r3, #28]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	021a      	lsls	r2, r3, #8
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	61da      	str	r2, [r3, #28]
 8005aac:	e001      	b.n	8005ab2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e0ff      	b.n	8005ce2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b14      	cmp	r3, #20
 8005aee:	f200 80f0 	bhi.w	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005af2:	a201      	add	r2, pc, #4	@ (adr r2, 8005af8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af8:	08005b4d 	.word	0x08005b4d
 8005afc:	08005cd3 	.word	0x08005cd3
 8005b00:	08005cd3 	.word	0x08005cd3
 8005b04:	08005cd3 	.word	0x08005cd3
 8005b08:	08005b8d 	.word	0x08005b8d
 8005b0c:	08005cd3 	.word	0x08005cd3
 8005b10:	08005cd3 	.word	0x08005cd3
 8005b14:	08005cd3 	.word	0x08005cd3
 8005b18:	08005bcf 	.word	0x08005bcf
 8005b1c:	08005cd3 	.word	0x08005cd3
 8005b20:	08005cd3 	.word	0x08005cd3
 8005b24:	08005cd3 	.word	0x08005cd3
 8005b28:	08005c0f 	.word	0x08005c0f
 8005b2c:	08005cd3 	.word	0x08005cd3
 8005b30:	08005cd3 	.word	0x08005cd3
 8005b34:	08005cd3 	.word	0x08005cd3
 8005b38:	08005c51 	.word	0x08005c51
 8005b3c:	08005cd3 	.word	0x08005cd3
 8005b40:	08005cd3 	.word	0x08005cd3
 8005b44:	08005cd3 	.word	0x08005cd3
 8005b48:	08005c91 	.word	0x08005c91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68b9      	ldr	r1, [r7, #8]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 fa9a 	bl	800608c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699a      	ldr	r2, [r3, #24]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0208 	orr.w	r2, r2, #8
 8005b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699a      	ldr	r2, [r3, #24]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0204 	bic.w	r2, r2, #4
 8005b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6999      	ldr	r1, [r3, #24]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	691a      	ldr	r2, [r3, #16]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	619a      	str	r2, [r3, #24]
      break;
 8005b8a:	e0a5      	b.n	8005cd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fb0a 	bl	80061ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6999      	ldr	r1, [r3, #24]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	021a      	lsls	r2, r3, #8
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	619a      	str	r2, [r3, #24]
      break;
 8005bcc:	e084      	b.n	8005cd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 fb73 	bl	80062c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69da      	ldr	r2, [r3, #28]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f042 0208 	orr.w	r2, r2, #8
 8005be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69da      	ldr	r2, [r3, #28]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0204 	bic.w	r2, r2, #4
 8005bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69d9      	ldr	r1, [r3, #28]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	61da      	str	r2, [r3, #28]
      break;
 8005c0c:	e064      	b.n	8005cd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 fbdb 	bl	80063d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69da      	ldr	r2, [r3, #28]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69d9      	ldr	r1, [r3, #28]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	021a      	lsls	r2, r3, #8
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	61da      	str	r2, [r3, #28]
      break;
 8005c4e:	e043      	b.n	8005cd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fc24 	bl	80064a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0208 	orr.w	r2, r2, #8
 8005c6a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0204 	bic.w	r2, r2, #4
 8005c7a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	691a      	ldr	r2, [r3, #16]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c8e:	e023      	b.n	8005cd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 fc68 	bl	800656c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005caa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	021a      	lsls	r2, r3, #8
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005cd0:	e002      	b.n	8005cd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8005cd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop

08005cec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_TIM_ConfigClockSource+0x1c>
 8005d04:	2302      	movs	r3, #2
 8005d06:	e0b6      	b.n	8005e76 <HAL_TIM_ConfigClockSource+0x18a>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d44:	d03e      	beq.n	8005dc4 <HAL_TIM_ConfigClockSource+0xd8>
 8005d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d4a:	f200 8087 	bhi.w	8005e5c <HAL_TIM_ConfigClockSource+0x170>
 8005d4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d52:	f000 8086 	beq.w	8005e62 <HAL_TIM_ConfigClockSource+0x176>
 8005d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d5a:	d87f      	bhi.n	8005e5c <HAL_TIM_ConfigClockSource+0x170>
 8005d5c:	2b70      	cmp	r3, #112	@ 0x70
 8005d5e:	d01a      	beq.n	8005d96 <HAL_TIM_ConfigClockSource+0xaa>
 8005d60:	2b70      	cmp	r3, #112	@ 0x70
 8005d62:	d87b      	bhi.n	8005e5c <HAL_TIM_ConfigClockSource+0x170>
 8005d64:	2b60      	cmp	r3, #96	@ 0x60
 8005d66:	d050      	beq.n	8005e0a <HAL_TIM_ConfigClockSource+0x11e>
 8005d68:	2b60      	cmp	r3, #96	@ 0x60
 8005d6a:	d877      	bhi.n	8005e5c <HAL_TIM_ConfigClockSource+0x170>
 8005d6c:	2b50      	cmp	r3, #80	@ 0x50
 8005d6e:	d03c      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0xfe>
 8005d70:	2b50      	cmp	r3, #80	@ 0x50
 8005d72:	d873      	bhi.n	8005e5c <HAL_TIM_ConfigClockSource+0x170>
 8005d74:	2b40      	cmp	r3, #64	@ 0x40
 8005d76:	d058      	beq.n	8005e2a <HAL_TIM_ConfigClockSource+0x13e>
 8005d78:	2b40      	cmp	r3, #64	@ 0x40
 8005d7a:	d86f      	bhi.n	8005e5c <HAL_TIM_ConfigClockSource+0x170>
 8005d7c:	2b30      	cmp	r3, #48	@ 0x30
 8005d7e:	d064      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0x15e>
 8005d80:	2b30      	cmp	r3, #48	@ 0x30
 8005d82:	d86b      	bhi.n	8005e5c <HAL_TIM_ConfigClockSource+0x170>
 8005d84:	2b20      	cmp	r3, #32
 8005d86:	d060      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0x15e>
 8005d88:	2b20      	cmp	r3, #32
 8005d8a:	d867      	bhi.n	8005e5c <HAL_TIM_ConfigClockSource+0x170>
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d05c      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0x15e>
 8005d90:	2b10      	cmp	r3, #16
 8005d92:	d05a      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0x15e>
 8005d94:	e062      	b.n	8005e5c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005da6:	f000 fde5 	bl	8006974 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005db8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	609a      	str	r2, [r3, #8]
      break;
 8005dc2:	e04f      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dd4:	f000 fdce 	bl	8006974 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005de6:	609a      	str	r2, [r3, #8]
      break;
 8005de8:	e03c      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df6:	461a      	mov	r2, r3
 8005df8:	f000 fc8c 	bl	8006714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2150      	movs	r1, #80	@ 0x50
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fd9b 	bl	800693e <TIM_ITRx_SetConfig>
      break;
 8005e08:	e02c      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e16:	461a      	mov	r2, r3
 8005e18:	f000 fce8 	bl	80067ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2160      	movs	r1, #96	@ 0x60
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fd8b 	bl	800693e <TIM_ITRx_SetConfig>
      break;
 8005e28:	e01c      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e36:	461a      	mov	r2, r3
 8005e38:	f000 fc6c 	bl	8006714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2140      	movs	r1, #64	@ 0x40
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fd7b 	bl	800693e <TIM_ITRx_SetConfig>
      break;
 8005e48:	e00c      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4619      	mov	r1, r3
 8005e54:	4610      	mov	r0, r2
 8005e56:	f000 fd72 	bl	800693e <TIM_ITRx_SetConfig>
      break;
 8005e5a:	e003      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e60:	e000      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005e62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b0c      	cmp	r3, #12
 8005e92:	d831      	bhi.n	8005ef8 <HAL_TIM_ReadCapturedValue+0x78>
 8005e94:	a201      	add	r2, pc, #4	@ (adr r2, 8005e9c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9a:	bf00      	nop
 8005e9c:	08005ed1 	.word	0x08005ed1
 8005ea0:	08005ef9 	.word	0x08005ef9
 8005ea4:	08005ef9 	.word	0x08005ef9
 8005ea8:	08005ef9 	.word	0x08005ef9
 8005eac:	08005edb 	.word	0x08005edb
 8005eb0:	08005ef9 	.word	0x08005ef9
 8005eb4:	08005ef9 	.word	0x08005ef9
 8005eb8:	08005ef9 	.word	0x08005ef9
 8005ebc:	08005ee5 	.word	0x08005ee5
 8005ec0:	08005ef9 	.word	0x08005ef9
 8005ec4:	08005ef9 	.word	0x08005ef9
 8005ec8:	08005ef9 	.word	0x08005ef9
 8005ecc:	08005eef 	.word	0x08005eef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed6:	60fb      	str	r3, [r7, #12]

      break;
 8005ed8:	e00f      	b.n	8005efa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee0:	60fb      	str	r3, [r7, #12]

      break;
 8005ee2:	e00a      	b.n	8005efa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eea:	60fb      	str	r3, [r7, #12]

      break;
 8005eec:	e005      	b.n	8005efa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef4:	60fb      	str	r3, [r7, #12]

      break;
 8005ef6:	e000      	b.n	8005efa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005ef8:	bf00      	nop
  }

  return tmpreg;
 8005efa:	68fb      	ldr	r3, [r7, #12]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a40      	ldr	r2, [pc, #256]	@ (800606c <TIM_Base_SetConfig+0x114>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d013      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f76:	d00f      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a3d      	ldr	r2, [pc, #244]	@ (8006070 <TIM_Base_SetConfig+0x118>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00b      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a3c      	ldr	r2, [pc, #240]	@ (8006074 <TIM_Base_SetConfig+0x11c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d007      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a3b      	ldr	r2, [pc, #236]	@ (8006078 <TIM_Base_SetConfig+0x120>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d003      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a3a      	ldr	r2, [pc, #232]	@ (800607c <TIM_Base_SetConfig+0x124>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d108      	bne.n	8005faa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a2f      	ldr	r2, [pc, #188]	@ (800606c <TIM_Base_SetConfig+0x114>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d01f      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb8:	d01b      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a2c      	ldr	r2, [pc, #176]	@ (8006070 <TIM_Base_SetConfig+0x118>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d017      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a2b      	ldr	r2, [pc, #172]	@ (8006074 <TIM_Base_SetConfig+0x11c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d013      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8006078 <TIM_Base_SetConfig+0x120>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00f      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a29      	ldr	r2, [pc, #164]	@ (800607c <TIM_Base_SetConfig+0x124>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00b      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a28      	ldr	r2, [pc, #160]	@ (8006080 <TIM_Base_SetConfig+0x128>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d007      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a27      	ldr	r2, [pc, #156]	@ (8006084 <TIM_Base_SetConfig+0x12c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d003      	beq.n	8005ff2 <TIM_Base_SetConfig+0x9a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a26      	ldr	r2, [pc, #152]	@ (8006088 <TIM_Base_SetConfig+0x130>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d108      	bne.n	8006004 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a10      	ldr	r2, [pc, #64]	@ (800606c <TIM_Base_SetConfig+0x114>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d00f      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a12      	ldr	r2, [pc, #72]	@ (800607c <TIM_Base_SetConfig+0x124>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00b      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a11      	ldr	r2, [pc, #68]	@ (8006080 <TIM_Base_SetConfig+0x128>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d007      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a10      	ldr	r2, [pc, #64]	@ (8006084 <TIM_Base_SetConfig+0x12c>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d003      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a0f      	ldr	r2, [pc, #60]	@ (8006088 <TIM_Base_SetConfig+0x130>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d103      	bne.n	8006058 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	615a      	str	r2, [r3, #20]
}
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40012c00 	.word	0x40012c00
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	40000c00 	.word	0x40000c00
 800607c:	40013400 	.word	0x40013400
 8006080:	40014000 	.word	0x40014000
 8006084:	40014400 	.word	0x40014400
 8006088:	40014800 	.word	0x40014800

0800608c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	f023 0201 	bic.w	r2, r3, #1
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0303 	bic.w	r3, r3, #3
 80060c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f023 0302 	bic.w	r3, r3, #2
 80060d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006198 <TIM_OC1_SetConfig+0x10c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00f      	beq.n	800610c <TIM_OC1_SetConfig+0x80>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a2b      	ldr	r2, [pc, #172]	@ (800619c <TIM_OC1_SetConfig+0x110>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00b      	beq.n	800610c <TIM_OC1_SetConfig+0x80>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a2a      	ldr	r2, [pc, #168]	@ (80061a0 <TIM_OC1_SetConfig+0x114>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d007      	beq.n	800610c <TIM_OC1_SetConfig+0x80>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a29      	ldr	r2, [pc, #164]	@ (80061a4 <TIM_OC1_SetConfig+0x118>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d003      	beq.n	800610c <TIM_OC1_SetConfig+0x80>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a28      	ldr	r2, [pc, #160]	@ (80061a8 <TIM_OC1_SetConfig+0x11c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d10c      	bne.n	8006126 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f023 0308 	bic.w	r3, r3, #8
 8006112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	4313      	orrs	r3, r2
 800611c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f023 0304 	bic.w	r3, r3, #4
 8006124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a1b      	ldr	r2, [pc, #108]	@ (8006198 <TIM_OC1_SetConfig+0x10c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d00f      	beq.n	800614e <TIM_OC1_SetConfig+0xc2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a1a      	ldr	r2, [pc, #104]	@ (800619c <TIM_OC1_SetConfig+0x110>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d00b      	beq.n	800614e <TIM_OC1_SetConfig+0xc2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a19      	ldr	r2, [pc, #100]	@ (80061a0 <TIM_OC1_SetConfig+0x114>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d007      	beq.n	800614e <TIM_OC1_SetConfig+0xc2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a18      	ldr	r2, [pc, #96]	@ (80061a4 <TIM_OC1_SetConfig+0x118>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d003      	beq.n	800614e <TIM_OC1_SetConfig+0xc2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a17      	ldr	r2, [pc, #92]	@ (80061a8 <TIM_OC1_SetConfig+0x11c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d111      	bne.n	8006172 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800615c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	621a      	str	r2, [r3, #32]
}
 800618c:	bf00      	nop
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	40012c00 	.word	0x40012c00
 800619c:	40013400 	.word	0x40013400
 80061a0:	40014000 	.word	0x40014000
 80061a4:	40014400 	.word	0x40014400
 80061a8:	40014800 	.word	0x40014800

080061ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	f023 0210 	bic.w	r2, r3, #16
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	021b      	lsls	r3, r3, #8
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f023 0320 	bic.w	r3, r3, #32
 80061fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a28      	ldr	r2, [pc, #160]	@ (80062ac <TIM_OC2_SetConfig+0x100>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d003      	beq.n	8006218 <TIM_OC2_SetConfig+0x6c>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a27      	ldr	r2, [pc, #156]	@ (80062b0 <TIM_OC2_SetConfig+0x104>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d10d      	bne.n	8006234 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800621e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	4313      	orrs	r3, r2
 800622a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006232:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a1d      	ldr	r2, [pc, #116]	@ (80062ac <TIM_OC2_SetConfig+0x100>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00f      	beq.n	800625c <TIM_OC2_SetConfig+0xb0>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a1c      	ldr	r2, [pc, #112]	@ (80062b0 <TIM_OC2_SetConfig+0x104>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00b      	beq.n	800625c <TIM_OC2_SetConfig+0xb0>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a1b      	ldr	r2, [pc, #108]	@ (80062b4 <TIM_OC2_SetConfig+0x108>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d007      	beq.n	800625c <TIM_OC2_SetConfig+0xb0>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a1a      	ldr	r2, [pc, #104]	@ (80062b8 <TIM_OC2_SetConfig+0x10c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_OC2_SetConfig+0xb0>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a19      	ldr	r2, [pc, #100]	@ (80062bc <TIM_OC2_SetConfig+0x110>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d113      	bne.n	8006284 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006262:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800626a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	621a      	str	r2, [r3, #32]
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	40012c00 	.word	0x40012c00
 80062b0:	40013400 	.word	0x40013400
 80062b4:	40014000 	.word	0x40014000
 80062b8:	40014400 	.word	0x40014400
 80062bc:	40014800 	.word	0x40014800

080062c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 0303 	bic.w	r3, r3, #3
 80062fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800630c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	021b      	lsls	r3, r3, #8
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a27      	ldr	r2, [pc, #156]	@ (80063bc <TIM_OC3_SetConfig+0xfc>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d003      	beq.n	800632a <TIM_OC3_SetConfig+0x6a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a26      	ldr	r2, [pc, #152]	@ (80063c0 <TIM_OC3_SetConfig+0x100>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d10d      	bne.n	8006346 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006330:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	021b      	lsls	r3, r3, #8
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	4313      	orrs	r3, r2
 800633c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a1c      	ldr	r2, [pc, #112]	@ (80063bc <TIM_OC3_SetConfig+0xfc>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00f      	beq.n	800636e <TIM_OC3_SetConfig+0xae>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a1b      	ldr	r2, [pc, #108]	@ (80063c0 <TIM_OC3_SetConfig+0x100>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00b      	beq.n	800636e <TIM_OC3_SetConfig+0xae>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a1a      	ldr	r2, [pc, #104]	@ (80063c4 <TIM_OC3_SetConfig+0x104>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d007      	beq.n	800636e <TIM_OC3_SetConfig+0xae>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a19      	ldr	r2, [pc, #100]	@ (80063c8 <TIM_OC3_SetConfig+0x108>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d003      	beq.n	800636e <TIM_OC3_SetConfig+0xae>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a18      	ldr	r2, [pc, #96]	@ (80063cc <TIM_OC3_SetConfig+0x10c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d113      	bne.n	8006396 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800637c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	011b      	lsls	r3, r3, #4
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	4313      	orrs	r3, r2
 8006388:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	4313      	orrs	r3, r2
 8006394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	621a      	str	r2, [r3, #32]
}
 80063b0:	bf00      	nop
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	40012c00 	.word	0x40012c00
 80063c0:	40013400 	.word	0x40013400
 80063c4:	40014000 	.word	0x40014000
 80063c8:	40014400 	.word	0x40014400
 80063cc:	40014800 	.word	0x40014800

080063d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800640a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	021b      	lsls	r3, r3, #8
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	4313      	orrs	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800641e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	031b      	lsls	r3, r3, #12
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4313      	orrs	r3, r2
 800642a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a18      	ldr	r2, [pc, #96]	@ (8006490 <TIM_OC4_SetConfig+0xc0>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d00f      	beq.n	8006454 <TIM_OC4_SetConfig+0x84>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a17      	ldr	r2, [pc, #92]	@ (8006494 <TIM_OC4_SetConfig+0xc4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00b      	beq.n	8006454 <TIM_OC4_SetConfig+0x84>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a16      	ldr	r2, [pc, #88]	@ (8006498 <TIM_OC4_SetConfig+0xc8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d007      	beq.n	8006454 <TIM_OC4_SetConfig+0x84>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a15      	ldr	r2, [pc, #84]	@ (800649c <TIM_OC4_SetConfig+0xcc>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d003      	beq.n	8006454 <TIM_OC4_SetConfig+0x84>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a14      	ldr	r2, [pc, #80]	@ (80064a0 <TIM_OC4_SetConfig+0xd0>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d109      	bne.n	8006468 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800645a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	019b      	lsls	r3, r3, #6
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4313      	orrs	r3, r2
 8006466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	621a      	str	r2, [r3, #32]
}
 8006482:	bf00      	nop
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	40012c00 	.word	0x40012c00
 8006494:	40013400 	.word	0x40013400
 8006498:	40014000 	.word	0x40014000
 800649c:	40014400 	.word	0x40014400
 80064a0:	40014800 	.word	0x40014800

080064a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80064e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	041b      	lsls	r3, r3, #16
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a17      	ldr	r2, [pc, #92]	@ (8006558 <TIM_OC5_SetConfig+0xb4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00f      	beq.n	800651e <TIM_OC5_SetConfig+0x7a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a16      	ldr	r2, [pc, #88]	@ (800655c <TIM_OC5_SetConfig+0xb8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d00b      	beq.n	800651e <TIM_OC5_SetConfig+0x7a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a15      	ldr	r2, [pc, #84]	@ (8006560 <TIM_OC5_SetConfig+0xbc>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d007      	beq.n	800651e <TIM_OC5_SetConfig+0x7a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a14      	ldr	r2, [pc, #80]	@ (8006564 <TIM_OC5_SetConfig+0xc0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d003      	beq.n	800651e <TIM_OC5_SetConfig+0x7a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a13      	ldr	r2, [pc, #76]	@ (8006568 <TIM_OC5_SetConfig+0xc4>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d109      	bne.n	8006532 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006524:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	021b      	lsls	r3, r3, #8
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	621a      	str	r2, [r3, #32]
}
 800654c:	bf00      	nop
 800654e:	371c      	adds	r7, #28
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	40012c00 	.word	0x40012c00
 800655c:	40013400 	.word	0x40013400
 8006560:	40014000 	.word	0x40014000
 8006564:	40014400 	.word	0x40014400
 8006568:	40014800 	.word	0x40014800

0800656c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800659a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800659e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	021b      	lsls	r3, r3, #8
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	051b      	lsls	r3, r3, #20
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	4313      	orrs	r3, r2
 80065be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a18      	ldr	r2, [pc, #96]	@ (8006624 <TIM_OC6_SetConfig+0xb8>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d00f      	beq.n	80065e8 <TIM_OC6_SetConfig+0x7c>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a17      	ldr	r2, [pc, #92]	@ (8006628 <TIM_OC6_SetConfig+0xbc>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00b      	beq.n	80065e8 <TIM_OC6_SetConfig+0x7c>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a16      	ldr	r2, [pc, #88]	@ (800662c <TIM_OC6_SetConfig+0xc0>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d007      	beq.n	80065e8 <TIM_OC6_SetConfig+0x7c>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a15      	ldr	r2, [pc, #84]	@ (8006630 <TIM_OC6_SetConfig+0xc4>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d003      	beq.n	80065e8 <TIM_OC6_SetConfig+0x7c>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a14      	ldr	r2, [pc, #80]	@ (8006634 <TIM_OC6_SetConfig+0xc8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d109      	bne.n	80065fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	029b      	lsls	r3, r3, #10
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	621a      	str	r2, [r3, #32]
}
 8006616:	bf00      	nop
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	40012c00 	.word	0x40012c00
 8006628:	40013400 	.word	0x40013400
 800662c:	40014000 	.word	0x40014000
 8006630:	40014400 	.word	0x40014400
 8006634:	40014800 	.word	0x40014800

08006638 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	f023 0201 	bic.w	r2, r3, #1
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4a26      	ldr	r2, [pc, #152]	@ (80066fc <TIM_TI1_SetConfig+0xc4>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d017      	beq.n	8006696 <TIM_TI1_SetConfig+0x5e>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800666c:	d013      	beq.n	8006696 <TIM_TI1_SetConfig+0x5e>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4a23      	ldr	r2, [pc, #140]	@ (8006700 <TIM_TI1_SetConfig+0xc8>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00f      	beq.n	8006696 <TIM_TI1_SetConfig+0x5e>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4a22      	ldr	r2, [pc, #136]	@ (8006704 <TIM_TI1_SetConfig+0xcc>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00b      	beq.n	8006696 <TIM_TI1_SetConfig+0x5e>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4a21      	ldr	r2, [pc, #132]	@ (8006708 <TIM_TI1_SetConfig+0xd0>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d007      	beq.n	8006696 <TIM_TI1_SetConfig+0x5e>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4a20      	ldr	r2, [pc, #128]	@ (800670c <TIM_TI1_SetConfig+0xd4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d003      	beq.n	8006696 <TIM_TI1_SetConfig+0x5e>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4a1f      	ldr	r2, [pc, #124]	@ (8006710 <TIM_TI1_SetConfig+0xd8>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d101      	bne.n	800669a <TIM_TI1_SetConfig+0x62>
 8006696:	2301      	movs	r3, #1
 8006698:	e000      	b.n	800669c <TIM_TI1_SetConfig+0x64>
 800669a:	2300      	movs	r3, #0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d008      	beq.n	80066b2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f023 0303 	bic.w	r3, r3, #3
 80066a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	e003      	b.n	80066ba <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f043 0301 	orr.w	r3, r3, #1
 80066b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f023 030a 	bic.w	r3, r3, #10
 80066d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f003 030a 	and.w	r3, r3, #10
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	621a      	str	r2, [r3, #32]
}
 80066ee:	bf00      	nop
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40012c00 	.word	0x40012c00
 8006700:	40000400 	.word	0x40000400
 8006704:	40000800 	.word	0x40000800
 8006708:	40000c00 	.word	0x40000c00
 800670c:	40013400 	.word	0x40013400
 8006710:	40014000 	.word	0x40014000

08006714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f023 0201 	bic.w	r2, r3, #1
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800673e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f023 030a 	bic.w	r3, r3, #10
 8006750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4313      	orrs	r3, r2
 8006758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	621a      	str	r2, [r3, #32]
}
 8006766:	bf00      	nop
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006772:	b480      	push	{r7}
 8006774:	b087      	sub	sp, #28
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	607a      	str	r2, [r7, #4]
 800677e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	f023 0210 	bic.w	r2, r3, #16
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800679e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	021b      	lsls	r3, r3, #8
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	031b      	lsls	r3, r3, #12
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80067c4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	621a      	str	r2, [r3, #32]
}
 80067e0:	bf00      	nop
 80067e2:	371c      	adds	r7, #28
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	f023 0210 	bic.w	r2, r3, #16
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	031b      	lsls	r3, r3, #12
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	4313      	orrs	r3, r2
 8006820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006828:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	011b      	lsls	r3, r3, #4
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	4313      	orrs	r3, r2
 8006832:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	621a      	str	r2, [r3, #32]
}
 8006840:	bf00      	nop
 8006842:	371c      	adds	r7, #28
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f023 0303 	bic.w	r3, r3, #3
 8006878:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4313      	orrs	r3, r2
 8006880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006888:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	011b      	lsls	r3, r3, #4
 800688e:	b2db      	uxtb	r3, r3
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	4313      	orrs	r3, r2
 8006894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800689c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	021b      	lsls	r3, r3, #8
 80068a2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	621a      	str	r2, [r3, #32]
}
 80068b8:	bf00      	nop
 80068ba:	371c      	adds	r7, #28
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
 80068d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	021b      	lsls	r3, r3, #8
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006902:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	031b      	lsls	r3, r3, #12
 8006908:	b29b      	uxth	r3, r3
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006916:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	031b      	lsls	r3, r3, #12
 800691c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	4313      	orrs	r3, r2
 8006924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	621a      	str	r2, [r3, #32]
}
 8006932:	bf00      	nop
 8006934:	371c      	adds	r7, #28
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800693e:	b480      	push	{r7}
 8006940:	b085      	sub	sp, #20
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	f043 0307 	orr.w	r3, r3, #7
 8006960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	609a      	str	r2, [r3, #8]
}
 8006968:	bf00      	nop
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006974:	b480      	push	{r7}
 8006976:	b087      	sub	sp, #28
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
 8006980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800698e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	021a      	lsls	r2, r3, #8
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	431a      	orrs	r2, r3
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4313      	orrs	r3, r2
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	609a      	str	r2, [r3, #8]
}
 80069a8:	bf00      	nop
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f003 031f 	and.w	r3, r3, #31
 80069c6:	2201      	movs	r2, #1
 80069c8:	fa02 f303 	lsl.w	r3, r2, r3
 80069cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a1a      	ldr	r2, [r3, #32]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	43db      	mvns	r3, r3
 80069d6:	401a      	ands	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6a1a      	ldr	r2, [r3, #32]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f003 031f 	and.w	r3, r3, #31
 80069e6:	6879      	ldr	r1, [r7, #4]
 80069e8:	fa01 f303 	lsl.w	r3, r1, r3
 80069ec:	431a      	orrs	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	621a      	str	r2, [r3, #32]
}
 80069f2:	bf00      	nop
 80069f4:	371c      	adds	r7, #28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
	...

08006a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d101      	bne.n	8006a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a14:	2302      	movs	r3, #2
 8006a16:	e068      	b.n	8006aea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a2e      	ldr	r2, [pc, #184]	@ (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d004      	beq.n	8006a4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a2d      	ldr	r2, [pc, #180]	@ (8006afc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d108      	bne.n	8006a5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d01d      	beq.n	8006abe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a8a:	d018      	beq.n	8006abe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a1b      	ldr	r2, [pc, #108]	@ (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d013      	beq.n	8006abe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a1a      	ldr	r2, [pc, #104]	@ (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d00e      	beq.n	8006abe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a18      	ldr	r2, [pc, #96]	@ (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d009      	beq.n	8006abe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a13      	ldr	r2, [pc, #76]	@ (8006afc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d004      	beq.n	8006abe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a14      	ldr	r2, [pc, #80]	@ (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d10c      	bne.n	8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ac4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	40012c00 	.word	0x40012c00
 8006afc:	40013400 	.word	0x40013400
 8006b00:	40000400 	.word	0x40000400
 8006b04:	40000800 	.word	0x40000800
 8006b08:	40000c00 	.word	0x40000c00
 8006b0c:	40014000 	.word	0x40014000

08006b10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d101      	bne.n	8006b2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e065      	b.n	8006bf8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	041b      	lsls	r3, r3, #16
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a16      	ldr	r2, [pc, #88]	@ (8006c04 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d004      	beq.n	8006bba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a14      	ldr	r2, [pc, #80]	@ (8006c08 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d115      	bne.n	8006be6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc4:	051b      	lsls	r3, r3, #20
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	40012c00 	.word	0x40012c00
 8006c08:	40013400 	.word	0x40013400

08006c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e040      	b.n	8006cdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d106      	bne.n	8006c70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7fa fef0 	bl	8001a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2224      	movs	r2, #36	@ 0x24
 8006c74:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 0201 	bic.w	r2, r2, #1
 8006c84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fe36 	bl	8007900 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fb7b 	bl	8007390 <UART_SetConfig>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d101      	bne.n	8006ca4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e01b      	b.n	8006cdc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006cb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689a      	ldr	r2, [r3, #8]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0201 	orr.w	r2, r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 feb5 	bl	8007a44 <UART_CheckIdleState>
 8006cda:	4603      	mov	r3, r0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08a      	sub	sp, #40	@ 0x28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	d137      	bne.n	8006d6c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <HAL_UART_Receive_IT+0x24>
 8006d02:	88fb      	ldrh	r3, [r7, #6]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e030      	b.n	8006d6e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a18      	ldr	r2, [pc, #96]	@ (8006d78 <HAL_UART_Receive_IT+0x94>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d01f      	beq.n	8006d5c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d018      	beq.n	8006d5c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	e853 3f00 	ldrex	r3, [r3]
 8006d36:	613b      	str	r3, [r7, #16]
   return(result);
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	461a      	mov	r2, r3
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	623b      	str	r3, [r7, #32]
 8006d4a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	69f9      	ldr	r1, [r7, #28]
 8006d4e:	6a3a      	ldr	r2, [r7, #32]
 8006d50:	e841 2300 	strex	r3, r2, [r1]
 8006d54:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e6      	bne.n	8006d2a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d5c:	88fb      	ldrh	r3, [r7, #6]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	68b9      	ldr	r1, [r7, #8]
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 ff7e 	bl	8007c64 <UART_Start_Receive_IT>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	e000      	b.n	8006d6e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d6c:	2302      	movs	r3, #2
  }
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3728      	adds	r7, #40	@ 0x28
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	40008000 	.word	0x40008000

08006d7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b0ba      	sub	sp, #232	@ 0xe8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006da2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006da6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006daa:	4013      	ands	r3, r2
 8006dac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006db0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d115      	bne.n	8006de4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dbc:	f003 0320 	and.w	r3, r3, #32
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00f      	beq.n	8006de4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dc8:	f003 0320 	and.w	r3, r3, #32
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d009      	beq.n	8006de4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 82ae 	beq.w	8007336 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	4798      	blx	r3
      }
      return;
 8006de2:	e2a8      	b.n	8007336 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006de4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 8117 	beq.w	800701c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d106      	bne.n	8006e08 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006dfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006dfe:	4b85      	ldr	r3, [pc, #532]	@ (8007014 <HAL_UART_IRQHandler+0x298>)
 8006e00:	4013      	ands	r3, r2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 810a 	beq.w	800701c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d011      	beq.n	8006e38 <HAL_UART_IRQHandler+0xbc>
 8006e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00b      	beq.n	8006e38 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2201      	movs	r2, #1
 8006e26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e2e:	f043 0201 	orr.w	r2, r3, #1
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d011      	beq.n	8006e68 <HAL_UART_IRQHandler+0xec>
 8006e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00b      	beq.n	8006e68 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2202      	movs	r2, #2
 8006e56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e5e:	f043 0204 	orr.w	r2, r3, #4
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d011      	beq.n	8006e98 <HAL_UART_IRQHandler+0x11c>
 8006e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00b      	beq.n	8006e98 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2204      	movs	r2, #4
 8006e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e8e:	f043 0202 	orr.w	r2, r3, #2
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e9c:	f003 0308 	and.w	r3, r3, #8
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d017      	beq.n	8006ed4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ea8:	f003 0320 	and.w	r3, r3, #32
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d105      	bne.n	8006ebc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006eb4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00b      	beq.n	8006ed4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2208      	movs	r2, #8
 8006ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006eca:	f043 0208 	orr.w	r2, r3, #8
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ed8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d012      	beq.n	8006f06 <HAL_UART_IRQHandler+0x18a>
 8006ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ee4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00c      	beq.n	8006f06 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ef4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006efc:	f043 0220 	orr.w	r2, r3, #32
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 8214 	beq.w	800733a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f16:	f003 0320 	and.w	r3, r3, #32
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00d      	beq.n	8006f3a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f22:	f003 0320 	and.w	r3, r3, #32
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d007      	beq.n	8006f3a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f4e:	2b40      	cmp	r3, #64	@ 0x40
 8006f50:	d005      	beq.n	8006f5e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d04f      	beq.n	8006ffe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 ff46 	bl	8007df0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f6e:	2b40      	cmp	r3, #64	@ 0x40
 8006f70:	d141      	bne.n	8006ff6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3308      	adds	r3, #8
 8006f78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f80:	e853 3f00 	ldrex	r3, [r3]
 8006f84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3308      	adds	r3, #8
 8006f9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006f9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006faa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1d9      	bne.n	8006f72 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d013      	beq.n	8006fee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fca:	4a13      	ldr	r2, [pc, #76]	@ (8007018 <HAL_UART_IRQHandler+0x29c>)
 8006fcc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fc f909 	bl	80031ea <HAL_DMA_Abort_IT>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d017      	beq.n	800700e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006fe8:	4610      	mov	r0, r2
 8006fea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fec:	e00f      	b.n	800700e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f9b8 	bl	8007364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff4:	e00b      	b.n	800700e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f9b4 	bl	8007364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ffc:	e007      	b.n	800700e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f9b0 	bl	8007364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800700c:	e195      	b.n	800733a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800700e:	bf00      	nop
    return;
 8007010:	e193      	b.n	800733a <HAL_UART_IRQHandler+0x5be>
 8007012:	bf00      	nop
 8007014:	04000120 	.word	0x04000120
 8007018:	08007eb9 	.word	0x08007eb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007020:	2b01      	cmp	r3, #1
 8007022:	f040 814e 	bne.w	80072c2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800702a:	f003 0310 	and.w	r3, r3, #16
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 8147 	beq.w	80072c2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007038:	f003 0310 	and.w	r3, r3, #16
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 8140 	beq.w	80072c2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2210      	movs	r2, #16
 8007048:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007054:	2b40      	cmp	r3, #64	@ 0x40
 8007056:	f040 80b8 	bne.w	80071ca <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007066:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 8167 	beq.w	800733e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007076:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800707a:	429a      	cmp	r2, r3
 800707c:	f080 815f 	bcs.w	800733e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007086:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0320 	and.w	r3, r3, #32
 8007096:	2b00      	cmp	r3, #0
 8007098:	f040 8086 	bne.w	80071a8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80070b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	461a      	mov	r2, r3
 80070c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80070c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80070ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80070d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80070d6:	e841 2300 	strex	r3, r2, [r1]
 80070da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80070de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1da      	bne.n	800709c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3308      	adds	r3, #8
 80070ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070f0:	e853 3f00 	ldrex	r3, [r3]
 80070f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80070f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070f8:	f023 0301 	bic.w	r3, r3, #1
 80070fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3308      	adds	r3, #8
 8007106:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800710a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800710e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007110:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007112:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800711c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1e1      	bne.n	80070e6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3308      	adds	r3, #8
 8007128:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800712c:	e853 3f00 	ldrex	r3, [r3]
 8007130:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007134:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007138:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3308      	adds	r3, #8
 8007142:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007146:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007148:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800714c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800714e:	e841 2300 	strex	r3, r2, [r1]
 8007152:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007154:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1e3      	bne.n	8007122 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2220      	movs	r2, #32
 800715e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007178:	f023 0310 	bic.w	r3, r3, #16
 800717c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	461a      	mov	r2, r3
 8007186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800718a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800718c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007190:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1e4      	bne.n	8007168 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fb ffe3 	bl	800316e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2202      	movs	r2, #2
 80071ac:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	b29b      	uxth	r3, r3
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f8d8 	bl	8007378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071c8:	e0b9      	b.n	800733e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f000 80ab 	beq.w	8007342 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80071ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 80a6 	beq.w	8007342 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fe:	e853 3f00 	ldrex	r3, [r3]
 8007202:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007206:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800720a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007218:	647b      	str	r3, [r7, #68]	@ 0x44
 800721a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800721e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007220:	e841 2300 	strex	r3, r2, [r1]
 8007224:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1e4      	bne.n	80071f6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3308      	adds	r3, #8
 8007232:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007236:	e853 3f00 	ldrex	r3, [r3]
 800723a:	623b      	str	r3, [r7, #32]
   return(result);
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	f023 0301 	bic.w	r3, r3, #1
 8007242:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3308      	adds	r3, #8
 800724c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007250:	633a      	str	r2, [r7, #48]	@ 0x30
 8007252:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007254:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007258:	e841 2300 	strex	r3, r2, [r1]
 800725c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800725e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1e3      	bne.n	800722c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2220      	movs	r2, #32
 8007268:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	60fb      	str	r3, [r7, #12]
   return(result);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f023 0310 	bic.w	r3, r3, #16
 800728c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	461a      	mov	r2, r3
 8007296:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800729a:	61fb      	str	r3, [r7, #28]
 800729c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	69b9      	ldr	r1, [r7, #24]
 80072a0:	69fa      	ldr	r2, [r7, #28]
 80072a2:	e841 2300 	strex	r3, r2, [r1]
 80072a6:	617b      	str	r3, [r7, #20]
   return(result);
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e4      	bne.n	8007278 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2202      	movs	r2, #2
 80072b2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f85c 	bl	8007378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072c0:	e03f      	b.n	8007342 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80072c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00e      	beq.n	80072ec <HAL_UART_IRQHandler+0x570>
 80072ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d008      	beq.n	80072ec <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80072e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 ffe3 	bl	80082b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072ea:	e02d      	b.n	8007348 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80072ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00e      	beq.n	8007316 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80072f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007300:	2b00      	cmp	r3, #0
 8007302:	d008      	beq.n	8007316 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01c      	beq.n	8007346 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	4798      	blx	r3
    }
    return;
 8007314:	e017      	b.n	8007346 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800731a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800731e:	2b00      	cmp	r3, #0
 8007320:	d012      	beq.n	8007348 <HAL_UART_IRQHandler+0x5cc>
 8007322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00c      	beq.n	8007348 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fdd8 	bl	8007ee4 <UART_EndTransmit_IT>
    return;
 8007334:	e008      	b.n	8007348 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007336:	bf00      	nop
 8007338:	e006      	b.n	8007348 <HAL_UART_IRQHandler+0x5cc>
    return;
 800733a:	bf00      	nop
 800733c:	e004      	b.n	8007348 <HAL_UART_IRQHandler+0x5cc>
      return;
 800733e:	bf00      	nop
 8007340:	e002      	b.n	8007348 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007342:	bf00      	nop
 8007344:	e000      	b.n	8007348 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007346:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007348:	37e8      	adds	r7, #232	@ 0xe8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop

08007350 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007394:	b08a      	sub	sp, #40	@ 0x28
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	689a      	ldr	r2, [r3, #8]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	431a      	orrs	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	431a      	orrs	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	4ba4      	ldr	r3, [pc, #656]	@ (8007650 <UART_SetConfig+0x2c0>)
 80073c0:	4013      	ands	r3, r2
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	6812      	ldr	r2, [r2, #0]
 80073c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073c8:	430b      	orrs	r3, r1
 80073ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a99      	ldr	r2, [pc, #612]	@ (8007654 <UART_SetConfig+0x2c4>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d004      	beq.n	80073fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073f8:	4313      	orrs	r3, r2
 80073fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800740c:	430a      	orrs	r2, r1
 800740e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a90      	ldr	r2, [pc, #576]	@ (8007658 <UART_SetConfig+0x2c8>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d126      	bne.n	8007468 <UART_SetConfig+0xd8>
 800741a:	4b90      	ldr	r3, [pc, #576]	@ (800765c <UART_SetConfig+0x2cc>)
 800741c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007420:	f003 0303 	and.w	r3, r3, #3
 8007424:	2b03      	cmp	r3, #3
 8007426:	d81b      	bhi.n	8007460 <UART_SetConfig+0xd0>
 8007428:	a201      	add	r2, pc, #4	@ (adr r2, 8007430 <UART_SetConfig+0xa0>)
 800742a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742e:	bf00      	nop
 8007430:	08007441 	.word	0x08007441
 8007434:	08007451 	.word	0x08007451
 8007438:	08007449 	.word	0x08007449
 800743c:	08007459 	.word	0x08007459
 8007440:	2301      	movs	r3, #1
 8007442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007446:	e116      	b.n	8007676 <UART_SetConfig+0x2e6>
 8007448:	2302      	movs	r3, #2
 800744a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800744e:	e112      	b.n	8007676 <UART_SetConfig+0x2e6>
 8007450:	2304      	movs	r3, #4
 8007452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007456:	e10e      	b.n	8007676 <UART_SetConfig+0x2e6>
 8007458:	2308      	movs	r3, #8
 800745a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800745e:	e10a      	b.n	8007676 <UART_SetConfig+0x2e6>
 8007460:	2310      	movs	r3, #16
 8007462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007466:	e106      	b.n	8007676 <UART_SetConfig+0x2e6>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a7c      	ldr	r2, [pc, #496]	@ (8007660 <UART_SetConfig+0x2d0>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d138      	bne.n	80074e4 <UART_SetConfig+0x154>
 8007472:	4b7a      	ldr	r3, [pc, #488]	@ (800765c <UART_SetConfig+0x2cc>)
 8007474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007478:	f003 030c 	and.w	r3, r3, #12
 800747c:	2b0c      	cmp	r3, #12
 800747e:	d82d      	bhi.n	80074dc <UART_SetConfig+0x14c>
 8007480:	a201      	add	r2, pc, #4	@ (adr r2, 8007488 <UART_SetConfig+0xf8>)
 8007482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007486:	bf00      	nop
 8007488:	080074bd 	.word	0x080074bd
 800748c:	080074dd 	.word	0x080074dd
 8007490:	080074dd 	.word	0x080074dd
 8007494:	080074dd 	.word	0x080074dd
 8007498:	080074cd 	.word	0x080074cd
 800749c:	080074dd 	.word	0x080074dd
 80074a0:	080074dd 	.word	0x080074dd
 80074a4:	080074dd 	.word	0x080074dd
 80074a8:	080074c5 	.word	0x080074c5
 80074ac:	080074dd 	.word	0x080074dd
 80074b0:	080074dd 	.word	0x080074dd
 80074b4:	080074dd 	.word	0x080074dd
 80074b8:	080074d5 	.word	0x080074d5
 80074bc:	2300      	movs	r3, #0
 80074be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074c2:	e0d8      	b.n	8007676 <UART_SetConfig+0x2e6>
 80074c4:	2302      	movs	r3, #2
 80074c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074ca:	e0d4      	b.n	8007676 <UART_SetConfig+0x2e6>
 80074cc:	2304      	movs	r3, #4
 80074ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074d2:	e0d0      	b.n	8007676 <UART_SetConfig+0x2e6>
 80074d4:	2308      	movs	r3, #8
 80074d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074da:	e0cc      	b.n	8007676 <UART_SetConfig+0x2e6>
 80074dc:	2310      	movs	r3, #16
 80074de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074e2:	e0c8      	b.n	8007676 <UART_SetConfig+0x2e6>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a5e      	ldr	r2, [pc, #376]	@ (8007664 <UART_SetConfig+0x2d4>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d125      	bne.n	800753a <UART_SetConfig+0x1aa>
 80074ee:	4b5b      	ldr	r3, [pc, #364]	@ (800765c <UART_SetConfig+0x2cc>)
 80074f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80074f8:	2b30      	cmp	r3, #48	@ 0x30
 80074fa:	d016      	beq.n	800752a <UART_SetConfig+0x19a>
 80074fc:	2b30      	cmp	r3, #48	@ 0x30
 80074fe:	d818      	bhi.n	8007532 <UART_SetConfig+0x1a2>
 8007500:	2b20      	cmp	r3, #32
 8007502:	d00a      	beq.n	800751a <UART_SetConfig+0x18a>
 8007504:	2b20      	cmp	r3, #32
 8007506:	d814      	bhi.n	8007532 <UART_SetConfig+0x1a2>
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <UART_SetConfig+0x182>
 800750c:	2b10      	cmp	r3, #16
 800750e:	d008      	beq.n	8007522 <UART_SetConfig+0x192>
 8007510:	e00f      	b.n	8007532 <UART_SetConfig+0x1a2>
 8007512:	2300      	movs	r3, #0
 8007514:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007518:	e0ad      	b.n	8007676 <UART_SetConfig+0x2e6>
 800751a:	2302      	movs	r3, #2
 800751c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007520:	e0a9      	b.n	8007676 <UART_SetConfig+0x2e6>
 8007522:	2304      	movs	r3, #4
 8007524:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007528:	e0a5      	b.n	8007676 <UART_SetConfig+0x2e6>
 800752a:	2308      	movs	r3, #8
 800752c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007530:	e0a1      	b.n	8007676 <UART_SetConfig+0x2e6>
 8007532:	2310      	movs	r3, #16
 8007534:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007538:	e09d      	b.n	8007676 <UART_SetConfig+0x2e6>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a4a      	ldr	r2, [pc, #296]	@ (8007668 <UART_SetConfig+0x2d8>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d125      	bne.n	8007590 <UART_SetConfig+0x200>
 8007544:	4b45      	ldr	r3, [pc, #276]	@ (800765c <UART_SetConfig+0x2cc>)
 8007546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800754a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800754e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007550:	d016      	beq.n	8007580 <UART_SetConfig+0x1f0>
 8007552:	2bc0      	cmp	r3, #192	@ 0xc0
 8007554:	d818      	bhi.n	8007588 <UART_SetConfig+0x1f8>
 8007556:	2b80      	cmp	r3, #128	@ 0x80
 8007558:	d00a      	beq.n	8007570 <UART_SetConfig+0x1e0>
 800755a:	2b80      	cmp	r3, #128	@ 0x80
 800755c:	d814      	bhi.n	8007588 <UART_SetConfig+0x1f8>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <UART_SetConfig+0x1d8>
 8007562:	2b40      	cmp	r3, #64	@ 0x40
 8007564:	d008      	beq.n	8007578 <UART_SetConfig+0x1e8>
 8007566:	e00f      	b.n	8007588 <UART_SetConfig+0x1f8>
 8007568:	2300      	movs	r3, #0
 800756a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800756e:	e082      	b.n	8007676 <UART_SetConfig+0x2e6>
 8007570:	2302      	movs	r3, #2
 8007572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007576:	e07e      	b.n	8007676 <UART_SetConfig+0x2e6>
 8007578:	2304      	movs	r3, #4
 800757a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800757e:	e07a      	b.n	8007676 <UART_SetConfig+0x2e6>
 8007580:	2308      	movs	r3, #8
 8007582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007586:	e076      	b.n	8007676 <UART_SetConfig+0x2e6>
 8007588:	2310      	movs	r3, #16
 800758a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800758e:	e072      	b.n	8007676 <UART_SetConfig+0x2e6>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a35      	ldr	r2, [pc, #212]	@ (800766c <UART_SetConfig+0x2dc>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d12a      	bne.n	80075f0 <UART_SetConfig+0x260>
 800759a:	4b30      	ldr	r3, [pc, #192]	@ (800765c <UART_SetConfig+0x2cc>)
 800759c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075a8:	d01a      	beq.n	80075e0 <UART_SetConfig+0x250>
 80075aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075ae:	d81b      	bhi.n	80075e8 <UART_SetConfig+0x258>
 80075b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075b4:	d00c      	beq.n	80075d0 <UART_SetConfig+0x240>
 80075b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075ba:	d815      	bhi.n	80075e8 <UART_SetConfig+0x258>
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d003      	beq.n	80075c8 <UART_SetConfig+0x238>
 80075c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075c4:	d008      	beq.n	80075d8 <UART_SetConfig+0x248>
 80075c6:	e00f      	b.n	80075e8 <UART_SetConfig+0x258>
 80075c8:	2300      	movs	r3, #0
 80075ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ce:	e052      	b.n	8007676 <UART_SetConfig+0x2e6>
 80075d0:	2302      	movs	r3, #2
 80075d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075d6:	e04e      	b.n	8007676 <UART_SetConfig+0x2e6>
 80075d8:	2304      	movs	r3, #4
 80075da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075de:	e04a      	b.n	8007676 <UART_SetConfig+0x2e6>
 80075e0:	2308      	movs	r3, #8
 80075e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075e6:	e046      	b.n	8007676 <UART_SetConfig+0x2e6>
 80075e8:	2310      	movs	r3, #16
 80075ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ee:	e042      	b.n	8007676 <UART_SetConfig+0x2e6>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a17      	ldr	r2, [pc, #92]	@ (8007654 <UART_SetConfig+0x2c4>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d13a      	bne.n	8007670 <UART_SetConfig+0x2e0>
 80075fa:	4b18      	ldr	r3, [pc, #96]	@ (800765c <UART_SetConfig+0x2cc>)
 80075fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007600:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007604:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007608:	d01a      	beq.n	8007640 <UART_SetConfig+0x2b0>
 800760a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800760e:	d81b      	bhi.n	8007648 <UART_SetConfig+0x2b8>
 8007610:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007614:	d00c      	beq.n	8007630 <UART_SetConfig+0x2a0>
 8007616:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800761a:	d815      	bhi.n	8007648 <UART_SetConfig+0x2b8>
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <UART_SetConfig+0x298>
 8007620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007624:	d008      	beq.n	8007638 <UART_SetConfig+0x2a8>
 8007626:	e00f      	b.n	8007648 <UART_SetConfig+0x2b8>
 8007628:	2300      	movs	r3, #0
 800762a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800762e:	e022      	b.n	8007676 <UART_SetConfig+0x2e6>
 8007630:	2302      	movs	r3, #2
 8007632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007636:	e01e      	b.n	8007676 <UART_SetConfig+0x2e6>
 8007638:	2304      	movs	r3, #4
 800763a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800763e:	e01a      	b.n	8007676 <UART_SetConfig+0x2e6>
 8007640:	2308      	movs	r3, #8
 8007642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007646:	e016      	b.n	8007676 <UART_SetConfig+0x2e6>
 8007648:	2310      	movs	r3, #16
 800764a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800764e:	e012      	b.n	8007676 <UART_SetConfig+0x2e6>
 8007650:	efff69f3 	.word	0xefff69f3
 8007654:	40008000 	.word	0x40008000
 8007658:	40013800 	.word	0x40013800
 800765c:	40021000 	.word	0x40021000
 8007660:	40004400 	.word	0x40004400
 8007664:	40004800 	.word	0x40004800
 8007668:	40004c00 	.word	0x40004c00
 800766c:	40005000 	.word	0x40005000
 8007670:	2310      	movs	r3, #16
 8007672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a9f      	ldr	r2, [pc, #636]	@ (80078f8 <UART_SetConfig+0x568>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d17a      	bne.n	8007776 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007680:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007684:	2b08      	cmp	r3, #8
 8007686:	d824      	bhi.n	80076d2 <UART_SetConfig+0x342>
 8007688:	a201      	add	r2, pc, #4	@ (adr r2, 8007690 <UART_SetConfig+0x300>)
 800768a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768e:	bf00      	nop
 8007690:	080076b5 	.word	0x080076b5
 8007694:	080076d3 	.word	0x080076d3
 8007698:	080076bd 	.word	0x080076bd
 800769c:	080076d3 	.word	0x080076d3
 80076a0:	080076c3 	.word	0x080076c3
 80076a4:	080076d3 	.word	0x080076d3
 80076a8:	080076d3 	.word	0x080076d3
 80076ac:	080076d3 	.word	0x080076d3
 80076b0:	080076cb 	.word	0x080076cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076b4:	f7fc fea6 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 80076b8:	61f8      	str	r0, [r7, #28]
        break;
 80076ba:	e010      	b.n	80076de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076bc:	4b8f      	ldr	r3, [pc, #572]	@ (80078fc <UART_SetConfig+0x56c>)
 80076be:	61fb      	str	r3, [r7, #28]
        break;
 80076c0:	e00d      	b.n	80076de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076c2:	f7fc fe07 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 80076c6:	61f8      	str	r0, [r7, #28]
        break;
 80076c8:	e009      	b.n	80076de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076ce:	61fb      	str	r3, [r7, #28]
        break;
 80076d0:	e005      	b.n	80076de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80076d2:	2300      	movs	r3, #0
 80076d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80076dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 80fb 	beq.w	80078dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	4613      	mov	r3, r2
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	4413      	add	r3, r2
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d305      	bcc.n	8007702 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076fc:	69fa      	ldr	r2, [r7, #28]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d903      	bls.n	800770a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007708:	e0e8      	b.n	80078dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	2200      	movs	r2, #0
 800770e:	461c      	mov	r4, r3
 8007710:	4615      	mov	r5, r2
 8007712:	f04f 0200 	mov.w	r2, #0
 8007716:	f04f 0300 	mov.w	r3, #0
 800771a:	022b      	lsls	r3, r5, #8
 800771c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007720:	0222      	lsls	r2, r4, #8
 8007722:	68f9      	ldr	r1, [r7, #12]
 8007724:	6849      	ldr	r1, [r1, #4]
 8007726:	0849      	lsrs	r1, r1, #1
 8007728:	2000      	movs	r0, #0
 800772a:	4688      	mov	r8, r1
 800772c:	4681      	mov	r9, r0
 800772e:	eb12 0a08 	adds.w	sl, r2, r8
 8007732:	eb43 0b09 	adc.w	fp, r3, r9
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	603b      	str	r3, [r7, #0]
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007744:	4650      	mov	r0, sl
 8007746:	4659      	mov	r1, fp
 8007748:	f7f8 fd3e 	bl	80001c8 <__aeabi_uldivmod>
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	4613      	mov	r3, r2
 8007752:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800775a:	d308      	bcc.n	800776e <UART_SetConfig+0x3de>
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007762:	d204      	bcs.n	800776e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	69ba      	ldr	r2, [r7, #24]
 800776a:	60da      	str	r2, [r3, #12]
 800776c:	e0b6      	b.n	80078dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007774:	e0b2      	b.n	80078dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800777e:	d15e      	bne.n	800783e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007780:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007784:	2b08      	cmp	r3, #8
 8007786:	d828      	bhi.n	80077da <UART_SetConfig+0x44a>
 8007788:	a201      	add	r2, pc, #4	@ (adr r2, 8007790 <UART_SetConfig+0x400>)
 800778a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778e:	bf00      	nop
 8007790:	080077b5 	.word	0x080077b5
 8007794:	080077bd 	.word	0x080077bd
 8007798:	080077c5 	.word	0x080077c5
 800779c:	080077db 	.word	0x080077db
 80077a0:	080077cb 	.word	0x080077cb
 80077a4:	080077db 	.word	0x080077db
 80077a8:	080077db 	.word	0x080077db
 80077ac:	080077db 	.word	0x080077db
 80077b0:	080077d3 	.word	0x080077d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077b4:	f7fc fe26 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 80077b8:	61f8      	str	r0, [r7, #28]
        break;
 80077ba:	e014      	b.n	80077e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077bc:	f7fc fe38 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 80077c0:	61f8      	str	r0, [r7, #28]
        break;
 80077c2:	e010      	b.n	80077e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077c4:	4b4d      	ldr	r3, [pc, #308]	@ (80078fc <UART_SetConfig+0x56c>)
 80077c6:	61fb      	str	r3, [r7, #28]
        break;
 80077c8:	e00d      	b.n	80077e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077ca:	f7fc fd83 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 80077ce:	61f8      	str	r0, [r7, #28]
        break;
 80077d0:	e009      	b.n	80077e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077d6:	61fb      	str	r3, [r7, #28]
        break;
 80077d8:	e005      	b.n	80077e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80077e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d077      	beq.n	80078dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	005a      	lsls	r2, r3, #1
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	085b      	lsrs	r3, r3, #1
 80077f6:	441a      	add	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007800:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	2b0f      	cmp	r3, #15
 8007806:	d916      	bls.n	8007836 <UART_SetConfig+0x4a6>
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800780e:	d212      	bcs.n	8007836 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	b29b      	uxth	r3, r3
 8007814:	f023 030f 	bic.w	r3, r3, #15
 8007818:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	085b      	lsrs	r3, r3, #1
 800781e:	b29b      	uxth	r3, r3
 8007820:	f003 0307 	and.w	r3, r3, #7
 8007824:	b29a      	uxth	r2, r3
 8007826:	8afb      	ldrh	r3, [r7, #22]
 8007828:	4313      	orrs	r3, r2
 800782a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	8afa      	ldrh	r2, [r7, #22]
 8007832:	60da      	str	r2, [r3, #12]
 8007834:	e052      	b.n	80078dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800783c:	e04e      	b.n	80078dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800783e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007842:	2b08      	cmp	r3, #8
 8007844:	d827      	bhi.n	8007896 <UART_SetConfig+0x506>
 8007846:	a201      	add	r2, pc, #4	@ (adr r2, 800784c <UART_SetConfig+0x4bc>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	08007871 	.word	0x08007871
 8007850:	08007879 	.word	0x08007879
 8007854:	08007881 	.word	0x08007881
 8007858:	08007897 	.word	0x08007897
 800785c:	08007887 	.word	0x08007887
 8007860:	08007897 	.word	0x08007897
 8007864:	08007897 	.word	0x08007897
 8007868:	08007897 	.word	0x08007897
 800786c:	0800788f 	.word	0x0800788f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007870:	f7fc fdc8 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 8007874:	61f8      	str	r0, [r7, #28]
        break;
 8007876:	e014      	b.n	80078a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007878:	f7fc fdda 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 800787c:	61f8      	str	r0, [r7, #28]
        break;
 800787e:	e010      	b.n	80078a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007880:	4b1e      	ldr	r3, [pc, #120]	@ (80078fc <UART_SetConfig+0x56c>)
 8007882:	61fb      	str	r3, [r7, #28]
        break;
 8007884:	e00d      	b.n	80078a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007886:	f7fc fd25 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 800788a:	61f8      	str	r0, [r7, #28]
        break;
 800788c:	e009      	b.n	80078a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800788e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007892:	61fb      	str	r3, [r7, #28]
        break;
 8007894:	e005      	b.n	80078a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007896:	2300      	movs	r3, #0
 8007898:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80078a0:	bf00      	nop
    }

    if (pclk != 0U)
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d019      	beq.n	80078dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	085a      	lsrs	r2, r3, #1
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	441a      	add	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	2b0f      	cmp	r3, #15
 80078c0:	d909      	bls.n	80078d6 <UART_SetConfig+0x546>
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078c8:	d205      	bcs.n	80078d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	60da      	str	r2, [r3, #12]
 80078d4:	e002      	b.n	80078dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80078e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3728      	adds	r7, #40	@ 0x28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078f6:	bf00      	nop
 80078f8:	40008000 	.word	0x40008000
 80078fc:	00f42400 	.word	0x00f42400

08007900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790c:	f003 0308 	and.w	r3, r3, #8
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00a      	beq.n	800792a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	430a      	orrs	r2, r1
 8007928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00a      	beq.n	800794c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	430a      	orrs	r2, r1
 800794a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007950:	f003 0302 	and.w	r3, r3, #2
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00a      	beq.n	800796e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007972:	f003 0304 	and.w	r3, r3, #4
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	430a      	orrs	r2, r1
 800798e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007994:	f003 0310 	and.w	r3, r3, #16
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00a      	beq.n	80079b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b6:	f003 0320 	and.w	r3, r3, #32
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00a      	beq.n	80079d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	430a      	orrs	r2, r1
 80079d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01a      	beq.n	8007a16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079fe:	d10a      	bne.n	8007a16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	430a      	orrs	r2, r1
 8007a36:	605a      	str	r2, [r3, #4]
  }
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b098      	sub	sp, #96	@ 0x60
 8007a48:	af02      	add	r7, sp, #8
 8007a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a54:	f7fa f954 	bl	8001d00 <HAL_GetTick>
 8007a58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0308 	and.w	r3, r3, #8
 8007a64:	2b08      	cmp	r3, #8
 8007a66:	d12e      	bne.n	8007ac6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a70:	2200      	movs	r2, #0
 8007a72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f88c 	bl	8007b94 <UART_WaitOnFlagUntilTimeout>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d021      	beq.n	8007ac6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8a:	e853 3f00 	ldrex	r3, [r3]
 8007a8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a96:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007aa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007aa2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007aa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007aa8:	e841 2300 	strex	r3, r2, [r1]
 8007aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e6      	bne.n	8007a82 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e062      	b.n	8007b8c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d149      	bne.n	8007b68 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ad4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ad8:	9300      	str	r3, [sp, #0]
 8007ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007adc:	2200      	movs	r2, #0
 8007ade:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f856 	bl	8007b94 <UART_WaitOnFlagUntilTimeout>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d03c      	beq.n	8007b68 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	623b      	str	r3, [r7, #32]
   return(result);
 8007afc:	6a3b      	ldr	r3, [r7, #32]
 8007afe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e6      	bne.n	8007aee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3308      	adds	r3, #8
 8007b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f023 0301 	bic.w	r3, r3, #1
 8007b36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3308      	adds	r3, #8
 8007b3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b40:	61fa      	str	r2, [r7, #28]
 8007b42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	69b9      	ldr	r1, [r7, #24]
 8007b46:	69fa      	ldr	r2, [r7, #28]
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e5      	bne.n	8007b20 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2220      	movs	r2, #32
 8007b58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e011      	b.n	8007b8c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3758      	adds	r7, #88	@ 0x58
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	603b      	str	r3, [r7, #0]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ba4:	e049      	b.n	8007c3a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bac:	d045      	beq.n	8007c3a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bae:	f7fa f8a7 	bl	8001d00 <HAL_GetTick>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d302      	bcc.n	8007bc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d101      	bne.n	8007bc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e048      	b.n	8007c5a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0304 	and.w	r3, r3, #4
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d031      	beq.n	8007c3a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	f003 0308 	and.w	r3, r3, #8
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d110      	bne.n	8007c06 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2208      	movs	r2, #8
 8007bea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 f8ff 	bl	8007df0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2208      	movs	r2, #8
 8007bf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e029      	b.n	8007c5a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	69db      	ldr	r3, [r3, #28]
 8007c0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c14:	d111      	bne.n	8007c3a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f000 f8e5 	bl	8007df0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	e00f      	b.n	8007c5a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69da      	ldr	r2, [r3, #28]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4013      	ands	r3, r2
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	bf0c      	ite	eq
 8007c4a:	2301      	moveq	r3, #1
 8007c4c:	2300      	movne	r3, #0
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	461a      	mov	r2, r3
 8007c52:	79fb      	ldrb	r3, [r7, #7]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d0a6      	beq.n	8007ba6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
	...

08007c64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b097      	sub	sp, #92	@ 0x5c
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	88fa      	ldrh	r2, [r7, #6]
 8007c7c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	88fa      	ldrh	r2, [r7, #6]
 8007c84:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c96:	d10e      	bne.n	8007cb6 <UART_Start_Receive_IT+0x52>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d105      	bne.n	8007cac <UART_Start_Receive_IT+0x48>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007ca6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007caa:	e02d      	b.n	8007d08 <UART_Start_Receive_IT+0xa4>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	22ff      	movs	r2, #255	@ 0xff
 8007cb0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007cb4:	e028      	b.n	8007d08 <UART_Start_Receive_IT+0xa4>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10d      	bne.n	8007cda <UART_Start_Receive_IT+0x76>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d104      	bne.n	8007cd0 <UART_Start_Receive_IT+0x6c>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	22ff      	movs	r2, #255	@ 0xff
 8007cca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007cce:	e01b      	b.n	8007d08 <UART_Start_Receive_IT+0xa4>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	227f      	movs	r2, #127	@ 0x7f
 8007cd4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007cd8:	e016      	b.n	8007d08 <UART_Start_Receive_IT+0xa4>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ce2:	d10d      	bne.n	8007d00 <UART_Start_Receive_IT+0x9c>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d104      	bne.n	8007cf6 <UART_Start_Receive_IT+0x92>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	227f      	movs	r2, #127	@ 0x7f
 8007cf0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007cf4:	e008      	b.n	8007d08 <UART_Start_Receive_IT+0xa4>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	223f      	movs	r2, #63	@ 0x3f
 8007cfa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007cfe:	e003      	b.n	8007d08 <UART_Start_Receive_IT+0xa4>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2222      	movs	r2, #34	@ 0x22
 8007d14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	3308      	adds	r3, #8
 8007d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d22:	e853 3f00 	ldrex	r3, [r3]
 8007d26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2a:	f043 0301 	orr.w	r3, r3, #1
 8007d2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	3308      	adds	r3, #8
 8007d36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d38:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007d3a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007d3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d40:	e841 2300 	strex	r3, r2, [r1]
 8007d44:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1e5      	bne.n	8007d18 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d54:	d107      	bne.n	8007d66 <UART_Start_Receive_IT+0x102>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d103      	bne.n	8007d66 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	4a21      	ldr	r2, [pc, #132]	@ (8007de8 <UART_Start_Receive_IT+0x184>)
 8007d62:	669a      	str	r2, [r3, #104]	@ 0x68
 8007d64:	e002      	b.n	8007d6c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	4a20      	ldr	r2, [pc, #128]	@ (8007dec <UART_Start_Receive_IT+0x188>)
 8007d6a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d019      	beq.n	8007da8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7c:	e853 3f00 	ldrex	r3, [r3]
 8007d80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d84:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d94:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1e6      	bne.n	8007d74 <UART_Start_Receive_IT+0x110>
 8007da6:	e018      	b.n	8007dda <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	613b      	str	r3, [r7, #16]
   return(result);
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f043 0320 	orr.w	r3, r3, #32
 8007dbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dc6:	623b      	str	r3, [r7, #32]
 8007dc8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dca:	69f9      	ldr	r1, [r7, #28]
 8007dcc:	6a3a      	ldr	r2, [r7, #32]
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e6      	bne.n	8007da8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	375c      	adds	r7, #92	@ 0x5c
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	080080f5 	.word	0x080080f5
 8007dec:	08007f39 	.word	0x08007f39

08007df0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b095      	sub	sp, #84	@ 0x54
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	461a      	mov	r2, r3
 8007e14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e16:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e6      	bne.n	8007df8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3308      	adds	r3, #8
 8007e30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	e853 3f00 	ldrex	r3, [r3]
 8007e38:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	f023 0301 	bic.w	r3, r3, #1
 8007e40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	3308      	adds	r3, #8
 8007e48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1e5      	bne.n	8007e2a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d118      	bne.n	8007e98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	e853 3f00 	ldrex	r3, [r3]
 8007e72:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	f023 0310 	bic.w	r3, r3, #16
 8007e7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	461a      	mov	r2, r3
 8007e82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e84:	61bb      	str	r3, [r7, #24]
 8007e86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e88:	6979      	ldr	r1, [r7, #20]
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	e841 2300 	strex	r3, r2, [r1]
 8007e90:	613b      	str	r3, [r7, #16]
   return(result);
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1e6      	bne.n	8007e66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007eac:	bf00      	nop
 8007eae:	3754      	adds	r7, #84	@ 0x54
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f7ff fa44 	bl	8007364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007edc:	bf00      	nop
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b088      	sub	sp, #32
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f00:	61fb      	str	r3, [r7, #28]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	61bb      	str	r3, [r7, #24]
 8007f0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	6979      	ldr	r1, [r7, #20]
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	613b      	str	r3, [r7, #16]
   return(result);
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1e6      	bne.n	8007eec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2220      	movs	r2, #32
 8007f22:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7ff fa10 	bl	8007350 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f30:	bf00      	nop
 8007f32:	3720      	adds	r7, #32
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b09c      	sub	sp, #112	@ 0x70
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f46:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f50:	2b22      	cmp	r3, #34	@ 0x22
 8007f52:	f040 80be 	bne.w	80080d2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007f5c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007f64:	b2d9      	uxtb	r1, r3
 8007f66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f70:	400a      	ands	r2, r1
 8007f72:	b2d2      	uxtb	r2, r2
 8007f74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f7a:	1c5a      	adds	r2, r3, #1
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f040 80a3 	bne.w	80080e6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007fbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007fc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007fcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1e6      	bne.n	8007fa0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	3308      	adds	r3, #8
 8007fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fdc:	e853 3f00 	ldrex	r3, [r3]
 8007fe0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fe4:	f023 0301 	bic.w	r3, r3, #1
 8007fe8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	3308      	adds	r3, #8
 8007ff0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007ff2:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ff4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ff8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ffa:	e841 2300 	strex	r3, r2, [r1]
 8007ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1e5      	bne.n	8007fd2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2220      	movs	r2, #32
 800800a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a34      	ldr	r2, [pc, #208]	@ (80080f0 <UART_RxISR_8BIT+0x1b8>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d01f      	beq.n	8008064 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d018      	beq.n	8008064 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803a:	e853 3f00 	ldrex	r3, [r3]
 800803e:	623b      	str	r3, [r7, #32]
   return(result);
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008046:	663b      	str	r3, [r7, #96]	@ 0x60
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	461a      	mov	r2, r3
 800804e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008050:	633b      	str	r3, [r7, #48]	@ 0x30
 8008052:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008054:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008058:	e841 2300 	strex	r3, r2, [r1]
 800805c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800805e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1e6      	bne.n	8008032 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008068:	2b01      	cmp	r3, #1
 800806a:	d12e      	bne.n	80080ca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	e853 3f00 	ldrex	r3, [r3]
 800807e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f023 0310 	bic.w	r3, r3, #16
 8008086:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	461a      	mov	r2, r3
 800808e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008090:	61fb      	str	r3, [r7, #28]
 8008092:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008094:	69b9      	ldr	r1, [r7, #24]
 8008096:	69fa      	ldr	r2, [r7, #28]
 8008098:	e841 2300 	strex	r3, r2, [r1]
 800809c:	617b      	str	r3, [r7, #20]
   return(result);
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1e6      	bne.n	8008072 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f003 0310 	and.w	r3, r3, #16
 80080ae:	2b10      	cmp	r3, #16
 80080b0:	d103      	bne.n	80080ba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2210      	movs	r2, #16
 80080b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7ff f958 	bl	8007378 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080c8:	e00d      	b.n	80080e6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f7f9 f900 	bl	80012d0 <HAL_UART_RxCpltCallback>
}
 80080d0:	e009      	b.n	80080e6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	8b1b      	ldrh	r3, [r3, #24]
 80080d8:	b29a      	uxth	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f042 0208 	orr.w	r2, r2, #8
 80080e2:	b292      	uxth	r2, r2
 80080e4:	831a      	strh	r2, [r3, #24]
}
 80080e6:	bf00      	nop
 80080e8:	3770      	adds	r7, #112	@ 0x70
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	40008000 	.word	0x40008000

080080f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b09c      	sub	sp, #112	@ 0x70
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008102:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800810c:	2b22      	cmp	r3, #34	@ 0x22
 800810e:	f040 80be 	bne.w	800828e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008118:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008120:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008122:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008126:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800812a:	4013      	ands	r3, r2
 800812c:	b29a      	uxth	r2, r3
 800812e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008130:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008136:	1c9a      	adds	r2, r3, #2
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008142:	b29b      	uxth	r3, r3
 8008144:	3b01      	subs	r3, #1
 8008146:	b29a      	uxth	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008154:	b29b      	uxth	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	f040 80a3 	bne.w	80082a2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008164:	e853 3f00 	ldrex	r3, [r3]
 8008168:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800816a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800816c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008170:	667b      	str	r3, [r7, #100]	@ 0x64
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800817a:	657b      	str	r3, [r7, #84]	@ 0x54
 800817c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008180:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008182:	e841 2300 	strex	r3, r2, [r1]
 8008186:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1e6      	bne.n	800815c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3308      	adds	r3, #8
 8008194:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008198:	e853 3f00 	ldrex	r3, [r3]
 800819c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800819e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a0:	f023 0301 	bic.w	r3, r3, #1
 80081a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3308      	adds	r3, #8
 80081ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80081ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80081b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081b6:	e841 2300 	strex	r3, r2, [r1]
 80081ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1e5      	bne.n	800818e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2220      	movs	r2, #32
 80081c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a34      	ldr	r2, [pc, #208]	@ (80082ac <UART_RxISR_16BIT+0x1b8>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d01f      	beq.n	8008220 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d018      	beq.n	8008220 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	e853 3f00 	ldrex	r3, [r3]
 80081fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008202:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	461a      	mov	r2, r3
 800820a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800820c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800820e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008210:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008214:	e841 2300 	strex	r3, r2, [r1]
 8008218:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800821a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e6      	bne.n	80081ee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008224:	2b01      	cmp	r3, #1
 8008226:	d12e      	bne.n	8008286 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	e853 3f00 	ldrex	r3, [r3]
 800823a:	60bb      	str	r3, [r7, #8]
   return(result);
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f023 0310 	bic.w	r3, r3, #16
 8008242:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	461a      	mov	r2, r3
 800824a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800824c:	61bb      	str	r3, [r7, #24]
 800824e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008250:	6979      	ldr	r1, [r7, #20]
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	e841 2300 	strex	r3, r2, [r1]
 8008258:	613b      	str	r3, [r7, #16]
   return(result);
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e6      	bne.n	800822e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	f003 0310 	and.w	r3, r3, #16
 800826a:	2b10      	cmp	r3, #16
 800826c:	d103      	bne.n	8008276 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2210      	movs	r2, #16
 8008274:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800827c:	4619      	mov	r1, r3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7ff f87a 	bl	8007378 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008284:	e00d      	b.n	80082a2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7f9 f822 	bl	80012d0 <HAL_UART_RxCpltCallback>
}
 800828c:	e009      	b.n	80082a2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	8b1b      	ldrh	r3, [r3, #24]
 8008294:	b29a      	uxth	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f042 0208 	orr.w	r2, r2, #8
 800829e:	b292      	uxth	r2, r2
 80082a0:	831a      	strh	r2, [r3, #24]
}
 80082a2:	bf00      	nop
 80082a4:	3770      	adds	r7, #112	@ 0x70
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	40008000 	.word	0x40008000

080082b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <memset>:
 80082c4:	4402      	add	r2, r0
 80082c6:	4603      	mov	r3, r0
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d100      	bne.n	80082ce <memset+0xa>
 80082cc:	4770      	bx	lr
 80082ce:	f803 1b01 	strb.w	r1, [r3], #1
 80082d2:	e7f9      	b.n	80082c8 <memset+0x4>

080082d4 <__libc_init_array>:
 80082d4:	b570      	push	{r4, r5, r6, lr}
 80082d6:	4d0d      	ldr	r5, [pc, #52]	@ (800830c <__libc_init_array+0x38>)
 80082d8:	4c0d      	ldr	r4, [pc, #52]	@ (8008310 <__libc_init_array+0x3c>)
 80082da:	1b64      	subs	r4, r4, r5
 80082dc:	10a4      	asrs	r4, r4, #2
 80082de:	2600      	movs	r6, #0
 80082e0:	42a6      	cmp	r6, r4
 80082e2:	d109      	bne.n	80082f8 <__libc_init_array+0x24>
 80082e4:	4d0b      	ldr	r5, [pc, #44]	@ (8008314 <__libc_init_array+0x40>)
 80082e6:	4c0c      	ldr	r4, [pc, #48]	@ (8008318 <__libc_init_array+0x44>)
 80082e8:	f000 f818 	bl	800831c <_init>
 80082ec:	1b64      	subs	r4, r4, r5
 80082ee:	10a4      	asrs	r4, r4, #2
 80082f0:	2600      	movs	r6, #0
 80082f2:	42a6      	cmp	r6, r4
 80082f4:	d105      	bne.n	8008302 <__libc_init_array+0x2e>
 80082f6:	bd70      	pop	{r4, r5, r6, pc}
 80082f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082fc:	4798      	blx	r3
 80082fe:	3601      	adds	r6, #1
 8008300:	e7ee      	b.n	80082e0 <__libc_init_array+0xc>
 8008302:	f855 3b04 	ldr.w	r3, [r5], #4
 8008306:	4798      	blx	r3
 8008308:	3601      	adds	r6, #1
 800830a:	e7f2      	b.n	80082f2 <__libc_init_array+0x1e>
 800830c:	08008384 	.word	0x08008384
 8008310:	08008384 	.word	0x08008384
 8008314:	08008384 	.word	0x08008384
 8008318:	08008388 	.word	0x08008388

0800831c <_init>:
 800831c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831e:	bf00      	nop
 8008320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008322:	bc08      	pop	{r3}
 8008324:	469e      	mov	lr, r3
 8008326:	4770      	bx	lr

08008328 <_fini>:
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832a:	bf00      	nop
 800832c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832e:	bc08      	pop	{r3}
 8008330:	469e      	mov	lr, r3
 8008332:	4770      	bx	lr
