
SCUTTLE_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a050  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800a1e0  0800a1e0  0000b1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a294  0800a294  0000c068  2**0
                  CONTENTS
  4 .ARM          00000008  0800a294  0800a294  0000b294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a29c  0800a29c  0000c068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a29c  0800a29c  0000b29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a2a0  0800a2a0  0000b2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800a2a4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  20000068  0800a30c  0000c068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  0800a30c  0000c66c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b2ad  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000361b  00000000  00000000  00027345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e0  00000000  00000000  0002a960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012af  00000000  00000000  0002c140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000047a3  00000000  00000000  0002d3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e79c  00000000  00000000  00031b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9b02  00000000  00000000  0005032e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149e30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e48  00000000  00000000  00149e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00150cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a1c8 	.word	0x0800a1c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800a1c8 	.word	0x0800a1c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2f>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000844:	bf24      	itt	cs
 8000846:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800084a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800084e:	d90d      	bls.n	800086c <__aeabi_d2f+0x30>
 8000850:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000854:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000858:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800085c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000860:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000864:	bf08      	it	eq
 8000866:	f020 0001 	biceq.w	r0, r0, #1
 800086a:	4770      	bx	lr
 800086c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000870:	d121      	bne.n	80008b6 <__aeabi_d2f+0x7a>
 8000872:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000876:	bfbc      	itt	lt
 8000878:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800087c:	4770      	bxlt	lr
 800087e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000882:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000886:	f1c2 0218 	rsb	r2, r2, #24
 800088a:	f1c2 0c20 	rsb	ip, r2, #32
 800088e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000892:	fa20 f002 	lsr.w	r0, r0, r2
 8000896:	bf18      	it	ne
 8000898:	f040 0001 	orrne.w	r0, r0, #1
 800089c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008a8:	ea40 000c 	orr.w	r0, r0, ip
 80008ac:	fa23 f302 	lsr.w	r3, r3, r2
 80008b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b4:	e7cc      	b.n	8000850 <__aeabi_d2f+0x14>
 80008b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ba:	d107      	bne.n	80008cc <__aeabi_d2f+0x90>
 80008bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c0:	bf1e      	ittt	ne
 80008c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008ca:	4770      	bxne	lr
 80008cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295
 80008f0:	f000 b96a 	b.w	8000bc8 <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	460c      	mov	r4, r1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d14e      	bne.n	80009b6 <__udivmoddi4+0xaa>
 8000918:	4694      	mov	ip, r2
 800091a:	458c      	cmp	ip, r1
 800091c:	4686      	mov	lr, r0
 800091e:	fab2 f282 	clz	r2, r2
 8000922:	d962      	bls.n	80009ea <__udivmoddi4+0xde>
 8000924:	b14a      	cbz	r2, 800093a <__udivmoddi4+0x2e>
 8000926:	f1c2 0320 	rsb	r3, r2, #32
 800092a:	4091      	lsls	r1, r2
 800092c:	fa20 f303 	lsr.w	r3, r0, r3
 8000930:	fa0c fc02 	lsl.w	ip, ip, r2
 8000934:	4319      	orrs	r1, r3
 8000936:	fa00 fe02 	lsl.w	lr, r0, r2
 800093a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800093e:	fa1f f68c 	uxth.w	r6, ip
 8000942:	fbb1 f4f7 	udiv	r4, r1, r7
 8000946:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800094a:	fb07 1114 	mls	r1, r7, r4, r1
 800094e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000952:	fb04 f106 	mul.w	r1, r4, r6
 8000956:	4299      	cmp	r1, r3
 8000958:	d90a      	bls.n	8000970 <__udivmoddi4+0x64>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000962:	f080 8112 	bcs.w	8000b8a <__udivmoddi4+0x27e>
 8000966:	4299      	cmp	r1, r3
 8000968:	f240 810f 	bls.w	8000b8a <__udivmoddi4+0x27e>
 800096c:	3c02      	subs	r4, #2
 800096e:	4463      	add	r3, ip
 8000970:	1a59      	subs	r1, r3, r1
 8000972:	fa1f f38e 	uxth.w	r3, lr
 8000976:	fbb1 f0f7 	udiv	r0, r1, r7
 800097a:	fb07 1110 	mls	r1, r7, r0, r1
 800097e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000982:	fb00 f606 	mul.w	r6, r0, r6
 8000986:	429e      	cmp	r6, r3
 8000988:	d90a      	bls.n	80009a0 <__udivmoddi4+0x94>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000992:	f080 80fc 	bcs.w	8000b8e <__udivmoddi4+0x282>
 8000996:	429e      	cmp	r6, r3
 8000998:	f240 80f9 	bls.w	8000b8e <__udivmoddi4+0x282>
 800099c:	4463      	add	r3, ip
 800099e:	3802      	subs	r0, #2
 80009a0:	1b9b      	subs	r3, r3, r6
 80009a2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009a6:	2100      	movs	r1, #0
 80009a8:	b11d      	cbz	r5, 80009b2 <__udivmoddi4+0xa6>
 80009aa:	40d3      	lsrs	r3, r2
 80009ac:	2200      	movs	r2, #0
 80009ae:	e9c5 3200 	strd	r3, r2, [r5]
 80009b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b6:	428b      	cmp	r3, r1
 80009b8:	d905      	bls.n	80009c6 <__udivmoddi4+0xba>
 80009ba:	b10d      	cbz	r5, 80009c0 <__udivmoddi4+0xb4>
 80009bc:	e9c5 0100 	strd	r0, r1, [r5]
 80009c0:	2100      	movs	r1, #0
 80009c2:	4608      	mov	r0, r1
 80009c4:	e7f5      	b.n	80009b2 <__udivmoddi4+0xa6>
 80009c6:	fab3 f183 	clz	r1, r3
 80009ca:	2900      	cmp	r1, #0
 80009cc:	d146      	bne.n	8000a5c <__udivmoddi4+0x150>
 80009ce:	42a3      	cmp	r3, r4
 80009d0:	d302      	bcc.n	80009d8 <__udivmoddi4+0xcc>
 80009d2:	4290      	cmp	r0, r2
 80009d4:	f0c0 80f0 	bcc.w	8000bb8 <__udivmoddi4+0x2ac>
 80009d8:	1a86      	subs	r6, r0, r2
 80009da:	eb64 0303 	sbc.w	r3, r4, r3
 80009de:	2001      	movs	r0, #1
 80009e0:	2d00      	cmp	r5, #0
 80009e2:	d0e6      	beq.n	80009b2 <__udivmoddi4+0xa6>
 80009e4:	e9c5 6300 	strd	r6, r3, [r5]
 80009e8:	e7e3      	b.n	80009b2 <__udivmoddi4+0xa6>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	f040 8090 	bne.w	8000b10 <__udivmoddi4+0x204>
 80009f0:	eba1 040c 	sub.w	r4, r1, ip
 80009f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	2101      	movs	r1, #1
 80009fe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a06:	fb08 4416 	mls	r4, r8, r6, r4
 8000a0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a0e:	fb07 f006 	mul.w	r0, r7, r6
 8000a12:	4298      	cmp	r0, r3
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x11c>
 8000a16:	eb1c 0303 	adds.w	r3, ip, r3
 8000a1a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x11a>
 8000a20:	4298      	cmp	r0, r3
 8000a22:	f200 80cd 	bhi.w	8000bc0 <__udivmoddi4+0x2b4>
 8000a26:	4626      	mov	r6, r4
 8000a28:	1a1c      	subs	r4, r3, r0
 8000a2a:	fa1f f38e 	uxth.w	r3, lr
 8000a2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a32:	fb08 4410 	mls	r4, r8, r0, r4
 8000a36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a3a:	fb00 f707 	mul.w	r7, r0, r7
 8000a3e:	429f      	cmp	r7, r3
 8000a40:	d908      	bls.n	8000a54 <__udivmoddi4+0x148>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a4a:	d202      	bcs.n	8000a52 <__udivmoddi4+0x146>
 8000a4c:	429f      	cmp	r7, r3
 8000a4e:	f200 80b0 	bhi.w	8000bb2 <__udivmoddi4+0x2a6>
 8000a52:	4620      	mov	r0, r4
 8000a54:	1bdb      	subs	r3, r3, r7
 8000a56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a5a:	e7a5      	b.n	80009a8 <__udivmoddi4+0x9c>
 8000a5c:	f1c1 0620 	rsb	r6, r1, #32
 8000a60:	408b      	lsls	r3, r1
 8000a62:	fa22 f706 	lsr.w	r7, r2, r6
 8000a66:	431f      	orrs	r7, r3
 8000a68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a70:	ea43 030c 	orr.w	r3, r3, ip
 8000a74:	40f4      	lsrs	r4, r6
 8000a76:	fa00 f801 	lsl.w	r8, r0, r1
 8000a7a:	0c38      	lsrs	r0, r7, #16
 8000a7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a80:	fbb4 fef0 	udiv	lr, r4, r0
 8000a84:	fa1f fc87 	uxth.w	ip, r7
 8000a88:	fb00 441e 	mls	r4, r0, lr, r4
 8000a8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a90:	fb0e f90c 	mul.w	r9, lr, ip
 8000a94:	45a1      	cmp	r9, r4
 8000a96:	fa02 f201 	lsl.w	r2, r2, r1
 8000a9a:	d90a      	bls.n	8000ab2 <__udivmoddi4+0x1a6>
 8000a9c:	193c      	adds	r4, r7, r4
 8000a9e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000aa2:	f080 8084 	bcs.w	8000bae <__udivmoddi4+0x2a2>
 8000aa6:	45a1      	cmp	r9, r4
 8000aa8:	f240 8081 	bls.w	8000bae <__udivmoddi4+0x2a2>
 8000aac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ab0:	443c      	add	r4, r7
 8000ab2:	eba4 0409 	sub.w	r4, r4, r9
 8000ab6:	fa1f f983 	uxth.w	r9, r3
 8000aba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000abe:	fb00 4413 	mls	r4, r0, r3, r4
 8000ac2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ac6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aca:	45a4      	cmp	ip, r4
 8000acc:	d907      	bls.n	8000ade <__udivmoddi4+0x1d2>
 8000ace:	193c      	adds	r4, r7, r4
 8000ad0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ad4:	d267      	bcs.n	8000ba6 <__udivmoddi4+0x29a>
 8000ad6:	45a4      	cmp	ip, r4
 8000ad8:	d965      	bls.n	8000ba6 <__udivmoddi4+0x29a>
 8000ada:	3b02      	subs	r3, #2
 8000adc:	443c      	add	r4, r7
 8000ade:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ae2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ae6:	eba4 040c 	sub.w	r4, r4, ip
 8000aea:	429c      	cmp	r4, r3
 8000aec:	46ce      	mov	lr, r9
 8000aee:	469c      	mov	ip, r3
 8000af0:	d351      	bcc.n	8000b96 <__udivmoddi4+0x28a>
 8000af2:	d04e      	beq.n	8000b92 <__udivmoddi4+0x286>
 8000af4:	b155      	cbz	r5, 8000b0c <__udivmoddi4+0x200>
 8000af6:	ebb8 030e 	subs.w	r3, r8, lr
 8000afa:	eb64 040c 	sbc.w	r4, r4, ip
 8000afe:	fa04 f606 	lsl.w	r6, r4, r6
 8000b02:	40cb      	lsrs	r3, r1
 8000b04:	431e      	orrs	r6, r3
 8000b06:	40cc      	lsrs	r4, r1
 8000b08:	e9c5 6400 	strd	r6, r4, [r5]
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	e750      	b.n	80009b2 <__udivmoddi4+0xa6>
 8000b10:	f1c2 0320 	rsb	r3, r2, #32
 8000b14:	fa20 f103 	lsr.w	r1, r0, r3
 8000b18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b20:	4094      	lsls	r4, r2
 8000b22:	430c      	orrs	r4, r1
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2c:	fa1f f78c 	uxth.w	r7, ip
 8000b30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b34:	fb08 3110 	mls	r1, r8, r0, r3
 8000b38:	0c23      	lsrs	r3, r4, #16
 8000b3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3e:	fb00 f107 	mul.w	r1, r0, r7
 8000b42:	4299      	cmp	r1, r3
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x24c>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b4e:	d22c      	bcs.n	8000baa <__udivmoddi4+0x29e>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	d92a      	bls.n	8000baa <__udivmoddi4+0x29e>
 8000b54:	3802      	subs	r0, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b60:	fb08 3311 	mls	r3, r8, r1, r3
 8000b64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b68:	fb01 f307 	mul.w	r3, r1, r7
 8000b6c:	42a3      	cmp	r3, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x276>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b78:	d213      	bcs.n	8000ba2 <__udivmoddi4+0x296>
 8000b7a:	42a3      	cmp	r3, r4
 8000b7c:	d911      	bls.n	8000ba2 <__udivmoddi4+0x296>
 8000b7e:	3902      	subs	r1, #2
 8000b80:	4464      	add	r4, ip
 8000b82:	1ae4      	subs	r4, r4, r3
 8000b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b88:	e739      	b.n	80009fe <__udivmoddi4+0xf2>
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	e6f0      	b.n	8000970 <__udivmoddi4+0x64>
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e706      	b.n	80009a0 <__udivmoddi4+0x94>
 8000b92:	45c8      	cmp	r8, r9
 8000b94:	d2ae      	bcs.n	8000af4 <__udivmoddi4+0x1e8>
 8000b96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b9e:	3801      	subs	r0, #1
 8000ba0:	e7a8      	b.n	8000af4 <__udivmoddi4+0x1e8>
 8000ba2:	4631      	mov	r1, r6
 8000ba4:	e7ed      	b.n	8000b82 <__udivmoddi4+0x276>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	e799      	b.n	8000ade <__udivmoddi4+0x1d2>
 8000baa:	4630      	mov	r0, r6
 8000bac:	e7d4      	b.n	8000b58 <__udivmoddi4+0x24c>
 8000bae:	46d6      	mov	lr, sl
 8000bb0:	e77f      	b.n	8000ab2 <__udivmoddi4+0x1a6>
 8000bb2:	4463      	add	r3, ip
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	e74d      	b.n	8000a54 <__udivmoddi4+0x148>
 8000bb8:	4606      	mov	r6, r0
 8000bba:	4623      	mov	r3, r4
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e70f      	b.n	80009e0 <__udivmoddi4+0xd4>
 8000bc0:	3e02      	subs	r6, #2
 8000bc2:	4463      	add	r3, ip
 8000bc4:	e730      	b.n	8000a28 <__udivmoddi4+0x11c>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_idiv0>:
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <read_encoder>:
 * @brief Read encoder value
 * @param[in] encoder A pointer to a structure (encoder_t) containing encoder-related data such as position, velocity, and the last counter value.
 * @param[in] htim A pointer to the timer handle used to read the counter value.
 * @details This function reads a timer setup in encoder mode and finds position and velocity, accounting for overflow and direction change.
 */
void read_encoder(encoder_t *encoder) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

	//initialize internal variables
    uint32_t current_counter = __HAL_TIM_GET_COUNTER(encoder->htim); //Inverted due to wiring
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bdc:	613b      	str	r3, [r7, #16]
    int32_t velocity_change;
    float delta_t;
    float current_tick = HAL_GetTick();
 8000bde:	f002 f8d3 	bl	8002d88 <HAL_GetTick>
 8000be2:	ee07 0a90 	vmov	s15, r0
 8000be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bea:	edc7 7a03 	vstr	s15, [r7, #12]

	// Calculate velocity change
	if (current_counter >= encoder->last_counter_value) {
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d305      	bcc.n	8000c04 <read_encoder+0x38>
		velocity_change = current_counter - encoder->last_counter_value; //Velocity has units of counts per timer tick
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	e014      	b.n	8000c2e <read_encoder+0x62>
	} else {
		velocity_change = __HAL_TIM_GET_AUTORELOAD(encoder->htim) - encoder->last_counter_value + current_counter;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	1ad2      	subs	r2, r2, r3
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	4413      	add	r3, r2
 8000c16:	617b      	str	r3, [r7, #20]
		if (!__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) { //If encoder is rotating in other direction
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 0310 	and.w	r3, r3, #16
 8000c24:	2b10      	cmp	r3, #16
 8000c26:	d002      	beq.n	8000c2e <read_encoder+0x62>
			velocity_change *= -1; // Invert for counting down mode
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	425b      	negs	r3, r3
 8000c2c:	617b      	str	r3, [r7, #20]
		}
	}
	// Update position and store last counter value
	encoder->position += velocity_change;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	441a      	add	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	609a      	str	r2, [r3, #8]
	encoder->last_counter_value = current_counter;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	60da      	str	r2, [r3, #12]

	delta_t = (current_tick > encoder->last_tick) ? ((current_tick - encoder->last_tick)/1000) : 1; //how much time(ms) elapsed since last run
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	ee07 3a90 	vmov	s15, r3
 8000c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c58:	dd0e      	ble.n	8000c78 <read_encoder+0xac>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	ee07 3a90 	vmov	s15, r3
 8000c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c66:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c6e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000cb8 <read_encoder+0xec>
 8000c72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c76:	e001      	b.n	8000c7c <read_encoder+0xb0>
 8000c78:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8000c7c:	edc7 7a02 	vstr	s15, [r7, #8]
    encoder->velocity = (int16_t)(velocity_change / delta_t); //units of encoder counts / s
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	ee07 3a90 	vmov	s15, r3
 8000c86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c8a:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c96:	ee17 3a90 	vmov	r3, s15
 8000c9a:	b21a      	sxth	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	809a      	strh	r2, [r3, #4]
    encoder->last_tick = current_tick;
 8000ca0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ca8:	ee17 2a90 	vmov	r2, s15
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	611a      	str	r2, [r3, #16]


}
 8000cb0:	bf00      	nop
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	447a0000 	.word	0x447a0000

08000cbc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cc4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000cc8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d013      	beq.n	8000cfc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000cd4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000cd8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000cdc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00b      	beq.n	8000cfc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ce4:	e000      	b.n	8000ce8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ce6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ce8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0f9      	beq.n	8000ce6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000cf2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000cfc:	687b      	ldr	r3, [r7, #4]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d0e:	b0c1      	sub	sp, #260	@ 0x104
 8000d10:	af3c      	add	r7, sp, #240	@ 0xf0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d12:	f001 ffd0 	bl	8002cb6 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d16:	f000 f8ef 	bl	8000ef8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d1a:	f000 f93c 	bl	8000f96 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1e:	f000 fea9 	bl	8001a74 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000d22:	f000 faf1 	bl	8001308 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000d26:	f000 f961 	bl	8000fec <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d2a:	f000 f9d5 	bl	80010d8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000d2e:	f000 fa47 	bl	80011c0 <MX_ADC3_Init>
  MX_TIM2_Init();
 8000d32:	f000 fbd9 	bl	80014e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d36:	f000 fc2b 	bl	8001590 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000d3a:	f000 fe67 	bl	8001a0c <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8000d3e:	f000 fc7d 	bl	800163c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000d42:	f000 fcd1 	bl	80016e8 <MX_TIM5_Init>
  MX_I2C2_Init();
 8000d46:	f000 fa9f 	bl	8001288 <MX_I2C2_Init>
  MX_TIM8_Init();
 8000d4a:	f000 fd2d 	bl	80017a8 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000d4e:	f000 fddf 	bl	8001910 <MX_TIM15_Init>
  MX_TIM17_Init();
 8000d52:	f000 fe35 	bl	80019c0 <MX_TIM17_Init>

  //Put timers in correct mode
  ;


  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8000d56:	2100      	movs	r1, #0
 8000d58:	4858      	ldr	r0, [pc, #352]	@ (8000ebc <main+0x1b0>)
 8000d5a:	f005 fabb 	bl	80062d4 <HAL_TIM_IC_Start_IT>
  //Set ADC in correct mode
  HAL_ADC_Start(&hadc1);
 8000d5e:	4858      	ldr	r0, [pc, #352]	@ (8000ec0 <main+0x1b4>)
 8000d60:	f002 fb30 	bl	80033c4 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000d64:	4857      	ldr	r0, [pc, #348]	@ (8000ec4 <main+0x1b8>)
 8000d66:	f002 fb2d 	bl	80033c4 <HAL_ADC_Start>
  //hadc1.Init.EOCSelection = DISABLE; //Apparently important
  //hadc2.Init.EOCSelection = DISABLE; //Apparently important
  HAL_ADC_Start(&hadc3);
 8000d6a:	4857      	ldr	r0, [pc, #348]	@ (8000ec8 <main+0x1bc>)
 8000d6c:	f002 fb2a 	bl	80033c4 <HAL_ADC_Start>
  //hadc3.Init.EOCSelection = DISABLE; //Apparently important


	// Start PWM for motor 1 and motor 2 channels
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d70:	2100      	movs	r1, #0
 8000d72:	4856      	ldr	r0, [pc, #344]	@ (8000ecc <main+0x1c0>)
 8000d74:	f005 f950 	bl	8006018 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000d78:	2104      	movs	r1, #4
 8000d7a:	4854      	ldr	r0, [pc, #336]	@ (8000ecc <main+0x1c0>)
 8000d7c:	f005 f94c 	bl	8006018 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000d80:	2108      	movs	r1, #8
 8000d82:	4852      	ldr	r0, [pc, #328]	@ (8000ecc <main+0x1c0>)
 8000d84:	f005 f948 	bl	8006018 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000d88:	210c      	movs	r1, #12
 8000d8a:	4850      	ldr	r0, [pc, #320]	@ (8000ecc <main+0x1c0>)
 8000d8c:	f005 f944 	bl	8006018 <HAL_TIM_PWM_Start>

  	// Enable motors 1 (PB1) and 2 (PB2)
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	f243 0106 	movw	r1, #12294	@ 0x3006
 8000d96:	484e      	ldr	r0, [pc, #312]	@ (8000ed0 <main+0x1c4>)
 8000d98:	f003 fc56 	bl	8004648 <HAL_GPIO_WritePin>

	// Start the encoders and enable interrupts
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000d9c:	213c      	movs	r1, #60	@ 0x3c
 8000d9e:	484d      	ldr	r0, [pc, #308]	@ (8000ed4 <main+0x1c8>)
 8000da0:	f005 fc88 	bl	80066b4 <HAL_TIM_Encoder_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8000da4:	4b4b      	ldr	r3, [pc, #300]	@ (8000ed4 <main+0x1c8>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2200      	movs	r2, #0
 8000daa:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000dac:	213c      	movs	r1, #60	@ 0x3c
 8000dae:	484a      	ldr	r0, [pc, #296]	@ (8000ed8 <main+0x1cc>)
 8000db0:	f005 fc80 	bl	80066b4 <HAL_TIM_Encoder_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim4,0);
 8000db4:	4b48      	ldr	r3, [pc, #288]	@ (8000ed8 <main+0x1cc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2200      	movs	r2, #0
 8000dba:	625a      	str	r2, [r3, #36]	@ 0x24




  uint8_t task = 0; //State variable for main loop
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73fb      	strb	r3, [r7, #15]
  uint8_t T1State = 0; //Task 1 State
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73bb      	strb	r3, [r7, #14]
  uint8_t T2State = 0; //Task 2 State
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	72bb      	strb	r3, [r7, #10]
  uint8_t T3State = 0; //Task 3 State
 8000dc8:	2300      	movs	r3, #0
 8000dca:	737b      	strb	r3, [r7, #13]
  uint8_t T4State = 0; //Task 4 State
 8000dcc:	2300      	movs	r3, #0
 8000dce:	733b      	strb	r3, [r7, #12]
  uint8_t T5State = 0; //Task 5 State
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	72fb      	strb	r3, [r7, #11]
  uint8_t T6State = 0; //Task 6 State
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	727b      	strb	r3, [r7, #9]

  //Set motors, metal detector, and camera to ON by default. Will turn off if battery too low or killswitch active
   uint8_t DriveON_Rad = 1; //Radio Drive ON
 8000dd8:	2301      	movs	r3, #1
 8000dda:	723b      	strb	r3, [r7, #8]
   uint8_t ArmON = 1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	71fb      	strb	r3, [r7, #7]

   uint8_t OpenMV = 1; //Camera Update On
 8000de0:	2301      	movs	r3, #1
 8000de2:	71bb      	strb	r3, [r7, #6]


   uint8_t Follow = 1; //Follow mode
 8000de4:	2301      	movs	r3, #1
 8000de6:	717b      	strb	r3, [r7, #5]



   //Set Kill switch to be off by default
   uint8_t BatKill = 0; //If Kill is 1 then turn everything off
 8000de8:	2300      	movs	r3, #0
 8000dea:	713b      	strb	r3, [r7, #4]
   uint8_t RadKill = 0; //Radio Kill switch
 8000dec:	2300      	movs	r3, #0
 8000dee:	70fb      	strb	r3, [r7, #3]

   HAL_UART_Receive_IT(&huart3, rx_buff, 8);
 8000df0:	2208      	movs	r2, #8
 8000df2:	493a      	ldr	r1, [pc, #232]	@ (8000edc <main+0x1d0>)
 8000df4:	483a      	ldr	r0, [pc, #232]	@ (8000ee0 <main+0x1d4>)
 8000df6:	f006 ffb9 	bl	8007d6c <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  //Run FSM
	  switch(task){
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	2b06      	cmp	r3, #6
 8000dfe:	d8fc      	bhi.n	8000dfa <main+0xee>
 8000e00:	a201      	add	r2, pc, #4	@ (adr r2, 8000e08 <main+0xfc>)
 8000e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e06:	bf00      	nop
 8000e08:	08000e25 	.word	0x08000e25
 8000e0c:	08000e2b 	.word	0x08000e2b
 8000e10:	08000e31 	.word	0x08000e31
 8000e14:	08000e57 	.word	0x08000e57
 8000e18:	08000e5d 	.word	0x08000e5d
 8000e1c:	08000e63 	.word	0x08000e63
 8000e20:	08000e69 	.word	0x08000e69

	  case 0: //State 0
		  //State 0: INIT
		  //Do not make file for this, just Initialize as necessary
		  task = 1;
 8000e24:	2301      	movs	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
		  break;
 8000e28:	e046      	b.n	8000eb8 <main+0x1ac>

	  case 1: //State 1
		  //State 1: Diagnostics
		  //Check battery and shut off if necessary
		  //task1_run(&T1State, hadc2,&BatKill);
		  task = 2;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	73fb      	strb	r3, [r7, #15]
		  break;
 8000e2e:	e043      	b.n	8000eb8 <main+0x1ac>

	  case 2: //State 2
		  //State 2: Radio
		  //Check killswitches and radio, act accordingly
		  task2_run(&T2State,&BatKill,&RadKill,&usWidth,&DriveON_Rad,&ArmON,&MDON,&OpenMV);
 8000e30:	1cfa      	adds	r2, r7, #3
 8000e32:	1d39      	adds	r1, r7, #4
 8000e34:	f107 000a 	add.w	r0, r7, #10
 8000e38:	1dbb      	adds	r3, r7, #6
 8000e3a:	9303      	str	r3, [sp, #12]
 8000e3c:	4b29      	ldr	r3, [pc, #164]	@ (8000ee4 <main+0x1d8>)
 8000e3e:	9302      	str	r3, [sp, #8]
 8000e40:	1dfb      	adds	r3, r7, #7
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	4b27      	ldr	r3, [pc, #156]	@ (8000ee8 <main+0x1dc>)
 8000e4c:	f001 fc78 	bl	8002740 <task2_run>
	  	  task = 3;
 8000e50:	2303      	movs	r3, #3
 8000e52:	73fb      	strb	r3, [r7, #15]
	  	  break;
 8000e54:	e030      	b.n	8000eb8 <main+0x1ac>

	  case 3: //State 3
		  //State 3: OpenMV Camera
	  	  //task3_run(&T3State,&Distance_Target,&Angle_Target,&SPI_Rec,&Follow,&OpenMV, huart3);
		  task = 4;
 8000e56:	2304      	movs	r3, #4
 8000e58:	73fb      	strb	r3, [r7, #15]
	  	  break;
 8000e5a:	e02d      	b.n	8000eb8 <main+0x1ac>

	  case 4: //State 4
		  //State 4: Metal Detector
	  	  //task4_run(&T4State,&MDON,&sumval,htim17,&Metal_Found, hadc1, hadc2, hadc3);
	  	  task = 5;
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	73fb      	strb	r3, [r7, #15]
	  	  break;
 8000e60:	e02a      	b.n	8000eb8 <main+0x1ac>

	  case 5: //State 5
		  //State 5: Arm Motor
	  	  //task5_run(&T5State,&ArmON,&Metal_Found,htim17,&sumval);
	  	  task = 6;
 8000e62:	2306      	movs	r3, #6
 8000e64:	73fb      	strb	r3, [r7, #15]
	  	  break;
 8000e66:	e027      	b.n	8000eb8 <main+0x1ac>

	  case 6: //State 6
		  //State 6:
	  	  //Insert State 6 class here
		  task6_run(&T6State, &Metal_Found, &DriveON_Rad, &Follow,&Distance_Target,&Angle_Target,htim1,htim3,htim4);
 8000e68:	1d7e      	adds	r6, r7, #5
 8000e6a:	f107 0508 	add.w	r5, r7, #8
 8000e6e:	f107 0409 	add.w	r4, r7, #9
 8000e72:	4a19      	ldr	r2, [pc, #100]	@ (8000ed8 <main+0x1cc>)
 8000e74:	ab28      	add	r3, sp, #160	@ 0xa0
 8000e76:	4611      	mov	r1, r2
 8000e78:	224c      	movs	r2, #76	@ 0x4c
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f008 fbf9 	bl	8009672 <memcpy>
 8000e80:	4a14      	ldr	r2, [pc, #80]	@ (8000ed4 <main+0x1c8>)
 8000e82:	ab15      	add	r3, sp, #84	@ 0x54
 8000e84:	4611      	mov	r1, r2
 8000e86:	224c      	movs	r2, #76	@ 0x4c
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f008 fbf2 	bl	8009672 <memcpy>
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ecc <main+0x1c0>)
 8000e90:	ab02      	add	r3, sp, #8
 8000e92:	4611      	mov	r1, r2
 8000e94:	224c      	movs	r2, #76	@ 0x4c
 8000e96:	4618      	mov	r0, r3
 8000e98:	f008 fbeb 	bl	8009672 <memcpy>
 8000e9c:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <main+0x1e0>)
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <main+0x1e4>)
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	4633      	mov	r3, r6
 8000ea6:	462a      	mov	r2, r5
 8000ea8:	4912      	ldr	r1, [pc, #72]	@ (8000ef4 <main+0x1e8>)
 8000eaa:	4620      	mov	r0, r4
 8000eac:	f001 fca8 	bl	8002800 <task6_run>
	  	  task = 1; //Do not go back to init
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	73fb      	strb	r3, [r7, #15]
	  	  break;
 8000eb4:	bf00      	nop
 8000eb6:	e7a0      	b.n	8000dfa <main+0xee>
	  switch(task){
 8000eb8:	e79f      	b.n	8000dfa <main+0xee>
 8000eba:	bf00      	nop
 8000ebc:	200003cc 	.word	0x200003cc
 8000ec0:	20000084 	.word	0x20000084
 8000ec4:	200000e8 	.word	0x200000e8
 8000ec8:	2000014c 	.word	0x2000014c
 8000ecc:	20000204 	.word	0x20000204
 8000ed0:	48000400 	.word	0x48000400
 8000ed4:	2000029c 	.word	0x2000029c
 8000ed8:	200002e8 	.word	0x200002e8
 8000edc:	2000050c 	.word	0x2000050c
 8000ee0:	20000464 	.word	0x20000464
 8000ee4:	20000500 	.word	0x20000500
 8000ee8:	200004ec 	.word	0x200004ec
 8000eec:	20000508 	.word	0x20000508
 8000ef0:	20000504 	.word	0x20000504
 8000ef4:	20000501 	.word	0x20000501

08000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b096      	sub	sp, #88	@ 0x58
 8000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	2244      	movs	r2, #68	@ 0x44
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f008 fb37 	bl	800957a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f1a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f1e:	f003 fceb 	bl	80048f8 <HAL_PWREx_ControlVoltageScaling>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f28:	f000 fede 	bl	8001ce8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f36:	2302      	movs	r3, #2
 8000f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000f3e:	2305      	movs	r3, #5
 8000f40:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000f42:	2320      	movs	r3, #32
 8000f44:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f46:	2307      	movs	r3, #7
 8000f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 fd24 	bl	80049a4 <HAL_RCC_OscConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f62:	f000 fec1 	bl	8001ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f66:	230f      	movs	r3, #15
 8000f68:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f004 f8ec 	bl	800515c <HAL_RCC_ClockConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f8a:	f000 fead 	bl	8001ce8 <Error_Handler>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3758      	adds	r7, #88	@ 0x58
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b0a2      	sub	sp, #136	@ 0x88
 8000f9a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2284      	movs	r2, #132	@ 0x84
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f008 fae9 	bl	800957a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fa8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fb2:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000fb8:	2305      	movs	r3, #5
 8000fba:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000fbc:	2318      	movs	r3, #24
 8000fbe:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000fd0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f004 fae5 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000fe0:	f000 fe82 	bl	8001ce8 <Error_Handler>
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3788      	adds	r7, #136	@ 0x88
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	@ 0x28
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800100e:	4b2f      	ldr	r3, [pc, #188]	@ (80010cc <MX_ADC1_Init+0xe0>)
 8001010:	4a2f      	ldr	r2, [pc, #188]	@ (80010d0 <MX_ADC1_Init+0xe4>)
 8001012:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001014:	4b2d      	ldr	r3, [pc, #180]	@ (80010cc <MX_ADC1_Init+0xe0>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800101a:	4b2c      	ldr	r3, [pc, #176]	@ (80010cc <MX_ADC1_Init+0xe0>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001020:	4b2a      	ldr	r3, [pc, #168]	@ (80010cc <MX_ADC1_Init+0xe0>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001026:	4b29      	ldr	r3, [pc, #164]	@ (80010cc <MX_ADC1_Init+0xe0>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800102c:	4b27      	ldr	r3, [pc, #156]	@ (80010cc <MX_ADC1_Init+0xe0>)
 800102e:	2204      	movs	r2, #4
 8001030:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001032:	4b26      	ldr	r3, [pc, #152]	@ (80010cc <MX_ADC1_Init+0xe0>)
 8001034:	2200      	movs	r2, #0
 8001036:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001038:	4b24      	ldr	r3, [pc, #144]	@ (80010cc <MX_ADC1_Init+0xe0>)
 800103a:	2200      	movs	r2, #0
 800103c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800103e:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <MX_ADC1_Init+0xe0>)
 8001040:	2201      	movs	r2, #1
 8001042:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001044:	4b21      	ldr	r3, [pc, #132]	@ (80010cc <MX_ADC1_Init+0xe0>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104c:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <MX_ADC1_Init+0xe0>)
 800104e:	2200      	movs	r2, #0
 8001050:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001052:	4b1e      	ldr	r3, [pc, #120]	@ (80010cc <MX_ADC1_Init+0xe0>)
 8001054:	2200      	movs	r2, #0
 8001056:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001058:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <MX_ADC1_Init+0xe0>)
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001060:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <MX_ADC1_Init+0xe0>)
 8001062:	2200      	movs	r2, #0
 8001064:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001066:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <MX_ADC1_Init+0xe0>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106e:	4817      	ldr	r0, [pc, #92]	@ (80010cc <MX_ADC1_Init+0xe0>)
 8001070:	f002 f858 	bl	8003124 <HAL_ADC_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800107a:	f000 fe35 	bl	8001ce8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	4810      	ldr	r0, [pc, #64]	@ (80010cc <MX_ADC1_Init+0xe0>)
 800108a:	f002 fef3 	bl	8003e74 <HAL_ADCEx_MultiModeConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001094:	f000 fe28 	bl	8001ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001098:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <MX_ADC1_Init+0xe8>)
 800109a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800109c:	2306      	movs	r3, #6
 800109e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010a4:	237f      	movs	r3, #127	@ 0x7f
 80010a6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010a8:	2304      	movs	r3, #4
 80010aa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	@ (80010cc <MX_ADC1_Init+0xe0>)
 80010b6:	f002 fa3f 	bl	8003538 <HAL_ADC_ConfigChannel>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80010c0:	f000 fe12 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	@ 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000084 	.word	0x20000084
 80010d0:	50040000 	.word	0x50040000
 80010d4:	04300002 	.word	0x04300002

080010d8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010de:	463b      	mov	r3, r7
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
 80010ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010ee:	4b30      	ldr	r3, [pc, #192]	@ (80011b0 <MX_ADC2_Init+0xd8>)
 80010f0:	4a30      	ldr	r2, [pc, #192]	@ (80011b4 <MX_ADC2_Init+0xdc>)
 80010f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010f4:	4b2e      	ldr	r3, [pc, #184]	@ (80011b0 <MX_ADC2_Init+0xd8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010fa:	4b2d      	ldr	r3, [pc, #180]	@ (80011b0 <MX_ADC2_Init+0xd8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001100:	4b2b      	ldr	r3, [pc, #172]	@ (80011b0 <MX_ADC2_Init+0xd8>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001106:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <MX_ADC2_Init+0xd8>)
 8001108:	2201      	movs	r2, #1
 800110a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800110c:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <MX_ADC2_Init+0xd8>)
 800110e:	2204      	movs	r2, #4
 8001110:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001112:	4b27      	ldr	r3, [pc, #156]	@ (80011b0 <MX_ADC2_Init+0xd8>)
 8001114:	2200      	movs	r2, #0
 8001116:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001118:	4b25      	ldr	r3, [pc, #148]	@ (80011b0 <MX_ADC2_Init+0xd8>)
 800111a:	2200      	movs	r2, #0
 800111c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 2;
 800111e:	4b24      	ldr	r3, [pc, #144]	@ (80011b0 <MX_ADC2_Init+0xd8>)
 8001120:	2202      	movs	r2, #2
 8001122:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001124:	4b22      	ldr	r3, [pc, #136]	@ (80011b0 <MX_ADC2_Init+0xd8>)
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800112c:	4b20      	ldr	r3, [pc, #128]	@ (80011b0 <MX_ADC2_Init+0xd8>)
 800112e:	2200      	movs	r2, #0
 8001130:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <MX_ADC2_Init+0xd8>)
 8001134:	2200      	movs	r2, #0
 8001136:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001138:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <MX_ADC2_Init+0xd8>)
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001140:	4b1b      	ldr	r3, [pc, #108]	@ (80011b0 <MX_ADC2_Init+0xd8>)
 8001142:	2200      	movs	r2, #0
 8001144:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001146:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <MX_ADC2_Init+0xd8>)
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800114e:	4818      	ldr	r0, [pc, #96]	@ (80011b0 <MX_ADC2_Init+0xd8>)
 8001150:	f001 ffe8 	bl	8003124 <HAL_ADC_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800115a:	f000 fdc5 	bl	8001ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800115e:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <MX_ADC2_Init+0xe0>)
 8001160:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001162:	2306      	movs	r3, #6
 8001164:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800116a:	237f      	movs	r3, #127	@ 0x7f
 800116c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800116e:	2304      	movs	r3, #4
 8001170:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001176:	463b      	mov	r3, r7
 8001178:	4619      	mov	r1, r3
 800117a:	480d      	ldr	r0, [pc, #52]	@ (80011b0 <MX_ADC2_Init+0xd8>)
 800117c:	f002 f9dc 	bl	8003538 <HAL_ADC_ConfigChannel>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8001186:	f000 fdaf 	bl	8001ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800118a:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <MX_ADC2_Init+0xe4>)
 800118c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800118e:	230c      	movs	r3, #12
 8001190:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001192:	463b      	mov	r3, r7
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	@ (80011b0 <MX_ADC2_Init+0xd8>)
 8001198:	f002 f9ce 	bl	8003538 <HAL_ADC_ConfigChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 80011a2:	f000 fda1 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200000e8 	.word	0x200000e8
 80011b4:	50040100 	.word	0x50040100
 80011b8:	08600004 	.word	0x08600004
 80011bc:	3ef08000 	.word	0x3ef08000

080011c0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011c6:	463b      	mov	r3, r7
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
 80011d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80011d6:	4b29      	ldr	r3, [pc, #164]	@ (800127c <MX_ADC3_Init+0xbc>)
 80011d8:	4a29      	ldr	r2, [pc, #164]	@ (8001280 <MX_ADC3_Init+0xc0>)
 80011da:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011dc:	4b27      	ldr	r3, [pc, #156]	@ (800127c <MX_ADC3_Init+0xbc>)
 80011de:	2200      	movs	r2, #0
 80011e0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011e2:	4b26      	ldr	r3, [pc, #152]	@ (800127c <MX_ADC3_Init+0xbc>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e8:	4b24      	ldr	r3, [pc, #144]	@ (800127c <MX_ADC3_Init+0xbc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ee:	4b23      	ldr	r3, [pc, #140]	@ (800127c <MX_ADC3_Init+0xbc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f4:	4b21      	ldr	r3, [pc, #132]	@ (800127c <MX_ADC3_Init+0xbc>)
 80011f6:	2204      	movs	r2, #4
 80011f8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80011fa:	4b20      	ldr	r3, [pc, #128]	@ (800127c <MX_ADC3_Init+0xbc>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001200:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <MX_ADC3_Init+0xbc>)
 8001202:	2200      	movs	r2, #0
 8001204:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001206:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <MX_ADC3_Init+0xbc>)
 8001208:	2201      	movs	r2, #1
 800120a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800120c:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <MX_ADC3_Init+0xbc>)
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001214:	4b19      	ldr	r3, [pc, #100]	@ (800127c <MX_ADC3_Init+0xbc>)
 8001216:	2200      	movs	r2, #0
 8001218:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800121a:	4b18      	ldr	r3, [pc, #96]	@ (800127c <MX_ADC3_Init+0xbc>)
 800121c:	2200      	movs	r2, #0
 800121e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001220:	4b16      	ldr	r3, [pc, #88]	@ (800127c <MX_ADC3_Init+0xbc>)
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001228:	4b14      	ldr	r3, [pc, #80]	@ (800127c <MX_ADC3_Init+0xbc>)
 800122a:	2200      	movs	r2, #0
 800122c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800122e:	4b13      	ldr	r3, [pc, #76]	@ (800127c <MX_ADC3_Init+0xbc>)
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001236:	4811      	ldr	r0, [pc, #68]	@ (800127c <MX_ADC3_Init+0xbc>)
 8001238:	f001 ff74 	bl	8003124 <HAL_ADC_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001242:	f000 fd51 	bl	8001ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001246:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <MX_ADC3_Init+0xc4>)
 8001248:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800124a:	2306      	movs	r3, #6
 800124c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001252:	237f      	movs	r3, #127	@ 0x7f
 8001254:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001256:	2304      	movs	r3, #4
 8001258:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	@ (800127c <MX_ADC3_Init+0xbc>)
 8001264:	f002 f968 	bl	8003538 <HAL_ADC_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800126e:	f000 fd3b 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000014c 	.word	0x2000014c
 8001280:	50040200 	.word	0x50040200
 8001284:	0c900008 	.word	0x0c900008

08001288 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800128c:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <MX_I2C2_Init+0x74>)
 800128e:	4a1c      	ldr	r2, [pc, #112]	@ (8001300 <MX_I2C2_Init+0x78>)
 8001290:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001292:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <MX_I2C2_Init+0x74>)
 8001294:	4a1b      	ldr	r2, [pc, #108]	@ (8001304 <MX_I2C2_Init+0x7c>)
 8001296:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001298:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <MX_I2C2_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800129e:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <MX_I2C2_Init+0x74>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a4:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <MX_I2C2_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012aa:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <MX_I2C2_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <MX_I2C2_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012b6:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <MX_I2C2_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <MX_I2C2_Init+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012c2:	480e      	ldr	r0, [pc, #56]	@ (80012fc <MX_I2C2_Init+0x74>)
 80012c4:	f003 f9d8 	bl	8004678 <HAL_I2C_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012ce:	f000 fd0b 	bl	8001ce8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012d2:	2100      	movs	r1, #0
 80012d4:	4809      	ldr	r0, [pc, #36]	@ (80012fc <MX_I2C2_Init+0x74>)
 80012d6:	f003 fa6a 	bl	80047ae <HAL_I2CEx_ConfigAnalogFilter>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012e0:	f000 fd02 	bl	8001ce8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012e4:	2100      	movs	r1, #0
 80012e6:	4805      	ldr	r0, [pc, #20]	@ (80012fc <MX_I2C2_Init+0x74>)
 80012e8:	f003 faac 	bl	8004844 <HAL_I2CEx_ConfigDigitalFilter>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012f2:	f000 fcf9 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200001b0 	.word	0x200001b0
 8001300:	40005800 	.word	0x40005800
 8001304:	10909cec 	.word	0x10909cec

08001308 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b09a      	sub	sp, #104	@ 0x68
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001328:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
 8001338:	615a      	str	r2, [r3, #20]
 800133a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	222c      	movs	r2, #44	@ 0x2c
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f008 f919 	bl	800957a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001348:	4b65      	ldr	r3, [pc, #404]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 800134a:	4a66      	ldr	r2, [pc, #408]	@ (80014e4 <MX_TIM1_Init+0x1dc>)
 800134c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800134e:	4b64      	ldr	r3, [pc, #400]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 8001350:	2200      	movs	r2, #0
 8001352:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	4b62      	ldr	r3, [pc, #392]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 800135a:	4b61      	ldr	r3, [pc, #388]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 800135c:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001360:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001362:	4b5f      	ldr	r3, [pc, #380]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001368:	4b5d      	ldr	r3, [pc, #372]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b5c      	ldr	r3, [pc, #368]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001374:	485a      	ldr	r0, [pc, #360]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 8001376:	f004 fda1 	bl	8005ebc <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001380:	f000 fcb2 	bl	8001ce8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001384:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001388:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800138a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800138e:	4619      	mov	r1, r3
 8001390:	4853      	ldr	r0, [pc, #332]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 8001392:	f005 fcef 	bl	8006d74 <HAL_TIM_ConfigClockSource>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800139c:	f000 fca4 	bl	8001ce8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013a0:	484f      	ldr	r0, [pc, #316]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 80013a2:	f004 fde2 	bl	8005f6a <HAL_TIM_PWM_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013ac:	f000 fc9c 	bl	8001ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013bc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80013c0:	4619      	mov	r1, r3
 80013c2:	4847      	ldr	r0, [pc, #284]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 80013c4:	f006 fb60 	bl	8007a88 <HAL_TIMEx_MasterConfigSynchronization>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80013ce:	f000 fc8b 	bl	8001ce8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d2:	2360      	movs	r3, #96	@ 0x60
 80013d4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013da:	2300      	movs	r3, #0
 80013dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013de:	2300      	movs	r3, #0
 80013e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013f2:	2200      	movs	r2, #0
 80013f4:	4619      	mov	r1, r3
 80013f6:	483a      	ldr	r0, [pc, #232]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 80013f8:	f005 fba8 	bl	8006b4c <HAL_TIM_PWM_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001402:	f000 fc71 	bl	8001ce8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8001406:	4b36      	ldr	r3, [pc, #216]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	699a      	ldr	r2, [r3, #24]
 800140c:	4b34      	ldr	r3, [pc, #208]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0208 	bic.w	r2, r2, #8
 8001414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001416:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800141a:	2204      	movs	r2, #4
 800141c:	4619      	mov	r1, r3
 800141e:	4830      	ldr	r0, [pc, #192]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 8001420:	f005 fb94 	bl	8006b4c <HAL_TIM_PWM_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800142a:	f000 fc5d 	bl	8001ce8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 800142e:	4b2c      	ldr	r3, [pc, #176]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	699a      	ldr	r2, [r3, #24]
 8001434:	4b2a      	ldr	r3, [pc, #168]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800143c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800143e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001442:	2208      	movs	r2, #8
 8001444:	4619      	mov	r1, r3
 8001446:	4826      	ldr	r0, [pc, #152]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 8001448:	f005 fb80 	bl	8006b4c <HAL_TIM_PWM_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8001452:	f000 fc49 	bl	8001ce8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 8001456:	4b22      	ldr	r3, [pc, #136]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	69da      	ldr	r2, [r3, #28]
 800145c:	4b20      	ldr	r3, [pc, #128]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0208 	bic.w	r2, r2, #8
 8001464:	61da      	str	r2, [r3, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001466:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800146a:	220c      	movs	r2, #12
 800146c:	4619      	mov	r1, r3
 800146e:	481c      	ldr	r0, [pc, #112]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 8001470:	f005 fb6c 	bl	8006b4c <HAL_TIM_PWM_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 800147a:	f000 fc35 	bl	8001ce8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 800147e:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	69da      	ldr	r2, [r3, #28]
 8001484:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800148c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	4807      	ldr	r0, [pc, #28]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 80014c4:	f006 fb68 	bl	8007b98 <HAL_TIMEx_ConfigBreakDeadTime>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM1_Init+0x1ca>
  {
    Error_Handler();
 80014ce:	f000 fc0b 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014d2:	4803      	ldr	r0, [pc, #12]	@ (80014e0 <MX_TIM1_Init+0x1d8>)
 80014d4:	f000 ff88 	bl	80023e8 <HAL_TIM_MspPostInit>

}
 80014d8:	bf00      	nop
 80014da:	3768      	adds	r7, #104	@ 0x68
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000204 	.word	0x20000204
 80014e4:	40012c00 	.word	0x40012c00

080014e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	@ 0x30
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	2224      	movs	r2, #36	@ 0x24
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f008 f83f 	bl	800957a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	463b      	mov	r3, r7
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001506:	4b21      	ldr	r3, [pc, #132]	@ (800158c <MX_TIM2_Init+0xa4>)
 8001508:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800150c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800150e:	4b1f      	ldr	r3, [pc, #124]	@ (800158c <MX_TIM2_Init+0xa4>)
 8001510:	2200      	movs	r2, #0
 8001512:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001514:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <MX_TIM2_Init+0xa4>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800151a:	4b1c      	ldr	r3, [pc, #112]	@ (800158c <MX_TIM2_Init+0xa4>)
 800151c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001520:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001522:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <MX_TIM2_Init+0xa4>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001528:	4b18      	ldr	r3, [pc, #96]	@ (800158c <MX_TIM2_Init+0xa4>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800152e:	2301      	movs	r3, #1
 8001530:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001536:	2301      	movs	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001546:	2301      	movs	r3, #1
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4619      	mov	r1, r3
 8001558:	480c      	ldr	r0, [pc, #48]	@ (800158c <MX_TIM2_Init+0xa4>)
 800155a:	f005 f805 	bl	8006568 <HAL_TIM_Encoder_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001564:	f000 fbc0 	bl	8001ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001570:	463b      	mov	r3, r7
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_TIM2_Init+0xa4>)
 8001576:	f006 fa87 	bl	8007a88 <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001580:	f000 fbb2 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3730      	adds	r7, #48	@ 0x30
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000250 	.word	0x20000250

08001590 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08c      	sub	sp, #48	@ 0x30
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	2224      	movs	r2, #36	@ 0x24
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f007 ffeb 	bl	800957a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a4:	463b      	mov	r3, r7
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015ae:	4b21      	ldr	r3, [pc, #132]	@ (8001634 <MX_TIM3_Init+0xa4>)
 80015b0:	4a21      	ldr	r2, [pc, #132]	@ (8001638 <MX_TIM3_Init+0xa8>)
 80015b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001634 <MX_TIM3_Init+0xa4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <MX_TIM3_Init+0xa4>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <MX_TIM3_Init+0xa4>)
 80015c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <MX_TIM3_Init+0xa4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <MX_TIM3_Init+0xa4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015d4:	2301      	movs	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015dc:	2301      	movs	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015ec:	2301      	movs	r3, #1
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	4619      	mov	r1, r3
 80015fe:	480d      	ldr	r0, [pc, #52]	@ (8001634 <MX_TIM3_Init+0xa4>)
 8001600:	f004 ffb2 	bl	8006568 <HAL_TIM_Encoder_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800160a:	f000 fb6d 	bl	8001ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001616:	463b      	mov	r3, r7
 8001618:	4619      	mov	r1, r3
 800161a:	4806      	ldr	r0, [pc, #24]	@ (8001634 <MX_TIM3_Init+0xa4>)
 800161c:	f006 fa34 	bl	8007a88 <HAL_TIMEx_MasterConfigSynchronization>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001626:	f000 fb5f 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	3730      	adds	r7, #48	@ 0x30
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000029c 	.word	0x2000029c
 8001638:	40000400 	.word	0x40000400

0800163c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	@ 0x30
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	2224      	movs	r2, #36	@ 0x24
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f007 ff95 	bl	800957a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001650:	463b      	mov	r3, r7
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800165a:	4b21      	ldr	r3, [pc, #132]	@ (80016e0 <MX_TIM4_Init+0xa4>)
 800165c:	4a21      	ldr	r2, [pc, #132]	@ (80016e4 <MX_TIM4_Init+0xa8>)
 800165e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001660:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <MX_TIM4_Init+0xa4>)
 8001662:	2200      	movs	r2, #0
 8001664:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001666:	4b1e      	ldr	r3, [pc, #120]	@ (80016e0 <MX_TIM4_Init+0xa4>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800166c:	4b1c      	ldr	r3, [pc, #112]	@ (80016e0 <MX_TIM4_Init+0xa4>)
 800166e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001672:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001674:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <MX_TIM4_Init+0xa4>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167a:	4b19      	ldr	r3, [pc, #100]	@ (80016e0 <MX_TIM4_Init+0xa4>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001680:	2301      	movs	r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001684:	2300      	movs	r3, #0
 8001686:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001688:	2301      	movs	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001698:	2301      	movs	r3, #1
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800169c:	2300      	movs	r3, #0
 800169e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	4619      	mov	r1, r3
 80016aa:	480d      	ldr	r0, [pc, #52]	@ (80016e0 <MX_TIM4_Init+0xa4>)
 80016ac:	f004 ff5c 	bl	8006568 <HAL_TIM_Encoder_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80016b6:	f000 fb17 	bl	8001ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016c2:	463b      	mov	r3, r7
 80016c4:	4619      	mov	r1, r3
 80016c6:	4806      	ldr	r0, [pc, #24]	@ (80016e0 <MX_TIM4_Init+0xa4>)
 80016c8:	f006 f9de 	bl	8007a88 <HAL_TIMEx_MasterConfigSynchronization>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80016d2:	f000 fb09 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	3730      	adds	r7, #48	@ 0x30
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200002e8 	.word	0x200002e8
 80016e4:	40000800 	.word	0x40000800

080016e8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001706:	4b26      	ldr	r3, [pc, #152]	@ (80017a0 <MX_TIM5_Init+0xb8>)
 8001708:	4a26      	ldr	r2, [pc, #152]	@ (80017a4 <MX_TIM5_Init+0xbc>)
 800170a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800170c:	4b24      	ldr	r3, [pc, #144]	@ (80017a0 <MX_TIM5_Init+0xb8>)
 800170e:	2200      	movs	r2, #0
 8001710:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001712:	4b23      	ldr	r3, [pc, #140]	@ (80017a0 <MX_TIM5_Init+0xb8>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001718:	4b21      	ldr	r3, [pc, #132]	@ (80017a0 <MX_TIM5_Init+0xb8>)
 800171a:	f04f 32ff 	mov.w	r2, #4294967295
 800171e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001720:	4b1f      	ldr	r3, [pc, #124]	@ (80017a0 <MX_TIM5_Init+0xb8>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001726:	4b1e      	ldr	r3, [pc, #120]	@ (80017a0 <MX_TIM5_Init+0xb8>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800172c:	481c      	ldr	r0, [pc, #112]	@ (80017a0 <MX_TIM5_Init+0xb8>)
 800172e:	f004 fd79 	bl	8006224 <HAL_TIM_IC_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001738:	f000 fad6 	bl	8001ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4815      	ldr	r0, [pc, #84]	@ (80017a0 <MX_TIM5_Init+0xb8>)
 800174c:	f006 f99c 	bl	8007a88 <HAL_TIMEx_MasterConfigSynchronization>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001756:	f000 fac7 	bl	8001ce8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800175e:	2301      	movs	r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2208      	movs	r2, #8
 800176e:	4619      	mov	r1, r3
 8001770:	480b      	ldr	r0, [pc, #44]	@ (80017a0 <MX_TIM5_Init+0xb8>)
 8001772:	f005 f94f 	bl	8006a14 <HAL_TIM_IC_ConfigChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800177c:	f000 fab4 	bl	8001ce8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	220c      	movs	r2, #12
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	@ (80017a0 <MX_TIM5_Init+0xb8>)
 8001788:	f005 f944 	bl	8006a14 <HAL_TIM_IC_ConfigChannel>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8001792:	f000 faa9 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000334 	.word	0x20000334
 80017a4:	40000c00 	.word	0x40000c00

080017a8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b096      	sub	sp, #88	@ 0x58
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ae:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
 80017ca:	615a      	str	r2, [r3, #20]
 80017cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	222c      	movs	r2, #44	@ 0x2c
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f007 fed0 	bl	800957a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017da:	4b4b      	ldr	r3, [pc, #300]	@ (8001908 <MX_TIM8_Init+0x160>)
 80017dc:	4a4b      	ldr	r2, [pc, #300]	@ (800190c <MX_TIM8_Init+0x164>)
 80017de:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80017e0:	4b49      	ldr	r3, [pc, #292]	@ (8001908 <MX_TIM8_Init+0x160>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e6:	4b48      	ldr	r3, [pc, #288]	@ (8001908 <MX_TIM8_Init+0x160>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 59999;
 80017ec:	4b46      	ldr	r3, [pc, #280]	@ (8001908 <MX_TIM8_Init+0x160>)
 80017ee:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80017f2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f4:	4b44      	ldr	r3, [pc, #272]	@ (8001908 <MX_TIM8_Init+0x160>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017fa:	4b43      	ldr	r3, [pc, #268]	@ (8001908 <MX_TIM8_Init+0x160>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001800:	4b41      	ldr	r3, [pc, #260]	@ (8001908 <MX_TIM8_Init+0x160>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001806:	4840      	ldr	r0, [pc, #256]	@ (8001908 <MX_TIM8_Init+0x160>)
 8001808:	f004 fbaf 	bl	8005f6a <HAL_TIM_PWM_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001812:	f000 fa69 	bl	8001ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001822:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001826:	4619      	mov	r1, r3
 8001828:	4837      	ldr	r0, [pc, #220]	@ (8001908 <MX_TIM8_Init+0x160>)
 800182a:	f006 f92d 	bl	8007a88 <HAL_TIMEx_MasterConfigSynchronization>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001834:	f000 fa58 	bl	8001ce8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001838:	2360      	movs	r3, #96	@ 0x60
 800183a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001840:	2300      	movs	r3, #0
 8001842:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001844:	2300      	movs	r3, #0
 8001846:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800184c:	2300      	movs	r3, #0
 800184e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001850:	2300      	movs	r3, #0
 8001852:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001854:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001858:	2200      	movs	r2, #0
 800185a:	4619      	mov	r1, r3
 800185c:	482a      	ldr	r0, [pc, #168]	@ (8001908 <MX_TIM8_Init+0x160>)
 800185e:	f005 f975 	bl	8006b4c <HAL_TIM_PWM_ConfigChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001868:	f000 fa3e 	bl	8001ce8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800186c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001870:	2204      	movs	r2, #4
 8001872:	4619      	mov	r1, r3
 8001874:	4824      	ldr	r0, [pc, #144]	@ (8001908 <MX_TIM8_Init+0x160>)
 8001876:	f005 f969 	bl	8006b4c <HAL_TIM_PWM_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8001880:	f000 fa32 	bl	8001ce8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001884:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001888:	2208      	movs	r2, #8
 800188a:	4619      	mov	r1, r3
 800188c:	481e      	ldr	r0, [pc, #120]	@ (8001908 <MX_TIM8_Init+0x160>)
 800188e:	f005 f95d 	bl	8006b4c <HAL_TIM_PWM_ConfigChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8001898:	f000 fa26 	bl	8001ce8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800189c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018a0:	220c      	movs	r2, #12
 80018a2:	4619      	mov	r1, r3
 80018a4:	4818      	ldr	r0, [pc, #96]	@ (8001908 <MX_TIM8_Init+0x160>)
 80018a6:	f005 f951 	bl	8006b4c <HAL_TIM_PWM_ConfigChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 80018b0:	f000 fa1a 	bl	8001ce8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018da:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	4619      	mov	r1, r3
 80018e8:	4807      	ldr	r0, [pc, #28]	@ (8001908 <MX_TIM8_Init+0x160>)
 80018ea:	f006 f955 	bl	8007b98 <HAL_TIMEx_ConfigBreakDeadTime>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM8_Init+0x150>
  {
    Error_Handler();
 80018f4:	f000 f9f8 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80018f8:	4803      	ldr	r0, [pc, #12]	@ (8001908 <MX_TIM8_Init+0x160>)
 80018fa:	f000 fd75 	bl	80023e8 <HAL_TIM_MspPostInit>

}
 80018fe:	bf00      	nop
 8001900:	3758      	adds	r7, #88	@ 0x58
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000380 	.word	0x20000380
 800190c:	40013400 	.word	0x40013400

08001910 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800192e:	4b22      	ldr	r3, [pc, #136]	@ (80019b8 <MX_TIM15_Init+0xa8>)
 8001930:	4a22      	ldr	r2, [pc, #136]	@ (80019bc <MX_TIM15_Init+0xac>)
 8001932:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 79;
 8001934:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <MX_TIM15_Init+0xa8>)
 8001936:	224f      	movs	r2, #79	@ 0x4f
 8001938:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193a:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <MX_TIM15_Init+0xa8>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001940:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <MX_TIM15_Init+0xa8>)
 8001942:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001946:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001948:	4b1b      	ldr	r3, [pc, #108]	@ (80019b8 <MX_TIM15_Init+0xa8>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800194e:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <MX_TIM15_Init+0xa8>)
 8001950:	2200      	movs	r2, #0
 8001952:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001954:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <MX_TIM15_Init+0xa8>)
 8001956:	2280      	movs	r2, #128	@ 0x80
 8001958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800195a:	4817      	ldr	r0, [pc, #92]	@ (80019b8 <MX_TIM15_Init+0xa8>)
 800195c:	f004 fc62 	bl	8006224 <HAL_TIM_IC_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001966:	f000 f9bf 	bl	8001ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	480f      	ldr	r0, [pc, #60]	@ (80019b8 <MX_TIM15_Init+0xa8>)
 800197a:	f006 f885 	bl	8007a88 <HAL_TIMEx_MasterConfigSynchronization>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001984:	f000 f9b0 	bl	8001ce8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001988:	230a      	movs	r3, #10
 800198a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800198c:	2301      	movs	r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	2200      	movs	r2, #0
 800199c:	4619      	mov	r1, r3
 800199e:	4806      	ldr	r0, [pc, #24]	@ (80019b8 <MX_TIM15_Init+0xa8>)
 80019a0:	f005 f838 	bl	8006a14 <HAL_TIM_IC_ConfigChannel>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 80019aa:	f000 f99d 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	3720      	adds	r7, #32
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200003cc 	.word	0x200003cc
 80019bc:	40014000 	.word	0x40014000

080019c0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <MX_TIM17_Init+0x44>)
 80019c6:	4a10      	ldr	r2, [pc, #64]	@ (8001a08 <MX_TIM17_Init+0x48>)
 80019c8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 79;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <MX_TIM17_Init+0x44>)
 80019cc:	224f      	movs	r2, #79	@ 0x4f
 80019ce:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <MX_TIM17_Init+0x44>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <MX_TIM17_Init+0x44>)
 80019d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019dc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019de:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <MX_TIM17_Init+0x44>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80019e4:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <MX_TIM17_Init+0x44>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <MX_TIM17_Init+0x44>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80019f0:	4804      	ldr	r0, [pc, #16]	@ (8001a04 <MX_TIM17_Init+0x44>)
 80019f2:	f004 fa63 	bl	8005ebc <HAL_TIM_Base_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80019fc:	f000 f974 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000418 	.word	0x20000418
 8001a08:	40014800 	.word	0x40014800

08001a0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a10:	4b16      	ldr	r3, [pc, #88]	@ (8001a6c <MX_USART3_UART_Init+0x60>)
 8001a12:	4a17      	ldr	r2, [pc, #92]	@ (8001a70 <MX_USART3_UART_Init+0x64>)
 8001a14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a16:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <MX_USART3_UART_Init+0x60>)
 8001a18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1e:	4b13      	ldr	r3, [pc, #76]	@ (8001a6c <MX_USART3_UART_Init+0x60>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <MX_USART3_UART_Init+0x60>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a2a:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <MX_USART3_UART_Init+0x60>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a30:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <MX_USART3_UART_Init+0x60>)
 8001a32:	220c      	movs	r2, #12
 8001a34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a36:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <MX_USART3_UART_Init+0x60>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <MX_USART3_UART_Init+0x60>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <MX_USART3_UART_Init+0x60>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <MX_USART3_UART_Init+0x60>)
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <MX_USART3_UART_Init+0x60>)
 8001a50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a54:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a56:	4805      	ldr	r0, [pc, #20]	@ (8001a6c <MX_USART3_UART_Init+0x60>)
 8001a58:	f006 f93a 	bl	8007cd0 <HAL_UART_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8001a62:	f000 f941 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000464 	.word	0x20000464
 8001a70:	40004800 	.word	0x40004800

08001a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	@ 0x28
 8001a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
 8001a88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a8a:	4b42      	ldr	r3, [pc, #264]	@ (8001b94 <MX_GPIO_Init+0x120>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	4a41      	ldr	r2, [pc, #260]	@ (8001b94 <MX_GPIO_Init+0x120>)
 8001a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a96:	4b3f      	ldr	r3, [pc, #252]	@ (8001b94 <MX_GPIO_Init+0x120>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8001b94 <MX_GPIO_Init+0x120>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa6:	4a3b      	ldr	r2, [pc, #236]	@ (8001b94 <MX_GPIO_Init+0x120>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aae:	4b39      	ldr	r3, [pc, #228]	@ (8001b94 <MX_GPIO_Init+0x120>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	4b36      	ldr	r3, [pc, #216]	@ (8001b94 <MX_GPIO_Init+0x120>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abe:	4a35      	ldr	r2, [pc, #212]	@ (8001b94 <MX_GPIO_Init+0x120>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ac6:	4b33      	ldr	r3, [pc, #204]	@ (8001b94 <MX_GPIO_Init+0x120>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad2:	4b30      	ldr	r3, [pc, #192]	@ (8001b94 <MX_GPIO_Init+0x120>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	4a2f      	ldr	r2, [pc, #188]	@ (8001b94 <MX_GPIO_Init+0x120>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ade:	4b2d      	ldr	r3, [pc, #180]	@ (8001b94 <MX_GPIO_Init+0x120>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2108      	movs	r1, #8
 8001aee:	482a      	ldr	r0, [pc, #168]	@ (8001b98 <MX_GPIO_Init+0x124>)
 8001af0:	f002 fdaa 	bl	8004648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8001afa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001afe:	f002 fda3 	bl	8004648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	f243 0106 	movw	r1, #12294	@ 0x3006
 8001b08:	4824      	ldr	r0, [pc, #144]	@ (8001b9c <MX_GPIO_Init+0x128>)
 8001b0a:	f002 fd9d 	bl	8004648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b0e:	2308      	movs	r3, #8
 8001b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	481c      	ldr	r0, [pc, #112]	@ (8001b98 <MX_GPIO_Init+0x124>)
 8001b26:	f002 fbe5 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b2a:	2310      	movs	r3, #16
 8001b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b3a:	2306      	movs	r3, #6
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b48:	f002 fbd4 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 8001b4c:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	2301      	movs	r3, #1
 8001b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b68:	f002 fbc4 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13;
 8001b6c:	f243 0306 	movw	r3, #12294	@ 0x3006
 8001b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b72:	2301      	movs	r3, #1
 8001b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <MX_GPIO_Init+0x128>)
 8001b86:	f002 fbb5 	bl	80042f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b8a:	bf00      	nop
 8001b8c:	3728      	adds	r7, #40	@ 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	48000800 	.word	0x48000800
 8001b9c:	48000400 	.word	0x48000400

08001ba0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	// Interpret the received bytes as float values
	Distance_Target = *(float *)&rx_buff[0];
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <HAL_UART_RxCpltCallback+0x34>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <HAL_UART_RxCpltCallback+0x38>)
 8001bae:	6013      	str	r3, [r2, #0]
	Angle_Target = *(float *)&rx_buff[4];
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <HAL_UART_RxCpltCallback+0x3c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <HAL_UART_RxCpltCallback+0x40>)
 8001bb6:	6013      	str	r3, [r2, #0]
	//printf("Captured");

	// Clear the receive buffer
	memset(rx_buff, 0, sizeof(rx_buff));
 8001bb8:	2208      	movs	r2, #8
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4805      	ldr	r0, [pc, #20]	@ (8001bd4 <HAL_UART_RxCpltCallback+0x34>)
 8001bbe:	f007 fcdc 	bl	800957a <memset>

	// Restart UART reception
	HAL_UART_Receive_IT(&huart3, rx_buff, 8);
 8001bc2:	2208      	movs	r2, #8
 8001bc4:	4903      	ldr	r1, [pc, #12]	@ (8001bd4 <HAL_UART_RxCpltCallback+0x34>)
 8001bc6:	4807      	ldr	r0, [pc, #28]	@ (8001be4 <HAL_UART_RxCpltCallback+0x44>)
 8001bc8:	f006 f8d0 	bl	8007d6c <HAL_UART_Receive_IT>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2000050c 	.word	0x2000050c
 8001bd8:	20000504 	.word	0x20000504
 8001bdc:	20000510 	.word	0x20000510
 8001be0:	20000508 	.word	0x20000508
 8001be4:	20000464 	.word	0x20000464

08001be8 <HAL_TIM_IC_CaptureCallback>:
//}



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) //Function from https://controllerstech.com/input-capture-in-stm32/
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7f1b      	ldrb	r3, [r3, #28]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d14a      	bne.n	8001c8e <HAL_TIM_IC_CaptureCallback+0xa6>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001bf8:	4b27      	ldr	r3, [pc, #156]	@ (8001c98 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10b      	bne.n	8001c18 <HAL_TIM_IC_CaptureCallback+0x30>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001c00:	2100      	movs	r1, #0
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f005 f980 	bl	8006f08 <HAL_TIM_ReadCapturedValue>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b23      	ldr	r3, [pc, #140]	@ (8001c9c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001c0e:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001c10:	4b21      	ldr	r3, [pc, #132]	@ (8001c98 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
 8001c16:	e03a      	b.n	8001c8e <HAL_TIM_IC_CaptureCallback+0xa6>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001c18:	2100      	movs	r1, #0
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f005 f974 	bl	8006f08 <HAL_TIM_ReadCapturedValue>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001c26:	601a      	str	r2, [r3, #0]
			if (IC_Val2 > IC_Val1)
 8001c28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dd07      	ble.n	8001c44 <HAL_TIM_IC_CaptureCallback+0x5c>
				Difference = IC_Val2-IC_Val1;
 8001c34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	4a19      	ldr	r2, [pc, #100]	@ (8001ca4 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e00f      	b.n	8001c64 <HAL_TIM_IC_CaptureCallback+0x7c>
			else if (IC_Val1 > IC_Val2)
 8001c44:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dd09      	ble.n	8001c64 <HAL_TIM_IC_CaptureCallback+0x7c>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001c50:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001c58:	33ff      	adds	r3, #255	@ 0xff
 8001c5a:	4a11      	ldr	r2, [pc, #68]	@ (8001ca0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a10      	ldr	r2, [pc, #64]	@ (8001ca4 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001c62:	6013      	str	r3, [r2, #0]
			int refClock = TIMCLOCK/(PRESCALAR);
 8001c64:	4b10      	ldr	r3, [pc, #64]	@ (8001ca8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001c66:	60fb      	str	r3, [r7, #12]
			int mFactor = 1000000/refClock;
 8001c68:	4a0f      	ldr	r2, [pc, #60]	@ (8001ca8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c70:	60bb      	str	r3, [r7, #8]
			usWidth = Difference*mFactor;
 8001c72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	fb02 f303 	mul.w	r3, r2, r3
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001cac <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001c7e:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2200      	movs	r2, #0
 8001c86:	625a      	str	r2, [r3, #36]	@ 0x24
			Is_First_Captured = 0; // set it back to false
 8001c88:	4b03      	ldr	r3, [pc, #12]	@ (8001c98 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200004fc 	.word	0x200004fc
 8001c9c:	200004f0 	.word	0x200004f0
 8001ca0:	200004f4 	.word	0x200004f4
 8001ca4:	200004f8 	.word	0x200004f8
 8001ca8:	000f4240 	.word	0x000f4240
 8001cac:	200004ec 	.word	0x200004ec

08001cb0 <_write>:

int _write(int file, char *ptr, int len)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
    for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e009      	b.n	8001cd6 <_write+0x26>
        ITM_SendChar(*ptr++);
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	60ba      	str	r2, [r7, #8]
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fff6 	bl	8000cbc <ITM_SendChar>
    for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	dbf1      	blt.n	8001cc2 <_write+0x12>

    return len;
 8001cde:	687b      	ldr	r3, [r7, #4]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <set_duty>:
 * @param[in] p_mot Pointer to the motor object structure.
 * @param[in] level Desired duty cycle percentage (-100 to 100).
 * @details This function constrains the level to the valid range and sets the
 * 			PWM duty cycle by updating the compare register pointer directly.
 */
void set_duty(motor_t* p_mot, float level) {
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	ed87 0a00 	vstr	s0, [r7]
	/// Constrain level to valid range
	if (level > 100) level = 100;
 8001d04:	edd7 7a00 	vldr	s15, [r7]
 8001d08:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001dc4 <set_duty+0xcc>
 8001d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d14:	dd01      	ble.n	8001d1a <set_duty+0x22>
 8001d16:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc8 <set_duty+0xd0>)
 8001d18:	603b      	str	r3, [r7, #0]
    if (level < -100) level = -100;
 8001d1a:	edd7 7a00 	vldr	s15, [r7]
 8001d1e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001dcc <set_duty+0xd4>
 8001d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2a:	d501      	bpl.n	8001d30 <set_duty+0x38>
 8001d2c:	4b28      	ldr	r3, [pc, #160]	@ (8001dd0 <set_duty+0xd8>)
 8001d2e:	603b      	str	r3, [r7, #0]
	/// Initialize pulse width variables
    uint32_t pulse1 = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
    uint32_t pulse2 = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60bb      	str	r3, [r7, #8]
    if(level > 0 ){
 8001d38:	edd7 7a00 	vldr	s15, [r7]
 8001d3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d44:	dd13      	ble.n	8001d6e <set_duty+0x76>
    	pulse2 = (uint32_t)((level * p_mot->Period) / 100);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d52:	edd7 7a00 	vldr	s15, [r7]
 8001d56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d5a:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8001dc4 <set_duty+0xcc>
 8001d5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d66:	ee17 3a90 	vmov	r3, s15
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	e01b      	b.n	8001da6 <set_duty+0xae>
    }
    else if(level < 0){
 8001d6e:	edd7 7a00 	vldr	s15, [r7]
 8001d72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7a:	d514      	bpl.n	8001da6 <set_duty+0xae>
    	pulse1 = (uint32_t)((-level * p_mot->Period) / 100);
 8001d7c:	edd7 7a00 	vldr	s15, [r7]
 8001d80:	eeb1 7a67 	vneg.f32	s14, s15
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	ee07 3a90 	vmov	s15, r3
 8001d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d94:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001dc4 <set_duty+0xcc>
 8001d98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001da0:	ee17 3a90 	vmov	r3, s15
 8001da4:	60fb      	str	r3, [r7, #12]
    }
    /// Set the PWM duty cycle by updating the compare register
    *(p_mot->chA) = pulse1;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	601a      	str	r2, [r3, #0]
    *(p_mot->chB) = pulse2;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	601a      	str	r2, [r3, #0]

}
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	42c80000 	.word	0x42c80000
 8001dc8:	42c80000 	.word	0x42c80000
 8001dcc:	c2c80000 	.word	0xc2c80000
 8001dd0:	c2c80000 	.word	0xc2c80000

08001dd4 <run_control>:
 * @param[in] controller A pointer to a structure (controller_t) containing controller gains and relevant information
 * @param[in] motor A pointer to a structure (motor_t) containing motor data
 * @param[in] encoder A pointer to a structure (encoder_t) containing encoder-related data such as position, velocity, and the last counter value.
 * @details This function runs the motor controller loop that alters motor duty cycle to reach a position or velocity setpoint
 */
void run_control(controller_t *controller, motor_t *motor, encoder_t *encoder) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
	// Read the current position and velocity from the encoder
	read_encoder(encoder);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7fe fef3 	bl	8000bcc <read_encoder>

	// Calculate the error
	int32_t error = controller->velocity_setpoint - encoder->velocity;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001df0:	1a9b      	subs	r3, r3, r2
 8001df2:	617b      	str	r3, [r7, #20]

	// Integral term calculation
	controller->esum += error;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	441a      	add	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	60da      	str	r2, [r3, #12]

	// Calculate the duty cycle
	float duty = controller->Pgain_velocity * error + controller->Igain_velocity * controller->esum;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	ed93 7a00 	vldr	s14, [r3]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	ee07 3a90 	vmov	s15, r3
 8001e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2e:	edc7 7a04 	vstr	s15, [r7, #16]
//	printf("Duty sent: %ld\n", (long)duty); // For debug

	// Apply to the motor
	set_duty(motor, duty);
 8001e32:	ed97 0a04 	vldr	s0, [r7, #16]
 8001e36:	68b8      	ldr	r0, [r7, #8]
 8001e38:	f7ff ff5e 	bl	8001cf8 <set_duty>


}
 8001e3c:	bf00      	nop
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4a:	4b12      	ldr	r3, [pc, #72]	@ (8001e94 <HAL_MspInit+0x50>)
 8001e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e4e:	4a11      	ldr	r2, [pc, #68]	@ (8001e94 <HAL_MspInit+0x50>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e56:	4b0f      	ldr	r3, [pc, #60]	@ (8001e94 <HAL_MspInit+0x50>)
 8001e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e62:	4b0c      	ldr	r3, [pc, #48]	@ (8001e94 <HAL_MspInit+0x50>)
 8001e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e66:	4a0b      	ldr	r2, [pc, #44]	@ (8001e94 <HAL_MspInit+0x50>)
 8001e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e6e:	4b09      	ldr	r3, [pc, #36]	@ (8001e94 <HAL_MspInit+0x50>)
 8001e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2005      	movs	r0, #5
 8001e80:	f002 f983 	bl	800418a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001e84:	2005      	movs	r0, #5
 8001e86:	f002 f99c 	bl	80041c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000

08001e98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08e      	sub	sp, #56	@ 0x38
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a58      	ldr	r2, [pc, #352]	@ (8002018 <HAL_ADC_MspInit+0x180>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d12d      	bne.n	8001f16 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001eba:	4b58      	ldr	r3, [pc, #352]	@ (800201c <HAL_ADC_MspInit+0x184>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	4a56      	ldr	r2, [pc, #344]	@ (800201c <HAL_ADC_MspInit+0x184>)
 8001ec2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001ec4:	4b55      	ldr	r3, [pc, #340]	@ (800201c <HAL_ADC_MspInit+0x184>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d10b      	bne.n	8001ee4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001ecc:	4b54      	ldr	r3, [pc, #336]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed0:	4a53      	ldr	r2, [pc, #332]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001ed2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ed6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ed8:	4b51      	ldr	r3, [pc, #324]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001edc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ee0:	623b      	str	r3, [r7, #32]
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee4:	4b4e      	ldr	r3, [pc, #312]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee8:	4a4d      	ldr	r2, [pc, #308]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ef0:	4b4b      	ldr	r3, [pc, #300]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001efc:	2303      	movs	r3, #3
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f00:	2303      	movs	r3, #3
 8001f02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4845      	ldr	r0, [pc, #276]	@ (8002024 <HAL_ADC_MspInit+0x18c>)
 8001f10:	f002 f9f0 	bl	80042f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f14:	e07c      	b.n	8002010 <HAL_ADC_MspInit+0x178>
  else if(hadc->Instance==ADC2)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a43      	ldr	r2, [pc, #268]	@ (8002028 <HAL_ADC_MspInit+0x190>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d145      	bne.n	8001fac <HAL_ADC_MspInit+0x114>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001f20:	4b3e      	ldr	r3, [pc, #248]	@ (800201c <HAL_ADC_MspInit+0x184>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	3301      	adds	r3, #1
 8001f26:	4a3d      	ldr	r2, [pc, #244]	@ (800201c <HAL_ADC_MspInit+0x184>)
 8001f28:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	@ (800201c <HAL_ADC_MspInit+0x184>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d10b      	bne.n	8001f4a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001f32:	4b3b      	ldr	r3, [pc, #236]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f36:	4a3a      	ldr	r2, [pc, #232]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001f38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f3e:	4b38      	ldr	r3, [pc, #224]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f46:	61bb      	str	r3, [r7, #24]
 8001f48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4a:	4b35      	ldr	r3, [pc, #212]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4e:	4a34      	ldr	r2, [pc, #208]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f56:	4b32      	ldr	r3, [pc, #200]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f62:	4b2f      	ldr	r3, [pc, #188]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f66:	4a2e      	ldr	r2, [pc, #184]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001f68:	f043 0302 	orr.w	r3, r3, #2
 8001f6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001f7a:	2306      	movs	r3, #6
 8001f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4825      	ldr	r0, [pc, #148]	@ (8002024 <HAL_ADC_MspInit+0x18c>)
 8001f8e:	f002 f9b1 	bl	80042f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f92:	2301      	movs	r3, #1
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f96:	230b      	movs	r3, #11
 8001f98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4821      	ldr	r0, [pc, #132]	@ (800202c <HAL_ADC_MspInit+0x194>)
 8001fa6:	f002 f9a5 	bl	80042f4 <HAL_GPIO_Init>
}
 8001faa:	e031      	b.n	8002010 <HAL_ADC_MspInit+0x178>
  else if(hadc->Instance==ADC3)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8002030 <HAL_ADC_MspInit+0x198>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d12c      	bne.n	8002010 <HAL_ADC_MspInit+0x178>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001fb6:	4b19      	ldr	r3, [pc, #100]	@ (800201c <HAL_ADC_MspInit+0x184>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	4a17      	ldr	r2, [pc, #92]	@ (800201c <HAL_ADC_MspInit+0x184>)
 8001fbe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001fc0:	4b16      	ldr	r3, [pc, #88]	@ (800201c <HAL_ADC_MspInit+0x184>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d10b      	bne.n	8001fe0 <HAL_ADC_MspInit+0x148>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001fc8:	4b15      	ldr	r3, [pc, #84]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fcc:	4a14      	ldr	r2, [pc, #80]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001fce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fd4:	4b12      	ldr	r3, [pc, #72]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001fe6:	f043 0304 	orr.w	r3, r3, #4
 8001fea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fec:	4b0c      	ldr	r3, [pc, #48]	@ (8002020 <HAL_ADC_MspInit+0x188>)
 8001fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002008:	4619      	mov	r1, r3
 800200a:	4806      	ldr	r0, [pc, #24]	@ (8002024 <HAL_ADC_MspInit+0x18c>)
 800200c:	f002 f972 	bl	80042f4 <HAL_GPIO_Init>
}
 8002010:	bf00      	nop
 8002012:	3738      	adds	r7, #56	@ 0x38
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	50040000 	.word	0x50040000
 800201c:	20000514 	.word	0x20000514
 8002020:	40021000 	.word	0x40021000
 8002024:	48000800 	.word	0x48000800
 8002028:	50040100 	.word	0x50040100
 800202c:	48000400 	.word	0x48000400
 8002030:	50040200 	.word	0x50040200

08002034 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b0aa      	sub	sp, #168	@ 0xa8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	2284      	movs	r2, #132	@ 0x84
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f007 fa90 	bl	800957a <memset>
  if(hi2c->Instance==I2C2)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a21      	ldr	r2, [pc, #132]	@ (80020e4 <HAL_I2C_MspInit+0xb0>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d13b      	bne.n	80020dc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002064:	2380      	movs	r3, #128	@ 0x80
 8002066:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002068:	2300      	movs	r3, #0
 800206a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800206c:	f107 0310 	add.w	r3, r7, #16
 8002070:	4618      	mov	r0, r3
 8002072:	f003 fa97 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800207c:	f7ff fe34 	bl	8001ce8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <HAL_I2C_MspInit+0xb4>)
 8002082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002084:	4a18      	ldr	r2, [pc, #96]	@ (80020e8 <HAL_I2C_MspInit+0xb4>)
 8002086:	f043 0302 	orr.w	r3, r3, #2
 800208a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800208c:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <HAL_I2C_MspInit+0xb4>)
 800208e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002098:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800209c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020a0:	2312      	movs	r3, #18
 80020a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ac:	2303      	movs	r3, #3
 80020ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020b2:	2304      	movs	r3, #4
 80020b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80020bc:	4619      	mov	r1, r3
 80020be:	480b      	ldr	r0, [pc, #44]	@ (80020ec <HAL_I2C_MspInit+0xb8>)
 80020c0:	f002 f918 	bl	80042f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020c4:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <HAL_I2C_MspInit+0xb4>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c8:	4a07      	ldr	r2, [pc, #28]	@ (80020e8 <HAL_I2C_MspInit+0xb4>)
 80020ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80020d0:	4b05      	ldr	r3, [pc, #20]	@ (80020e8 <HAL_I2C_MspInit+0xb4>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80020dc:	bf00      	nop
 80020de:	37a8      	adds	r7, #168	@ 0xa8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40005800 	.word	0x40005800
 80020e8:	40021000 	.word	0x40021000
 80020ec:	48000400 	.word	0x48000400

080020f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a16      	ldr	r2, [pc, #88]	@ (8002158 <HAL_TIM_Base_MspInit+0x68>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d114      	bne.n	800212c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002102:	4b16      	ldr	r3, [pc, #88]	@ (800215c <HAL_TIM_Base_MspInit+0x6c>)
 8002104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002106:	4a15      	ldr	r2, [pc, #84]	@ (800215c <HAL_TIM_Base_MspInit+0x6c>)
 8002108:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800210c:	6613      	str	r3, [r2, #96]	@ 0x60
 800210e:	4b13      	ldr	r3, [pc, #76]	@ (800215c <HAL_TIM_Base_MspInit+0x6c>)
 8002110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002112:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2018      	movs	r0, #24
 8002120:	f002 f833 	bl	800418a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002124:	2018      	movs	r0, #24
 8002126:	f002 f84c 	bl	80041c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800212a:	e010      	b.n	800214e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0b      	ldr	r2, [pc, #44]	@ (8002160 <HAL_TIM_Base_MspInit+0x70>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d10b      	bne.n	800214e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002136:	4b09      	ldr	r3, [pc, #36]	@ (800215c <HAL_TIM_Base_MspInit+0x6c>)
 8002138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800213a:	4a08      	ldr	r2, [pc, #32]	@ (800215c <HAL_TIM_Base_MspInit+0x6c>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002140:	6613      	str	r3, [r2, #96]	@ 0x60
 8002142:	4b06      	ldr	r3, [pc, #24]	@ (800215c <HAL_TIM_Base_MspInit+0x6c>)
 8002144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002146:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40012c00 	.word	0x40012c00
 800215c:	40021000 	.word	0x40021000
 8002160:	40014800 	.word	0x40014800

08002164 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08e      	sub	sp, #56	@ 0x38
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002184:	d129      	bne.n	80021da <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002186:	4b45      	ldr	r3, [pc, #276]	@ (800229c <HAL_TIM_Encoder_MspInit+0x138>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218a:	4a44      	ldr	r2, [pc, #272]	@ (800229c <HAL_TIM_Encoder_MspInit+0x138>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6593      	str	r3, [r2, #88]	@ 0x58
 8002192:	4b42      	ldr	r3, [pc, #264]	@ (800229c <HAL_TIM_Encoder_MspInit+0x138>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	623b      	str	r3, [r7, #32]
 800219c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	4b3f      	ldr	r3, [pc, #252]	@ (800229c <HAL_TIM_Encoder_MspInit+0x138>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a2:	4a3e      	ldr	r2, [pc, #248]	@ (800229c <HAL_TIM_Encoder_MspInit+0x138>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021aa:	4b3c      	ldr	r3, [pc, #240]	@ (800229c <HAL_TIM_Encoder_MspInit+0x138>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	61fb      	str	r3, [r7, #28]
 80021b4:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021b6:	2303      	movs	r3, #3
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021c6:	2301      	movs	r3, #1
 80021c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021ce:	4619      	mov	r1, r3
 80021d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021d4:	f002 f88e 	bl	80042f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021d8:	e05b      	b.n	8002292 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a30      	ldr	r2, [pc, #192]	@ (80022a0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d129      	bne.n	8002238 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021e4:	4b2d      	ldr	r3, [pc, #180]	@ (800229c <HAL_TIM_Encoder_MspInit+0x138>)
 80021e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e8:	4a2c      	ldr	r2, [pc, #176]	@ (800229c <HAL_TIM_Encoder_MspInit+0x138>)
 80021ea:	f043 0302 	orr.w	r3, r3, #2
 80021ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80021f0:	4b2a      	ldr	r3, [pc, #168]	@ (800229c <HAL_TIM_Encoder_MspInit+0x138>)
 80021f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fc:	4b27      	ldr	r3, [pc, #156]	@ (800229c <HAL_TIM_Encoder_MspInit+0x138>)
 80021fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002200:	4a26      	ldr	r2, [pc, #152]	@ (800229c <HAL_TIM_Encoder_MspInit+0x138>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002208:	4b24      	ldr	r3, [pc, #144]	@ (800229c <HAL_TIM_Encoder_MspInit+0x138>)
 800220a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002214:	23c0      	movs	r3, #192	@ 0xc0
 8002216:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	2300      	movs	r3, #0
 8002222:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002224:	2302      	movs	r3, #2
 8002226:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800222c:	4619      	mov	r1, r3
 800222e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002232:	f002 f85f 	bl	80042f4 <HAL_GPIO_Init>
}
 8002236:	e02c      	b.n	8002292 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a19      	ldr	r2, [pc, #100]	@ (80022a4 <HAL_TIM_Encoder_MspInit+0x140>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d127      	bne.n	8002292 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002242:	4b16      	ldr	r3, [pc, #88]	@ (800229c <HAL_TIM_Encoder_MspInit+0x138>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002246:	4a15      	ldr	r2, [pc, #84]	@ (800229c <HAL_TIM_Encoder_MspInit+0x138>)
 8002248:	f043 0304 	orr.w	r3, r3, #4
 800224c:	6593      	str	r3, [r2, #88]	@ 0x58
 800224e:	4b13      	ldr	r3, [pc, #76]	@ (800229c <HAL_TIM_Encoder_MspInit+0x138>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225a:	4b10      	ldr	r3, [pc, #64]	@ (800229c <HAL_TIM_Encoder_MspInit+0x138>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225e:	4a0f      	ldr	r2, [pc, #60]	@ (800229c <HAL_TIM_Encoder_MspInit+0x138>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002266:	4b0d      	ldr	r3, [pc, #52]	@ (800229c <HAL_TIM_Encoder_MspInit+0x138>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002272:	23c0      	movs	r3, #192	@ 0xc0
 8002274:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	2302      	movs	r3, #2
 8002278:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2300      	movs	r3, #0
 8002280:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002282:	2302      	movs	r3, #2
 8002284:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002286:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800228a:	4619      	mov	r1, r3
 800228c:	4806      	ldr	r0, [pc, #24]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0x144>)
 800228e:	f002 f831 	bl	80042f4 <HAL_GPIO_Init>
}
 8002292:	bf00      	nop
 8002294:	3738      	adds	r7, #56	@ 0x38
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	40000400 	.word	0x40000400
 80022a4:	40000800 	.word	0x40000800
 80022a8:	48000400 	.word	0x48000400

080022ac <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08c      	sub	sp, #48	@ 0x30
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a33      	ldr	r2, [pc, #204]	@ (8002398 <HAL_TIM_IC_MspInit+0xec>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d129      	bne.n	8002322 <HAL_TIM_IC_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022ce:	4b33      	ldr	r3, [pc, #204]	@ (800239c <HAL_TIM_IC_MspInit+0xf0>)
 80022d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d2:	4a32      	ldr	r2, [pc, #200]	@ (800239c <HAL_TIM_IC_MspInit+0xf0>)
 80022d4:	f043 0308 	orr.w	r3, r3, #8
 80022d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80022da:	4b30      	ldr	r3, [pc, #192]	@ (800239c <HAL_TIM_IC_MspInit+0xf0>)
 80022dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e6:	4b2d      	ldr	r3, [pc, #180]	@ (800239c <HAL_TIM_IC_MspInit+0xf0>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ea:	4a2c      	ldr	r2, [pc, #176]	@ (800239c <HAL_TIM_IC_MspInit+0xf0>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022f2:	4b2a      	ldr	r3, [pc, #168]	@ (800239c <HAL_TIM_IC_MspInit+0xf0>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022fe:	230c      	movs	r3, #12
 8002300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800230e:	2302      	movs	r3, #2
 8002310:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002312:	f107 031c 	add.w	r3, r7, #28
 8002316:	4619      	mov	r1, r3
 8002318:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800231c:	f001 ffea 	bl	80042f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002320:	e035      	b.n	800238e <HAL_TIM_IC_MspInit+0xe2>
  else if(htim_ic->Instance==TIM15)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a1e      	ldr	r2, [pc, #120]	@ (80023a0 <HAL_TIM_IC_MspInit+0xf4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d130      	bne.n	800238e <HAL_TIM_IC_MspInit+0xe2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800232c:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <HAL_TIM_IC_MspInit+0xf0>)
 800232e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002330:	4a1a      	ldr	r2, [pc, #104]	@ (800239c <HAL_TIM_IC_MspInit+0xf0>)
 8002332:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002336:	6613      	str	r3, [r2, #96]	@ 0x60
 8002338:	4b18      	ldr	r3, [pc, #96]	@ (800239c <HAL_TIM_IC_MspInit+0xf0>)
 800233a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800233c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002344:	4b15      	ldr	r3, [pc, #84]	@ (800239c <HAL_TIM_IC_MspInit+0xf0>)
 8002346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002348:	4a14      	ldr	r2, [pc, #80]	@ (800239c <HAL_TIM_IC_MspInit+0xf0>)
 800234a:	f043 0302 	orr.w	r3, r3, #2
 800234e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002350:	4b12      	ldr	r3, [pc, #72]	@ (800239c <HAL_TIM_IC_MspInit+0xf0>)
 8002352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800235c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800236e:	230e      	movs	r3, #14
 8002370:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002372:	f107 031c 	add.w	r3, r7, #28
 8002376:	4619      	mov	r1, r3
 8002378:	480a      	ldr	r0, [pc, #40]	@ (80023a4 <HAL_TIM_IC_MspInit+0xf8>)
 800237a:	f001 ffbb 	bl	80042f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800237e:	2200      	movs	r2, #0
 8002380:	2100      	movs	r1, #0
 8002382:	2018      	movs	r0, #24
 8002384:	f001 ff01 	bl	800418a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002388:	2018      	movs	r0, #24
 800238a:	f001 ff1a 	bl	80041c2 <HAL_NVIC_EnableIRQ>
}
 800238e:	bf00      	nop
 8002390:	3730      	adds	r7, #48	@ 0x30
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40000c00 	.word	0x40000c00
 800239c:	40021000 	.word	0x40021000
 80023a0:	40014000 	.word	0x40014000
 80023a4:	48000400 	.word	0x48000400

080023a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0a      	ldr	r2, [pc, #40]	@ (80023e0 <HAL_TIM_PWM_MspInit+0x38>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d10b      	bne.n	80023d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80023ba:	4b0a      	ldr	r3, [pc, #40]	@ (80023e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80023bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023be:	4a09      	ldr	r2, [pc, #36]	@ (80023e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80023c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80023c6:	4b07      	ldr	r3, [pc, #28]	@ (80023e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80023c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40013400 	.word	0x40013400
 80023e4:	40021000 	.word	0x40021000

080023e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	@ 0x28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a23      	ldr	r2, [pc, #140]	@ (8002494 <HAL_TIM_MspPostInit+0xac>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d11e      	bne.n	8002448 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240a:	4b23      	ldr	r3, [pc, #140]	@ (8002498 <HAL_TIM_MspPostInit+0xb0>)
 800240c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240e:	4a22      	ldr	r2, [pc, #136]	@ (8002498 <HAL_TIM_MspPostInit+0xb0>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002416:	4b20      	ldr	r3, [pc, #128]	@ (8002498 <HAL_TIM_MspPostInit+0xb0>)
 8002418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002422:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002428:	2302      	movs	r3, #2
 800242a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002430:	2300      	movs	r3, #0
 8002432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002434:	2301      	movs	r3, #1
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	4619      	mov	r1, r3
 800243e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002442:	f001 ff57 	bl	80042f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002446:	e021      	b.n	800248c <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM8)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a13      	ldr	r2, [pc, #76]	@ (800249c <HAL_TIM_MspPostInit+0xb4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d11c      	bne.n	800248c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002452:	4b11      	ldr	r3, [pc, #68]	@ (8002498 <HAL_TIM_MspPostInit+0xb0>)
 8002454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002456:	4a10      	ldr	r2, [pc, #64]	@ (8002498 <HAL_TIM_MspPostInit+0xb0>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800245e:	4b0e      	ldr	r3, [pc, #56]	@ (8002498 <HAL_TIM_MspPostInit+0xb0>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800246a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800246e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800247c:	2303      	movs	r3, #3
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	4619      	mov	r1, r3
 8002486:	4806      	ldr	r0, [pc, #24]	@ (80024a0 <HAL_TIM_MspPostInit+0xb8>)
 8002488:	f001 ff34 	bl	80042f4 <HAL_GPIO_Init>
}
 800248c:	bf00      	nop
 800248e:	3728      	adds	r7, #40	@ 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40012c00 	.word	0x40012c00
 8002498:	40021000 	.word	0x40021000
 800249c:	40013400 	.word	0x40013400
 80024a0:	48000800 	.word	0x48000800

080024a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b0aa      	sub	sp, #168	@ 0xa8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	2284      	movs	r2, #132	@ 0x84
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f007 f858 	bl	800957a <memset>
  if(huart->Instance==USART3)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a25      	ldr	r2, [pc, #148]	@ (8002564 <HAL_UART_MspInit+0xc0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d142      	bne.n	800255a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024d4:	2304      	movs	r3, #4
 80024d6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024d8:	2300      	movs	r3, #0
 80024da:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	4618      	mov	r0, r3
 80024e2:	f003 f85f 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024ec:	f7ff fbfc 	bl	8001ce8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80024f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002568 <HAL_UART_MspInit+0xc4>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002568 <HAL_UART_MspInit+0xc4>)
 80024f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80024fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002568 <HAL_UART_MspInit+0xc4>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002500:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002508:	4b17      	ldr	r3, [pc, #92]	@ (8002568 <HAL_UART_MspInit+0xc4>)
 800250a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250c:	4a16      	ldr	r2, [pc, #88]	@ (8002568 <HAL_UART_MspInit+0xc4>)
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002514:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <HAL_UART_MspInit+0xc4>)
 8002516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002520:	2330      	movs	r3, #48	@ 0x30
 8002522:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002532:	2303      	movs	r3, #3
 8002534:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002538:	2307      	movs	r3, #7
 800253a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002542:	4619      	mov	r1, r3
 8002544:	4809      	ldr	r0, [pc, #36]	@ (800256c <HAL_UART_MspInit+0xc8>)
 8002546:	f001 fed5 	bl	80042f4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	2100      	movs	r1, #0
 800254e:	2027      	movs	r0, #39	@ 0x27
 8002550:	f001 fe1b 	bl	800418a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002554:	2027      	movs	r0, #39	@ 0x27
 8002556:	f001 fe34 	bl	80041c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800255a:	bf00      	nop
 800255c:	37a8      	adds	r7, #168	@ 0xa8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40004800 	.word	0x40004800
 8002568:	40021000 	.word	0x40021000
 800256c:	48000800 	.word	0x48000800

08002570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002574:	bf00      	nop
 8002576:	e7fd      	b.n	8002574 <NMI_Handler+0x4>

08002578 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800257c:	bf00      	nop
 800257e:	e7fd      	b.n	800257c <HardFault_Handler+0x4>

08002580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002584:	bf00      	nop
 8002586:	e7fd      	b.n	8002584 <MemManage_Handler+0x4>

08002588 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <BusFault_Handler+0x4>

08002590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002594:	bf00      	nop
 8002596:	e7fd      	b.n	8002594 <UsageFault_Handler+0x4>

08002598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025c6:	f000 fbcb 	bl	8002d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}

080025ce <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025e0:	4803      	ldr	r0, [pc, #12]	@ (80025f0 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80025e2:	f004 f915 	bl	8006810 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80025e6:	4803      	ldr	r0, [pc, #12]	@ (80025f4 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80025e8:	f004 f912 	bl	8006810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000204 	.word	0x20000204
 80025f4:	200003cc 	.word	0x200003cc

080025f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025fc:	4802      	ldr	r0, [pc, #8]	@ (8002608 <USART3_IRQHandler+0x10>)
 80025fe:	f005 fc01 	bl	8007e04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000464 	.word	0x20000464

0800260c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	e00a      	b.n	8002634 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800261e:	f3af 8000 	nop.w
 8002622:	4601      	mov	r1, r0
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	60ba      	str	r2, [r7, #8]
 800262a:	b2ca      	uxtb	r2, r1
 800262c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3301      	adds	r3, #1
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	429a      	cmp	r2, r3
 800263a:	dbf0      	blt.n	800261e <_read+0x12>
  }

  return len;
 800263c:	687b      	ldr	r3, [r7, #4]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800266e:	605a      	str	r2, [r3, #4]
  return 0;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <_isatty>:

int _isatty(int file)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002686:	2301      	movs	r3, #1
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b8:	4a14      	ldr	r2, [pc, #80]	@ (800270c <_sbrk+0x5c>)
 80026ba:	4b15      	ldr	r3, [pc, #84]	@ (8002710 <_sbrk+0x60>)
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026c4:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <_sbrk+0x64>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d102      	bne.n	80026d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026cc:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <_sbrk+0x64>)
 80026ce:	4a12      	ldr	r2, [pc, #72]	@ (8002718 <_sbrk+0x68>)
 80026d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026d2:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <_sbrk+0x64>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d207      	bcs.n	80026f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026e0:	f006 ff9a 	bl	8009618 <__errno>
 80026e4:	4603      	mov	r3, r0
 80026e6:	220c      	movs	r2, #12
 80026e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	e009      	b.n	8002704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026f0:	4b08      	ldr	r3, [pc, #32]	@ (8002714 <_sbrk+0x64>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026f6:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <_sbrk+0x64>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	4a05      	ldr	r2, [pc, #20]	@ (8002714 <_sbrk+0x64>)
 8002700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002702:	68fb      	ldr	r3, [r7, #12]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20018000 	.word	0x20018000
 8002710:	00000400 	.word	0x00000400
 8002714:	20000518 	.word	0x20000518
 8002718:	20000670 	.word	0x20000670

0800271c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002720:	4b06      	ldr	r3, [pc, #24]	@ (800273c <SystemInit+0x20>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002726:	4a05      	ldr	r2, [pc, #20]	@ (800273c <SystemInit+0x20>)
 8002728:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800272c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <task2_run>:
#include "task2.h"
#include <stdlib.h>


void task2_run(uint8_t* State, uint8_t* BatKill,uint8_t* RadKill,int* usWidth,uint8_t* DriveON,uint8_t* ArmON,uint8_t* MDON,uint8_t* OPENMV)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
    // Task 2 implementation
	while(1){
		switch(*State){
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <task2_run+0x1c>
 8002756:	2b01      	cmp	r3, #1
 8002758:	d004      	beq.n	8002764 <task2_run+0x24>
 800275a:	e7f8      	b.n	800274e <task2_run+0xe>

		case 0:
			//State 0: INIT

			*State = 1;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2201      	movs	r2, #1
 8002760:	701a      	strb	r2, [r3, #0]

			break;
 8002762:	e04a      	b.n	80027fa <task2_run+0xba>

		case 1:
			//State 1: Check Battery
			//Check Radio First, then Battery
			//Suposed to be 1500, max plus minus 400
			if((abs(*usWidth-1950)>200)&(*usWidth>500)) //If Pulse width within 200 microseconds, then kill
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f2a3 739e 	subw	r3, r3, #1950	@ 0x79e
 800276c:	2b00      	cmp	r3, #0
 800276e:	bfb8      	it	lt
 8002770:	425b      	neglt	r3, r3
 8002772:	2bc8      	cmp	r3, #200	@ 0xc8
 8002774:	bfcc      	ite	gt
 8002776:	2301      	movgt	r3, #1
 8002778:	2300      	movle	r3, #0
 800277a:	b2da      	uxtb	r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002784:	bfcc      	ite	gt
 8002786:	2301      	movgt	r3, #1
 8002788:	2300      	movle	r3, #0
 800278a:	b2db      	uxtb	r3, r3
 800278c:	4013      	ands	r3, r2
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00c      	beq.n	80027ae <task2_run+0x6e>
			{
				*RadKill = 1;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
				//Kill all motors and metal detector
				*DriveON = 0;
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
				*ArmON = 0;
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]
				*MDON = 0;
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
 80027ac:	e00b      	b.n	80027c6 <task2_run+0x86>
			}
			else {
				*RadKill = 0;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
				//Turn on Metal Detector, motors
				*DriveON = 1;
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
				*ArmON = 1;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
				*MDON = 1;
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
				}

			if (*BatKill == 1){
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d10b      	bne.n	80027e6 <task2_run+0xa6>
				//Kill Everything
				*DriveON = 0;
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]
			    *ArmON = 0;
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
				*MDON = 0;
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
				*OPENMV = 0;
 80027e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]

			}
			*State = 1; //Always return to state 1
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
			printf("%d\r\n",*usWidth);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4619      	mov	r1, r3
 80027f2:	4802      	ldr	r0, [pc, #8]	@ (80027fc <task2_run+0xbc>)
 80027f4:	f006 fe6c 	bl	80094d0 <iprintf>
			break;
 80027f8:	bf00      	nop
		switch(*State){
 80027fa:	e7a8      	b.n	800274e <task2_run+0xe>
 80027fc:	0800a1e0 	.word	0x0800a1e0

08002800 <task6_run>:
#include <stdlib.h>
#include "motorcontrol.h"
#include "encoder.h"

//Task 6 state machine: Drive Motors
void task6_run(uint8_t* State, uint8_t* DriveON_MD,uint8_t* DriveON_Rad,uint8_t* Follow, float* Distance_Target, float* Angle_Target, TIM_HandleTypeDef htim1,TIM_HandleTypeDef htim3,TIM_HandleTypeDef htim4){
 8002800:	b5b0      	push	{r4, r5, r7, lr}
 8002802:	b0c8      	sub	sp, #288	@ 0x120
 8002804:	af00      	add	r7, sp, #0
 8002806:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 800280a:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 800280e:	6020      	str	r0, [r4, #0]
 8002810:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8002814:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 8002818:	6001      	str	r1, [r0, #0]
 800281a:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800281e:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8002822:	600a      	str	r2, [r1, #0]
 8002824:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002828:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800282c:	6013      	str	r3, [r2, #0]

	while(1){
			switch(*State){
 800282e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002832:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b04      	cmp	r3, #4
 800283c:	d8f7      	bhi.n	800282e <task6_run+0x2e>
 800283e:	a201      	add	r2, pc, #4	@ (adr r2, 8002844 <task6_run+0x44>)
 8002840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002844:	08002859 	.word	0x08002859
 8002848:	080029f1 	.word	0x080029f1
 800284c:	08002a61 	.word	0x08002a61
 8002850:	08002b9b 	.word	0x08002b9b
 8002854:	08002bfd 	.word	0x08002bfd

			case 0:
				//State 0: INIT

				uint32_t previousMillis = 0;//for debug
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
				encoder_t encoder2;
				controller_t controller1;
				controller_t controller2;

				// Assign motor 1 to Timer 1 channels 1 and 3
				motor1.chA = &(htim1.Instance->CCR2);
 800285e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002862:	3338      	adds	r3, #56	@ 0x38
 8002864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
				motor1.chB = &(htim1.Instance->CCR4);
 8002868:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800286c:	3340      	adds	r3, #64	@ 0x40
 800286e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
				motor1.Period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8002872:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002878:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

				// Assign motor 2 to Timer 1 channels 2 and 4
				motor2.chA = &(htim1.Instance->CCR1);
 800287c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002880:	3334      	adds	r3, #52	@ 0x34
 8002882:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
				motor2.chB = &(htim1.Instance->CCR3);
 8002886:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800288a:	333c      	adds	r3, #60	@ 0x3c
 800288c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				motor2.Period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8002890:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002896:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

				//Set initial duty cycles
				set_duty(&motor1, 0);
 800289a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800289e:	ed9f 0ad0 	vldr	s0, [pc, #832]	@ 8002be0 <task6_run+0x3e0>
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fa28 	bl	8001cf8 <set_duty>
				set_duty(&motor2, 0);
 80028a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80028ac:	ed9f 0acc 	vldr	s0, [pc, #816]	@ 8002be0 <task6_run+0x3e0>
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fa21 	bl	8001cf8 <set_duty>

				// Initialize encoders
				int16_t mot1_velocity = 0;
 80028b6:	2300      	movs	r3, #0
 80028b8:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
				int32_t mot1_position = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
				uint32_t enc1_lastval = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
				uint32_t last_tick1 = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
				encoder1 = (encoder_t){&htim3, mot1_velocity, mot1_position, enc1_lastval, last_tick1};
 80028ce:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 80028d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028d6:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 80028da:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80028de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80028ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80028f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

				int16_t mot2_velocity = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
				int32_t mot2_position = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
				uint32_t enc2_lastval = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
				uint32_t last_tick2 = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
				encoder2 = (encoder_t){&htim4, mot2_velocity, mot2_position, enc2_lastval, last_tick2};
 800290e:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8002912:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002914:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8002918:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
 800291c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002920:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002928:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800292c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002930:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

				//Set test duty cycles
				set_duty(&motor1, 0);
 8002934:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002938:	ed9f 0aa9 	vldr	s0, [pc, #676]	@ 8002be0 <task6_run+0x3e0>
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff f9db 	bl	8001cf8 <set_duty>
				set_duty(&motor2, 0);
 8002942:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002946:	ed9f 0aa6 	vldr	s0, [pc, #664]	@ 8002be0 <task6_run+0x3e0>
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff f9d4 	bl	8001cf8 <set_duty>

				// Initialize controllers
				float Pgain_velocity1 = 0.04;
 8002950:	4ba4      	ldr	r3, [pc, #656]	@ (8002be4 <task6_run+0x3e4>)
 8002952:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				float Igain_velocity1 = 0.01;
 8002956:	4ba4      	ldr	r3, [pc, #656]	@ (8002be8 <task6_run+0x3e8>)
 8002958:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
				int32_t velocity_setpoint1 = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
				int32_t esum1 = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
				controller1 = (controller_t){Pgain_velocity1, Igain_velocity1, velocity_setpoint1, esum1};
 8002968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800296c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800296e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002972:	673b      	str	r3, [r7, #112]	@ 0x70
 8002974:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002978:	677b      	str	r3, [r7, #116]	@ 0x74
 800297a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800297e:	67bb      	str	r3, [r7, #120]	@ 0x78

				float Pgain_velocity2 = 0.04;
 8002980:	4b98      	ldr	r3, [pc, #608]	@ (8002be4 <task6_run+0x3e4>)
 8002982:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				float Igain_velocity2 = 0.01;
 8002986:	4b98      	ldr	r3, [pc, #608]	@ (8002be8 <task6_run+0x3e8>)
 8002988:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
				int32_t velocity_setpoint2 = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
				int32_t esum2 = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
				controller2 = (controller_t){Pgain_velocity2, Igain_velocity2, velocity_setpoint2, esum2};
 8002998:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800299c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800299e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80029a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80029a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80029aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029ae:	66bb      	str	r3, [r7, #104]	@ 0x68


				float Pgain_distance = 500; //how much to scale velocity based on distance away
 80029b0:	4b8e      	ldr	r3, [pc, #568]	@ (8002bec <task6_run+0x3ec>)
 80029b2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
				//float angle_error; // updated by open mv H7 camera
				float Pgain_angle = 4000;//0.6; //how much to scale skid steering based on angle error
 80029b6:	4b8e      	ldr	r3, [pc, #568]	@ (8002bf0 <task6_run+0x3f0>)
 80029b8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
				float skid_modifier; // how much to scale motor setpoints to achieve angle turn

				//Setup follow variables
				//int32_t current_distance; //updated by open mv H7 camera
				float distance_error = 0;
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
				float velocity_setpoint = 0;
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
				float optimal_distance = -11; // desired follow distance
 80029cc:	4b89      	ldr	r3, [pc, #548]	@ (8002bf4 <task6_run+0x3f4>)
 80029ce:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

				float max_skid_modifier = 1.0; // Adjust this value as needed
 80029d2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80029d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
				float max_velocity = 3000;
 80029da:	4b87      	ldr	r3, [pc, #540]	@ (8002bf8 <task6_run+0x3f8>)
 80029dc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
				*State = 1;
 80029e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029e4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2201      	movs	r2, #1
 80029ec:	701a      	strb	r2, [r3, #0]

				break;
 80029ee:	e131      	b.n	8002c54 <task6_run+0x454>


			case 1:
				//State 1: Flag check
				if (*DriveON_Rad == 1){
 80029f0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029f4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d127      	bne.n	8002a50 <task6_run+0x250>
					//If radio triggered, run rest of code
					if (*DriveON_MD == 1){
 8002a00:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a04:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d107      	bne.n	8002a20 <task6_run+0x220>
						//If Metal Detected, Go to state 3
						*State = 3;
 8002a10:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a14:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	701a      	strb	r2, [r3, #0]
					*State = 1; //Else, return to state 1

					//SET DRIVE MOTORS TO 0;
				}

				break;
 8002a1e:	e119      	b.n	8002c54 <task6_run+0x454>
						if (*Follow == 1){
 8002a20:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a24:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d107      	bne.n	8002a40 <task6_run+0x240>
							*State = 2;
 8002a30:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a34:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	701a      	strb	r2, [r3, #0]
				break;
 8002a3e:	e109      	b.n	8002c54 <task6_run+0x454>
							*State = 4;
 8002a40:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a44:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	701a      	strb	r2, [r3, #0]
				break;
 8002a4e:	e101      	b.n	8002c54 <task6_run+0x454>
					*State = 1; //Else, return to state 1
 8002a50:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a54:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
				break;
 8002a5e:	e0f9      	b.n	8002c54 <task6_run+0x454>

			case 2:
				//State 2: Follow mode


				if(*Distance_Target != 0){
 8002a60:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002a64:	edd3 7a00 	vldr	s15, [r3]
 8002a68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a70:	d069      	beq.n	8002b46 <task6_run+0x346>
					distance_error = *Distance_Target - optimal_distance;
 8002a72:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002a76:	ed93 7a00 	vldr	s14, [r3]
 8002a7a:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8002a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a82:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104

				velocity_setpoint = -distance_error*Pgain_distance;
 8002a86:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8002a8a:	eef1 7a67 	vneg.f32	s15, s15
 8002a8e:	ed97 7a46 	vldr	s14, [r7, #280]	@ 0x118
 8002a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a96:	edc7 7a44 	vstr	s15, [r7, #272]	@ 0x110
				if (velocity_setpoint > max_velocity) {
 8002a9a:	ed97 7a44 	vldr	s14, [r7, #272]	@ 0x110
 8002a9e:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 8002aa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aaa:	dd04      	ble.n	8002ab6 <task6_run+0x2b6>
					velocity_setpoint = max_velocity;
 8002aac:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ab0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002ab4:	e010      	b.n	8002ad8 <task6_run+0x2d8>
					} else if (velocity_setpoint < -max_velocity) {
 8002ab6:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 8002aba:	eef1 7a67 	vneg.f32	s15, s15
 8002abe:	ed97 7a44 	vldr	s14, [r7, #272]	@ 0x110
 8002ac2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aca:	d505      	bpl.n	8002ad8 <task6_run+0x2d8>
						velocity_setpoint = -max_velocity;
 8002acc:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 8002ad0:	eef1 7a67 	vneg.f32	s15, s15
 8002ad4:	edc7 7a44 	vstr	s15, [r7, #272]	@ 0x110
					}
				skid_modifier = Pgain_angle*(*Angle_Target+0.09);
 8002ad8:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8002adc:	f7fd fe56 	bl	800078c <__aeabi_f2d>
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	460d      	mov	r5, r1
 8002ae4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fe4e 	bl	800078c <__aeabi_f2d>
 8002af0:	a339      	add	r3, pc, #228	@ (adr r3, 8002bd8 <task6_run+0x3d8>)
 8002af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af6:	f7fd fceb 	bl	80004d0 <__adddf3>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4620      	mov	r0, r4
 8002b00:	4629      	mov	r1, r5
 8002b02:	f7fd fbb5 	bl	8000270 <__aeabi_dmul>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f7fd fe95 	bl	800083c <__aeabi_d2f>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
//
//					// Turn
//					controller1.velocity_setpoint = velocity_setpoint * (1 + skid_modifier);
//					controller2.velocity_setpoint = velocity_setpoint * (1 - skid_modifier);

				controller1.velocity_setpoint = velocity_setpoint  + skid_modifier;
 8002b18:	ed97 7a44 	vldr	s14, [r7, #272]	@ 0x110
 8002b1c:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b28:	ee17 3a90 	vmov	r3, s15
 8002b2c:	677b      	str	r3, [r7, #116]	@ 0x74
				controller2.velocity_setpoint = velocity_setpoint  - skid_modifier;
 8002b2e:	ed97 7a44 	vldr	s14, [r7, #272]	@ 0x110
 8002b32:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b3e:	ee17 3a90 	vmov	r3, s15
 8002b42:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b44:	e003      	b.n	8002b4e <task6_run+0x34e>
				}
				else{
					controller1.velocity_setpoint = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	677b      	str	r3, [r7, #116]	@ 0x74
					controller2.velocity_setpoint = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	667b      	str	r3, [r7, #100]	@ 0x64
				}



				if (HAL_GetTick() - previousMillis >= 100) {
 8002b4e:	f000 f91b 	bl	8002d88 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b63      	cmp	r3, #99	@ 0x63
 8002b5c:	d915      	bls.n	8002b8a <task6_run+0x38a>
					previousMillis = HAL_GetTick();
 8002b5e:	f000 f913 	bl	8002d88 <HAL_GetTick>
 8002b62:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c

			        // Print velocities
//					printf("Angle: %ld\n", (int)Angle_Target);
//			        printf("Velocity1: %ld\n", controller1.velocity_setpoint);
//			        printf("Velocity2: %ld\n", controller2.velocity_setpoint);
			        run_control(&controller1, &motor1, &encoder1);
 8002b66:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8002b6a:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8002b6e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff f92e 	bl	8001dd4 <run_control>
			        run_control(&controller2, &motor2, &encoder2);
 8002b78:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8002b7c:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8002b80:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff f925 	bl	8001dd4 <run_control>
			    }



				*State = 1; //Always return to State 1
 8002b8a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b8e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
				break;
 8002b98:	e05c      	b.n	8002c54 <task6_run+0x454>

			case 3:
				//State 3: Metal Detected Mode

				//SET ALL MOTORS TO BRAKE MODE
				controller1.velocity_setpoint = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	677b      	str	r3, [r7, #116]	@ 0x74
				controller2.velocity_setpoint = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	667b      	str	r3, [r7, #100]	@ 0x64

				run_control(&controller1, &motor1, &encoder1);
 8002ba2:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8002ba6:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8002baa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff f910 	bl	8001dd4 <run_control>
				run_control(&controller2, &motor2, &encoder2);
 8002bb4:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8002bb8:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8002bbc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff f907 	bl	8001dd4 <run_control>

				//Could add additional drive forward and backward functionality here
				//But for demo, we have simplified the design

				*State = 1; //Always return to State 1
 8002bc6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002bca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	701a      	strb	r2, [r3, #0]

				break;
 8002bd4:	e03e      	b.n	8002c54 <task6_run+0x454>
 8002bd6:	bf00      	nop
 8002bd8:	70a3d70a 	.word	0x70a3d70a
 8002bdc:	3fb70a3d 	.word	0x3fb70a3d
 8002be0:	00000000 	.word	0x00000000
 8002be4:	3d23d70a 	.word	0x3d23d70a
 8002be8:	3c23d70a 	.word	0x3c23d70a
 8002bec:	43fa0000 	.word	0x43fa0000
 8002bf0:	457a0000 	.word	0x457a0000
 8002bf4:	c1300000 	.word	0xc1300000
 8002bf8:	453b8000 	.word	0x453b8000



			case 4:
				//State 4: DEBUG Testing, should be empty on final code
				*State = 1; //Always return to State 1
 8002bfc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c00:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2201      	movs	r2, #1
 8002c08:	701a      	strb	r2, [r3, #0]
				if (HAL_GetTick() - previousMillis >= 100) {
 8002c0a:	f000 f8bd 	bl	8002d88 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b63      	cmp	r3, #99	@ 0x63
 8002c18:	d91a      	bls.n	8002c50 <task6_run+0x450>
						  previousMillis = HAL_GetTick();
 8002c1a:	f000 f8b5 	bl	8002d88 <HAL_GetTick>
 8002c1e:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
						  controller1.velocity_setpoint = 100000;
 8002c22:	4b0d      	ldr	r3, [pc, #52]	@ (8002c58 <task6_run+0x458>)
 8002c24:	677b      	str	r3, [r7, #116]	@ 0x74
						  run_control(&controller1, &motor1, &encoder1);
 8002c26:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8002c2a:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8002c2e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff f8ce 	bl	8001dd4 <run_control>
//						  controller2.velocity_setpoint = 100000;
//						  run_control(&controller2, &motor2, &encoder2);

	//		  	          read_encoder(&encoder1);
	//		  	          read_encoder(&encoder2);
			  	    	  printf("Encoder1 position: %ld\n", encoder1.position);
 8002c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4807      	ldr	r0, [pc, #28]	@ (8002c5c <task6_run+0x45c>)
 8002c40:	f006 fc46 	bl	80094d0 <iprintf>
			  	    	  printf("Encoder1 Velocity: %d\n", encoder1.velocity);
 8002c44:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4805      	ldr	r0, [pc, #20]	@ (8002c60 <task6_run+0x460>)
 8002c4c:	f006 fc40 	bl	80094d0 <iprintf>
//						  printf("Encoder2 position: %ld\n", encoder2.position);
//						  printf("Encoder2 Velocity: %d\n", encoder2.velocity);
				}
				break;
 8002c50:	bf00      	nop
 8002c52:	e5ec      	b.n	800282e <task6_run+0x2e>
			switch(*State){
 8002c54:	e5eb      	b.n	800282e <task6_run+0x2e>
 8002c56:	bf00      	nop
 8002c58:	000186a0 	.word	0x000186a0
 8002c5c:	0800a1e8 	.word	0x0800a1e8
 8002c60:	0800a200 	.word	0x0800a200

08002c64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c68:	f7ff fd58 	bl	800271c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c6c:	480c      	ldr	r0, [pc, #48]	@ (8002ca0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c6e:	490d      	ldr	r1, [pc, #52]	@ (8002ca4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ca8 <LoopForever+0xe>)
  movs r3, #0
 8002c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c74:	e002      	b.n	8002c7c <LoopCopyDataInit>

08002c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c7a:	3304      	adds	r3, #4

08002c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c80:	d3f9      	bcc.n	8002c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c82:	4a0a      	ldr	r2, [pc, #40]	@ (8002cac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c84:	4c0a      	ldr	r4, [pc, #40]	@ (8002cb0 <LoopForever+0x16>)
  movs r3, #0
 8002c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c88:	e001      	b.n	8002c8e <LoopFillZerobss>

08002c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c8c:	3204      	adds	r2, #4

08002c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c90:	d3fb      	bcc.n	8002c8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c92:	f006 fcc7 	bl	8009624 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c96:	f7fe f839 	bl	8000d0c <main>

08002c9a <LoopForever>:

LoopForever:
    b LoopForever
 8002c9a:	e7fe      	b.n	8002c9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ca4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002ca8:	0800a2a4 	.word	0x0800a2a4
  ldr r2, =_sbss
 8002cac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002cb0:	2000066c 	.word	0x2000066c

08002cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cb4:	e7fe      	b.n	8002cb4 <ADC1_2_IRQHandler>

08002cb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc0:	2003      	movs	r0, #3
 8002cc2:	f001 fa57 	bl	8004174 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cc6:	200f      	movs	r0, #15
 8002cc8:	f000 f80e 	bl	8002ce8 <HAL_InitTick>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	71fb      	strb	r3, [r7, #7]
 8002cd6:	e001      	b.n	8002cdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cd8:	f7ff f8b4 	bl	8001e44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002cf4:	4b17      	ldr	r3, [pc, #92]	@ (8002d54 <HAL_InitTick+0x6c>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d023      	beq.n	8002d44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002cfc:	4b16      	ldr	r3, [pc, #88]	@ (8002d58 <HAL_InitTick+0x70>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b14      	ldr	r3, [pc, #80]	@ (8002d54 <HAL_InitTick+0x6c>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	4619      	mov	r1, r3
 8002d06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d12:	4618      	mov	r0, r3
 8002d14:	f001 fa63 	bl	80041de <HAL_SYSTICK_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10f      	bne.n	8002d3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b0f      	cmp	r3, #15
 8002d22:	d809      	bhi.n	8002d38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d24:	2200      	movs	r2, #0
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2c:	f001 fa2d 	bl	800418a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d30:	4a0a      	ldr	r2, [pc, #40]	@ (8002d5c <HAL_InitTick+0x74>)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e007      	b.n	8002d48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
 8002d3c:	e004      	b.n	8002d48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
 8002d42:	e001      	b.n	8002d48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000008 	.word	0x20000008
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	20000004 	.word	0x20000004

08002d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d64:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <HAL_IncTick+0x20>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <HAL_IncTick+0x24>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4413      	add	r3, r2
 8002d70:	4a04      	ldr	r2, [pc, #16]	@ (8002d84 <HAL_IncTick+0x24>)
 8002d72:	6013      	str	r3, [r2, #0]
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000008 	.word	0x20000008
 8002d84:	2000051c 	.word	0x2000051c

08002d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	@ (8002d9c <HAL_GetTick+0x14>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	2000051c 	.word	0x2000051c

08002da0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	609a      	str	r2, [r3, #8]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	609a      	str	r2, [r3, #8]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3360      	adds	r3, #96	@ 0x60
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b08      	ldr	r3, [pc, #32]	@ (8002e4c <LL_ADC_SetOffset+0x44>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	03fff000 	.word	0x03fff000

08002e50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3360      	adds	r3, #96	@ 0x60
 8002e5e:	461a      	mov	r2, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3360      	adds	r3, #96	@ 0x60
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ea6:	bf00      	nop
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b087      	sub	sp, #28
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3330      	adds	r3, #48	@ 0x30
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	4413      	add	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	211f      	movs	r1, #31
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	0e9b      	lsrs	r3, r3, #26
 8002eea:	f003 011f 	and.w	r1, r3, #31
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002efe:	bf00      	nop
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b087      	sub	sp, #28
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3314      	adds	r3, #20
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	0e5b      	lsrs	r3, r3, #25
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	4413      	add	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	0d1b      	lsrs	r3, r3, #20
 8002f32:	f003 031f 	and.w	r3, r3, #31
 8002f36:	2107      	movs	r1, #7
 8002f38:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	401a      	ands	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	0d1b      	lsrs	r3, r3, #20
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f54:	bf00      	nop
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0318 	and.w	r3, r3, #24
 8002f82:	4908      	ldr	r1, [pc, #32]	@ (8002fa4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f84:	40d9      	lsrs	r1, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	400b      	ands	r3, r1
 8002f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	0007ffff 	.word	0x0007ffff

08002fa8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 031f 	and.w	r3, r3, #31
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002fd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6093      	str	r3, [r2, #8]
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ffc:	d101      	bne.n	8003002 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003020:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003024:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003048:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800304c:	d101      	bne.n	8003052 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003070:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003074:	f043 0201 	orr.w	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <LL_ADC_IsEnabled+0x18>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <LL_ADC_IsEnabled+0x1a>
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030c2:	f043 0204 	orr.w	r2, r3, #4
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d101      	bne.n	80030ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b08      	cmp	r3, #8
 800310e:	d101      	bne.n	8003114 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b089      	sub	sp, #36	@ 0x24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e130      	b.n	80033a0 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7fe fea3 	bl	8001e98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff3f 	bl	8002fe8 <LL_ADC_IsDeepPowerDownEnabled>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d004      	beq.n	800317a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff25 	bl	8002fc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff ff5a 	bl	8003038 <LL_ADC_IsInternalRegulatorEnabled>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d115      	bne.n	80031b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff ff3e 	bl	8003010 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003194:	4b84      	ldr	r3, [pc, #528]	@ (80033a8 <HAL_ADC_Init+0x284>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	099b      	lsrs	r3, r3, #6
 800319a:	4a84      	ldr	r2, [pc, #528]	@ (80033ac <HAL_ADC_Init+0x288>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	099b      	lsrs	r3, r3, #6
 80031a2:	3301      	adds	r3, #1
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031a8:	e002      	b.n	80031b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f9      	bne.n	80031aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff ff3c 	bl	8003038 <LL_ADC_IsInternalRegulatorEnabled>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10d      	bne.n	80031e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ca:	f043 0210 	orr.w	r2, r3, #16
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d6:	f043 0201 	orr.w	r2, r3, #1
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff ff75 	bl	80030d6 <LL_ADC_REG_IsConversionOngoing>
 80031ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f040 80c9 	bne.w	800338e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f040 80c5 	bne.w	800338e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003208:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800320c:	f043 0202 	orr.w	r2, r3, #2
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff35 	bl	8003088 <LL_ADC_IsEnabled>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d115      	bne.n	8003250 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003224:	4862      	ldr	r0, [pc, #392]	@ (80033b0 <HAL_ADC_Init+0x28c>)
 8003226:	f7ff ff2f 	bl	8003088 <LL_ADC_IsEnabled>
 800322a:	4604      	mov	r4, r0
 800322c:	4861      	ldr	r0, [pc, #388]	@ (80033b4 <HAL_ADC_Init+0x290>)
 800322e:	f7ff ff2b 	bl	8003088 <LL_ADC_IsEnabled>
 8003232:	4603      	mov	r3, r0
 8003234:	431c      	orrs	r4, r3
 8003236:	4860      	ldr	r0, [pc, #384]	@ (80033b8 <HAL_ADC_Init+0x294>)
 8003238:	f7ff ff26 	bl	8003088 <LL_ADC_IsEnabled>
 800323c:	4603      	mov	r3, r0
 800323e:	4323      	orrs	r3, r4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d105      	bne.n	8003250 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4619      	mov	r1, r3
 800324a:	485c      	ldr	r0, [pc, #368]	@ (80033bc <HAL_ADC_Init+0x298>)
 800324c:	f7ff fda8 	bl	8002da0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	7e5b      	ldrb	r3, [r3, #25]
 8003254:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800325a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003260:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003266:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800326e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d106      	bne.n	800328c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	3b01      	subs	r3, #1
 8003284:	045b      	lsls	r3, r3, #17
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003298:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	4b44      	ldr	r3, [pc, #272]	@ (80033c0 <HAL_ADC_Init+0x29c>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	69b9      	ldr	r1, [r7, #24]
 80032b8:	430b      	orrs	r3, r1
 80032ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ff1b 	bl	80030fc <LL_ADC_INJ_IsConversionOngoing>
 80032c6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d13d      	bne.n	800334a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d13a      	bne.n	800334a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80032d8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80032e0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032f0:	f023 0302 	bic.w	r3, r3, #2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	69b9      	ldr	r1, [r7, #24]
 80032fa:	430b      	orrs	r3, r1
 80032fc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003304:	2b01      	cmp	r3, #1
 8003306:	d118      	bne.n	800333a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003312:	f023 0304 	bic.w	r3, r3, #4
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800331e:	4311      	orrs	r1, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003324:	4311      	orrs	r1, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800332a:	430a      	orrs	r2, r1
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	611a      	str	r2, [r3, #16]
 8003338:	e007      	b.n	800334a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d10c      	bne.n	800336c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003358:	f023 010f 	bic.w	r1, r3, #15
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	1e5a      	subs	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	631a      	str	r2, [r3, #48]	@ 0x30
 800336a:	e007      	b.n	800337c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 020f 	bic.w	r2, r2, #15
 800337a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003380:	f023 0303 	bic.w	r3, r3, #3
 8003384:	f043 0201 	orr.w	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	655a      	str	r2, [r3, #84]	@ 0x54
 800338c:	e007      	b.n	800339e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003392:	f043 0210 	orr.w	r2, r3, #16
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800339e:	7ffb      	ldrb	r3, [r7, #31]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3724      	adds	r7, #36	@ 0x24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd90      	pop	{r4, r7, pc}
 80033a8:	20000000 	.word	0x20000000
 80033ac:	053e2d63 	.word	0x053e2d63
 80033b0:	50040000 	.word	0x50040000
 80033b4:	50040100 	.word	0x50040100
 80033b8:	50040200 	.word	0x50040200
 80033bc:	50040300 	.word	0x50040300
 80033c0:	fff0c007 	.word	0xfff0c007

080033c4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033cc:	4857      	ldr	r0, [pc, #348]	@ (800352c <HAL_ADC_Start+0x168>)
 80033ce:	f7ff fdeb 	bl	8002fa8 <LL_ADC_GetMultimode>
 80033d2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fe7c 	bl	80030d6 <LL_ADC_REG_IsConversionOngoing>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 809c 	bne.w	800351e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_ADC_Start+0x30>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e097      	b.n	8003524 <HAL_ADC_Start+0x160>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fc8d 	bl	8003d1c <ADC_Enable>
 8003402:	4603      	mov	r3, r0
 8003404:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003406:	7dfb      	ldrb	r3, [r7, #23]
 8003408:	2b00      	cmp	r3, #0
 800340a:	f040 8083 	bne.w	8003514 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003412:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003416:	f023 0301 	bic.w	r3, r3, #1
 800341a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a42      	ldr	r2, [pc, #264]	@ (8003530 <HAL_ADC_Start+0x16c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d002      	beq.n	8003432 <HAL_ADC_Start+0x6e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	e000      	b.n	8003434 <HAL_ADC_Start+0x70>
 8003432:	4b40      	ldr	r3, [pc, #256]	@ (8003534 <HAL_ADC_Start+0x170>)
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	4293      	cmp	r3, r2
 800343a:	d002      	beq.n	8003442 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d105      	bne.n	800344e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003446:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003452:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800345a:	d106      	bne.n	800346a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003460:	f023 0206 	bic.w	r2, r3, #6
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	659a      	str	r2, [r3, #88]	@ 0x58
 8003468:	e002      	b.n	8003470 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	221c      	movs	r2, #28
 8003476:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a2a      	ldr	r2, [pc, #168]	@ (8003530 <HAL_ADC_Start+0x16c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d002      	beq.n	8003490 <HAL_ADC_Start+0xcc>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	e000      	b.n	8003492 <HAL_ADC_Start+0xce>
 8003490:	4b28      	ldr	r3, [pc, #160]	@ (8003534 <HAL_ADC_Start+0x170>)
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	4293      	cmp	r3, r2
 8003498:	d008      	beq.n	80034ac <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	2b05      	cmp	r3, #5
 80034a4:	d002      	beq.n	80034ac <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2b09      	cmp	r3, #9
 80034aa:	d114      	bne.n	80034d6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d007      	beq.n	80034ca <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034be:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80034c2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fded 	bl	80030ae <LL_ADC_REG_StartConversion>
 80034d4:	e025      	b.n	8003522 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a12      	ldr	r2, [pc, #72]	@ (8003530 <HAL_ADC_Start+0x16c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d002      	beq.n	80034f2 <HAL_ADC_Start+0x12e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	e000      	b.n	80034f4 <HAL_ADC_Start+0x130>
 80034f2:	4b10      	ldr	r3, [pc, #64]	@ (8003534 <HAL_ADC_Start+0x170>)
 80034f4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00f      	beq.n	8003522 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003506:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800350a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	655a      	str	r2, [r3, #84]	@ 0x54
 8003512:	e006      	b.n	8003522 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800351c:	e001      	b.n	8003522 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800351e:	2302      	movs	r3, #2
 8003520:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003522:	7dfb      	ldrb	r3, [r7, #23]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	50040300 	.word	0x50040300
 8003530:	50040100 	.word	0x50040100
 8003534:	50040000 	.word	0x50040000

08003538 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b0b6      	sub	sp, #216	@ 0xd8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003548:	2300      	movs	r3, #0
 800354a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_ADC_ConfigChannel+0x22>
 8003556:	2302      	movs	r3, #2
 8003558:	e3c9      	b.n	8003cee <HAL_ADC_ConfigChannel+0x7b6>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fdb5 	bl	80030d6 <LL_ADC_REG_IsConversionOngoing>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	f040 83aa 	bne.w	8003cc8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b05      	cmp	r3, #5
 8003582:	d824      	bhi.n	80035ce <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	3b02      	subs	r3, #2
 800358a:	2b03      	cmp	r3, #3
 800358c:	d81b      	bhi.n	80035c6 <HAL_ADC_ConfigChannel+0x8e>
 800358e:	a201      	add	r2, pc, #4	@ (adr r2, 8003594 <HAL_ADC_ConfigChannel+0x5c>)
 8003590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003594:	080035a5 	.word	0x080035a5
 8003598:	080035ad 	.word	0x080035ad
 800359c:	080035b5 	.word	0x080035b5
 80035a0:	080035bd 	.word	0x080035bd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80035a4:	230c      	movs	r3, #12
 80035a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80035aa:	e010      	b.n	80035ce <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80035ac:	2312      	movs	r3, #18
 80035ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80035b2:	e00c      	b.n	80035ce <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80035b4:	2318      	movs	r3, #24
 80035b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80035ba:	e008      	b.n	80035ce <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80035bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80035c4:	e003      	b.n	80035ce <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80035c6:	2306      	movs	r3, #6
 80035c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80035cc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80035dc:	f7ff fc69 	bl	8002eb2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff fd76 	bl	80030d6 <LL_ADC_REG_IsConversionOngoing>
 80035ea:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff fd82 	bl	80030fc <LL_ADC_INJ_IsConversionOngoing>
 80035f8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003600:	2b00      	cmp	r3, #0
 8003602:	f040 81a4 	bne.w	800394e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003606:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800360a:	2b00      	cmp	r3, #0
 800360c:	f040 819f 	bne.w	800394e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6818      	ldr	r0, [r3, #0]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	6819      	ldr	r1, [r3, #0]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	461a      	mov	r2, r3
 800361e:	f7ff fc74 	bl	8002f0a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	695a      	ldr	r2, [r3, #20]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	08db      	lsrs	r3, r3, #3
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	2b04      	cmp	r3, #4
 8003642:	d00a      	beq.n	800365a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6818      	ldr	r0, [r3, #0]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	6919      	ldr	r1, [r3, #16]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003654:	f7ff fbd8 	bl	8002e08 <LL_ADC_SetOffset>
 8003658:	e179      	b.n	800394e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff fbf5 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003666:	4603      	mov	r3, r0
 8003668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x14e>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fbea 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 800367c:	4603      	mov	r3, r0
 800367e:	0e9b      	lsrs	r3, r3, #26
 8003680:	f003 021f 	and.w	r2, r3, #31
 8003684:	e01e      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x18c>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2100      	movs	r1, #0
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff fbdf 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003692:	4603      	mov	r3, r0
 8003694:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80036a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80036b4:	2320      	movs	r3, #32
 80036b6:	e004      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80036b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80036bc:	fab3 f383 	clz	r3, r3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d105      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x1a4>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	0e9b      	lsrs	r3, r3, #26
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	e018      	b.n	800370e <HAL_ADC_ConfigChannel+0x1d6>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80036f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80036f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80036f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003700:	2320      	movs	r3, #32
 8003702:	e004      	b.n	800370e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003704:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800370e:	429a      	cmp	r2, r3
 8003710:	d106      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2200      	movs	r2, #0
 8003718:	2100      	movs	r1, #0
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff fbae 	bl	8002e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2101      	movs	r1, #1
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff fb92 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 800372c:	4603      	mov	r3, r0
 800372e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10a      	bne.n	800374c <HAL_ADC_ConfigChannel+0x214>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2101      	movs	r1, #1
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff fb87 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003742:	4603      	mov	r3, r0
 8003744:	0e9b      	lsrs	r3, r3, #26
 8003746:	f003 021f 	and.w	r2, r3, #31
 800374a:	e01e      	b.n	800378a <HAL_ADC_ConfigChannel+0x252>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2101      	movs	r1, #1
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff fb7c 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003758:	4603      	mov	r3, r0
 800375a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003762:	fa93 f3a3 	rbit	r3, r3
 8003766:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800376a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800376e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003772:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800377a:	2320      	movs	r3, #32
 800377c:	e004      	b.n	8003788 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800377e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003782:	fab3 f383 	clz	r3, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003792:	2b00      	cmp	r3, #0
 8003794:	d105      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x26a>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	0e9b      	lsrs	r3, r3, #26
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	e018      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x29c>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80037b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80037be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80037c6:	2320      	movs	r3, #32
 80037c8:	e004      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80037ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037ce:	fab3 f383 	clz	r3, r3
 80037d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d106      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2200      	movs	r2, #0
 80037de:	2101      	movs	r1, #1
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fb4b 	bl	8002e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2102      	movs	r1, #2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff fb2f 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x2da>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2102      	movs	r1, #2
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff fb24 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003808:	4603      	mov	r3, r0
 800380a:	0e9b      	lsrs	r3, r3, #26
 800380c:	f003 021f 	and.w	r2, r3, #31
 8003810:	e01e      	b.n	8003850 <HAL_ADC_ConfigChannel+0x318>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2102      	movs	r1, #2
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff fb19 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 800381e:	4603      	mov	r3, r0
 8003820:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003824:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003828:	fa93 f3a3 	rbit	r3, r3
 800382c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003830:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003834:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003838:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003840:	2320      	movs	r3, #32
 8003842:	e004      	b.n	800384e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003844:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003848:	fab3 f383 	clz	r3, r3
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003858:	2b00      	cmp	r3, #0
 800385a:	d105      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x330>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	0e9b      	lsrs	r3, r3, #26
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	e014      	b.n	8003892 <HAL_ADC_ConfigChannel+0x35a>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003870:	fa93 f3a3 	rbit	r3, r3
 8003874:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003876:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003878:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800387c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003884:	2320      	movs	r3, #32
 8003886:	e004      	b.n	8003892 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003888:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800388c:	fab3 f383 	clz	r3, r3
 8003890:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003892:	429a      	cmp	r2, r3
 8003894:	d106      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2200      	movs	r2, #0
 800389c:	2102      	movs	r1, #2
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff faec 	bl	8002e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2103      	movs	r1, #3
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fad0 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10a      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x398>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2103      	movs	r1, #3
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fac5 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 80038c6:	4603      	mov	r3, r0
 80038c8:	0e9b      	lsrs	r3, r3, #26
 80038ca:	f003 021f 	and.w	r2, r3, #31
 80038ce:	e017      	b.n	8003900 <HAL_ADC_ConfigChannel+0x3c8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2103      	movs	r1, #3
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff faba 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 80038dc:	4603      	mov	r3, r0
 80038de:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80038e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ea:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80038ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80038f2:	2320      	movs	r3, #32
 80038f4:	e003      	b.n	80038fe <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80038f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038f8:	fab3 f383 	clz	r3, r3
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003908:	2b00      	cmp	r3, #0
 800390a:	d105      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x3e0>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	0e9b      	lsrs	r3, r3, #26
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	e011      	b.n	800393c <HAL_ADC_ConfigChannel+0x404>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003920:	fa93 f3a3 	rbit	r3, r3
 8003924:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003926:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003928:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800392a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003930:	2320      	movs	r3, #32
 8003932:	e003      	b.n	800393c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003934:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003936:	fab3 f383 	clz	r3, r3
 800393a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800393c:	429a      	cmp	r2, r3
 800393e:	d106      	bne.n	800394e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2200      	movs	r2, #0
 8003946:	2103      	movs	r1, #3
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fa97 	bl	8002e7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fb98 	bl	8003088 <LL_ADC_IsEnabled>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	f040 8140 	bne.w	8003be0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6818      	ldr	r0, [r3, #0]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	6819      	ldr	r1, [r3, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	461a      	mov	r2, r3
 800396e:	f7ff faf7 	bl	8002f60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	4a8f      	ldr	r2, [pc, #572]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x67c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	f040 8131 	bne.w	8003be0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10b      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x46e>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	0e9b      	lsrs	r3, r3, #26
 8003994:	3301      	adds	r3, #1
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	2b09      	cmp	r3, #9
 800399c:	bf94      	ite	ls
 800399e:	2301      	movls	r3, #1
 80039a0:	2300      	movhi	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	e019      	b.n	80039da <HAL_ADC_ConfigChannel+0x4a2>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80039b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80039b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80039be:	2320      	movs	r3, #32
 80039c0:	e003      	b.n	80039ca <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80039c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039c4:	fab3 f383 	clz	r3, r3
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	3301      	adds	r3, #1
 80039cc:	f003 031f 	and.w	r3, r3, #31
 80039d0:	2b09      	cmp	r3, #9
 80039d2:	bf94      	ite	ls
 80039d4:	2301      	movls	r3, #1
 80039d6:	2300      	movhi	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d079      	beq.n	8003ad2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d107      	bne.n	80039fa <HAL_ADC_ConfigChannel+0x4c2>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	0e9b      	lsrs	r3, r3, #26
 80039f0:	3301      	adds	r3, #1
 80039f2:	069b      	lsls	r3, r3, #26
 80039f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039f8:	e015      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x4ee>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a02:	fa93 f3a3 	rbit	r3, r3
 8003a06:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003a08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a0a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003a0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003a12:	2320      	movs	r3, #32
 8003a14:	e003      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003a16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a18:	fab3 f383 	clz	r3, r3
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	069b      	lsls	r3, r3, #26
 8003a22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x50e>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	0e9b      	lsrs	r3, r3, #26
 8003a38:	3301      	adds	r3, #1
 8003a3a:	f003 031f 	and.w	r3, r3, #31
 8003a3e:	2101      	movs	r1, #1
 8003a40:	fa01 f303 	lsl.w	r3, r1, r3
 8003a44:	e017      	b.n	8003a76 <HAL_ADC_ConfigChannel+0x53e>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a4e:	fa93 f3a3 	rbit	r3, r3
 8003a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a56:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003a5e:	2320      	movs	r3, #32
 8003a60:	e003      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003a62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a64:	fab3 f383 	clz	r3, r3
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	2101      	movs	r1, #1
 8003a72:	fa01 f303 	lsl.w	r3, r1, r3
 8003a76:	ea42 0103 	orr.w	r1, r2, r3
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10a      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x564>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	0e9b      	lsrs	r3, r3, #26
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f003 021f 	and.w	r2, r3, #31
 8003a92:	4613      	mov	r3, r2
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	4413      	add	r3, r2
 8003a98:	051b      	lsls	r3, r3, #20
 8003a9a:	e018      	b.n	8003ace <HAL_ADC_ConfigChannel+0x596>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa4:	fa93 f3a3 	rbit	r3, r3
 8003aa8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aac:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003ab4:	2320      	movs	r3, #32
 8003ab6:	e003      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aba:	fab3 f383 	clz	r3, r3
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	f003 021f 	and.w	r2, r3, #31
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	4413      	add	r3, r2
 8003acc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	e081      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d107      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x5b6>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	0e9b      	lsrs	r3, r3, #26
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	069b      	lsls	r3, r3, #26
 8003ae8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003aec:	e015      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x5e2>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003b06:	2320      	movs	r3, #32
 8003b08:	e003      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0c:	fab3 f383 	clz	r3, r3
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	3301      	adds	r3, #1
 8003b14:	069b      	lsls	r3, r3, #26
 8003b16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x602>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	0e9b      	lsrs	r3, r3, #26
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	f003 031f 	and.w	r3, r3, #31
 8003b32:	2101      	movs	r1, #1
 8003b34:	fa01 f303 	lsl.w	r3, r1, r3
 8003b38:	e017      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x632>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	61bb      	str	r3, [r7, #24]
  return result;
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003b52:	2320      	movs	r3, #32
 8003b54:	e003      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	fab3 f383 	clz	r3, r3
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	3301      	adds	r3, #1
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	2101      	movs	r1, #1
 8003b66:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6a:	ea42 0103 	orr.w	r1, r2, r3
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10d      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x65e>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	0e9b      	lsrs	r3, r3, #26
 8003b80:	3301      	adds	r3, #1
 8003b82:	f003 021f 	and.w	r2, r3, #31
 8003b86:	4613      	mov	r3, r2
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3b1e      	subs	r3, #30
 8003b8e:	051b      	lsls	r3, r3, #20
 8003b90:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b94:	e01e      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x69c>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	fa93 f3a3 	rbit	r3, r3
 8003ba2:	60fb      	str	r3, [r7, #12]
  return result;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d104      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003bae:	2320      	movs	r3, #32
 8003bb0:	e006      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x688>
 8003bb2:	bf00      	nop
 8003bb4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	fab3 f383 	clz	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	f003 021f 	and.w	r2, r3, #31
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	4413      	add	r3, r2
 8003bcc:	3b1e      	subs	r3, #30
 8003bce:	051b      	lsls	r3, r3, #20
 8003bd0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bd4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f7ff f995 	bl	8002f0a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b44      	ldr	r3, [pc, #272]	@ (8003cf8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d07a      	beq.n	8003ce2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bec:	4843      	ldr	r0, [pc, #268]	@ (8003cfc <HAL_ADC_ConfigChannel+0x7c4>)
 8003bee:	f7ff f8fd 	bl	8002dec <LL_ADC_GetCommonPathInternalCh>
 8003bf2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a41      	ldr	r2, [pc, #260]	@ (8003d00 <HAL_ADC_ConfigChannel+0x7c8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d12c      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d126      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a3c      	ldr	r2, [pc, #240]	@ (8003d04 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d004      	beq.n	8003c20 <HAL_ADC_ConfigChannel+0x6e8>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a3b      	ldr	r2, [pc, #236]	@ (8003d08 <HAL_ADC_ConfigChannel+0x7d0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d15d      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4834      	ldr	r0, [pc, #208]	@ (8003cfc <HAL_ADC_ConfigChannel+0x7c4>)
 8003c2c:	f7ff f8cb 	bl	8002dc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c30:	4b36      	ldr	r3, [pc, #216]	@ (8003d0c <HAL_ADC_ConfigChannel+0x7d4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	099b      	lsrs	r3, r3, #6
 8003c36:	4a36      	ldr	r2, [pc, #216]	@ (8003d10 <HAL_ADC_ConfigChannel+0x7d8>)
 8003c38:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3c:	099b      	lsrs	r3, r3, #6
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	4613      	mov	r3, r2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c4a:	e002      	b.n	8003c52 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f9      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c58:	e040      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003d14 <HAL_ADC_ConfigChannel+0x7dc>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d118      	bne.n	8003c96 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d112      	bne.n	8003c96 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a23      	ldr	r2, [pc, #140]	@ (8003d04 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d004      	beq.n	8003c84 <HAL_ADC_ConfigChannel+0x74c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a22      	ldr	r2, [pc, #136]	@ (8003d08 <HAL_ADC_ConfigChannel+0x7d0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d12d      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	481b      	ldr	r0, [pc, #108]	@ (8003cfc <HAL_ADC_ConfigChannel+0x7c4>)
 8003c90:	f7ff f899 	bl	8002dc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c94:	e024      	b.n	8003ce0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003d18 <HAL_ADC_ConfigChannel+0x7e0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d120      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ca0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ca4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d11a      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a14      	ldr	r2, [pc, #80]	@ (8003d04 <HAL_ADC_ConfigChannel+0x7cc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d115      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	480e      	ldr	r0, [pc, #56]	@ (8003cfc <HAL_ADC_ConfigChannel+0x7c4>)
 8003cc2:	f7ff f880 	bl	8002dc6 <LL_ADC_SetCommonPathInternalCh>
 8003cc6:	e00c      	b.n	8003ce2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ccc:	f043 0220 	orr.w	r2, r3, #32
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003cda:	e002      	b.n	8003ce2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cdc:	bf00      	nop
 8003cde:	e000      	b.n	8003ce2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ce0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cea:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	37d8      	adds	r7, #216	@ 0xd8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	80080000 	.word	0x80080000
 8003cfc:	50040300 	.word	0x50040300
 8003d00:	c7520000 	.word	0xc7520000
 8003d04:	50040000 	.word	0x50040000
 8003d08:	50040200 	.word	0x50040200
 8003d0c:	20000000 	.word	0x20000000
 8003d10:	053e2d63 	.word	0x053e2d63
 8003d14:	cb840000 	.word	0xcb840000
 8003d18:	80000001 	.word	0x80000001

08003d1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff f9ab 	bl	8003088 <LL_ADC_IsEnabled>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d169      	bne.n	8003e0c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	4b36      	ldr	r3, [pc, #216]	@ (8003e18 <ADC_Enable+0xfc>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00d      	beq.n	8003d62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4a:	f043 0210 	orr.w	r2, r3, #16
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e055      	b.n	8003e0e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff f97a 	bl	8003060 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d6c:	482b      	ldr	r0, [pc, #172]	@ (8003e1c <ADC_Enable+0x100>)
 8003d6e:	f7ff f83d 	bl	8002dec <LL_ADC_GetCommonPathInternalCh>
 8003d72:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d013      	beq.n	8003da4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d7c:	4b28      	ldr	r3, [pc, #160]	@ (8003e20 <ADC_Enable+0x104>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	099b      	lsrs	r3, r3, #6
 8003d82:	4a28      	ldr	r2, [pc, #160]	@ (8003e24 <ADC_Enable+0x108>)
 8003d84:	fba2 2303 	umull	r2, r3, r2, r3
 8003d88:	099b      	lsrs	r3, r3, #6
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d96:	e002      	b.n	8003d9e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f9      	bne.n	8003d98 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003da4:	f7fe fff0 	bl	8002d88 <HAL_GetTick>
 8003da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003daa:	e028      	b.n	8003dfe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff f969 	bl	8003088 <LL_ADC_IsEnabled>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff f94d 	bl	8003060 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dc6:	f7fe ffdf 	bl	8002d88 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d914      	bls.n	8003dfe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d00d      	beq.n	8003dfe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de6:	f043 0210 	orr.w	r2, r3, #16
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df2:	f043 0201 	orr.w	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e007      	b.n	8003e0e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d1cf      	bne.n	8003dac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	8000003f 	.word	0x8000003f
 8003e1c:	50040300 	.word	0x50040300
 8003e20:	20000000 	.word	0x20000000
 8003e24:	053e2d63 	.word	0x053e2d63

08003e28 <LL_ADC_IsEnabled>:
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <LL_ADC_IsEnabled+0x18>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <LL_ADC_IsEnabled+0x1a>
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <LL_ADC_REG_IsConversionOngoing>:
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d101      	bne.n	8003e66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003e74:	b590      	push	{r4, r7, lr}
 8003e76:	b09f      	sub	sp, #124	@ 0x7c
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e093      	b.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a47      	ldr	r2, [pc, #284]	@ (8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d102      	bne.n	8003eb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003eac:	4b46      	ldr	r3, [pc, #280]	@ (8003fc8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003eae:	60bb      	str	r3, [r7, #8]
 8003eb0:	e001      	b.n	8003eb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10b      	bne.n	8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec0:	f043 0220 	orr.w	r2, r3, #32
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e072      	b.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff ffb9 	bl	8003e4e <LL_ADC_REG_IsConversionOngoing>
 8003edc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff ffb3 	bl	8003e4e <LL_ADC_REG_IsConversionOngoing>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d154      	bne.n	8003f98 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003eee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d151      	bne.n	8003f98 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ef4:	4b35      	ldr	r3, [pc, #212]	@ (8003fcc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003ef6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d02c      	beq.n	8003f5a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003f00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6859      	ldr	r1, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003f12:	035b      	lsls	r3, r3, #13
 8003f14:	430b      	orrs	r3, r1
 8003f16:	431a      	orrs	r2, r3
 8003f18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f1a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f1c:	4829      	ldr	r0, [pc, #164]	@ (8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003f1e:	f7ff ff83 	bl	8003e28 <LL_ADC_IsEnabled>
 8003f22:	4604      	mov	r4, r0
 8003f24:	4828      	ldr	r0, [pc, #160]	@ (8003fc8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003f26:	f7ff ff7f 	bl	8003e28 <LL_ADC_IsEnabled>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	431c      	orrs	r4, r3
 8003f2e:	4828      	ldr	r0, [pc, #160]	@ (8003fd0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003f30:	f7ff ff7a 	bl	8003e28 <LL_ADC_IsEnabled>
 8003f34:	4603      	mov	r3, r0
 8003f36:	4323      	orrs	r3, r4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d137      	bne.n	8003fac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003f44:	f023 030f 	bic.w	r3, r3, #15
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	6811      	ldr	r1, [r2, #0]
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	6892      	ldr	r2, [r2, #8]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	431a      	orrs	r2, r3
 8003f54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f56:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f58:	e028      	b.n	8003fac <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f64:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f66:	4817      	ldr	r0, [pc, #92]	@ (8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003f68:	f7ff ff5e 	bl	8003e28 <LL_ADC_IsEnabled>
 8003f6c:	4604      	mov	r4, r0
 8003f6e:	4816      	ldr	r0, [pc, #88]	@ (8003fc8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003f70:	f7ff ff5a 	bl	8003e28 <LL_ADC_IsEnabled>
 8003f74:	4603      	mov	r3, r0
 8003f76:	431c      	orrs	r4, r3
 8003f78:	4815      	ldr	r0, [pc, #84]	@ (8003fd0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003f7a:	f7ff ff55 	bl	8003e28 <LL_ADC_IsEnabled>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4323      	orrs	r3, r4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d112      	bne.n	8003fac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003f8e:	f023 030f 	bic.w	r3, r3, #15
 8003f92:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f94:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f96:	e009      	b.n	8003fac <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f9c:	f043 0220 	orr.w	r2, r3, #32
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003faa:	e000      	b.n	8003fae <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003fac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003fb6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	377c      	adds	r7, #124	@ 0x7c
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd90      	pop	{r4, r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	50040000 	.word	0x50040000
 8003fc8:	50040100 	.word	0x50040100
 8003fcc:	50040300 	.word	0x50040300
 8003fd0:	50040200 	.word	0x50040200

08003fd4 <__NVIC_SetPriorityGrouping>:
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8004018 <__NVIC_SetPriorityGrouping+0x44>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ffc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004006:	4a04      	ldr	r2, [pc, #16]	@ (8004018 <__NVIC_SetPriorityGrouping+0x44>)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	60d3      	str	r3, [r2, #12]
}
 800400c:	bf00      	nop
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <__NVIC_GetPriorityGrouping>:
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004020:	4b04      	ldr	r3, [pc, #16]	@ (8004034 <__NVIC_GetPriorityGrouping+0x18>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	0a1b      	lsrs	r3, r3, #8
 8004026:	f003 0307 	and.w	r3, r3, #7
}
 800402a:	4618      	mov	r0, r3
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	e000ed00 	.word	0xe000ed00

08004038 <__NVIC_EnableIRQ>:
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004046:	2b00      	cmp	r3, #0
 8004048:	db0b      	blt.n	8004062 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	f003 021f 	and.w	r2, r3, #31
 8004050:	4907      	ldr	r1, [pc, #28]	@ (8004070 <__NVIC_EnableIRQ+0x38>)
 8004052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	2001      	movs	r0, #1
 800405a:	fa00 f202 	lsl.w	r2, r0, r2
 800405e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	e000e100 	.word	0xe000e100

08004074 <__NVIC_SetPriority>:
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	6039      	str	r1, [r7, #0]
 800407e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004084:	2b00      	cmp	r3, #0
 8004086:	db0a      	blt.n	800409e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	b2da      	uxtb	r2, r3
 800408c:	490c      	ldr	r1, [pc, #48]	@ (80040c0 <__NVIC_SetPriority+0x4c>)
 800408e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004092:	0112      	lsls	r2, r2, #4
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	440b      	add	r3, r1
 8004098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800409c:	e00a      	b.n	80040b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	4908      	ldr	r1, [pc, #32]	@ (80040c4 <__NVIC_SetPriority+0x50>)
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	3b04      	subs	r3, #4
 80040ac:	0112      	lsls	r2, r2, #4
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	440b      	add	r3, r1
 80040b2:	761a      	strb	r2, [r3, #24]
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	e000e100 	.word	0xe000e100
 80040c4:	e000ed00 	.word	0xe000ed00

080040c8 <NVIC_EncodePriority>:
{
 80040c8:	b480      	push	{r7}
 80040ca:	b089      	sub	sp, #36	@ 0x24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f1c3 0307 	rsb	r3, r3, #7
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	bf28      	it	cs
 80040e6:	2304      	movcs	r3, #4
 80040e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3304      	adds	r3, #4
 80040ee:	2b06      	cmp	r3, #6
 80040f0:	d902      	bls.n	80040f8 <NVIC_EncodePriority+0x30>
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	3b03      	subs	r3, #3
 80040f6:	e000      	b.n	80040fa <NVIC_EncodePriority+0x32>
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43da      	mvns	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	401a      	ands	r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004110:	f04f 31ff 	mov.w	r1, #4294967295
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	fa01 f303 	lsl.w	r3, r1, r3
 800411a:	43d9      	mvns	r1, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004120:	4313      	orrs	r3, r2
}
 8004122:	4618      	mov	r0, r3
 8004124:	3724      	adds	r7, #36	@ 0x24
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <SysTick_Config>:
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3b01      	subs	r3, #1
 800413c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004140:	d301      	bcc.n	8004146 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004142:	2301      	movs	r3, #1
 8004144:	e00f      	b.n	8004166 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004146:	4a0a      	ldr	r2, [pc, #40]	@ (8004170 <SysTick_Config+0x40>)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3b01      	subs	r3, #1
 800414c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800414e:	210f      	movs	r1, #15
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	f7ff ff8e 	bl	8004074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004158:	4b05      	ldr	r3, [pc, #20]	@ (8004170 <SysTick_Config+0x40>)
 800415a:	2200      	movs	r2, #0
 800415c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800415e:	4b04      	ldr	r3, [pc, #16]	@ (8004170 <SysTick_Config+0x40>)
 8004160:	2207      	movs	r2, #7
 8004162:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	e000e010 	.word	0xe000e010

08004174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff ff29 	bl	8003fd4 <__NVIC_SetPriorityGrouping>
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b086      	sub	sp, #24
 800418e:	af00      	add	r7, sp, #0
 8004190:	4603      	mov	r3, r0
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800419c:	f7ff ff3e 	bl	800401c <__NVIC_GetPriorityGrouping>
 80041a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	6978      	ldr	r0, [r7, #20]
 80041a8:	f7ff ff8e 	bl	80040c8 <NVIC_EncodePriority>
 80041ac:	4602      	mov	r2, r0
 80041ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041b2:	4611      	mov	r1, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff ff5d 	bl	8004074 <__NVIC_SetPriority>
}
 80041ba:	bf00      	nop
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	4603      	mov	r3, r0
 80041ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff ff31 	bl	8004038 <__NVIC_EnableIRQ>
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff ffa2 	bl	8004130 <SysTick_Config>
 80041ec:	4603      	mov	r3, r0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b085      	sub	sp, #20
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d008      	beq.n	8004220 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2204      	movs	r2, #4
 8004212:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e022      	b.n	8004266 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 020e 	bic.w	r2, r2, #14
 800422e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004244:	f003 021c 	and.w	r2, r3, #28
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424c:	2101      	movs	r1, #1
 800424e:	fa01 f202 	lsl.w	r2, r1, r2
 8004252:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8004264:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d005      	beq.n	8004296 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2204      	movs	r2, #4
 800428e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	73fb      	strb	r3, [r7, #15]
 8004294:	e029      	b.n	80042ea <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 020e 	bic.w	r2, r2, #14
 80042a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0201 	bic.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ba:	f003 021c 	and.w	r2, r3, #28
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	2101      	movs	r1, #1
 80042c4:	fa01 f202 	lsl.w	r2, r1, r2
 80042c8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	4798      	blx	r3
    }
  }
  return status;
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004302:	e17f      	b.n	8004604 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	2101      	movs	r1, #1
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	fa01 f303 	lsl.w	r3, r1, r3
 8004310:	4013      	ands	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 8171 	beq.w	80045fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b01      	cmp	r3, #1
 8004326:	d005      	beq.n	8004334 <HAL_GPIO_Init+0x40>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d130      	bne.n	8004396 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	2203      	movs	r2, #3
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	43db      	mvns	r3, r3
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4013      	ands	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800436a:	2201      	movs	r2, #1
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	43db      	mvns	r3, r3
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4013      	ands	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	091b      	lsrs	r3, r3, #4
 8004380:	f003 0201 	and.w	r2, r3, #1
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d118      	bne.n	80043d4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80043a8:	2201      	movs	r2, #1
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4013      	ands	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	08db      	lsrs	r3, r3, #3
 80043be:	f003 0201 	and.w	r2, r3, #1
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d017      	beq.n	8004410 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	2203      	movs	r2, #3
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	4013      	ands	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d123      	bne.n	8004464 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	08da      	lsrs	r2, r3, #3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3208      	adds	r2, #8
 8004424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004428:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	220f      	movs	r2, #15
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4013      	ands	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	08da      	lsrs	r2, r3, #3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3208      	adds	r2, #8
 800445e:	6939      	ldr	r1, [r7, #16]
 8004460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	2203      	movs	r2, #3
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4013      	ands	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f003 0203 	and.w	r2, r3, #3
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80ac 	beq.w	80045fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044a6:	4b5f      	ldr	r3, [pc, #380]	@ (8004624 <HAL_GPIO_Init+0x330>)
 80044a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044aa:	4a5e      	ldr	r2, [pc, #376]	@ (8004624 <HAL_GPIO_Init+0x330>)
 80044ac:	f043 0301 	orr.w	r3, r3, #1
 80044b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80044b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004624 <HAL_GPIO_Init+0x330>)
 80044b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	60bb      	str	r3, [r7, #8]
 80044bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044be:	4a5a      	ldr	r2, [pc, #360]	@ (8004628 <HAL_GPIO_Init+0x334>)
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	089b      	lsrs	r3, r3, #2
 80044c4:	3302      	adds	r3, #2
 80044c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	220f      	movs	r2, #15
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43db      	mvns	r3, r3
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4013      	ands	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80044e8:	d025      	beq.n	8004536 <HAL_GPIO_Init+0x242>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a4f      	ldr	r2, [pc, #316]	@ (800462c <HAL_GPIO_Init+0x338>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01f      	beq.n	8004532 <HAL_GPIO_Init+0x23e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a4e      	ldr	r2, [pc, #312]	@ (8004630 <HAL_GPIO_Init+0x33c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d019      	beq.n	800452e <HAL_GPIO_Init+0x23a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a4d      	ldr	r2, [pc, #308]	@ (8004634 <HAL_GPIO_Init+0x340>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d013      	beq.n	800452a <HAL_GPIO_Init+0x236>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a4c      	ldr	r2, [pc, #304]	@ (8004638 <HAL_GPIO_Init+0x344>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00d      	beq.n	8004526 <HAL_GPIO_Init+0x232>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a4b      	ldr	r2, [pc, #300]	@ (800463c <HAL_GPIO_Init+0x348>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d007      	beq.n	8004522 <HAL_GPIO_Init+0x22e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a4a      	ldr	r2, [pc, #296]	@ (8004640 <HAL_GPIO_Init+0x34c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d101      	bne.n	800451e <HAL_GPIO_Init+0x22a>
 800451a:	2306      	movs	r3, #6
 800451c:	e00c      	b.n	8004538 <HAL_GPIO_Init+0x244>
 800451e:	2307      	movs	r3, #7
 8004520:	e00a      	b.n	8004538 <HAL_GPIO_Init+0x244>
 8004522:	2305      	movs	r3, #5
 8004524:	e008      	b.n	8004538 <HAL_GPIO_Init+0x244>
 8004526:	2304      	movs	r3, #4
 8004528:	e006      	b.n	8004538 <HAL_GPIO_Init+0x244>
 800452a:	2303      	movs	r3, #3
 800452c:	e004      	b.n	8004538 <HAL_GPIO_Init+0x244>
 800452e:	2302      	movs	r3, #2
 8004530:	e002      	b.n	8004538 <HAL_GPIO_Init+0x244>
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <HAL_GPIO_Init+0x244>
 8004536:	2300      	movs	r3, #0
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	f002 0203 	and.w	r2, r2, #3
 800453e:	0092      	lsls	r2, r2, #2
 8004540:	4093      	lsls	r3, r2
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004548:	4937      	ldr	r1, [pc, #220]	@ (8004628 <HAL_GPIO_Init+0x334>)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	3302      	adds	r3, #2
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004556:	4b3b      	ldr	r3, [pc, #236]	@ (8004644 <HAL_GPIO_Init+0x350>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	43db      	mvns	r3, r3
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4013      	ands	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800457a:	4a32      	ldr	r2, [pc, #200]	@ (8004644 <HAL_GPIO_Init+0x350>)
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004580:	4b30      	ldr	r3, [pc, #192]	@ (8004644 <HAL_GPIO_Init+0x350>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	43db      	mvns	r3, r3
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4013      	ands	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045a4:	4a27      	ldr	r2, [pc, #156]	@ (8004644 <HAL_GPIO_Init+0x350>)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80045aa:	4b26      	ldr	r3, [pc, #152]	@ (8004644 <HAL_GPIO_Init+0x350>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	43db      	mvns	r3, r3
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4013      	ands	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004644 <HAL_GPIO_Init+0x350>)
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80045d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004644 <HAL_GPIO_Init+0x350>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	43db      	mvns	r3, r3
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4013      	ands	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045f8:	4a12      	ldr	r2, [pc, #72]	@ (8004644 <HAL_GPIO_Init+0x350>)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	3301      	adds	r3, #1
 8004602:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	fa22 f303 	lsr.w	r3, r2, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	f47f ae78 	bne.w	8004304 <HAL_GPIO_Init+0x10>
  }
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40021000 	.word	0x40021000
 8004628:	40010000 	.word	0x40010000
 800462c:	48000400 	.word	0x48000400
 8004630:	48000800 	.word	0x48000800
 8004634:	48000c00 	.word	0x48000c00
 8004638:	48001000 	.word	0x48001000
 800463c:	48001400 	.word	0x48001400
 8004640:	48001800 	.word	0x48001800
 8004644:	40010400 	.word	0x40010400

08004648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	807b      	strh	r3, [r7, #2]
 8004654:	4613      	mov	r3, r2
 8004656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004658:	787b      	ldrb	r3, [r7, #1]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800465e:	887a      	ldrh	r2, [r7, #2]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004664:	e002      	b.n	800466c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004666:	887a      	ldrh	r2, [r7, #2]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e08d      	b.n	80047a6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fd fcc8 	bl	8002034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2224      	movs	r2, #36	@ 0x24
 80046a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80046c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d107      	bne.n	80046f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046ee:	609a      	str	r2, [r3, #8]
 80046f0:	e006      	b.n	8004700 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80046fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d108      	bne.n	800471a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004716:	605a      	str	r2, [r3, #4]
 8004718:	e007      	b.n	800472a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004728:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004738:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800473c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800474c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	69d9      	ldr	r1, [r3, #28]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1a      	ldr	r2, [r3, #32]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d138      	bne.n	8004836 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047ce:	2302      	movs	r3, #2
 80047d0:	e032      	b.n	8004838 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2224      	movs	r2, #36	@ 0x24
 80047de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004800:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6819      	ldr	r1, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0201 	orr.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2220      	movs	r2, #32
 8004826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	e000      	b.n	8004838 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004836:	2302      	movs	r3, #2
  }
}
 8004838:	4618      	mov	r0, r3
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b20      	cmp	r3, #32
 8004858:	d139      	bne.n	80048ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004864:	2302      	movs	r3, #2
 8004866:	e033      	b.n	80048d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2224      	movs	r2, #36	@ 0x24
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0201 	bic.w	r2, r2, #1
 8004886:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004896:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	021b      	lsls	r3, r3, #8
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0201 	orr.w	r2, r2, #1
 80048b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e000      	b.n	80048d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048ce:	2302      	movs	r3, #2
  }
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80048e0:	4b04      	ldr	r3, [pc, #16]	@ (80048f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40007000 	.word	0x40007000

080048f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004906:	d130      	bne.n	800496a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004908:	4b23      	ldr	r3, [pc, #140]	@ (8004998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004914:	d038      	beq.n	8004988 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004916:	4b20      	ldr	r3, [pc, #128]	@ (8004998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800491e:	4a1e      	ldr	r2, [pc, #120]	@ (8004998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004920:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004924:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004926:	4b1d      	ldr	r3, [pc, #116]	@ (800499c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2232      	movs	r2, #50	@ 0x32
 800492c:	fb02 f303 	mul.w	r3, r2, r3
 8004930:	4a1b      	ldr	r2, [pc, #108]	@ (80049a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	0c9b      	lsrs	r3, r3, #18
 8004938:	3301      	adds	r3, #1
 800493a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800493c:	e002      	b.n	8004944 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3b01      	subs	r3, #1
 8004942:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004944:	4b14      	ldr	r3, [pc, #80]	@ (8004998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800494c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004950:	d102      	bne.n	8004958 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1f2      	bne.n	800493e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004958:	4b0f      	ldr	r3, [pc, #60]	@ (8004998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004964:	d110      	bne.n	8004988 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e00f      	b.n	800498a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800496a:	4b0b      	ldr	r3, [pc, #44]	@ (8004998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004972:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004976:	d007      	beq.n	8004988 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004978:	4b07      	ldr	r3, [pc, #28]	@ (8004998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004980:	4a05      	ldr	r2, [pc, #20]	@ (8004998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004982:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004986:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40007000 	.word	0x40007000
 800499c:	20000000 	.word	0x20000000
 80049a0:	431bde83 	.word	0x431bde83

080049a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e3ca      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049b6:	4b97      	ldr	r3, [pc, #604]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 030c 	and.w	r3, r3, #12
 80049be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049c0:	4b94      	ldr	r3, [pc, #592]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 80e4 	beq.w	8004ba0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d007      	beq.n	80049ee <HAL_RCC_OscConfig+0x4a>
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b0c      	cmp	r3, #12
 80049e2:	f040 808b 	bne.w	8004afc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	f040 8087 	bne.w	8004afc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049ee:	4b89      	ldr	r3, [pc, #548]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_RCC_OscConfig+0x62>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e3a2      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1a      	ldr	r2, [r3, #32]
 8004a0a:	4b82      	ldr	r3, [pc, #520]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d004      	beq.n	8004a20 <HAL_RCC_OscConfig+0x7c>
 8004a16:	4b7f      	ldr	r3, [pc, #508]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a1e:	e005      	b.n	8004a2c <HAL_RCC_OscConfig+0x88>
 8004a20:	4b7c      	ldr	r3, [pc, #496]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a26:	091b      	lsrs	r3, r3, #4
 8004a28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d223      	bcs.n	8004a78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fd55 	bl	80054e4 <RCC_SetFlashLatencyFromMSIRange>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e383      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a44:	4b73      	ldr	r3, [pc, #460]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a72      	ldr	r2, [pc, #456]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a4a:	f043 0308 	orr.w	r3, r3, #8
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	4b70      	ldr	r3, [pc, #448]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	496d      	ldr	r1, [pc, #436]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a62:	4b6c      	ldr	r3, [pc, #432]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	021b      	lsls	r3, r3, #8
 8004a70:	4968      	ldr	r1, [pc, #416]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	604b      	str	r3, [r1, #4]
 8004a76:	e025      	b.n	8004ac4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a78:	4b66      	ldr	r3, [pc, #408]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a65      	ldr	r2, [pc, #404]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a7e:	f043 0308 	orr.w	r3, r3, #8
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	4b63      	ldr	r3, [pc, #396]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	4960      	ldr	r1, [pc, #384]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a96:	4b5f      	ldr	r3, [pc, #380]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	021b      	lsls	r3, r3, #8
 8004aa4:	495b      	ldr	r1, [pc, #364]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d109      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 fd15 	bl	80054e4 <RCC_SetFlashLatencyFromMSIRange>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e343      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ac4:	f000 fc4a 	bl	800535c <HAL_RCC_GetSysClockFreq>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4b52      	ldr	r3, [pc, #328]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	091b      	lsrs	r3, r3, #4
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	4950      	ldr	r1, [pc, #320]	@ (8004c18 <HAL_RCC_OscConfig+0x274>)
 8004ad6:	5ccb      	ldrb	r3, [r1, r3]
 8004ad8:	f003 031f 	and.w	r3, r3, #31
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae0:	4a4e      	ldr	r2, [pc, #312]	@ (8004c1c <HAL_RCC_OscConfig+0x278>)
 8004ae2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ae4:	4b4e      	ldr	r3, [pc, #312]	@ (8004c20 <HAL_RCC_OscConfig+0x27c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fe f8fd 	bl	8002ce8 <HAL_InitTick>
 8004aee:	4603      	mov	r3, r0
 8004af0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d052      	beq.n	8004b9e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
 8004afa:	e327      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d032      	beq.n	8004b6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b04:	4b43      	ldr	r3, [pc, #268]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a42      	ldr	r2, [pc, #264]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b10:	f7fe f93a 	bl	8002d88 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b18:	f7fe f936 	bl	8002d88 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e310      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f0      	beq.n	8004b18 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b36:	4b37      	ldr	r3, [pc, #220]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a36      	ldr	r2, [pc, #216]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b3c:	f043 0308 	orr.w	r3, r3, #8
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	4b34      	ldr	r3, [pc, #208]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	4931      	ldr	r1, [pc, #196]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b54:	4b2f      	ldr	r3, [pc, #188]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	021b      	lsls	r3, r3, #8
 8004b62:	492c      	ldr	r1, [pc, #176]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	604b      	str	r3, [r1, #4]
 8004b68:	e01a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a29      	ldr	r2, [pc, #164]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b76:	f7fe f907 	bl	8002d88 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b7e:	f7fe f903 	bl	8002d88 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e2dd      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b90:	4b20      	ldr	r3, [pc, #128]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1f0      	bne.n	8004b7e <HAL_RCC_OscConfig+0x1da>
 8004b9c:	e000      	b.n	8004ba0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d074      	beq.n	8004c96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d005      	beq.n	8004bbe <HAL_RCC_OscConfig+0x21a>
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b0c      	cmp	r3, #12
 8004bb6:	d10e      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d10b      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bbe:	4b15      	ldr	r3, [pc, #84]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d064      	beq.n	8004c94 <HAL_RCC_OscConfig+0x2f0>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d160      	bne.n	8004c94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e2ba      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bde:	d106      	bne.n	8004bee <HAL_RCC_OscConfig+0x24a>
 8004be0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a0b      	ldr	r2, [pc, #44]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004be6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	e026      	b.n	8004c3c <HAL_RCC_OscConfig+0x298>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bf6:	d115      	bne.n	8004c24 <HAL_RCC_OscConfig+0x280>
 8004bf8:	4b06      	ldr	r3, [pc, #24]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a05      	ldr	r2, [pc, #20]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004bfe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c02:	6013      	str	r3, [r2, #0]
 8004c04:	4b03      	ldr	r3, [pc, #12]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a02      	ldr	r2, [pc, #8]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	e014      	b.n	8004c3c <HAL_RCC_OscConfig+0x298>
 8004c12:	bf00      	nop
 8004c14:	40021000 	.word	0x40021000
 8004c18:	0800a218 	.word	0x0800a218
 8004c1c:	20000000 	.word	0x20000000
 8004c20:	20000004 	.word	0x20000004
 8004c24:	4ba0      	ldr	r3, [pc, #640]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a9f      	ldr	r2, [pc, #636]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	4b9d      	ldr	r3, [pc, #628]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a9c      	ldr	r2, [pc, #624]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d013      	beq.n	8004c6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c44:	f7fe f8a0 	bl	8002d88 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c4c:	f7fe f89c 	bl	8002d88 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b64      	cmp	r3, #100	@ 0x64
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e276      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c5e:	4b92      	ldr	r3, [pc, #584]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0f0      	beq.n	8004c4c <HAL_RCC_OscConfig+0x2a8>
 8004c6a:	e014      	b.n	8004c96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6c:	f7fe f88c 	bl	8002d88 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c74:	f7fe f888 	bl	8002d88 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b64      	cmp	r3, #100	@ 0x64
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e262      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c86:	4b88      	ldr	r3, [pc, #544]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f0      	bne.n	8004c74 <HAL_RCC_OscConfig+0x2d0>
 8004c92:	e000      	b.n	8004c96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d060      	beq.n	8004d64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d005      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x310>
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	2b0c      	cmp	r3, #12
 8004cac:	d119      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d116      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cb4:	4b7c      	ldr	r3, [pc, #496]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <HAL_RCC_OscConfig+0x328>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e23f      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ccc:	4b76      	ldr	r3, [pc, #472]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	061b      	lsls	r3, r3, #24
 8004cda:	4973      	ldr	r1, [pc, #460]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ce0:	e040      	b.n	8004d64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d023      	beq.n	8004d32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cea:	4b6f      	ldr	r3, [pc, #444]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a6e      	ldr	r2, [pc, #440]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf6:	f7fe f847 	bl	8002d88 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cfe:	f7fe f843 	bl	8002d88 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e21d      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d10:	4b65      	ldr	r3, [pc, #404]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d1c:	4b62      	ldr	r3, [pc, #392]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	061b      	lsls	r3, r3, #24
 8004d2a:	495f      	ldr	r1, [pc, #380]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	604b      	str	r3, [r1, #4]
 8004d30:	e018      	b.n	8004d64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d32:	4b5d      	ldr	r3, [pc, #372]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a5c      	ldr	r2, [pc, #368]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004d38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3e:	f7fe f823 	bl	8002d88 <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d44:	e008      	b.n	8004d58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d46:	f7fe f81f 	bl	8002d88 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e1f9      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d58:	4b53      	ldr	r3, [pc, #332]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1f0      	bne.n	8004d46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d03c      	beq.n	8004dea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01c      	beq.n	8004db2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d78:	4b4b      	ldr	r3, [pc, #300]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d7e:	4a4a      	ldr	r2, [pc, #296]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d88:	f7fd fffe 	bl	8002d88 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d90:	f7fd fffa 	bl	8002d88 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e1d4      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004da2:	4b41      	ldr	r3, [pc, #260]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0ef      	beq.n	8004d90 <HAL_RCC_OscConfig+0x3ec>
 8004db0:	e01b      	b.n	8004dea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004db2:	4b3d      	ldr	r3, [pc, #244]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004db8:	4a3b      	ldr	r2, [pc, #236]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004dba:	f023 0301 	bic.w	r3, r3, #1
 8004dbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc2:	f7fd ffe1 	bl	8002d88 <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dca:	f7fd ffdd 	bl	8002d88 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e1b7      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ddc:	4b32      	ldr	r3, [pc, #200]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1ef      	bne.n	8004dca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 80a6 	beq.w	8004f44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004dfc:	4b2a      	ldr	r3, [pc, #168]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10d      	bne.n	8004e24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e08:	4b27      	ldr	r3, [pc, #156]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0c:	4a26      	ldr	r2, [pc, #152]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e12:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e14:	4b24      	ldr	r3, [pc, #144]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e1c:	60bb      	str	r3, [r7, #8]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e20:	2301      	movs	r3, #1
 8004e22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e24:	4b21      	ldr	r3, [pc, #132]	@ (8004eac <HAL_RCC_OscConfig+0x508>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d118      	bne.n	8004e62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e30:	4b1e      	ldr	r3, [pc, #120]	@ (8004eac <HAL_RCC_OscConfig+0x508>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a1d      	ldr	r2, [pc, #116]	@ (8004eac <HAL_RCC_OscConfig+0x508>)
 8004e36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e3c:	f7fd ffa4 	bl	8002d88 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e44:	f7fd ffa0 	bl	8002d88 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e17a      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e56:	4b15      	ldr	r3, [pc, #84]	@ (8004eac <HAL_RCC_OscConfig+0x508>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0f0      	beq.n	8004e44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d108      	bne.n	8004e7c <HAL_RCC_OscConfig+0x4d8>
 8004e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e70:	4a0d      	ldr	r2, [pc, #52]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004e72:	f043 0301 	orr.w	r3, r3, #1
 8004e76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e7a:	e029      	b.n	8004ed0 <HAL_RCC_OscConfig+0x52c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b05      	cmp	r3, #5
 8004e82:	d115      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x50c>
 8004e84:	4b08      	ldr	r3, [pc, #32]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8a:	4a07      	ldr	r2, [pc, #28]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004e8c:	f043 0304 	orr.w	r3, r3, #4
 8004e90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e94:	4b04      	ldr	r3, [pc, #16]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9a:	4a03      	ldr	r2, [pc, #12]	@ (8004ea8 <HAL_RCC_OscConfig+0x504>)
 8004e9c:	f043 0301 	orr.w	r3, r3, #1
 8004ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ea4:	e014      	b.n	8004ed0 <HAL_RCC_OscConfig+0x52c>
 8004ea6:	bf00      	nop
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	40007000 	.word	0x40007000
 8004eb0:	4b9c      	ldr	r3, [pc, #624]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb6:	4a9b      	ldr	r2, [pc, #620]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ec0:	4b98      	ldr	r3, [pc, #608]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 8004ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec6:	4a97      	ldr	r2, [pc, #604]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 8004ec8:	f023 0304 	bic.w	r3, r3, #4
 8004ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d016      	beq.n	8004f06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed8:	f7fd ff56 	bl	8002d88 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ede:	e00a      	b.n	8004ef6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee0:	f7fd ff52 	bl	8002d88 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e12a      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef6:	4b8b      	ldr	r3, [pc, #556]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0ed      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x53c>
 8004f04:	e015      	b.n	8004f32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f06:	f7fd ff3f 	bl	8002d88 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f0c:	e00a      	b.n	8004f24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f0e:	f7fd ff3b 	bl	8002d88 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e113      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f24:	4b7f      	ldr	r3, [pc, #508]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1ed      	bne.n	8004f0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f32:	7ffb      	ldrb	r3, [r7, #31]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d105      	bne.n	8004f44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f38:	4b7a      	ldr	r3, [pc, #488]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3c:	4a79      	ldr	r2, [pc, #484]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 8004f3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f42:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80fe 	beq.w	800514a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	f040 80d0 	bne.w	80050f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f58:	4b72      	ldr	r3, [pc, #456]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f003 0203 	and.w	r2, r3, #3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d130      	bne.n	8004fce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f76:	3b01      	subs	r3, #1
 8004f78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d127      	bne.n	8004fce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d11f      	bne.n	8004fce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f98:	2a07      	cmp	r2, #7
 8004f9a:	bf14      	ite	ne
 8004f9c:	2201      	movne	r2, #1
 8004f9e:	2200      	moveq	r2, #0
 8004fa0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d113      	bne.n	8004fce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb0:	085b      	lsrs	r3, r3, #1
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d109      	bne.n	8004fce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc4:	085b      	lsrs	r3, r3, #1
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d06e      	beq.n	80050ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2b0c      	cmp	r3, #12
 8004fd2:	d069      	beq.n	80050a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004fd4:	4b53      	ldr	r3, [pc, #332]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d105      	bne.n	8004fec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004fe0:	4b50      	ldr	r3, [pc, #320]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0ad      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ff0:	4b4c      	ldr	r3, [pc, #304]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a4b      	ldr	r2, [pc, #300]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 8004ff6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ffa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ffc:	f7fd fec4 	bl	8002d88 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005004:	f7fd fec0 	bl	8002d88 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e09a      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005016:	4b43      	ldr	r3, [pc, #268]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f0      	bne.n	8005004 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005022:	4b40      	ldr	r3, [pc, #256]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	4b40      	ldr	r3, [pc, #256]	@ (8005128 <HAL_RCC_OscConfig+0x784>)
 8005028:	4013      	ands	r3, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005032:	3a01      	subs	r2, #1
 8005034:	0112      	lsls	r2, r2, #4
 8005036:	4311      	orrs	r1, r2
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800503c:	0212      	lsls	r2, r2, #8
 800503e:	4311      	orrs	r1, r2
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005044:	0852      	lsrs	r2, r2, #1
 8005046:	3a01      	subs	r2, #1
 8005048:	0552      	lsls	r2, r2, #21
 800504a:	4311      	orrs	r1, r2
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005050:	0852      	lsrs	r2, r2, #1
 8005052:	3a01      	subs	r2, #1
 8005054:	0652      	lsls	r2, r2, #25
 8005056:	4311      	orrs	r1, r2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800505c:	0912      	lsrs	r2, r2, #4
 800505e:	0452      	lsls	r2, r2, #17
 8005060:	430a      	orrs	r2, r1
 8005062:	4930      	ldr	r1, [pc, #192]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 8005064:	4313      	orrs	r3, r2
 8005066:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005068:	4b2e      	ldr	r3, [pc, #184]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a2d      	ldr	r2, [pc, #180]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 800506e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005072:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005074:	4b2b      	ldr	r3, [pc, #172]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	4a2a      	ldr	r2, [pc, #168]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 800507a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800507e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005080:	f7fd fe82 	bl	8002d88 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005088:	f7fd fe7e 	bl	8002d88 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e058      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800509a:	4b22      	ldr	r3, [pc, #136]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050a6:	e050      	b.n	800514a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e04f      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d148      	bne.n	800514a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a19      	ldr	r2, [pc, #100]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 80050be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050c4:	4b17      	ldr	r3, [pc, #92]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	4a16      	ldr	r2, [pc, #88]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 80050ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050d0:	f7fd fe5a 	bl	8002d88 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d8:	f7fd fe56 	bl	8002d88 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e030      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0f0      	beq.n	80050d8 <HAL_RCC_OscConfig+0x734>
 80050f6:	e028      	b.n	800514a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	2b0c      	cmp	r3, #12
 80050fc:	d023      	beq.n	8005146 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050fe:	4b09      	ldr	r3, [pc, #36]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a08      	ldr	r2, [pc, #32]	@ (8005124 <HAL_RCC_OscConfig+0x780>)
 8005104:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510a:	f7fd fe3d 	bl	8002d88 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005110:	e00c      	b.n	800512c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005112:	f7fd fe39 	bl	8002d88 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d905      	bls.n	800512c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e013      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
 8005124:	40021000 	.word	0x40021000
 8005128:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800512c:	4b09      	ldr	r3, [pc, #36]	@ (8005154 <HAL_RCC_OscConfig+0x7b0>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1ec      	bne.n	8005112 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005138:	4b06      	ldr	r3, [pc, #24]	@ (8005154 <HAL_RCC_OscConfig+0x7b0>)
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	4905      	ldr	r1, [pc, #20]	@ (8005154 <HAL_RCC_OscConfig+0x7b0>)
 800513e:	4b06      	ldr	r3, [pc, #24]	@ (8005158 <HAL_RCC_OscConfig+0x7b4>)
 8005140:	4013      	ands	r3, r2
 8005142:	60cb      	str	r3, [r1, #12]
 8005144:	e001      	b.n	800514a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e000      	b.n	800514c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3720      	adds	r7, #32
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40021000 	.word	0x40021000
 8005158:	feeefffc 	.word	0xfeeefffc

0800515c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0e7      	b.n	8005340 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005170:	4b75      	ldr	r3, [pc, #468]	@ (8005348 <HAL_RCC_ClockConfig+0x1ec>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d910      	bls.n	80051a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517e:	4b72      	ldr	r3, [pc, #456]	@ (8005348 <HAL_RCC_ClockConfig+0x1ec>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f023 0207 	bic.w	r2, r3, #7
 8005186:	4970      	ldr	r1, [pc, #448]	@ (8005348 <HAL_RCC_ClockConfig+0x1ec>)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	4313      	orrs	r3, r2
 800518c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800518e:	4b6e      	ldr	r3, [pc, #440]	@ (8005348 <HAL_RCC_ClockConfig+0x1ec>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d001      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0cf      	b.n	8005340 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d010      	beq.n	80051ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	4b66      	ldr	r3, [pc, #408]	@ (800534c <HAL_RCC_ClockConfig+0x1f0>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d908      	bls.n	80051ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051bc:	4b63      	ldr	r3, [pc, #396]	@ (800534c <HAL_RCC_ClockConfig+0x1f0>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	4960      	ldr	r1, [pc, #384]	@ (800534c <HAL_RCC_ClockConfig+0x1f0>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d04c      	beq.n	8005274 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b03      	cmp	r3, #3
 80051e0:	d107      	bne.n	80051f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051e2:	4b5a      	ldr	r3, [pc, #360]	@ (800534c <HAL_RCC_ClockConfig+0x1f0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d121      	bne.n	8005232 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e0a6      	b.n	8005340 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d107      	bne.n	800520a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051fa:	4b54      	ldr	r3, [pc, #336]	@ (800534c <HAL_RCC_ClockConfig+0x1f0>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d115      	bne.n	8005232 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e09a      	b.n	8005340 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d107      	bne.n	8005222 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005212:	4b4e      	ldr	r3, [pc, #312]	@ (800534c <HAL_RCC_ClockConfig+0x1f0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d109      	bne.n	8005232 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e08e      	b.n	8005340 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005222:	4b4a      	ldr	r3, [pc, #296]	@ (800534c <HAL_RCC_ClockConfig+0x1f0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e086      	b.n	8005340 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005232:	4b46      	ldr	r3, [pc, #280]	@ (800534c <HAL_RCC_ClockConfig+0x1f0>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f023 0203 	bic.w	r2, r3, #3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	4943      	ldr	r1, [pc, #268]	@ (800534c <HAL_RCC_ClockConfig+0x1f0>)
 8005240:	4313      	orrs	r3, r2
 8005242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005244:	f7fd fda0 	bl	8002d88 <HAL_GetTick>
 8005248:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800524a:	e00a      	b.n	8005262 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800524c:	f7fd fd9c 	bl	8002d88 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800525a:	4293      	cmp	r3, r2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e06e      	b.n	8005340 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005262:	4b3a      	ldr	r3, [pc, #232]	@ (800534c <HAL_RCC_ClockConfig+0x1f0>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 020c 	and.w	r2, r3, #12
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	429a      	cmp	r2, r3
 8005272:	d1eb      	bne.n	800524c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d010      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	4b31      	ldr	r3, [pc, #196]	@ (800534c <HAL_RCC_ClockConfig+0x1f0>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800528c:	429a      	cmp	r2, r3
 800528e:	d208      	bcs.n	80052a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005290:	4b2e      	ldr	r3, [pc, #184]	@ (800534c <HAL_RCC_ClockConfig+0x1f0>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	492b      	ldr	r1, [pc, #172]	@ (800534c <HAL_RCC_ClockConfig+0x1f0>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052a2:	4b29      	ldr	r3, [pc, #164]	@ (8005348 <HAL_RCC_ClockConfig+0x1ec>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d210      	bcs.n	80052d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b0:	4b25      	ldr	r3, [pc, #148]	@ (8005348 <HAL_RCC_ClockConfig+0x1ec>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f023 0207 	bic.w	r2, r3, #7
 80052b8:	4923      	ldr	r1, [pc, #140]	@ (8005348 <HAL_RCC_ClockConfig+0x1ec>)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	4313      	orrs	r3, r2
 80052be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c0:	4b21      	ldr	r3, [pc, #132]	@ (8005348 <HAL_RCC_ClockConfig+0x1ec>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d001      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e036      	b.n	8005340 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d008      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052de:	4b1b      	ldr	r3, [pc, #108]	@ (800534c <HAL_RCC_ClockConfig+0x1f0>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	4918      	ldr	r1, [pc, #96]	@ (800534c <HAL_RCC_ClockConfig+0x1f0>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d009      	beq.n	8005310 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052fc:	4b13      	ldr	r3, [pc, #76]	@ (800534c <HAL_RCC_ClockConfig+0x1f0>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	4910      	ldr	r1, [pc, #64]	@ (800534c <HAL_RCC_ClockConfig+0x1f0>)
 800530c:	4313      	orrs	r3, r2
 800530e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005310:	f000 f824 	bl	800535c <HAL_RCC_GetSysClockFreq>
 8005314:	4602      	mov	r2, r0
 8005316:	4b0d      	ldr	r3, [pc, #52]	@ (800534c <HAL_RCC_ClockConfig+0x1f0>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	091b      	lsrs	r3, r3, #4
 800531c:	f003 030f 	and.w	r3, r3, #15
 8005320:	490b      	ldr	r1, [pc, #44]	@ (8005350 <HAL_RCC_ClockConfig+0x1f4>)
 8005322:	5ccb      	ldrb	r3, [r1, r3]
 8005324:	f003 031f 	and.w	r3, r3, #31
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
 800532c:	4a09      	ldr	r2, [pc, #36]	@ (8005354 <HAL_RCC_ClockConfig+0x1f8>)
 800532e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005330:	4b09      	ldr	r3, [pc, #36]	@ (8005358 <HAL_RCC_ClockConfig+0x1fc>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f7fd fcd7 	bl	8002ce8 <HAL_InitTick>
 800533a:	4603      	mov	r3, r0
 800533c:	72fb      	strb	r3, [r7, #11]

  return status;
 800533e:	7afb      	ldrb	r3, [r7, #11]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40022000 	.word	0x40022000
 800534c:	40021000 	.word	0x40021000
 8005350:	0800a218 	.word	0x0800a218
 8005354:	20000000 	.word	0x20000000
 8005358:	20000004 	.word	0x20000004

0800535c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800535c:	b480      	push	{r7}
 800535e:	b089      	sub	sp, #36	@ 0x24
 8005360:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	61fb      	str	r3, [r7, #28]
 8005366:	2300      	movs	r3, #0
 8005368:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800536a:	4b3e      	ldr	r3, [pc, #248]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x108>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 030c 	and.w	r3, r3, #12
 8005372:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005374:	4b3b      	ldr	r3, [pc, #236]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x108>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0303 	and.w	r3, r3, #3
 800537c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <HAL_RCC_GetSysClockFreq+0x34>
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	2b0c      	cmp	r3, #12
 8005388:	d121      	bne.n	80053ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d11e      	bne.n	80053ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005390:	4b34      	ldr	r3, [pc, #208]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x108>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b00      	cmp	r3, #0
 800539a:	d107      	bne.n	80053ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800539c:	4b31      	ldr	r3, [pc, #196]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x108>)
 800539e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053a2:	0a1b      	lsrs	r3, r3, #8
 80053a4:	f003 030f 	and.w	r3, r3, #15
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	e005      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	091b      	lsrs	r3, r3, #4
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80053b8:	4a2b      	ldr	r2, [pc, #172]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x10c>)
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10d      	bne.n	80053e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053cc:	e00a      	b.n	80053e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d102      	bne.n	80053da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053d4:	4b25      	ldr	r3, [pc, #148]	@ (800546c <HAL_RCC_GetSysClockFreq+0x110>)
 80053d6:	61bb      	str	r3, [r7, #24]
 80053d8:	e004      	b.n	80053e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d101      	bne.n	80053e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053e0:	4b23      	ldr	r3, [pc, #140]	@ (8005470 <HAL_RCC_GetSysClockFreq+0x114>)
 80053e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b0c      	cmp	r3, #12
 80053e8:	d134      	bne.n	8005454 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d003      	beq.n	8005402 <HAL_RCC_GetSysClockFreq+0xa6>
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b03      	cmp	r3, #3
 80053fe:	d003      	beq.n	8005408 <HAL_RCC_GetSysClockFreq+0xac>
 8005400:	e005      	b.n	800540e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005402:	4b1a      	ldr	r3, [pc, #104]	@ (800546c <HAL_RCC_GetSysClockFreq+0x110>)
 8005404:	617b      	str	r3, [r7, #20]
      break;
 8005406:	e005      	b.n	8005414 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005408:	4b19      	ldr	r3, [pc, #100]	@ (8005470 <HAL_RCC_GetSysClockFreq+0x114>)
 800540a:	617b      	str	r3, [r7, #20]
      break;
 800540c:	e002      	b.n	8005414 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	617b      	str	r3, [r7, #20]
      break;
 8005412:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005414:	4b13      	ldr	r3, [pc, #76]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x108>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	091b      	lsrs	r3, r3, #4
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	3301      	adds	r3, #1
 8005420:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005422:	4b10      	ldr	r3, [pc, #64]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x108>)
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	0a1b      	lsrs	r3, r3, #8
 8005428:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	fb03 f202 	mul.w	r2, r3, r2
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	fbb2 f3f3 	udiv	r3, r2, r3
 8005438:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800543a:	4b0a      	ldr	r3, [pc, #40]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x108>)
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	0e5b      	lsrs	r3, r3, #25
 8005440:	f003 0303 	and.w	r3, r3, #3
 8005444:	3301      	adds	r3, #1
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005452:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005454:	69bb      	ldr	r3, [r7, #24]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3724      	adds	r7, #36	@ 0x24
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	40021000 	.word	0x40021000
 8005468:	0800a230 	.word	0x0800a230
 800546c:	00f42400 	.word	0x00f42400
 8005470:	017d7840 	.word	0x017d7840

08005474 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005478:	4b03      	ldr	r3, [pc, #12]	@ (8005488 <HAL_RCC_GetHCLKFreq+0x14>)
 800547a:	681b      	ldr	r3, [r3, #0]
}
 800547c:	4618      	mov	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	20000000 	.word	0x20000000

0800548c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005490:	f7ff fff0 	bl	8005474 <HAL_RCC_GetHCLKFreq>
 8005494:	4602      	mov	r2, r0
 8005496:	4b06      	ldr	r3, [pc, #24]	@ (80054b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	0a1b      	lsrs	r3, r3, #8
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	4904      	ldr	r1, [pc, #16]	@ (80054b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054a2:	5ccb      	ldrb	r3, [r1, r3]
 80054a4:	f003 031f 	and.w	r3, r3, #31
 80054a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	40021000 	.word	0x40021000
 80054b4:	0800a228 	.word	0x0800a228

080054b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054bc:	f7ff ffda 	bl	8005474 <HAL_RCC_GetHCLKFreq>
 80054c0:	4602      	mov	r2, r0
 80054c2:	4b06      	ldr	r3, [pc, #24]	@ (80054dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	0adb      	lsrs	r3, r3, #11
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	4904      	ldr	r1, [pc, #16]	@ (80054e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054ce:	5ccb      	ldrb	r3, [r1, r3]
 80054d0:	f003 031f 	and.w	r3, r3, #31
 80054d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d8:	4618      	mov	r0, r3
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	40021000 	.word	0x40021000
 80054e0:	0800a228 	.word	0x0800a228

080054e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054ec:	2300      	movs	r3, #0
 80054ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054f0:	4b2a      	ldr	r3, [pc, #168]	@ (800559c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054fc:	f7ff f9ee 	bl	80048dc <HAL_PWREx_GetVoltageRange>
 8005500:	6178      	str	r0, [r7, #20]
 8005502:	e014      	b.n	800552e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005504:	4b25      	ldr	r3, [pc, #148]	@ (800559c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005508:	4a24      	ldr	r2, [pc, #144]	@ (800559c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800550a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800550e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005510:	4b22      	ldr	r3, [pc, #136]	@ (800559c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800551c:	f7ff f9de 	bl	80048dc <HAL_PWREx_GetVoltageRange>
 8005520:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005522:	4b1e      	ldr	r3, [pc, #120]	@ (800559c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005526:	4a1d      	ldr	r2, [pc, #116]	@ (800559c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005528:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800552c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005534:	d10b      	bne.n	800554e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b80      	cmp	r3, #128	@ 0x80
 800553a:	d919      	bls.n	8005570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005540:	d902      	bls.n	8005548 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005542:	2302      	movs	r3, #2
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	e013      	b.n	8005570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005548:	2301      	movs	r3, #1
 800554a:	613b      	str	r3, [r7, #16]
 800554c:	e010      	b.n	8005570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b80      	cmp	r3, #128	@ 0x80
 8005552:	d902      	bls.n	800555a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005554:	2303      	movs	r3, #3
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	e00a      	b.n	8005570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b80      	cmp	r3, #128	@ 0x80
 800555e:	d102      	bne.n	8005566 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005560:	2302      	movs	r3, #2
 8005562:	613b      	str	r3, [r7, #16]
 8005564:	e004      	b.n	8005570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b70      	cmp	r3, #112	@ 0x70
 800556a:	d101      	bne.n	8005570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800556c:	2301      	movs	r3, #1
 800556e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005570:	4b0b      	ldr	r3, [pc, #44]	@ (80055a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f023 0207 	bic.w	r2, r3, #7
 8005578:	4909      	ldr	r1, [pc, #36]	@ (80055a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	4313      	orrs	r3, r2
 800557e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005580:	4b07      	ldr	r3, [pc, #28]	@ (80055a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	429a      	cmp	r2, r3
 800558c:	d001      	beq.n	8005592 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40021000 	.word	0x40021000
 80055a0:	40022000 	.word	0x40022000

080055a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055ac:	2300      	movs	r3, #0
 80055ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055b0:	2300      	movs	r3, #0
 80055b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d041      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80055c8:	d02a      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80055ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80055ce:	d824      	bhi.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055d4:	d008      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80055d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055da:	d81e      	bhi.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00a      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80055e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055e4:	d010      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055e6:	e018      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055e8:	4b86      	ldr	r3, [pc, #536]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	4a85      	ldr	r2, [pc, #532]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055f4:	e015      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3304      	adds	r3, #4
 80055fa:	2100      	movs	r1, #0
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 fa8b 	bl	8005b18 <RCCEx_PLLSAI1_Config>
 8005602:	4603      	mov	r3, r0
 8005604:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005606:	e00c      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3320      	adds	r3, #32
 800560c:	2100      	movs	r1, #0
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fb76 	bl	8005d00 <RCCEx_PLLSAI2_Config>
 8005614:	4603      	mov	r3, r0
 8005616:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005618:	e003      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	74fb      	strb	r3, [r7, #19]
      break;
 800561e:	e000      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005620:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005622:	7cfb      	ldrb	r3, [r7, #19]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10b      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005628:	4b76      	ldr	r3, [pc, #472]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800562a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800562e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005636:	4973      	ldr	r1, [pc, #460]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005638:	4313      	orrs	r3, r2
 800563a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800563e:	e001      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005640:	7cfb      	ldrb	r3, [r7, #19]
 8005642:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d041      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005654:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005658:	d02a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800565a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800565e:	d824      	bhi.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005660:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005664:	d008      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005666:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800566a:	d81e      	bhi.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005674:	d010      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005676:	e018      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005678:	4b62      	ldr	r3, [pc, #392]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4a61      	ldr	r2, [pc, #388]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800567e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005682:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005684:	e015      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3304      	adds	r3, #4
 800568a:	2100      	movs	r1, #0
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fa43 	bl	8005b18 <RCCEx_PLLSAI1_Config>
 8005692:	4603      	mov	r3, r0
 8005694:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005696:	e00c      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3320      	adds	r3, #32
 800569c:	2100      	movs	r1, #0
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fb2e 	bl	8005d00 <RCCEx_PLLSAI2_Config>
 80056a4:	4603      	mov	r3, r0
 80056a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056a8:	e003      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	74fb      	strb	r3, [r7, #19]
      break;
 80056ae:	e000      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80056b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056b2:	7cfb      	ldrb	r3, [r7, #19]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10b      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056b8:	4b52      	ldr	r3, [pc, #328]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056c6:	494f      	ldr	r1, [pc, #316]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80056ce:	e001      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d0:	7cfb      	ldrb	r3, [r7, #19]
 80056d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 80a0 	beq.w	8005822 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056e2:	2300      	movs	r3, #0
 80056e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056e6:	4b47      	ldr	r3, [pc, #284]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80056f6:	2300      	movs	r3, #0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00d      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056fc:	4b41      	ldr	r3, [pc, #260]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005700:	4a40      	ldr	r2, [pc, #256]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005706:	6593      	str	r3, [r2, #88]	@ 0x58
 8005708:	4b3e      	ldr	r3, [pc, #248]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800570a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800570c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005710:	60bb      	str	r3, [r7, #8]
 8005712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005714:	2301      	movs	r3, #1
 8005716:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005718:	4b3b      	ldr	r3, [pc, #236]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a3a      	ldr	r2, [pc, #232]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800571e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005722:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005724:	f7fd fb30 	bl	8002d88 <HAL_GetTick>
 8005728:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800572a:	e009      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800572c:	f7fd fb2c 	bl	8002d88 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d902      	bls.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	74fb      	strb	r3, [r7, #19]
        break;
 800573e:	e005      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005740:	4b31      	ldr	r3, [pc, #196]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0ef      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800574c:	7cfb      	ldrb	r3, [r7, #19]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d15c      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005752:	4b2c      	ldr	r3, [pc, #176]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005758:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800575c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01f      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	429a      	cmp	r2, r3
 800576e:	d019      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005770:	4b24      	ldr	r3, [pc, #144]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005776:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800577a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800577c:	4b21      	ldr	r3, [pc, #132]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800577e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005782:	4a20      	ldr	r2, [pc, #128]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800578c:	4b1d      	ldr	r3, [pc, #116]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800578e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005792:	4a1c      	ldr	r2, [pc, #112]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800579c:	4a19      	ldr	r2, [pc, #100]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d016      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ae:	f7fd faeb 	bl	8002d88 <HAL_GetTick>
 80057b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057b4:	e00b      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b6:	f7fd fae7 	bl	8002d88 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d902      	bls.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	74fb      	strb	r3, [r7, #19]
            break;
 80057cc:	e006      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0ec      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80057dc:	7cfb      	ldrb	r3, [r7, #19]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10c      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057e2:	4b08      	ldr	r3, [pc, #32]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057f2:	4904      	ldr	r1, [pc, #16]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80057fa:	e009      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057fc:	7cfb      	ldrb	r3, [r7, #19]
 80057fe:	74bb      	strb	r3, [r7, #18]
 8005800:	e006      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005802:	bf00      	nop
 8005804:	40021000 	.word	0x40021000
 8005808:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580c:	7cfb      	ldrb	r3, [r7, #19]
 800580e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005810:	7c7b      	ldrb	r3, [r7, #17]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d105      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005816:	4ba1      	ldr	r3, [pc, #644]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800581a:	4aa0      	ldr	r2, [pc, #640]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800581c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005820:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800582e:	4b9b      	ldr	r3, [pc, #620]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005834:	f023 0203 	bic.w	r2, r3, #3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583c:	4997      	ldr	r1, [pc, #604]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005850:	4b92      	ldr	r3, [pc, #584]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005856:	f023 020c 	bic.w	r2, r3, #12
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585e:	498f      	ldr	r1, [pc, #572]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0304 	and.w	r3, r3, #4
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005872:	4b8a      	ldr	r3, [pc, #552]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005878:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005880:	4986      	ldr	r1, [pc, #536]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0308 	and.w	r3, r3, #8
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00a      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005894:	4b81      	ldr	r3, [pc, #516]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a2:	497e      	ldr	r1, [pc, #504]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0310 	and.w	r3, r3, #16
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058b6:	4b79      	ldr	r3, [pc, #484]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80058b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058c4:	4975      	ldr	r1, [pc, #468]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0320 	and.w	r3, r3, #32
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058d8:	4b70      	ldr	r3, [pc, #448]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80058da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058e6:	496d      	ldr	r1, [pc, #436]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058fa:	4b68      	ldr	r3, [pc, #416]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80058fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005900:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005908:	4964      	ldr	r1, [pc, #400]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00a      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800591c:	4b5f      	ldr	r3, [pc, #380]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800591e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005922:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800592a:	495c      	ldr	r1, [pc, #368]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800593e:	4b57      	ldr	r3, [pc, #348]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005944:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800594c:	4953      	ldr	r1, [pc, #332]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005960:	4b4e      	ldr	r3, [pc, #312]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005966:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800596e:	494b      	ldr	r1, [pc, #300]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005982:	4b46      	ldr	r3, [pc, #280]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005988:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005990:	4942      	ldr	r1, [pc, #264]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d028      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059a4:	4b3d      	ldr	r3, [pc, #244]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80059a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059b2:	493a      	ldr	r1, [pc, #232]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059c2:	d106      	bne.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059c4:	4b35      	ldr	r3, [pc, #212]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	4a34      	ldr	r2, [pc, #208]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80059ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059ce:	60d3      	str	r3, [r2, #12]
 80059d0:	e011      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059da:	d10c      	bne.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3304      	adds	r3, #4
 80059e0:	2101      	movs	r1, #1
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 f898 	bl	8005b18 <RCCEx_PLLSAI1_Config>
 80059e8:	4603      	mov	r3, r0
 80059ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059ec:	7cfb      	ldrb	r3, [r7, #19]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 80059f2:	7cfb      	ldrb	r3, [r7, #19]
 80059f4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d028      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a02:	4b26      	ldr	r3, [pc, #152]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a08:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a10:	4922      	ldr	r1, [pc, #136]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a20:	d106      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a22:	4b1e      	ldr	r3, [pc, #120]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	4a1d      	ldr	r2, [pc, #116]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005a28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a2c:	60d3      	str	r3, [r2, #12]
 8005a2e:	e011      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a38:	d10c      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	2101      	movs	r1, #1
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 f869 	bl	8005b18 <RCCEx_PLLSAI1_Config>
 8005a46:	4603      	mov	r3, r0
 8005a48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a4a:	7cfb      	ldrb	r3, [r7, #19]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005a50:	7cfb      	ldrb	r3, [r7, #19]
 8005a52:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d031      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a60:	4b0e      	ldr	r3, [pc, #56]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a66:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a6e:	490b      	ldr	r1, [pc, #44]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a7e:	d10f      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3304      	adds	r3, #4
 8005a84:	2102      	movs	r1, #2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 f846 	bl	8005b18 <RCCEx_PLLSAI1_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a90:	7cfb      	ldrb	r3, [r7, #19]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d016      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8005a96:	7cfb      	ldrb	r3, [r7, #19]
 8005a98:	74bb      	strb	r3, [r7, #18]
 8005a9a:	e013      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005a9c:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aa8:	d10c      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	3320      	adds	r3, #32
 8005aae:	2102      	movs	r1, #2
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 f925 	bl	8005d00 <RCCEx_PLLSAI2_Config>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005aba:	7cfb      	ldrb	r3, [r7, #19]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8005ac0:	7cfb      	ldrb	r3, [r7, #19]
 8005ac2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ad0:	4b10      	ldr	r3, [pc, #64]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ade:	490d      	ldr	r1, [pc, #52]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005af2:	4b08      	ldr	r3, [pc, #32]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8005af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b00:	4904      	ldr	r1, [pc, #16]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b08:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	40021000 	.word	0x40021000

08005b18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b26:	4b75      	ldr	r3, [pc, #468]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d018      	beq.n	8005b64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005b32:	4b72      	ldr	r3, [pc, #456]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f003 0203 	and.w	r2, r3, #3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d10d      	bne.n	8005b5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
       ||
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d009      	beq.n	8005b5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005b4a:	4b6c      	ldr	r3, [pc, #432]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	091b      	lsrs	r3, r3, #4
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
       ||
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d047      	beq.n	8005bee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	73fb      	strb	r3, [r7, #15]
 8005b62:	e044      	b.n	8005bee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d018      	beq.n	8005b9e <RCCEx_PLLSAI1_Config+0x86>
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	d825      	bhi.n	8005bbc <RCCEx_PLLSAI1_Config+0xa4>
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d002      	beq.n	8005b7a <RCCEx_PLLSAI1_Config+0x62>
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d009      	beq.n	8005b8c <RCCEx_PLLSAI1_Config+0x74>
 8005b78:	e020      	b.n	8005bbc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b7a:	4b60      	ldr	r3, [pc, #384]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d11d      	bne.n	8005bc2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b8a:	e01a      	b.n	8005bc2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b8c:	4b5b      	ldr	r3, [pc, #364]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d116      	bne.n	8005bc6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b9c:	e013      	b.n	8005bc6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b9e:	4b57      	ldr	r3, [pc, #348]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10f      	bne.n	8005bca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005baa:	4b54      	ldr	r3, [pc, #336]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d109      	bne.n	8005bca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005bba:	e006      	b.n	8005bca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005bc0:	e004      	b.n	8005bcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bc2:	bf00      	nop
 8005bc4:	e002      	b.n	8005bcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bc6:	bf00      	nop
 8005bc8:	e000      	b.n	8005bcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bca:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10d      	bne.n	8005bee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6819      	ldr	r1, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	011b      	lsls	r3, r3, #4
 8005be6:	430b      	orrs	r3, r1
 8005be8:	4944      	ldr	r1, [pc, #272]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d17d      	bne.n	8005cf0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005bf4:	4b41      	ldr	r3, [pc, #260]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a40      	ldr	r2, [pc, #256]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bfa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c00:	f7fd f8c2 	bl	8002d88 <HAL_GetTick>
 8005c04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c06:	e009      	b.n	8005c1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c08:	f7fd f8be 	bl	8002d88 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d902      	bls.n	8005c1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	73fb      	strb	r3, [r7, #15]
        break;
 8005c1a:	e005      	b.n	8005c28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c1c:	4b37      	ldr	r3, [pc, #220]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1ef      	bne.n	8005c08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d160      	bne.n	8005cf0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d111      	bne.n	8005c58 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c34:	4b31      	ldr	r3, [pc, #196]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005c3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6892      	ldr	r2, [r2, #8]
 8005c44:	0211      	lsls	r1, r2, #8
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	68d2      	ldr	r2, [r2, #12]
 8005c4a:	0912      	lsrs	r2, r2, #4
 8005c4c:	0452      	lsls	r2, r2, #17
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	492a      	ldr	r1, [pc, #168]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	610b      	str	r3, [r1, #16]
 8005c56:	e027      	b.n	8005ca8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d112      	bne.n	8005c84 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c5e:	4b27      	ldr	r3, [pc, #156]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005c66:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6892      	ldr	r2, [r2, #8]
 8005c6e:	0211      	lsls	r1, r2, #8
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6912      	ldr	r2, [r2, #16]
 8005c74:	0852      	lsrs	r2, r2, #1
 8005c76:	3a01      	subs	r2, #1
 8005c78:	0552      	lsls	r2, r2, #21
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	491f      	ldr	r1, [pc, #124]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	610b      	str	r3, [r1, #16]
 8005c82:	e011      	b.n	8005ca8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c84:	4b1d      	ldr	r3, [pc, #116]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005c8c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6892      	ldr	r2, [r2, #8]
 8005c94:	0211      	lsls	r1, r2, #8
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6952      	ldr	r2, [r2, #20]
 8005c9a:	0852      	lsrs	r2, r2, #1
 8005c9c:	3a01      	subs	r2, #1
 8005c9e:	0652      	lsls	r2, r2, #25
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	4916      	ldr	r1, [pc, #88]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ca8:	4b14      	ldr	r3, [pc, #80]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a13      	ldr	r2, [pc, #76]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005cb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb4:	f7fd f868 	bl	8002d88 <HAL_GetTick>
 8005cb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cba:	e009      	b.n	8005cd0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cbc:	f7fd f864 	bl	8002d88 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d902      	bls.n	8005cd0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	73fb      	strb	r3, [r7, #15]
          break;
 8005cce:	e005      	b.n	8005cdc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0ef      	beq.n	8005cbc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005ce2:	4b06      	ldr	r3, [pc, #24]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ce4:	691a      	ldr	r2, [r3, #16]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	4904      	ldr	r1, [pc, #16]	@ (8005cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40021000 	.word	0x40021000

08005d00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d0e:	4b6a      	ldr	r3, [pc, #424]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d018      	beq.n	8005d4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d1a:	4b67      	ldr	r3, [pc, #412]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f003 0203 	and.w	r2, r3, #3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d10d      	bne.n	8005d46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
       ||
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d009      	beq.n	8005d46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005d32:	4b61      	ldr	r3, [pc, #388]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	091b      	lsrs	r3, r3, #4
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
       ||
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d047      	beq.n	8005dd6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	73fb      	strb	r3, [r7, #15]
 8005d4a:	e044      	b.n	8005dd6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d018      	beq.n	8005d86 <RCCEx_PLLSAI2_Config+0x86>
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d825      	bhi.n	8005da4 <RCCEx_PLLSAI2_Config+0xa4>
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d002      	beq.n	8005d62 <RCCEx_PLLSAI2_Config+0x62>
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d009      	beq.n	8005d74 <RCCEx_PLLSAI2_Config+0x74>
 8005d60:	e020      	b.n	8005da4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d62:	4b55      	ldr	r3, [pc, #340]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d11d      	bne.n	8005daa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d72:	e01a      	b.n	8005daa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d74:	4b50      	ldr	r3, [pc, #320]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d116      	bne.n	8005dae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d84:	e013      	b.n	8005dae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d86:	4b4c      	ldr	r3, [pc, #304]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10f      	bne.n	8005db2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d92:	4b49      	ldr	r3, [pc, #292]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d109      	bne.n	8005db2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005da2:	e006      	b.n	8005db2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	73fb      	strb	r3, [r7, #15]
      break;
 8005da8:	e004      	b.n	8005db4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005daa:	bf00      	nop
 8005dac:	e002      	b.n	8005db4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005dae:	bf00      	nop
 8005db0:	e000      	b.n	8005db4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005db2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10d      	bne.n	8005dd6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005dba:	4b3f      	ldr	r3, [pc, #252]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6819      	ldr	r1, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	430b      	orrs	r3, r1
 8005dd0:	4939      	ldr	r1, [pc, #228]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d167      	bne.n	8005eac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005ddc:	4b36      	ldr	r3, [pc, #216]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a35      	ldr	r2, [pc, #212]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005de2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005de8:	f7fc ffce 	bl	8002d88 <HAL_GetTick>
 8005dec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005dee:	e009      	b.n	8005e04 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005df0:	f7fc ffca 	bl	8002d88 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d902      	bls.n	8005e04 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	73fb      	strb	r3, [r7, #15]
        break;
 8005e02:	e005      	b.n	8005e10 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e04:	4b2c      	ldr	r3, [pc, #176]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1ef      	bne.n	8005df0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d14a      	bne.n	8005eac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d111      	bne.n	8005e40 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e1c:	4b26      	ldr	r3, [pc, #152]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005e24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6892      	ldr	r2, [r2, #8]
 8005e2c:	0211      	lsls	r1, r2, #8
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	68d2      	ldr	r2, [r2, #12]
 8005e32:	0912      	lsrs	r2, r2, #4
 8005e34:	0452      	lsls	r2, r2, #17
 8005e36:	430a      	orrs	r2, r1
 8005e38:	491f      	ldr	r1, [pc, #124]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	614b      	str	r3, [r1, #20]
 8005e3e:	e011      	b.n	8005e64 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e40:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005e48:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6892      	ldr	r2, [r2, #8]
 8005e50:	0211      	lsls	r1, r2, #8
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6912      	ldr	r2, [r2, #16]
 8005e56:	0852      	lsrs	r2, r2, #1
 8005e58:	3a01      	subs	r2, #1
 8005e5a:	0652      	lsls	r2, r2, #25
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	4916      	ldr	r1, [pc, #88]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005e64:	4b14      	ldr	r3, [pc, #80]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a13      	ldr	r2, [pc, #76]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e70:	f7fc ff8a 	bl	8002d88 <HAL_GetTick>
 8005e74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e76:	e009      	b.n	8005e8c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e78:	f7fc ff86 	bl	8002d88 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d902      	bls.n	8005e8c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	73fb      	strb	r3, [r7, #15]
          break;
 8005e8a:	e005      	b.n	8005e98 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0ef      	beq.n	8005e78 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005e9e:	4b06      	ldr	r3, [pc, #24]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ea0:	695a      	ldr	r2, [r3, #20]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	4904      	ldr	r1, [pc, #16]	@ (8005eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	40021000 	.word	0x40021000

08005ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e049      	b.n	8005f62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d106      	bne.n	8005ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7fc f904 	bl	80020f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4610      	mov	r0, r2
 8005efc:	f001 f870 	bl	8006fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b082      	sub	sp, #8
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e049      	b.n	8006010 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d106      	bne.n	8005f96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7fc fa09 	bl	80023a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2202      	movs	r2, #2
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	4610      	mov	r0, r2
 8005faa:	f001 f819 	bl	8006fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d109      	bne.n	800603c <HAL_TIM_PWM_Start+0x24>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b01      	cmp	r3, #1
 8006032:	bf14      	ite	ne
 8006034:	2301      	movne	r3, #1
 8006036:	2300      	moveq	r3, #0
 8006038:	b2db      	uxtb	r3, r3
 800603a:	e03c      	b.n	80060b6 <HAL_TIM_PWM_Start+0x9e>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	2b04      	cmp	r3, #4
 8006040:	d109      	bne.n	8006056 <HAL_TIM_PWM_Start+0x3e>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b01      	cmp	r3, #1
 800604c:	bf14      	ite	ne
 800604e:	2301      	movne	r3, #1
 8006050:	2300      	moveq	r3, #0
 8006052:	b2db      	uxtb	r3, r3
 8006054:	e02f      	b.n	80060b6 <HAL_TIM_PWM_Start+0x9e>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b08      	cmp	r3, #8
 800605a:	d109      	bne.n	8006070 <HAL_TIM_PWM_Start+0x58>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b01      	cmp	r3, #1
 8006066:	bf14      	ite	ne
 8006068:	2301      	movne	r3, #1
 800606a:	2300      	moveq	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	e022      	b.n	80060b6 <HAL_TIM_PWM_Start+0x9e>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b0c      	cmp	r3, #12
 8006074:	d109      	bne.n	800608a <HAL_TIM_PWM_Start+0x72>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b01      	cmp	r3, #1
 8006080:	bf14      	ite	ne
 8006082:	2301      	movne	r3, #1
 8006084:	2300      	moveq	r3, #0
 8006086:	b2db      	uxtb	r3, r3
 8006088:	e015      	b.n	80060b6 <HAL_TIM_PWM_Start+0x9e>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b10      	cmp	r3, #16
 800608e:	d109      	bne.n	80060a4 <HAL_TIM_PWM_Start+0x8c>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b01      	cmp	r3, #1
 800609a:	bf14      	ite	ne
 800609c:	2301      	movne	r3, #1
 800609e:	2300      	moveq	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	e008      	b.n	80060b6 <HAL_TIM_PWM_Start+0x9e>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	bf14      	ite	ne
 80060b0:	2301      	movne	r3, #1
 80060b2:	2300      	moveq	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e09c      	b.n	80061f8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d104      	bne.n	80060ce <HAL_TIM_PWM_Start+0xb6>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060cc:	e023      	b.n	8006116 <HAL_TIM_PWM_Start+0xfe>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d104      	bne.n	80060de <HAL_TIM_PWM_Start+0xc6>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060dc:	e01b      	b.n	8006116 <HAL_TIM_PWM_Start+0xfe>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d104      	bne.n	80060ee <HAL_TIM_PWM_Start+0xd6>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060ec:	e013      	b.n	8006116 <HAL_TIM_PWM_Start+0xfe>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b0c      	cmp	r3, #12
 80060f2:	d104      	bne.n	80060fe <HAL_TIM_PWM_Start+0xe6>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060fc:	e00b      	b.n	8006116 <HAL_TIM_PWM_Start+0xfe>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b10      	cmp	r3, #16
 8006102:	d104      	bne.n	800610e <HAL_TIM_PWM_Start+0xf6>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800610c:	e003      	b.n	8006116 <HAL_TIM_PWM_Start+0xfe>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2202      	movs	r2, #2
 8006112:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2201      	movs	r2, #1
 800611c:	6839      	ldr	r1, [r7, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f001 fc8c 	bl	8007a3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a35      	ldr	r2, [pc, #212]	@ (8006200 <HAL_TIM_PWM_Start+0x1e8>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d013      	beq.n	8006156 <HAL_TIM_PWM_Start+0x13e>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a34      	ldr	r2, [pc, #208]	@ (8006204 <HAL_TIM_PWM_Start+0x1ec>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d00e      	beq.n	8006156 <HAL_TIM_PWM_Start+0x13e>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a32      	ldr	r2, [pc, #200]	@ (8006208 <HAL_TIM_PWM_Start+0x1f0>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d009      	beq.n	8006156 <HAL_TIM_PWM_Start+0x13e>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a31      	ldr	r2, [pc, #196]	@ (800620c <HAL_TIM_PWM_Start+0x1f4>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d004      	beq.n	8006156 <HAL_TIM_PWM_Start+0x13e>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a2f      	ldr	r2, [pc, #188]	@ (8006210 <HAL_TIM_PWM_Start+0x1f8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d101      	bne.n	800615a <HAL_TIM_PWM_Start+0x142>
 8006156:	2301      	movs	r3, #1
 8006158:	e000      	b.n	800615c <HAL_TIM_PWM_Start+0x144>
 800615a:	2300      	movs	r3, #0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d007      	beq.n	8006170 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800616e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a22      	ldr	r2, [pc, #136]	@ (8006200 <HAL_TIM_PWM_Start+0x1e8>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d01d      	beq.n	80061b6 <HAL_TIM_PWM_Start+0x19e>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006182:	d018      	beq.n	80061b6 <HAL_TIM_PWM_Start+0x19e>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a22      	ldr	r2, [pc, #136]	@ (8006214 <HAL_TIM_PWM_Start+0x1fc>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d013      	beq.n	80061b6 <HAL_TIM_PWM_Start+0x19e>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a21      	ldr	r2, [pc, #132]	@ (8006218 <HAL_TIM_PWM_Start+0x200>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d00e      	beq.n	80061b6 <HAL_TIM_PWM_Start+0x19e>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a1f      	ldr	r2, [pc, #124]	@ (800621c <HAL_TIM_PWM_Start+0x204>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d009      	beq.n	80061b6 <HAL_TIM_PWM_Start+0x19e>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a17      	ldr	r2, [pc, #92]	@ (8006204 <HAL_TIM_PWM_Start+0x1ec>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d004      	beq.n	80061b6 <HAL_TIM_PWM_Start+0x19e>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a15      	ldr	r2, [pc, #84]	@ (8006208 <HAL_TIM_PWM_Start+0x1f0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d115      	bne.n	80061e2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	4b18      	ldr	r3, [pc, #96]	@ (8006220 <HAL_TIM_PWM_Start+0x208>)
 80061be:	4013      	ands	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b06      	cmp	r3, #6
 80061c6:	d015      	beq.n	80061f4 <HAL_TIM_PWM_Start+0x1dc>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ce:	d011      	beq.n	80061f4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0201 	orr.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e0:	e008      	b.n	80061f4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f042 0201 	orr.w	r2, r2, #1
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	e000      	b.n	80061f6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	40012c00 	.word	0x40012c00
 8006204:	40013400 	.word	0x40013400
 8006208:	40014000 	.word	0x40014000
 800620c:	40014400 	.word	0x40014400
 8006210:	40014800 	.word	0x40014800
 8006214:	40000400 	.word	0x40000400
 8006218:	40000800 	.word	0x40000800
 800621c:	40000c00 	.word	0x40000c00
 8006220:	00010007 	.word	0x00010007

08006224 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e049      	b.n	80062ca <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d106      	bne.n	8006250 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fc f82e 	bl	80022ac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3304      	adds	r3, #4
 8006260:	4619      	mov	r1, r3
 8006262:	4610      	mov	r0, r2
 8006264:	f000 febc 	bl	8006fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
	...

080062d4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d104      	bne.n	80062f2 <HAL_TIM_IC_Start_IT+0x1e>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	e023      	b.n	800633a <HAL_TIM_IC_Start_IT+0x66>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d104      	bne.n	8006302 <HAL_TIM_IC_Start_IT+0x2e>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	e01b      	b.n	800633a <HAL_TIM_IC_Start_IT+0x66>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b08      	cmp	r3, #8
 8006306:	d104      	bne.n	8006312 <HAL_TIM_IC_Start_IT+0x3e>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800630e:	b2db      	uxtb	r3, r3
 8006310:	e013      	b.n	800633a <HAL_TIM_IC_Start_IT+0x66>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b0c      	cmp	r3, #12
 8006316:	d104      	bne.n	8006322 <HAL_TIM_IC_Start_IT+0x4e>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800631e:	b2db      	uxtb	r3, r3
 8006320:	e00b      	b.n	800633a <HAL_TIM_IC_Start_IT+0x66>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b10      	cmp	r3, #16
 8006326:	d104      	bne.n	8006332 <HAL_TIM_IC_Start_IT+0x5e>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800632e:	b2db      	uxtb	r3, r3
 8006330:	e003      	b.n	800633a <HAL_TIM_IC_Start_IT+0x66>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006338:	b2db      	uxtb	r3, r3
 800633a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d104      	bne.n	800634c <HAL_TIM_IC_Start_IT+0x78>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006348:	b2db      	uxtb	r3, r3
 800634a:	e013      	b.n	8006374 <HAL_TIM_IC_Start_IT+0xa0>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b04      	cmp	r3, #4
 8006350:	d104      	bne.n	800635c <HAL_TIM_IC_Start_IT+0x88>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006358:	b2db      	uxtb	r3, r3
 800635a:	e00b      	b.n	8006374 <HAL_TIM_IC_Start_IT+0xa0>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b08      	cmp	r3, #8
 8006360:	d104      	bne.n	800636c <HAL_TIM_IC_Start_IT+0x98>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006368:	b2db      	uxtb	r3, r3
 800636a:	e003      	b.n	8006374 <HAL_TIM_IC_Start_IT+0xa0>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006372:	b2db      	uxtb	r3, r3
 8006374:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006376:	7bbb      	ldrb	r3, [r7, #14]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d102      	bne.n	8006382 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800637c:	7b7b      	ldrb	r3, [r7, #13]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d001      	beq.n	8006386 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e0dd      	b.n	8006542 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d104      	bne.n	8006396 <HAL_TIM_IC_Start_IT+0xc2>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006394:	e023      	b.n	80063de <HAL_TIM_IC_Start_IT+0x10a>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b04      	cmp	r3, #4
 800639a:	d104      	bne.n	80063a6 <HAL_TIM_IC_Start_IT+0xd2>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063a4:	e01b      	b.n	80063de <HAL_TIM_IC_Start_IT+0x10a>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d104      	bne.n	80063b6 <HAL_TIM_IC_Start_IT+0xe2>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063b4:	e013      	b.n	80063de <HAL_TIM_IC_Start_IT+0x10a>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b0c      	cmp	r3, #12
 80063ba:	d104      	bne.n	80063c6 <HAL_TIM_IC_Start_IT+0xf2>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063c4:	e00b      	b.n	80063de <HAL_TIM_IC_Start_IT+0x10a>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b10      	cmp	r3, #16
 80063ca:	d104      	bne.n	80063d6 <HAL_TIM_IC_Start_IT+0x102>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063d4:	e003      	b.n	80063de <HAL_TIM_IC_Start_IT+0x10a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2202      	movs	r2, #2
 80063da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d104      	bne.n	80063ee <HAL_TIM_IC_Start_IT+0x11a>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063ec:	e013      	b.n	8006416 <HAL_TIM_IC_Start_IT+0x142>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b04      	cmp	r3, #4
 80063f2:	d104      	bne.n	80063fe <HAL_TIM_IC_Start_IT+0x12a>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063fc:	e00b      	b.n	8006416 <HAL_TIM_IC_Start_IT+0x142>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b08      	cmp	r3, #8
 8006402:	d104      	bne.n	800640e <HAL_TIM_IC_Start_IT+0x13a>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800640c:	e003      	b.n	8006416 <HAL_TIM_IC_Start_IT+0x142>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2202      	movs	r2, #2
 8006412:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b0c      	cmp	r3, #12
 800641a:	d841      	bhi.n	80064a0 <HAL_TIM_IC_Start_IT+0x1cc>
 800641c:	a201      	add	r2, pc, #4	@ (adr r2, 8006424 <HAL_TIM_IC_Start_IT+0x150>)
 800641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006422:	bf00      	nop
 8006424:	08006459 	.word	0x08006459
 8006428:	080064a1 	.word	0x080064a1
 800642c:	080064a1 	.word	0x080064a1
 8006430:	080064a1 	.word	0x080064a1
 8006434:	0800646b 	.word	0x0800646b
 8006438:	080064a1 	.word	0x080064a1
 800643c:	080064a1 	.word	0x080064a1
 8006440:	080064a1 	.word	0x080064a1
 8006444:	0800647d 	.word	0x0800647d
 8006448:	080064a1 	.word	0x080064a1
 800644c:	080064a1 	.word	0x080064a1
 8006450:	080064a1 	.word	0x080064a1
 8006454:	0800648f 	.word	0x0800648f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0202 	orr.w	r2, r2, #2
 8006466:	60da      	str	r2, [r3, #12]
      break;
 8006468:	e01d      	b.n	80064a6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f042 0204 	orr.w	r2, r2, #4
 8006478:	60da      	str	r2, [r3, #12]
      break;
 800647a:	e014      	b.n	80064a6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 0208 	orr.w	r2, r2, #8
 800648a:	60da      	str	r2, [r3, #12]
      break;
 800648c:	e00b      	b.n	80064a6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f042 0210 	orr.w	r2, r2, #16
 800649c:	60da      	str	r2, [r3, #12]
      break;
 800649e:	e002      	b.n	80064a6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	73fb      	strb	r3, [r7, #15]
      break;
 80064a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d149      	bne.n	8006540 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2201      	movs	r2, #1
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f001 fac1 	bl	8007a3c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a23      	ldr	r2, [pc, #140]	@ (800654c <HAL_TIM_IC_Start_IT+0x278>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d01d      	beq.n	8006500 <HAL_TIM_IC_Start_IT+0x22c>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064cc:	d018      	beq.n	8006500 <HAL_TIM_IC_Start_IT+0x22c>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006550 <HAL_TIM_IC_Start_IT+0x27c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d013      	beq.n	8006500 <HAL_TIM_IC_Start_IT+0x22c>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006554 <HAL_TIM_IC_Start_IT+0x280>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00e      	beq.n	8006500 <HAL_TIM_IC_Start_IT+0x22c>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006558 <HAL_TIM_IC_Start_IT+0x284>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d009      	beq.n	8006500 <HAL_TIM_IC_Start_IT+0x22c>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a1a      	ldr	r2, [pc, #104]	@ (800655c <HAL_TIM_IC_Start_IT+0x288>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d004      	beq.n	8006500 <HAL_TIM_IC_Start_IT+0x22c>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a19      	ldr	r2, [pc, #100]	@ (8006560 <HAL_TIM_IC_Start_IT+0x28c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d115      	bne.n	800652c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	4b17      	ldr	r3, [pc, #92]	@ (8006564 <HAL_TIM_IC_Start_IT+0x290>)
 8006508:	4013      	ands	r3, r2
 800650a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b06      	cmp	r3, #6
 8006510:	d015      	beq.n	800653e <HAL_TIM_IC_Start_IT+0x26a>
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006518:	d011      	beq.n	800653e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f042 0201 	orr.w	r2, r2, #1
 8006528:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800652a:	e008      	b.n	800653e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0201 	orr.w	r2, r2, #1
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	e000      	b.n	8006540 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800653e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006540:	7bfb      	ldrb	r3, [r7, #15]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	40012c00 	.word	0x40012c00
 8006550:	40000400 	.word	0x40000400
 8006554:	40000800 	.word	0x40000800
 8006558:	40000c00 	.word	0x40000c00
 800655c:	40013400 	.word	0x40013400
 8006560:	40014000 	.word	0x40014000
 8006564:	00010007 	.word	0x00010007

08006568 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e097      	b.n	80066ac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	d106      	bne.n	8006596 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7fb fde7 	bl	8002164 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2202      	movs	r2, #2
 800659a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6812      	ldr	r2, [r2, #0]
 80065a8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80065ac:	f023 0307 	bic.w	r3, r3, #7
 80065b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3304      	adds	r3, #4
 80065ba:	4619      	mov	r1, r3
 80065bc:	4610      	mov	r0, r2
 80065be:	f000 fd0f 	bl	8006fe0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ea:	f023 0303 	bic.w	r3, r3, #3
 80065ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	4313      	orrs	r3, r2
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	4313      	orrs	r3, r2
 8006600:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006608:	f023 030c 	bic.w	r3, r3, #12
 800660c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006614:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006618:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	021b      	lsls	r3, r3, #8
 8006624:	4313      	orrs	r3, r2
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	4313      	orrs	r3, r2
 800662a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	011a      	lsls	r2, r3, #4
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	031b      	lsls	r3, r3, #12
 8006638:	4313      	orrs	r3, r2
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006646:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800664e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	4313      	orrs	r3, r2
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80066cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d110      	bne.n	8006706 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d102      	bne.n	80066f0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80066ea:	7b7b      	ldrb	r3, [r7, #13]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d001      	beq.n	80066f4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e089      	b.n	8006808 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2202      	movs	r2, #2
 80066f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006704:	e031      	b.n	800676a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b04      	cmp	r3, #4
 800670a:	d110      	bne.n	800672e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800670c:	7bbb      	ldrb	r3, [r7, #14]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d102      	bne.n	8006718 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006712:	7b3b      	ldrb	r3, [r7, #12]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d001      	beq.n	800671c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e075      	b.n	8006808 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2202      	movs	r2, #2
 8006720:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800672c:	e01d      	b.n	800676a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d108      	bne.n	8006746 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006734:	7bbb      	ldrb	r3, [r7, #14]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d105      	bne.n	8006746 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800673a:	7b7b      	ldrb	r3, [r7, #13]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d102      	bne.n	8006746 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006740:	7b3b      	ldrb	r3, [r7, #12]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d001      	beq.n	800674a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e05e      	b.n	8006808 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2202      	movs	r2, #2
 800674e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2202      	movs	r2, #2
 8006756:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2202      	movs	r2, #2
 800675e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2202      	movs	r2, #2
 8006766:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b04      	cmp	r3, #4
 8006774:	d010      	beq.n	8006798 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006776:	e01f      	b.n	80067b8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2201      	movs	r2, #1
 800677e:	2100      	movs	r1, #0
 8006780:	4618      	mov	r0, r3
 8006782:	f001 f95b 	bl	8007a3c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f042 0202 	orr.w	r2, r2, #2
 8006794:	60da      	str	r2, [r3, #12]
      break;
 8006796:	e02e      	b.n	80067f6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2201      	movs	r2, #1
 800679e:	2104      	movs	r1, #4
 80067a0:	4618      	mov	r0, r3
 80067a2:	f001 f94b 	bl	8007a3c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f042 0204 	orr.w	r2, r2, #4
 80067b4:	60da      	str	r2, [r3, #12]
      break;
 80067b6:	e01e      	b.n	80067f6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2201      	movs	r2, #1
 80067be:	2100      	movs	r1, #0
 80067c0:	4618      	mov	r0, r3
 80067c2:	f001 f93b 	bl	8007a3c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2201      	movs	r2, #1
 80067cc:	2104      	movs	r1, #4
 80067ce:	4618      	mov	r0, r3
 80067d0:	f001 f934 	bl	8007a3c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0202 	orr.w	r2, r2, #2
 80067e2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68da      	ldr	r2, [r3, #12]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0204 	orr.w	r2, r2, #4
 80067f2:	60da      	str	r2, [r3, #12]
      break;
 80067f4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f042 0201 	orr.w	r2, r2, #1
 8006804:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d020      	beq.n	8006874 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01b      	beq.n	8006874 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f06f 0202 	mvn.w	r2, #2
 8006844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	f003 0303 	and.w	r3, r3, #3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7fb f9c4 	bl	8001be8 <HAL_TIM_IC_CaptureCallback>
 8006860:	e005      	b.n	800686e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fb9e 	bl	8006fa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fba5 	bl	8006fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b00      	cmp	r3, #0
 800687c:	d020      	beq.n	80068c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b00      	cmp	r3, #0
 8006886:	d01b      	beq.n	80068c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f06f 0204 	mvn.w	r2, #4
 8006890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2202      	movs	r2, #2
 8006896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fb f99e 	bl	8001be8 <HAL_TIM_IC_CaptureCallback>
 80068ac:	e005      	b.n	80068ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fb78 	bl	8006fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fb7f 	bl	8006fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f003 0308 	and.w	r3, r3, #8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d020      	beq.n	800690c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f003 0308 	and.w	r3, r3, #8
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d01b      	beq.n	800690c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f06f 0208 	mvn.w	r2, #8
 80068dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2204      	movs	r2, #4
 80068e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	f003 0303 	and.w	r3, r3, #3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fb f978 	bl	8001be8 <HAL_TIM_IC_CaptureCallback>
 80068f8:	e005      	b.n	8006906 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fb52 	bl	8006fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fb59 	bl	8006fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f003 0310 	and.w	r3, r3, #16
 8006912:	2b00      	cmp	r3, #0
 8006914:	d020      	beq.n	8006958 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f003 0310 	and.w	r3, r3, #16
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01b      	beq.n	8006958 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f06f 0210 	mvn.w	r2, #16
 8006928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2208      	movs	r2, #8
 800692e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7fb f952 	bl	8001be8 <HAL_TIM_IC_CaptureCallback>
 8006944:	e005      	b.n	8006952 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fb2c 	bl	8006fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fb33 	bl	8006fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00c      	beq.n	800697c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b00      	cmp	r3, #0
 800696a:	d007      	beq.n	800697c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f06f 0201 	mvn.w	r2, #1
 8006974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fb0a 	bl	8006f90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00c      	beq.n	80069a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800698c:	2b00      	cmp	r3, #0
 800698e:	d007      	beq.n	80069a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 f984 	bl	8007ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00c      	beq.n	80069c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d007      	beq.n	80069c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80069bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 f97c 	bl	8007cbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00c      	beq.n	80069e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d007      	beq.n	80069e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80069e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 faf2 	bl	8006fcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f003 0320 	and.w	r3, r3, #32
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00c      	beq.n	8006a0c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f003 0320 	and.w	r3, r3, #32
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d007      	beq.n	8006a0c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f06f 0220 	mvn.w	r2, #32
 8006a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f001 f944 	bl	8007c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a0c:	bf00      	nop
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a20:	2300      	movs	r3, #0
 8006a22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d101      	bne.n	8006a32 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006a2e:	2302      	movs	r3, #2
 8006a30:	e088      	b.n	8006b44 <HAL_TIM_IC_ConfigChannel+0x130>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d11b      	bne.n	8006a78 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006a50:	f000 fe36 	bl	80076c0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699a      	ldr	r2, [r3, #24]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 020c 	bic.w	r2, r2, #12
 8006a62:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6999      	ldr	r1, [r3, #24]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	619a      	str	r2, [r3, #24]
 8006a76:	e060      	b.n	8006b3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	d11c      	bne.n	8006ab8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006a8e:	f000 feb4 	bl	80077fa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	699a      	ldr	r2, [r3, #24]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006aa0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6999      	ldr	r1, [r3, #24]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	021a      	lsls	r2, r3, #8
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	619a      	str	r2, [r3, #24]
 8006ab6:	e040      	b.n	8006b3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b08      	cmp	r3, #8
 8006abc:	d11b      	bne.n	8006af6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006ace:	f000 ff01 	bl	80078d4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	69da      	ldr	r2, [r3, #28]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f022 020c 	bic.w	r2, r2, #12
 8006ae0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69d9      	ldr	r1, [r3, #28]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	61da      	str	r2, [r3, #28]
 8006af4:	e021      	b.n	8006b3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b0c      	cmp	r3, #12
 8006afa:	d11c      	bne.n	8006b36 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006b0c:	f000 ff1e 	bl	800794c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	69da      	ldr	r2, [r3, #28]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006b1e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	69d9      	ldr	r1, [r3, #28]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	021a      	lsls	r2, r3, #8
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	61da      	str	r2, [r3, #28]
 8006b34:	e001      	b.n	8006b3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d101      	bne.n	8006b6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b66:	2302      	movs	r3, #2
 8006b68:	e0ff      	b.n	8006d6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b14      	cmp	r3, #20
 8006b76:	f200 80f0 	bhi.w	8006d5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006bd5 	.word	0x08006bd5
 8006b84:	08006d5b 	.word	0x08006d5b
 8006b88:	08006d5b 	.word	0x08006d5b
 8006b8c:	08006d5b 	.word	0x08006d5b
 8006b90:	08006c15 	.word	0x08006c15
 8006b94:	08006d5b 	.word	0x08006d5b
 8006b98:	08006d5b 	.word	0x08006d5b
 8006b9c:	08006d5b 	.word	0x08006d5b
 8006ba0:	08006c57 	.word	0x08006c57
 8006ba4:	08006d5b 	.word	0x08006d5b
 8006ba8:	08006d5b 	.word	0x08006d5b
 8006bac:	08006d5b 	.word	0x08006d5b
 8006bb0:	08006c97 	.word	0x08006c97
 8006bb4:	08006d5b 	.word	0x08006d5b
 8006bb8:	08006d5b 	.word	0x08006d5b
 8006bbc:	08006d5b 	.word	0x08006d5b
 8006bc0:	08006cd9 	.word	0x08006cd9
 8006bc4:	08006d5b 	.word	0x08006d5b
 8006bc8:	08006d5b 	.word	0x08006d5b
 8006bcc:	08006d5b 	.word	0x08006d5b
 8006bd0:	08006d19 	.word	0x08006d19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68b9      	ldr	r1, [r7, #8]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fa9a 	bl	8007114 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699a      	ldr	r2, [r3, #24]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0208 	orr.w	r2, r2, #8
 8006bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 0204 	bic.w	r2, r2, #4
 8006bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6999      	ldr	r1, [r3, #24]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	691a      	ldr	r2, [r3, #16]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	619a      	str	r2, [r3, #24]
      break;
 8006c12:	e0a5      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 fb0a 	bl	8007234 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699a      	ldr	r2, [r3, #24]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6999      	ldr	r1, [r3, #24]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	021a      	lsls	r2, r3, #8
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	619a      	str	r2, [r3, #24]
      break;
 8006c54:	e084      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68b9      	ldr	r1, [r7, #8]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 fb73 	bl	8007348 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69da      	ldr	r2, [r3, #28]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 0208 	orr.w	r2, r2, #8
 8006c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69da      	ldr	r2, [r3, #28]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0204 	bic.w	r2, r2, #4
 8006c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69d9      	ldr	r1, [r3, #28]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	691a      	ldr	r2, [r3, #16]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	61da      	str	r2, [r3, #28]
      break;
 8006c94:	e064      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68b9      	ldr	r1, [r7, #8]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 fbdb 	bl	8007458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69da      	ldr	r2, [r3, #28]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69d9      	ldr	r1, [r3, #28]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	021a      	lsls	r2, r3, #8
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	61da      	str	r2, [r3, #28]
      break;
 8006cd6:	e043      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68b9      	ldr	r1, [r7, #8]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fc24 	bl	800752c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0208 	orr.w	r2, r2, #8
 8006cf2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0204 	bic.w	r2, r2, #4
 8006d02:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	691a      	ldr	r2, [r3, #16]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006d16:	e023      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68b9      	ldr	r1, [r7, #8]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 fc68 	bl	80075f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d32:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d42:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	021a      	lsls	r2, r3, #8
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006d58:	e002      	b.n	8006d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop

08006d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d101      	bne.n	8006d90 <HAL_TIM_ConfigClockSource+0x1c>
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	e0b6      	b.n	8006efe <HAL_TIM_ConfigClockSource+0x18a>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dcc:	d03e      	beq.n	8006e4c <HAL_TIM_ConfigClockSource+0xd8>
 8006dce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dd2:	f200 8087 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x170>
 8006dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dda:	f000 8086 	beq.w	8006eea <HAL_TIM_ConfigClockSource+0x176>
 8006dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006de2:	d87f      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x170>
 8006de4:	2b70      	cmp	r3, #112	@ 0x70
 8006de6:	d01a      	beq.n	8006e1e <HAL_TIM_ConfigClockSource+0xaa>
 8006de8:	2b70      	cmp	r3, #112	@ 0x70
 8006dea:	d87b      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x170>
 8006dec:	2b60      	cmp	r3, #96	@ 0x60
 8006dee:	d050      	beq.n	8006e92 <HAL_TIM_ConfigClockSource+0x11e>
 8006df0:	2b60      	cmp	r3, #96	@ 0x60
 8006df2:	d877      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x170>
 8006df4:	2b50      	cmp	r3, #80	@ 0x50
 8006df6:	d03c      	beq.n	8006e72 <HAL_TIM_ConfigClockSource+0xfe>
 8006df8:	2b50      	cmp	r3, #80	@ 0x50
 8006dfa:	d873      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x170>
 8006dfc:	2b40      	cmp	r3, #64	@ 0x40
 8006dfe:	d058      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x13e>
 8006e00:	2b40      	cmp	r3, #64	@ 0x40
 8006e02:	d86f      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x170>
 8006e04:	2b30      	cmp	r3, #48	@ 0x30
 8006e06:	d064      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x15e>
 8006e08:	2b30      	cmp	r3, #48	@ 0x30
 8006e0a:	d86b      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x170>
 8006e0c:	2b20      	cmp	r3, #32
 8006e0e:	d060      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x15e>
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d867      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x170>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d05c      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x15e>
 8006e18:	2b10      	cmp	r3, #16
 8006e1a:	d05a      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x15e>
 8006e1c:	e062      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e2e:	f000 fde5 	bl	80079fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	609a      	str	r2, [r3, #8]
      break;
 8006e4a:	e04f      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e5c:	f000 fdce 	bl	80079fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e6e:	609a      	str	r2, [r3, #8]
      break;
 8006e70:	e03c      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f000 fc8c 	bl	800779c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2150      	movs	r1, #80	@ 0x50
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fd9b 	bl	80079c6 <TIM_ITRx_SetConfig>
      break;
 8006e90:	e02c      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f000 fce8 	bl	8007874 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2160      	movs	r1, #96	@ 0x60
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fd8b 	bl	80079c6 <TIM_ITRx_SetConfig>
      break;
 8006eb0:	e01c      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f000 fc6c 	bl	800779c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2140      	movs	r1, #64	@ 0x40
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fd7b 	bl	80079c6 <TIM_ITRx_SetConfig>
      break;
 8006ed0:	e00c      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4619      	mov	r1, r3
 8006edc:	4610      	mov	r0, r2
 8006ede:	f000 fd72 	bl	80079c6 <TIM_ITRx_SetConfig>
      break;
 8006ee2:	e003      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee8:	e000      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2b0c      	cmp	r3, #12
 8006f1a:	d831      	bhi.n	8006f80 <HAL_TIM_ReadCapturedValue+0x78>
 8006f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f24 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f22:	bf00      	nop
 8006f24:	08006f59 	.word	0x08006f59
 8006f28:	08006f81 	.word	0x08006f81
 8006f2c:	08006f81 	.word	0x08006f81
 8006f30:	08006f81 	.word	0x08006f81
 8006f34:	08006f63 	.word	0x08006f63
 8006f38:	08006f81 	.word	0x08006f81
 8006f3c:	08006f81 	.word	0x08006f81
 8006f40:	08006f81 	.word	0x08006f81
 8006f44:	08006f6d 	.word	0x08006f6d
 8006f48:	08006f81 	.word	0x08006f81
 8006f4c:	08006f81 	.word	0x08006f81
 8006f50:	08006f81 	.word	0x08006f81
 8006f54:	08006f77 	.word	0x08006f77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f5e:	60fb      	str	r3, [r7, #12]

      break;
 8006f60:	e00f      	b.n	8006f82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f68:	60fb      	str	r3, [r7, #12]

      break;
 8006f6a:	e00a      	b.n	8006f82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f72:	60fb      	str	r3, [r7, #12]

      break;
 8006f74:	e005      	b.n	8006f82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7c:	60fb      	str	r3, [r7, #12]

      break;
 8006f7e:	e000      	b.n	8006f82 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006f80:	bf00      	nop
  }

  return tmpreg;
 8006f82:	68fb      	ldr	r3, [r7, #12]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a40      	ldr	r2, [pc, #256]	@ (80070f4 <TIM_Base_SetConfig+0x114>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d013      	beq.n	8007020 <TIM_Base_SetConfig+0x40>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ffe:	d00f      	beq.n	8007020 <TIM_Base_SetConfig+0x40>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a3d      	ldr	r2, [pc, #244]	@ (80070f8 <TIM_Base_SetConfig+0x118>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d00b      	beq.n	8007020 <TIM_Base_SetConfig+0x40>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a3c      	ldr	r2, [pc, #240]	@ (80070fc <TIM_Base_SetConfig+0x11c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d007      	beq.n	8007020 <TIM_Base_SetConfig+0x40>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a3b      	ldr	r2, [pc, #236]	@ (8007100 <TIM_Base_SetConfig+0x120>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d003      	beq.n	8007020 <TIM_Base_SetConfig+0x40>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a3a      	ldr	r2, [pc, #232]	@ (8007104 <TIM_Base_SetConfig+0x124>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d108      	bne.n	8007032 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a2f      	ldr	r2, [pc, #188]	@ (80070f4 <TIM_Base_SetConfig+0x114>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d01f      	beq.n	800707a <TIM_Base_SetConfig+0x9a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007040:	d01b      	beq.n	800707a <TIM_Base_SetConfig+0x9a>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a2c      	ldr	r2, [pc, #176]	@ (80070f8 <TIM_Base_SetConfig+0x118>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d017      	beq.n	800707a <TIM_Base_SetConfig+0x9a>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a2b      	ldr	r2, [pc, #172]	@ (80070fc <TIM_Base_SetConfig+0x11c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d013      	beq.n	800707a <TIM_Base_SetConfig+0x9a>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a2a      	ldr	r2, [pc, #168]	@ (8007100 <TIM_Base_SetConfig+0x120>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d00f      	beq.n	800707a <TIM_Base_SetConfig+0x9a>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a29      	ldr	r2, [pc, #164]	@ (8007104 <TIM_Base_SetConfig+0x124>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00b      	beq.n	800707a <TIM_Base_SetConfig+0x9a>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a28      	ldr	r2, [pc, #160]	@ (8007108 <TIM_Base_SetConfig+0x128>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d007      	beq.n	800707a <TIM_Base_SetConfig+0x9a>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a27      	ldr	r2, [pc, #156]	@ (800710c <TIM_Base_SetConfig+0x12c>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d003      	beq.n	800707a <TIM_Base_SetConfig+0x9a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a26      	ldr	r2, [pc, #152]	@ (8007110 <TIM_Base_SetConfig+0x130>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d108      	bne.n	800708c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	4313      	orrs	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	4313      	orrs	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a10      	ldr	r2, [pc, #64]	@ (80070f4 <TIM_Base_SetConfig+0x114>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00f      	beq.n	80070d8 <TIM_Base_SetConfig+0xf8>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a12      	ldr	r2, [pc, #72]	@ (8007104 <TIM_Base_SetConfig+0x124>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d00b      	beq.n	80070d8 <TIM_Base_SetConfig+0xf8>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a11      	ldr	r2, [pc, #68]	@ (8007108 <TIM_Base_SetConfig+0x128>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d007      	beq.n	80070d8 <TIM_Base_SetConfig+0xf8>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a10      	ldr	r2, [pc, #64]	@ (800710c <TIM_Base_SetConfig+0x12c>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d003      	beq.n	80070d8 <TIM_Base_SetConfig+0xf8>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a0f      	ldr	r2, [pc, #60]	@ (8007110 <TIM_Base_SetConfig+0x130>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d103      	bne.n	80070e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	691a      	ldr	r2, [r3, #16]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	615a      	str	r2, [r3, #20]
}
 80070e6:	bf00      	nop
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	40012c00 	.word	0x40012c00
 80070f8:	40000400 	.word	0x40000400
 80070fc:	40000800 	.word	0x40000800
 8007100:	40000c00 	.word	0x40000c00
 8007104:	40013400 	.word	0x40013400
 8007108:	40014000 	.word	0x40014000
 800710c:	40014400 	.word	0x40014400
 8007110:	40014800 	.word	0x40014800

08007114 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	f023 0201 	bic.w	r2, r3, #1
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f023 0303 	bic.w	r3, r3, #3
 800714e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4313      	orrs	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f023 0302 	bic.w	r3, r3, #2
 8007160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	4313      	orrs	r3, r2
 800716a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a2c      	ldr	r2, [pc, #176]	@ (8007220 <TIM_OC1_SetConfig+0x10c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d00f      	beq.n	8007194 <TIM_OC1_SetConfig+0x80>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a2b      	ldr	r2, [pc, #172]	@ (8007224 <TIM_OC1_SetConfig+0x110>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d00b      	beq.n	8007194 <TIM_OC1_SetConfig+0x80>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a2a      	ldr	r2, [pc, #168]	@ (8007228 <TIM_OC1_SetConfig+0x114>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d007      	beq.n	8007194 <TIM_OC1_SetConfig+0x80>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a29      	ldr	r2, [pc, #164]	@ (800722c <TIM_OC1_SetConfig+0x118>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d003      	beq.n	8007194 <TIM_OC1_SetConfig+0x80>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a28      	ldr	r2, [pc, #160]	@ (8007230 <TIM_OC1_SetConfig+0x11c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d10c      	bne.n	80071ae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f023 0308 	bic.w	r3, r3, #8
 800719a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f023 0304 	bic.w	r3, r3, #4
 80071ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007220 <TIM_OC1_SetConfig+0x10c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00f      	beq.n	80071d6 <TIM_OC1_SetConfig+0xc2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a1a      	ldr	r2, [pc, #104]	@ (8007224 <TIM_OC1_SetConfig+0x110>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d00b      	beq.n	80071d6 <TIM_OC1_SetConfig+0xc2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a19      	ldr	r2, [pc, #100]	@ (8007228 <TIM_OC1_SetConfig+0x114>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d007      	beq.n	80071d6 <TIM_OC1_SetConfig+0xc2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a18      	ldr	r2, [pc, #96]	@ (800722c <TIM_OC1_SetConfig+0x118>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d003      	beq.n	80071d6 <TIM_OC1_SetConfig+0xc2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a17      	ldr	r2, [pc, #92]	@ (8007230 <TIM_OC1_SetConfig+0x11c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d111      	bne.n	80071fa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	621a      	str	r2, [r3, #32]
}
 8007214:	bf00      	nop
 8007216:	371c      	adds	r7, #28
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	40012c00 	.word	0x40012c00
 8007224:	40013400 	.word	0x40013400
 8007228:	40014000 	.word	0x40014000
 800722c:	40014400 	.word	0x40014400
 8007230:	40014800 	.word	0x40014800

08007234 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007234:	b480      	push	{r7}
 8007236:	b087      	sub	sp, #28
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	f023 0210 	bic.w	r2, r3, #16
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007262:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800726e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	021b      	lsls	r3, r3, #8
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	4313      	orrs	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f023 0320 	bic.w	r3, r3, #32
 8007282:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	011b      	lsls	r3, r3, #4
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	4313      	orrs	r3, r2
 800728e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a28      	ldr	r2, [pc, #160]	@ (8007334 <TIM_OC2_SetConfig+0x100>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d003      	beq.n	80072a0 <TIM_OC2_SetConfig+0x6c>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a27      	ldr	r2, [pc, #156]	@ (8007338 <TIM_OC2_SetConfig+0x104>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d10d      	bne.n	80072bc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	011b      	lsls	r3, r3, #4
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a1d      	ldr	r2, [pc, #116]	@ (8007334 <TIM_OC2_SetConfig+0x100>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d00f      	beq.n	80072e4 <TIM_OC2_SetConfig+0xb0>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a1c      	ldr	r2, [pc, #112]	@ (8007338 <TIM_OC2_SetConfig+0x104>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00b      	beq.n	80072e4 <TIM_OC2_SetConfig+0xb0>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a1b      	ldr	r2, [pc, #108]	@ (800733c <TIM_OC2_SetConfig+0x108>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d007      	beq.n	80072e4 <TIM_OC2_SetConfig+0xb0>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a1a      	ldr	r2, [pc, #104]	@ (8007340 <TIM_OC2_SetConfig+0x10c>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d003      	beq.n	80072e4 <TIM_OC2_SetConfig+0xb0>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a19      	ldr	r2, [pc, #100]	@ (8007344 <TIM_OC2_SetConfig+0x110>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d113      	bne.n	800730c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	4313      	orrs	r3, r2
 800730a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	621a      	str	r2, [r3, #32]
}
 8007326:	bf00      	nop
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	40012c00 	.word	0x40012c00
 8007338:	40013400 	.word	0x40013400
 800733c:	40014000 	.word	0x40014000
 8007340:	40014400 	.word	0x40014400
 8007344:	40014800 	.word	0x40014800

08007348 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800737a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f023 0303 	bic.w	r3, r3, #3
 8007382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	4313      	orrs	r3, r2
 800738c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	021b      	lsls	r3, r3, #8
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	4313      	orrs	r3, r2
 80073a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a27      	ldr	r2, [pc, #156]	@ (8007444 <TIM_OC3_SetConfig+0xfc>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d003      	beq.n	80073b2 <TIM_OC3_SetConfig+0x6a>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a26      	ldr	r2, [pc, #152]	@ (8007448 <TIM_OC3_SetConfig+0x100>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d10d      	bne.n	80073ce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	021b      	lsls	r3, r3, #8
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a1c      	ldr	r2, [pc, #112]	@ (8007444 <TIM_OC3_SetConfig+0xfc>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d00f      	beq.n	80073f6 <TIM_OC3_SetConfig+0xae>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a1b      	ldr	r2, [pc, #108]	@ (8007448 <TIM_OC3_SetConfig+0x100>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d00b      	beq.n	80073f6 <TIM_OC3_SetConfig+0xae>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a1a      	ldr	r2, [pc, #104]	@ (800744c <TIM_OC3_SetConfig+0x104>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d007      	beq.n	80073f6 <TIM_OC3_SetConfig+0xae>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a19      	ldr	r2, [pc, #100]	@ (8007450 <TIM_OC3_SetConfig+0x108>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d003      	beq.n	80073f6 <TIM_OC3_SetConfig+0xae>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a18      	ldr	r2, [pc, #96]	@ (8007454 <TIM_OC3_SetConfig+0x10c>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d113      	bne.n	800741e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	011b      	lsls	r3, r3, #4
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	4313      	orrs	r3, r2
 8007410:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	011b      	lsls	r3, r3, #4
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	4313      	orrs	r3, r2
 800741c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	621a      	str	r2, [r3, #32]
}
 8007438:	bf00      	nop
 800743a:	371c      	adds	r7, #28
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	40012c00 	.word	0x40012c00
 8007448:	40013400 	.word	0x40013400
 800744c:	40014000 	.word	0x40014000
 8007450:	40014400 	.word	0x40014400
 8007454:	40014800 	.word	0x40014800

08007458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007486:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800748a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	021b      	lsls	r3, r3, #8
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	4313      	orrs	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	031b      	lsls	r3, r3, #12
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a18      	ldr	r2, [pc, #96]	@ (8007518 <TIM_OC4_SetConfig+0xc0>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d00f      	beq.n	80074dc <TIM_OC4_SetConfig+0x84>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a17      	ldr	r2, [pc, #92]	@ (800751c <TIM_OC4_SetConfig+0xc4>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d00b      	beq.n	80074dc <TIM_OC4_SetConfig+0x84>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a16      	ldr	r2, [pc, #88]	@ (8007520 <TIM_OC4_SetConfig+0xc8>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d007      	beq.n	80074dc <TIM_OC4_SetConfig+0x84>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a15      	ldr	r2, [pc, #84]	@ (8007524 <TIM_OC4_SetConfig+0xcc>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d003      	beq.n	80074dc <TIM_OC4_SetConfig+0x84>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a14      	ldr	r2, [pc, #80]	@ (8007528 <TIM_OC4_SetConfig+0xd0>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d109      	bne.n	80074f0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	019b      	lsls	r3, r3, #6
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	621a      	str	r2, [r3, #32]
}
 800750a:	bf00      	nop
 800750c:	371c      	adds	r7, #28
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	40012c00 	.word	0x40012c00
 800751c:	40013400 	.word	0x40013400
 8007520:	40014000 	.word	0x40014000
 8007524:	40014400 	.word	0x40014400
 8007528:	40014800 	.word	0x40014800

0800752c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800752c:	b480      	push	{r7}
 800752e:	b087      	sub	sp, #28
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a1b      	ldr	r3, [r3, #32]
 8007540:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800755a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800755e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	4313      	orrs	r3, r2
 8007568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007570:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	041b      	lsls	r3, r3, #16
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	4313      	orrs	r3, r2
 800757c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a17      	ldr	r2, [pc, #92]	@ (80075e0 <TIM_OC5_SetConfig+0xb4>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d00f      	beq.n	80075a6 <TIM_OC5_SetConfig+0x7a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a16      	ldr	r2, [pc, #88]	@ (80075e4 <TIM_OC5_SetConfig+0xb8>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d00b      	beq.n	80075a6 <TIM_OC5_SetConfig+0x7a>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a15      	ldr	r2, [pc, #84]	@ (80075e8 <TIM_OC5_SetConfig+0xbc>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d007      	beq.n	80075a6 <TIM_OC5_SetConfig+0x7a>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a14      	ldr	r2, [pc, #80]	@ (80075ec <TIM_OC5_SetConfig+0xc0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d003      	beq.n	80075a6 <TIM_OC5_SetConfig+0x7a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a13      	ldr	r2, [pc, #76]	@ (80075f0 <TIM_OC5_SetConfig+0xc4>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d109      	bne.n	80075ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	021b      	lsls	r3, r3, #8
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	621a      	str	r2, [r3, #32]
}
 80075d4:	bf00      	nop
 80075d6:	371c      	adds	r7, #28
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	40012c00 	.word	0x40012c00
 80075e4:	40013400 	.word	0x40013400
 80075e8:	40014000 	.word	0x40014000
 80075ec:	40014400 	.word	0x40014400
 80075f0:	40014800 	.word	0x40014800

080075f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800761a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	021b      	lsls	r3, r3, #8
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	4313      	orrs	r3, r2
 8007632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800763a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	051b      	lsls	r3, r3, #20
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	4313      	orrs	r3, r2
 8007646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a18      	ldr	r2, [pc, #96]	@ (80076ac <TIM_OC6_SetConfig+0xb8>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00f      	beq.n	8007670 <TIM_OC6_SetConfig+0x7c>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a17      	ldr	r2, [pc, #92]	@ (80076b0 <TIM_OC6_SetConfig+0xbc>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d00b      	beq.n	8007670 <TIM_OC6_SetConfig+0x7c>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a16      	ldr	r2, [pc, #88]	@ (80076b4 <TIM_OC6_SetConfig+0xc0>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d007      	beq.n	8007670 <TIM_OC6_SetConfig+0x7c>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a15      	ldr	r2, [pc, #84]	@ (80076b8 <TIM_OC6_SetConfig+0xc4>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d003      	beq.n	8007670 <TIM_OC6_SetConfig+0x7c>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a14      	ldr	r2, [pc, #80]	@ (80076bc <TIM_OC6_SetConfig+0xc8>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d109      	bne.n	8007684 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007676:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	029b      	lsls	r3, r3, #10
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	4313      	orrs	r3, r2
 8007682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	621a      	str	r2, [r3, #32]
}
 800769e:	bf00      	nop
 80076a0:	371c      	adds	r7, #28
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	40012c00 	.word	0x40012c00
 80076b0:	40013400 	.word	0x40013400
 80076b4:	40014000 	.word	0x40014000
 80076b8:	40014400 	.word	0x40014400
 80076bc:	40014800 	.word	0x40014800

080076c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	f023 0201 	bic.w	r2, r3, #1
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4a26      	ldr	r2, [pc, #152]	@ (8007784 <TIM_TI1_SetConfig+0xc4>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d017      	beq.n	800771e <TIM_TI1_SetConfig+0x5e>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076f4:	d013      	beq.n	800771e <TIM_TI1_SetConfig+0x5e>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	4a23      	ldr	r2, [pc, #140]	@ (8007788 <TIM_TI1_SetConfig+0xc8>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d00f      	beq.n	800771e <TIM_TI1_SetConfig+0x5e>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	4a22      	ldr	r2, [pc, #136]	@ (800778c <TIM_TI1_SetConfig+0xcc>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00b      	beq.n	800771e <TIM_TI1_SetConfig+0x5e>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4a21      	ldr	r2, [pc, #132]	@ (8007790 <TIM_TI1_SetConfig+0xd0>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d007      	beq.n	800771e <TIM_TI1_SetConfig+0x5e>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4a20      	ldr	r2, [pc, #128]	@ (8007794 <TIM_TI1_SetConfig+0xd4>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d003      	beq.n	800771e <TIM_TI1_SetConfig+0x5e>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	4a1f      	ldr	r2, [pc, #124]	@ (8007798 <TIM_TI1_SetConfig+0xd8>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d101      	bne.n	8007722 <TIM_TI1_SetConfig+0x62>
 800771e:	2301      	movs	r3, #1
 8007720:	e000      	b.n	8007724 <TIM_TI1_SetConfig+0x64>
 8007722:	2300      	movs	r3, #0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d008      	beq.n	800773a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	f023 0303 	bic.w	r3, r3, #3
 800772e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4313      	orrs	r3, r2
 8007736:	617b      	str	r3, [r7, #20]
 8007738:	e003      	b.n	8007742 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f043 0301 	orr.w	r3, r3, #1
 8007740:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007748:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	011b      	lsls	r3, r3, #4
 800774e:	b2db      	uxtb	r3, r3
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	4313      	orrs	r3, r2
 8007754:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	f023 030a 	bic.w	r3, r3, #10
 800775c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	f003 030a 	and.w	r3, r3, #10
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	4313      	orrs	r3, r2
 8007768:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	621a      	str	r2, [r3, #32]
}
 8007776:	bf00      	nop
 8007778:	371c      	adds	r7, #28
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	40012c00 	.word	0x40012c00
 8007788:	40000400 	.word	0x40000400
 800778c:	40000800 	.word	0x40000800
 8007790:	40000c00 	.word	0x40000c00
 8007794:	40013400 	.word	0x40013400
 8007798:	40014000 	.word	0x40014000

0800779c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6a1b      	ldr	r3, [r3, #32]
 80077ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	f023 0201 	bic.w	r2, r3, #1
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	011b      	lsls	r3, r3, #4
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f023 030a 	bic.w	r3, r3, #10
 80077d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	4313      	orrs	r3, r2
 80077e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	621a      	str	r2, [r3, #32]
}
 80077ee:	bf00      	nop
 80077f0:	371c      	adds	r7, #28
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b087      	sub	sp, #28
 80077fe:	af00      	add	r7, sp, #0
 8007800:	60f8      	str	r0, [r7, #12]
 8007802:	60b9      	str	r1, [r7, #8]
 8007804:	607a      	str	r2, [r7, #4]
 8007806:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6a1b      	ldr	r3, [r3, #32]
 800780c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	f023 0210 	bic.w	r2, r3, #16
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	021b      	lsls	r3, r3, #8
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	4313      	orrs	r3, r2
 8007830:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007838:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	031b      	lsls	r3, r3, #12
 800783e:	b29b      	uxth	r3, r3
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800784c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	011b      	lsls	r3, r3, #4
 8007852:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	4313      	orrs	r3, r2
 800785a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	621a      	str	r2, [r3, #32]
}
 8007868:	bf00      	nop
 800786a:	371c      	adds	r7, #28
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6a1b      	ldr	r3, [r3, #32]
 8007884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	f023 0210 	bic.w	r2, r3, #16
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800789e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	031b      	lsls	r3, r3, #12
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80078b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	621a      	str	r2, [r3, #32]
}
 80078c8:	bf00      	nop
 80078ca:	371c      	adds	r7, #28
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
 80078e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	69db      	ldr	r3, [r3, #28]
 80078f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f023 0303 	bic.w	r3, r3, #3
 8007900:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4313      	orrs	r3, r2
 8007908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007910:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	011b      	lsls	r3, r3, #4
 8007916:	b2db      	uxtb	r3, r3
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	4313      	orrs	r3, r2
 800791c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007924:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	021b      	lsls	r3, r3, #8
 800792a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	4313      	orrs	r3, r2
 8007932:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	621a      	str	r2, [r3, #32]
}
 8007940:	bf00      	nop
 8007942:	371c      	adds	r7, #28
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
 8007958:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	69db      	ldr	r3, [r3, #28]
 8007970:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007978:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	021b      	lsls	r3, r3, #8
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	4313      	orrs	r3, r2
 8007982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800798a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	031b      	lsls	r3, r3, #12
 8007990:	b29b      	uxth	r3, r3
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	4313      	orrs	r3, r2
 8007996:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800799e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	031b      	lsls	r3, r3, #12
 80079a4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	621a      	str	r2, [r3, #32]
}
 80079ba:	bf00      	nop
 80079bc:	371c      	adds	r7, #28
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b085      	sub	sp, #20
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	f043 0307 	orr.w	r3, r3, #7
 80079e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	609a      	str	r2, [r3, #8]
}
 80079f0:	bf00      	nop
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	021a      	lsls	r2, r3, #8
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	609a      	str	r2, [r3, #8]
}
 8007a30:	bf00      	nop
 8007a32:	371c      	adds	r7, #28
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	f003 031f 	and.w	r3, r3, #31
 8007a4e:	2201      	movs	r2, #1
 8007a50:	fa02 f303 	lsl.w	r3, r2, r3
 8007a54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6a1a      	ldr	r2, [r3, #32]
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	43db      	mvns	r3, r3
 8007a5e:	401a      	ands	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a1a      	ldr	r2, [r3, #32]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	f003 031f 	and.w	r3, r3, #31
 8007a6e:	6879      	ldr	r1, [r7, #4]
 8007a70:	fa01 f303 	lsl.w	r3, r1, r3
 8007a74:	431a      	orrs	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	621a      	str	r2, [r3, #32]
}
 8007a7a:	bf00      	nop
 8007a7c:	371c      	adds	r7, #28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
	...

08007a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d101      	bne.n	8007aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	e068      	b.n	8007b72 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a2e      	ldr	r2, [pc, #184]	@ (8007b80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d004      	beq.n	8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a2d      	ldr	r2, [pc, #180]	@ (8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d108      	bne.n	8007ae6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007ada:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a1e      	ldr	r2, [pc, #120]	@ (8007b80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d01d      	beq.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b12:	d018      	beq.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a1b      	ldr	r2, [pc, #108]	@ (8007b88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d013      	beq.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a1a      	ldr	r2, [pc, #104]	@ (8007b8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d00e      	beq.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a18      	ldr	r2, [pc, #96]	@ (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d009      	beq.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a13      	ldr	r2, [pc, #76]	@ (8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d004      	beq.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a14      	ldr	r2, [pc, #80]	@ (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d10c      	bne.n	8007b60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	40012c00 	.word	0x40012c00
 8007b84:	40013400 	.word	0x40013400
 8007b88:	40000400 	.word	0x40000400
 8007b8c:	40000800 	.word	0x40000800
 8007b90:	40000c00 	.word	0x40000c00
 8007b94:	40014000 	.word	0x40014000

08007b98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d101      	bne.n	8007bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	e065      	b.n	8007c80 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	041b      	lsls	r3, r3, #16
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a16      	ldr	r2, [pc, #88]	@ (8007c8c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d004      	beq.n	8007c42 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a14      	ldr	r2, [pc, #80]	@ (8007c90 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d115      	bne.n	8007c6e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c4c:	051b      	lsls	r3, r3, #20
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	69db      	ldr	r3, [r3, #28]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	40012c00 	.word	0x40012c00
 8007c90:	40013400 	.word	0x40013400

08007c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d101      	bne.n	8007ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e040      	b.n	8007d64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d106      	bne.n	8007cf8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7fa fbd6 	bl	80024a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2224      	movs	r2, #36	@ 0x24
 8007cfc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 0201 	bic.w	r2, r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d002      	beq.n	8007d1c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fe36 	bl	8008988 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fb7b 	bl	8008418 <UART_SetConfig>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e01b      	b.n	8007d64 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689a      	ldr	r2, [r3, #8]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f042 0201 	orr.w	r2, r2, #1
 8007d5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 feb5 	bl	8008acc <UART_CheckIdleState>
 8007d62:	4603      	mov	r3, r0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b08a      	sub	sp, #40	@ 0x28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	4613      	mov	r3, r2
 8007d78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d80:	2b20      	cmp	r3, #32
 8007d82:	d137      	bne.n	8007df4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <HAL_UART_Receive_IT+0x24>
 8007d8a:	88fb      	ldrh	r3, [r7, #6]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e030      	b.n	8007df6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a18      	ldr	r2, [pc, #96]	@ (8007e00 <HAL_UART_Receive_IT+0x94>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d01f      	beq.n	8007de4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d018      	beq.n	8007de4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd0:	623b      	str	r3, [r7, #32]
 8007dd2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd4:	69f9      	ldr	r1, [r7, #28]
 8007dd6:	6a3a      	ldr	r2, [r7, #32]
 8007dd8:	e841 2300 	strex	r3, r2, [r1]
 8007ddc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e6      	bne.n	8007db2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007de4:	88fb      	ldrh	r3, [r7, #6]
 8007de6:	461a      	mov	r2, r3
 8007de8:	68b9      	ldr	r1, [r7, #8]
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 ff7e 	bl	8008cec <UART_Start_Receive_IT>
 8007df0:	4603      	mov	r3, r0
 8007df2:	e000      	b.n	8007df6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007df4:	2302      	movs	r3, #2
  }
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3728      	adds	r7, #40	@ 0x28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	40008000 	.word	0x40008000

08007e04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b0ba      	sub	sp, #232	@ 0xe8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007e2e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007e32:	4013      	ands	r3, r2
 8007e34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007e38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d115      	bne.n	8007e6c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e44:	f003 0320 	and.w	r3, r3, #32
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00f      	beq.n	8007e6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e50:	f003 0320 	and.w	r3, r3, #32
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d009      	beq.n	8007e6c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 82ae 	beq.w	80083be <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	4798      	blx	r3
      }
      return;
 8007e6a:	e2a8      	b.n	80083be <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007e6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 8117 	beq.w	80080a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d106      	bne.n	8007e90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007e82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007e86:	4b85      	ldr	r3, [pc, #532]	@ (800809c <HAL_UART_IRQHandler+0x298>)
 8007e88:	4013      	ands	r3, r2
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 810a 	beq.w	80080a4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d011      	beq.n	8007ec0 <HAL_UART_IRQHandler+0xbc>
 8007e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00b      	beq.n	8007ec0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2201      	movs	r2, #1
 8007eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007eb6:	f043 0201 	orr.w	r2, r3, #1
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ec4:	f003 0302 	and.w	r3, r3, #2
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d011      	beq.n	8007ef0 <HAL_UART_IRQHandler+0xec>
 8007ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ed0:	f003 0301 	and.w	r3, r3, #1
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00b      	beq.n	8007ef0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2202      	movs	r2, #2
 8007ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ee6:	f043 0204 	orr.w	r2, r3, #4
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ef4:	f003 0304 	and.w	r3, r3, #4
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d011      	beq.n	8007f20 <HAL_UART_IRQHandler+0x11c>
 8007efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00b      	beq.n	8007f20 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2204      	movs	r2, #4
 8007f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f16:	f043 0202 	orr.w	r2, r3, #2
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f24:	f003 0308 	and.w	r3, r3, #8
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d017      	beq.n	8007f5c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f30:	f003 0320 	and.w	r3, r3, #32
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d105      	bne.n	8007f44 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00b      	beq.n	8007f5c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2208      	movs	r2, #8
 8007f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f52:	f043 0208 	orr.w	r2, r3, #8
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d012      	beq.n	8007f8e <HAL_UART_IRQHandler+0x18a>
 8007f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00c      	beq.n	8007f8e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f84:	f043 0220 	orr.w	r2, r3, #32
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 8214 	beq.w	80083c2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f9e:	f003 0320 	and.w	r3, r3, #32
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00d      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007faa:	f003 0320 	and.w	r3, r3, #32
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d007      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fc8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fd6:	2b40      	cmp	r3, #64	@ 0x40
 8007fd8:	d005      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fde:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d04f      	beq.n	8008086 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 ff46 	bl	8008e78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ff6:	2b40      	cmp	r3, #64	@ 0x40
 8007ff8:	d141      	bne.n	800807e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	3308      	adds	r3, #8
 8008000:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008010:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008014:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008018:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3308      	adds	r3, #8
 8008022:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008026:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800802a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008032:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008036:	e841 2300 	strex	r3, r2, [r1]
 800803a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800803e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1d9      	bne.n	8007ffa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800804a:	2b00      	cmp	r3, #0
 800804c:	d013      	beq.n	8008076 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008052:	4a13      	ldr	r2, [pc, #76]	@ (80080a0 <HAL_UART_IRQHandler+0x29c>)
 8008054:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800805a:	4618      	mov	r0, r3
 800805c:	f7fc f909 	bl	8004272 <HAL_DMA_Abort_IT>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d017      	beq.n	8008096 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800806a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008070:	4610      	mov	r0, r2
 8008072:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008074:	e00f      	b.n	8008096 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f9b8 	bl	80083ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800807c:	e00b      	b.n	8008096 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f9b4 	bl	80083ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008084:	e007      	b.n	8008096 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f9b0 	bl	80083ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008094:	e195      	b.n	80083c2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008096:	bf00      	nop
    return;
 8008098:	e193      	b.n	80083c2 <HAL_UART_IRQHandler+0x5be>
 800809a:	bf00      	nop
 800809c:	04000120 	.word	0x04000120
 80080a0:	08008f41 	.word	0x08008f41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	f040 814e 	bne.w	800834a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80080ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080b2:	f003 0310 	and.w	r3, r3, #16
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f000 8147 	beq.w	800834a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80080bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080c0:	f003 0310 	and.w	r3, r3, #16
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 8140 	beq.w	800834a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2210      	movs	r2, #16
 80080d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080dc:	2b40      	cmp	r3, #64	@ 0x40
 80080de:	f040 80b8 	bne.w	8008252 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 8167 	beq.w	80083c6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80080fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008102:	429a      	cmp	r2, r3
 8008104:	f080 815f 	bcs.w	80083c6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800810e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0320 	and.w	r3, r3, #32
 800811e:	2b00      	cmp	r3, #0
 8008120:	f040 8086 	bne.w	8008230 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008130:	e853 3f00 	ldrex	r3, [r3]
 8008134:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008138:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800813c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008140:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	461a      	mov	r2, r3
 800814a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800814e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008152:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800815a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800815e:	e841 2300 	strex	r3, r2, [r1]
 8008162:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008166:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1da      	bne.n	8008124 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3308      	adds	r3, #8
 8008174:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008176:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008178:	e853 3f00 	ldrex	r3, [r3]
 800817c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800817e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008180:	f023 0301 	bic.w	r3, r3, #1
 8008184:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3308      	adds	r3, #8
 800818e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008192:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008196:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008198:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800819a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800819e:	e841 2300 	strex	r3, r2, [r1]
 80081a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80081a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1e1      	bne.n	800816e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	3308      	adds	r3, #8
 80081b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081b4:	e853 3f00 	ldrex	r3, [r3]
 80081b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80081ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	3308      	adds	r3, #8
 80081ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80081ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80081d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80081d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80081d6:	e841 2300 	strex	r3, r2, [r1]
 80081da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80081dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1e3      	bne.n	80081aa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80081fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008200:	f023 0310 	bic.w	r3, r3, #16
 8008204:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	461a      	mov	r2, r3
 800820e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008212:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008214:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008216:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008218:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800821a:	e841 2300 	strex	r3, r2, [r1]
 800821e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1e4      	bne.n	80081f0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800822a:	4618      	mov	r0, r3
 800822c:	f7fb ffe3 	bl	80041f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2202      	movs	r2, #2
 8008234:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008242:	b29b      	uxth	r3, r3
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	b29b      	uxth	r3, r3
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f8d8 	bl	8008400 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008250:	e0b9      	b.n	80083c6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800825e:	b29b      	uxth	r3, r3
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800826c:	b29b      	uxth	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 80ab 	beq.w	80083ca <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8008274:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 80a6 	beq.w	80083ca <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008286:	e853 3f00 	ldrex	r3, [r3]
 800828a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800828c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800828e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008292:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80082a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80082a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082a8:	e841 2300 	strex	r3, r2, [r1]
 80082ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1e4      	bne.n	800827e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3308      	adds	r3, #8
 80082ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082be:	e853 3f00 	ldrex	r3, [r3]
 80082c2:	623b      	str	r3, [r7, #32]
   return(result);
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	f023 0301 	bic.w	r3, r3, #1
 80082ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3308      	adds	r3, #8
 80082d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80082d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80082da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082e0:	e841 2300 	strex	r3, r2, [r1]
 80082e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1e3      	bne.n	80082b4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2220      	movs	r2, #32
 80082f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	e853 3f00 	ldrex	r3, [r3]
 800830c:	60fb      	str	r3, [r7, #12]
   return(result);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f023 0310 	bic.w	r3, r3, #16
 8008314:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	461a      	mov	r2, r3
 800831e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008322:	61fb      	str	r3, [r7, #28]
 8008324:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008326:	69b9      	ldr	r1, [r7, #24]
 8008328:	69fa      	ldr	r2, [r7, #28]
 800832a:	e841 2300 	strex	r3, r2, [r1]
 800832e:	617b      	str	r3, [r7, #20]
   return(result);
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1e4      	bne.n	8008300 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2202      	movs	r2, #2
 800833a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800833c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f85c 	bl	8008400 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008348:	e03f      	b.n	80083ca <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800834a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800834e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00e      	beq.n	8008374 <HAL_UART_IRQHandler+0x570>
 8008356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800835a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d008      	beq.n	8008374 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800836a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 ffe3 	bl	8009338 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008372:	e02d      	b.n	80083d0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00e      	beq.n	800839e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008388:	2b00      	cmp	r3, #0
 800838a:	d008      	beq.n	800839e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008390:	2b00      	cmp	r3, #0
 8008392:	d01c      	beq.n	80083ce <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	4798      	blx	r3
    }
    return;
 800839c:	e017      	b.n	80083ce <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800839e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d012      	beq.n	80083d0 <HAL_UART_IRQHandler+0x5cc>
 80083aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00c      	beq.n	80083d0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fdd8 	bl	8008f6c <UART_EndTransmit_IT>
    return;
 80083bc:	e008      	b.n	80083d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80083be:	bf00      	nop
 80083c0:	e006      	b.n	80083d0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80083c2:	bf00      	nop
 80083c4:	e004      	b.n	80083d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80083c6:	bf00      	nop
 80083c8:	e002      	b.n	80083d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80083ca:	bf00      	nop
 80083cc:	e000      	b.n	80083d0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80083ce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80083d0:	37e8      	adds	r7, #232	@ 0xe8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop

080083d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	460b      	mov	r3, r1
 800840a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800841c:	b08a      	sub	sp, #40	@ 0x28
 800841e:	af00      	add	r7, sp, #0
 8008420:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	689a      	ldr	r2, [r3, #8]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	431a      	orrs	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	431a      	orrs	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	69db      	ldr	r3, [r3, #28]
 800843c:	4313      	orrs	r3, r2
 800843e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	4ba4      	ldr	r3, [pc, #656]	@ (80086d8 <UART_SetConfig+0x2c0>)
 8008448:	4013      	ands	r3, r2
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	6812      	ldr	r2, [r2, #0]
 800844e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008450:	430b      	orrs	r3, r1
 8008452:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	68da      	ldr	r2, [r3, #12]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a99      	ldr	r2, [pc, #612]	@ (80086dc <UART_SetConfig+0x2c4>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d004      	beq.n	8008484 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008480:	4313      	orrs	r3, r2
 8008482:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008494:	430a      	orrs	r2, r1
 8008496:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a90      	ldr	r2, [pc, #576]	@ (80086e0 <UART_SetConfig+0x2c8>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d126      	bne.n	80084f0 <UART_SetConfig+0xd8>
 80084a2:	4b90      	ldr	r3, [pc, #576]	@ (80086e4 <UART_SetConfig+0x2cc>)
 80084a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084a8:	f003 0303 	and.w	r3, r3, #3
 80084ac:	2b03      	cmp	r3, #3
 80084ae:	d81b      	bhi.n	80084e8 <UART_SetConfig+0xd0>
 80084b0:	a201      	add	r2, pc, #4	@ (adr r2, 80084b8 <UART_SetConfig+0xa0>)
 80084b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b6:	bf00      	nop
 80084b8:	080084c9 	.word	0x080084c9
 80084bc:	080084d9 	.word	0x080084d9
 80084c0:	080084d1 	.word	0x080084d1
 80084c4:	080084e1 	.word	0x080084e1
 80084c8:	2301      	movs	r3, #1
 80084ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084ce:	e116      	b.n	80086fe <UART_SetConfig+0x2e6>
 80084d0:	2302      	movs	r3, #2
 80084d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084d6:	e112      	b.n	80086fe <UART_SetConfig+0x2e6>
 80084d8:	2304      	movs	r3, #4
 80084da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084de:	e10e      	b.n	80086fe <UART_SetConfig+0x2e6>
 80084e0:	2308      	movs	r3, #8
 80084e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084e6:	e10a      	b.n	80086fe <UART_SetConfig+0x2e6>
 80084e8:	2310      	movs	r3, #16
 80084ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084ee:	e106      	b.n	80086fe <UART_SetConfig+0x2e6>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a7c      	ldr	r2, [pc, #496]	@ (80086e8 <UART_SetConfig+0x2d0>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d138      	bne.n	800856c <UART_SetConfig+0x154>
 80084fa:	4b7a      	ldr	r3, [pc, #488]	@ (80086e4 <UART_SetConfig+0x2cc>)
 80084fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008500:	f003 030c 	and.w	r3, r3, #12
 8008504:	2b0c      	cmp	r3, #12
 8008506:	d82d      	bhi.n	8008564 <UART_SetConfig+0x14c>
 8008508:	a201      	add	r2, pc, #4	@ (adr r2, 8008510 <UART_SetConfig+0xf8>)
 800850a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850e:	bf00      	nop
 8008510:	08008545 	.word	0x08008545
 8008514:	08008565 	.word	0x08008565
 8008518:	08008565 	.word	0x08008565
 800851c:	08008565 	.word	0x08008565
 8008520:	08008555 	.word	0x08008555
 8008524:	08008565 	.word	0x08008565
 8008528:	08008565 	.word	0x08008565
 800852c:	08008565 	.word	0x08008565
 8008530:	0800854d 	.word	0x0800854d
 8008534:	08008565 	.word	0x08008565
 8008538:	08008565 	.word	0x08008565
 800853c:	08008565 	.word	0x08008565
 8008540:	0800855d 	.word	0x0800855d
 8008544:	2300      	movs	r3, #0
 8008546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800854a:	e0d8      	b.n	80086fe <UART_SetConfig+0x2e6>
 800854c:	2302      	movs	r3, #2
 800854e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008552:	e0d4      	b.n	80086fe <UART_SetConfig+0x2e6>
 8008554:	2304      	movs	r3, #4
 8008556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800855a:	e0d0      	b.n	80086fe <UART_SetConfig+0x2e6>
 800855c:	2308      	movs	r3, #8
 800855e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008562:	e0cc      	b.n	80086fe <UART_SetConfig+0x2e6>
 8008564:	2310      	movs	r3, #16
 8008566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800856a:	e0c8      	b.n	80086fe <UART_SetConfig+0x2e6>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a5e      	ldr	r2, [pc, #376]	@ (80086ec <UART_SetConfig+0x2d4>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d125      	bne.n	80085c2 <UART_SetConfig+0x1aa>
 8008576:	4b5b      	ldr	r3, [pc, #364]	@ (80086e4 <UART_SetConfig+0x2cc>)
 8008578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800857c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008580:	2b30      	cmp	r3, #48	@ 0x30
 8008582:	d016      	beq.n	80085b2 <UART_SetConfig+0x19a>
 8008584:	2b30      	cmp	r3, #48	@ 0x30
 8008586:	d818      	bhi.n	80085ba <UART_SetConfig+0x1a2>
 8008588:	2b20      	cmp	r3, #32
 800858a:	d00a      	beq.n	80085a2 <UART_SetConfig+0x18a>
 800858c:	2b20      	cmp	r3, #32
 800858e:	d814      	bhi.n	80085ba <UART_SetConfig+0x1a2>
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <UART_SetConfig+0x182>
 8008594:	2b10      	cmp	r3, #16
 8008596:	d008      	beq.n	80085aa <UART_SetConfig+0x192>
 8008598:	e00f      	b.n	80085ba <UART_SetConfig+0x1a2>
 800859a:	2300      	movs	r3, #0
 800859c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085a0:	e0ad      	b.n	80086fe <UART_SetConfig+0x2e6>
 80085a2:	2302      	movs	r3, #2
 80085a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085a8:	e0a9      	b.n	80086fe <UART_SetConfig+0x2e6>
 80085aa:	2304      	movs	r3, #4
 80085ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085b0:	e0a5      	b.n	80086fe <UART_SetConfig+0x2e6>
 80085b2:	2308      	movs	r3, #8
 80085b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085b8:	e0a1      	b.n	80086fe <UART_SetConfig+0x2e6>
 80085ba:	2310      	movs	r3, #16
 80085bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085c0:	e09d      	b.n	80086fe <UART_SetConfig+0x2e6>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a4a      	ldr	r2, [pc, #296]	@ (80086f0 <UART_SetConfig+0x2d8>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d125      	bne.n	8008618 <UART_SetConfig+0x200>
 80085cc:	4b45      	ldr	r3, [pc, #276]	@ (80086e4 <UART_SetConfig+0x2cc>)
 80085ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80085d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80085d8:	d016      	beq.n	8008608 <UART_SetConfig+0x1f0>
 80085da:	2bc0      	cmp	r3, #192	@ 0xc0
 80085dc:	d818      	bhi.n	8008610 <UART_SetConfig+0x1f8>
 80085de:	2b80      	cmp	r3, #128	@ 0x80
 80085e0:	d00a      	beq.n	80085f8 <UART_SetConfig+0x1e0>
 80085e2:	2b80      	cmp	r3, #128	@ 0x80
 80085e4:	d814      	bhi.n	8008610 <UART_SetConfig+0x1f8>
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d002      	beq.n	80085f0 <UART_SetConfig+0x1d8>
 80085ea:	2b40      	cmp	r3, #64	@ 0x40
 80085ec:	d008      	beq.n	8008600 <UART_SetConfig+0x1e8>
 80085ee:	e00f      	b.n	8008610 <UART_SetConfig+0x1f8>
 80085f0:	2300      	movs	r3, #0
 80085f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085f6:	e082      	b.n	80086fe <UART_SetConfig+0x2e6>
 80085f8:	2302      	movs	r3, #2
 80085fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085fe:	e07e      	b.n	80086fe <UART_SetConfig+0x2e6>
 8008600:	2304      	movs	r3, #4
 8008602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008606:	e07a      	b.n	80086fe <UART_SetConfig+0x2e6>
 8008608:	2308      	movs	r3, #8
 800860a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800860e:	e076      	b.n	80086fe <UART_SetConfig+0x2e6>
 8008610:	2310      	movs	r3, #16
 8008612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008616:	e072      	b.n	80086fe <UART_SetConfig+0x2e6>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a35      	ldr	r2, [pc, #212]	@ (80086f4 <UART_SetConfig+0x2dc>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d12a      	bne.n	8008678 <UART_SetConfig+0x260>
 8008622:	4b30      	ldr	r3, [pc, #192]	@ (80086e4 <UART_SetConfig+0x2cc>)
 8008624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008628:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800862c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008630:	d01a      	beq.n	8008668 <UART_SetConfig+0x250>
 8008632:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008636:	d81b      	bhi.n	8008670 <UART_SetConfig+0x258>
 8008638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800863c:	d00c      	beq.n	8008658 <UART_SetConfig+0x240>
 800863e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008642:	d815      	bhi.n	8008670 <UART_SetConfig+0x258>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d003      	beq.n	8008650 <UART_SetConfig+0x238>
 8008648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800864c:	d008      	beq.n	8008660 <UART_SetConfig+0x248>
 800864e:	e00f      	b.n	8008670 <UART_SetConfig+0x258>
 8008650:	2300      	movs	r3, #0
 8008652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008656:	e052      	b.n	80086fe <UART_SetConfig+0x2e6>
 8008658:	2302      	movs	r3, #2
 800865a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800865e:	e04e      	b.n	80086fe <UART_SetConfig+0x2e6>
 8008660:	2304      	movs	r3, #4
 8008662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008666:	e04a      	b.n	80086fe <UART_SetConfig+0x2e6>
 8008668:	2308      	movs	r3, #8
 800866a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800866e:	e046      	b.n	80086fe <UART_SetConfig+0x2e6>
 8008670:	2310      	movs	r3, #16
 8008672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008676:	e042      	b.n	80086fe <UART_SetConfig+0x2e6>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a17      	ldr	r2, [pc, #92]	@ (80086dc <UART_SetConfig+0x2c4>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d13a      	bne.n	80086f8 <UART_SetConfig+0x2e0>
 8008682:	4b18      	ldr	r3, [pc, #96]	@ (80086e4 <UART_SetConfig+0x2cc>)
 8008684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008688:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800868c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008690:	d01a      	beq.n	80086c8 <UART_SetConfig+0x2b0>
 8008692:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008696:	d81b      	bhi.n	80086d0 <UART_SetConfig+0x2b8>
 8008698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800869c:	d00c      	beq.n	80086b8 <UART_SetConfig+0x2a0>
 800869e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086a2:	d815      	bhi.n	80086d0 <UART_SetConfig+0x2b8>
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d003      	beq.n	80086b0 <UART_SetConfig+0x298>
 80086a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086ac:	d008      	beq.n	80086c0 <UART_SetConfig+0x2a8>
 80086ae:	e00f      	b.n	80086d0 <UART_SetConfig+0x2b8>
 80086b0:	2300      	movs	r3, #0
 80086b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086b6:	e022      	b.n	80086fe <UART_SetConfig+0x2e6>
 80086b8:	2302      	movs	r3, #2
 80086ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086be:	e01e      	b.n	80086fe <UART_SetConfig+0x2e6>
 80086c0:	2304      	movs	r3, #4
 80086c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086c6:	e01a      	b.n	80086fe <UART_SetConfig+0x2e6>
 80086c8:	2308      	movs	r3, #8
 80086ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086ce:	e016      	b.n	80086fe <UART_SetConfig+0x2e6>
 80086d0:	2310      	movs	r3, #16
 80086d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086d6:	e012      	b.n	80086fe <UART_SetConfig+0x2e6>
 80086d8:	efff69f3 	.word	0xefff69f3
 80086dc:	40008000 	.word	0x40008000
 80086e0:	40013800 	.word	0x40013800
 80086e4:	40021000 	.word	0x40021000
 80086e8:	40004400 	.word	0x40004400
 80086ec:	40004800 	.word	0x40004800
 80086f0:	40004c00 	.word	0x40004c00
 80086f4:	40005000 	.word	0x40005000
 80086f8:	2310      	movs	r3, #16
 80086fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a9f      	ldr	r2, [pc, #636]	@ (8008980 <UART_SetConfig+0x568>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d17a      	bne.n	80087fe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008708:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800870c:	2b08      	cmp	r3, #8
 800870e:	d824      	bhi.n	800875a <UART_SetConfig+0x342>
 8008710:	a201      	add	r2, pc, #4	@ (adr r2, 8008718 <UART_SetConfig+0x300>)
 8008712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008716:	bf00      	nop
 8008718:	0800873d 	.word	0x0800873d
 800871c:	0800875b 	.word	0x0800875b
 8008720:	08008745 	.word	0x08008745
 8008724:	0800875b 	.word	0x0800875b
 8008728:	0800874b 	.word	0x0800874b
 800872c:	0800875b 	.word	0x0800875b
 8008730:	0800875b 	.word	0x0800875b
 8008734:	0800875b 	.word	0x0800875b
 8008738:	08008753 	.word	0x08008753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800873c:	f7fc fea6 	bl	800548c <HAL_RCC_GetPCLK1Freq>
 8008740:	61f8      	str	r0, [r7, #28]
        break;
 8008742:	e010      	b.n	8008766 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008744:	4b8f      	ldr	r3, [pc, #572]	@ (8008984 <UART_SetConfig+0x56c>)
 8008746:	61fb      	str	r3, [r7, #28]
        break;
 8008748:	e00d      	b.n	8008766 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800874a:	f7fc fe07 	bl	800535c <HAL_RCC_GetSysClockFreq>
 800874e:	61f8      	str	r0, [r7, #28]
        break;
 8008750:	e009      	b.n	8008766 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008756:	61fb      	str	r3, [r7, #28]
        break;
 8008758:	e005      	b.n	8008766 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800875a:	2300      	movs	r3, #0
 800875c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008764:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 80fb 	beq.w	8008964 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	4613      	mov	r3, r2
 8008774:	005b      	lsls	r3, r3, #1
 8008776:	4413      	add	r3, r2
 8008778:	69fa      	ldr	r2, [r7, #28]
 800877a:	429a      	cmp	r2, r3
 800877c:	d305      	bcc.n	800878a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008784:	69fa      	ldr	r2, [r7, #28]
 8008786:	429a      	cmp	r2, r3
 8008788:	d903      	bls.n	8008792 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008790:	e0e8      	b.n	8008964 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	2200      	movs	r2, #0
 8008796:	461c      	mov	r4, r3
 8008798:	4615      	mov	r5, r2
 800879a:	f04f 0200 	mov.w	r2, #0
 800879e:	f04f 0300 	mov.w	r3, #0
 80087a2:	022b      	lsls	r3, r5, #8
 80087a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80087a8:	0222      	lsls	r2, r4, #8
 80087aa:	68f9      	ldr	r1, [r7, #12]
 80087ac:	6849      	ldr	r1, [r1, #4]
 80087ae:	0849      	lsrs	r1, r1, #1
 80087b0:	2000      	movs	r0, #0
 80087b2:	4688      	mov	r8, r1
 80087b4:	4681      	mov	r9, r0
 80087b6:	eb12 0a08 	adds.w	sl, r2, r8
 80087ba:	eb43 0b09 	adc.w	fp, r3, r9
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	603b      	str	r3, [r7, #0]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087cc:	4650      	mov	r0, sl
 80087ce:	4659      	mov	r1, fp
 80087d0:	f7f8 f884 	bl	80008dc <__aeabi_uldivmod>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4613      	mov	r3, r2
 80087da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087e2:	d308      	bcc.n	80087f6 <UART_SetConfig+0x3de>
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087ea:	d204      	bcs.n	80087f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	69ba      	ldr	r2, [r7, #24]
 80087f2:	60da      	str	r2, [r3, #12]
 80087f4:	e0b6      	b.n	8008964 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80087fc:	e0b2      	b.n	8008964 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008806:	d15e      	bne.n	80088c6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008808:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800880c:	2b08      	cmp	r3, #8
 800880e:	d828      	bhi.n	8008862 <UART_SetConfig+0x44a>
 8008810:	a201      	add	r2, pc, #4	@ (adr r2, 8008818 <UART_SetConfig+0x400>)
 8008812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008816:	bf00      	nop
 8008818:	0800883d 	.word	0x0800883d
 800881c:	08008845 	.word	0x08008845
 8008820:	0800884d 	.word	0x0800884d
 8008824:	08008863 	.word	0x08008863
 8008828:	08008853 	.word	0x08008853
 800882c:	08008863 	.word	0x08008863
 8008830:	08008863 	.word	0x08008863
 8008834:	08008863 	.word	0x08008863
 8008838:	0800885b 	.word	0x0800885b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800883c:	f7fc fe26 	bl	800548c <HAL_RCC_GetPCLK1Freq>
 8008840:	61f8      	str	r0, [r7, #28]
        break;
 8008842:	e014      	b.n	800886e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008844:	f7fc fe38 	bl	80054b8 <HAL_RCC_GetPCLK2Freq>
 8008848:	61f8      	str	r0, [r7, #28]
        break;
 800884a:	e010      	b.n	800886e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800884c:	4b4d      	ldr	r3, [pc, #308]	@ (8008984 <UART_SetConfig+0x56c>)
 800884e:	61fb      	str	r3, [r7, #28]
        break;
 8008850:	e00d      	b.n	800886e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008852:	f7fc fd83 	bl	800535c <HAL_RCC_GetSysClockFreq>
 8008856:	61f8      	str	r0, [r7, #28]
        break;
 8008858:	e009      	b.n	800886e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800885a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800885e:	61fb      	str	r3, [r7, #28]
        break;
 8008860:	e005      	b.n	800886e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008862:	2300      	movs	r3, #0
 8008864:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800886c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d077      	beq.n	8008964 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	005a      	lsls	r2, r3, #1
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	085b      	lsrs	r3, r3, #1
 800887e:	441a      	add	r2, r3
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	fbb2 f3f3 	udiv	r3, r2, r3
 8008888:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	2b0f      	cmp	r3, #15
 800888e:	d916      	bls.n	80088be <UART_SetConfig+0x4a6>
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008896:	d212      	bcs.n	80088be <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	b29b      	uxth	r3, r3
 800889c:	f023 030f 	bic.w	r3, r3, #15
 80088a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	085b      	lsrs	r3, r3, #1
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	f003 0307 	and.w	r3, r3, #7
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	8afb      	ldrh	r3, [r7, #22]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	8afa      	ldrh	r2, [r7, #22]
 80088ba:	60da      	str	r2, [r3, #12]
 80088bc:	e052      	b.n	8008964 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80088c4:	e04e      	b.n	8008964 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80088ca:	2b08      	cmp	r3, #8
 80088cc:	d827      	bhi.n	800891e <UART_SetConfig+0x506>
 80088ce:	a201      	add	r2, pc, #4	@ (adr r2, 80088d4 <UART_SetConfig+0x4bc>)
 80088d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d4:	080088f9 	.word	0x080088f9
 80088d8:	08008901 	.word	0x08008901
 80088dc:	08008909 	.word	0x08008909
 80088e0:	0800891f 	.word	0x0800891f
 80088e4:	0800890f 	.word	0x0800890f
 80088e8:	0800891f 	.word	0x0800891f
 80088ec:	0800891f 	.word	0x0800891f
 80088f0:	0800891f 	.word	0x0800891f
 80088f4:	08008917 	.word	0x08008917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088f8:	f7fc fdc8 	bl	800548c <HAL_RCC_GetPCLK1Freq>
 80088fc:	61f8      	str	r0, [r7, #28]
        break;
 80088fe:	e014      	b.n	800892a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008900:	f7fc fdda 	bl	80054b8 <HAL_RCC_GetPCLK2Freq>
 8008904:	61f8      	str	r0, [r7, #28]
        break;
 8008906:	e010      	b.n	800892a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008908:	4b1e      	ldr	r3, [pc, #120]	@ (8008984 <UART_SetConfig+0x56c>)
 800890a:	61fb      	str	r3, [r7, #28]
        break;
 800890c:	e00d      	b.n	800892a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800890e:	f7fc fd25 	bl	800535c <HAL_RCC_GetSysClockFreq>
 8008912:	61f8      	str	r0, [r7, #28]
        break;
 8008914:	e009      	b.n	800892a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008916:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800891a:	61fb      	str	r3, [r7, #28]
        break;
 800891c:	e005      	b.n	800892a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800891e:	2300      	movs	r3, #0
 8008920:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008928:	bf00      	nop
    }

    if (pclk != 0U)
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d019      	beq.n	8008964 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	085a      	lsrs	r2, r3, #1
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	441a      	add	r2, r3
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008942:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	2b0f      	cmp	r3, #15
 8008948:	d909      	bls.n	800895e <UART_SetConfig+0x546>
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008950:	d205      	bcs.n	800895e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	b29a      	uxth	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	60da      	str	r2, [r3, #12]
 800895c:	e002      	b.n	8008964 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008970:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008974:	4618      	mov	r0, r3
 8008976:	3728      	adds	r7, #40	@ 0x28
 8008978:	46bd      	mov	sp, r7
 800897a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800897e:	bf00      	nop
 8008980:	40008000 	.word	0x40008000
 8008984:	00f42400 	.word	0x00f42400

08008988 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008994:	f003 0308 	and.w	r3, r3, #8
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00a      	beq.n	80089b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00a      	beq.n	80089d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	430a      	orrs	r2, r1
 80089d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d8:	f003 0302 	and.w	r3, r3, #2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00a      	beq.n	80089f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089fa:	f003 0304 	and.w	r3, r3, #4
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00a      	beq.n	8008a18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	430a      	orrs	r2, r1
 8008a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a1c:	f003 0310 	and.w	r3, r3, #16
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00a      	beq.n	8008a3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	430a      	orrs	r2, r1
 8008a38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3e:	f003 0320 	and.w	r3, r3, #32
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00a      	beq.n	8008a5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	430a      	orrs	r2, r1
 8008a5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d01a      	beq.n	8008a9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a86:	d10a      	bne.n	8008a9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00a      	beq.n	8008ac0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	430a      	orrs	r2, r1
 8008abe:	605a      	str	r2, [r3, #4]
  }
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b098      	sub	sp, #96	@ 0x60
 8008ad0:	af02      	add	r7, sp, #8
 8008ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008adc:	f7fa f954 	bl	8002d88 <HAL_GetTick>
 8008ae0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0308 	and.w	r3, r3, #8
 8008aec:	2b08      	cmp	r3, #8
 8008aee:	d12e      	bne.n	8008b4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008af0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008af8:	2200      	movs	r2, #0
 8008afa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f88c 	bl	8008c1c <UART_WaitOnFlagUntilTimeout>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d021      	beq.n	8008b4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b12:	e853 3f00 	ldrex	r3, [r3]
 8008b16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	461a      	mov	r2, r3
 8008b26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b28:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b30:	e841 2300 	strex	r3, r2, [r1]
 8008b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1e6      	bne.n	8008b0a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2220      	movs	r2, #32
 8008b40:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	e062      	b.n	8008c14 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 0304 	and.w	r3, r3, #4
 8008b58:	2b04      	cmp	r3, #4
 8008b5a:	d149      	bne.n	8008bf0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b64:	2200      	movs	r2, #0
 8008b66:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f856 	bl	8008c1c <UART_WaitOnFlagUntilTimeout>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d03c      	beq.n	8008bf0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7e:	e853 3f00 	ldrex	r3, [r3]
 8008b82:	623b      	str	r3, [r7, #32]
   return(result);
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	461a      	mov	r2, r3
 8008b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b94:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b96:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b9c:	e841 2300 	strex	r3, r2, [r1]
 8008ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1e6      	bne.n	8008b76 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	3308      	adds	r3, #8
 8008bae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	e853 3f00 	ldrex	r3, [r3]
 8008bb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f023 0301 	bic.w	r3, r3, #1
 8008bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	3308      	adds	r3, #8
 8008bc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bc8:	61fa      	str	r2, [r7, #28]
 8008bca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bcc:	69b9      	ldr	r1, [r7, #24]
 8008bce:	69fa      	ldr	r2, [r7, #28]
 8008bd0:	e841 2300 	strex	r3, r2, [r1]
 8008bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1e5      	bne.n	8008ba8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2220      	movs	r2, #32
 8008be0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e011      	b.n	8008c14 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2220      	movs	r2, #32
 8008bf4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2220      	movs	r2, #32
 8008bfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3758      	adds	r7, #88	@ 0x58
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	603b      	str	r3, [r7, #0]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c2c:	e049      	b.n	8008cc2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c34:	d045      	beq.n	8008cc2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c36:	f7fa f8a7 	bl	8002d88 <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	69ba      	ldr	r2, [r7, #24]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d302      	bcc.n	8008c4c <UART_WaitOnFlagUntilTimeout+0x30>
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d101      	bne.n	8008c50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e048      	b.n	8008ce2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 0304 	and.w	r3, r3, #4
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d031      	beq.n	8008cc2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	f003 0308 	and.w	r3, r3, #8
 8008c68:	2b08      	cmp	r3, #8
 8008c6a:	d110      	bne.n	8008c8e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2208      	movs	r2, #8
 8008c72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f000 f8ff 	bl	8008e78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2208      	movs	r2, #8
 8008c7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e029      	b.n	8008ce2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c9c:	d111      	bne.n	8008cc2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008ca6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f000 f8e5 	bl	8008e78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e00f      	b.n	8008ce2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	69da      	ldr	r2, [r3, #28]
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	bf0c      	ite	eq
 8008cd2:	2301      	moveq	r3, #1
 8008cd4:	2300      	movne	r3, #0
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	461a      	mov	r2, r3
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d0a6      	beq.n	8008c2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
	...

08008cec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b097      	sub	sp, #92	@ 0x5c
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	88fa      	ldrh	r2, [r7, #6]
 8008d04:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	88fa      	ldrh	r2, [r7, #6]
 8008d0c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d1e:	d10e      	bne.n	8008d3e <UART_Start_Receive_IT+0x52>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d105      	bne.n	8008d34 <UART_Start_Receive_IT+0x48>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008d2e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008d32:	e02d      	b.n	8008d90 <UART_Start_Receive_IT+0xa4>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	22ff      	movs	r2, #255	@ 0xff
 8008d38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008d3c:	e028      	b.n	8008d90 <UART_Start_Receive_IT+0xa4>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10d      	bne.n	8008d62 <UART_Start_Receive_IT+0x76>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d104      	bne.n	8008d58 <UART_Start_Receive_IT+0x6c>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	22ff      	movs	r2, #255	@ 0xff
 8008d52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008d56:	e01b      	b.n	8008d90 <UART_Start_Receive_IT+0xa4>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	227f      	movs	r2, #127	@ 0x7f
 8008d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008d60:	e016      	b.n	8008d90 <UART_Start_Receive_IT+0xa4>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d6a:	d10d      	bne.n	8008d88 <UART_Start_Receive_IT+0x9c>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d104      	bne.n	8008d7e <UART_Start_Receive_IT+0x92>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	227f      	movs	r2, #127	@ 0x7f
 8008d78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008d7c:	e008      	b.n	8008d90 <UART_Start_Receive_IT+0xa4>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	223f      	movs	r2, #63	@ 0x3f
 8008d82:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008d86:	e003      	b.n	8008d90 <UART_Start_Receive_IT+0xa4>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2222      	movs	r2, #34	@ 0x22
 8008d9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3308      	adds	r3, #8
 8008da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008daa:	e853 3f00 	ldrex	r3, [r3]
 8008dae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db2:	f043 0301 	orr.w	r3, r3, #1
 8008db6:	657b      	str	r3, [r7, #84]	@ 0x54
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008dc0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008dc2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008dc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008dc8:	e841 2300 	strex	r3, r2, [r1]
 8008dcc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e5      	bne.n	8008da0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ddc:	d107      	bne.n	8008dee <UART_Start_Receive_IT+0x102>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d103      	bne.n	8008dee <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	4a21      	ldr	r2, [pc, #132]	@ (8008e70 <UART_Start_Receive_IT+0x184>)
 8008dea:	669a      	str	r2, [r3, #104]	@ 0x68
 8008dec:	e002      	b.n	8008df4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	4a20      	ldr	r2, [pc, #128]	@ (8008e74 <UART_Start_Receive_IT+0x188>)
 8008df2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d019      	beq.n	8008e30 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e04:	e853 3f00 	ldrex	r3, [r3]
 8008e08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e1c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008e20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e22:	e841 2300 	strex	r3, r2, [r1]
 8008e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1e6      	bne.n	8008dfc <UART_Start_Receive_IT+0x110>
 8008e2e:	e018      	b.n	8008e62 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	e853 3f00 	ldrex	r3, [r3]
 8008e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f043 0320 	orr.w	r3, r3, #32
 8008e44:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e4e:	623b      	str	r3, [r7, #32]
 8008e50:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e52:	69f9      	ldr	r1, [r7, #28]
 8008e54:	6a3a      	ldr	r2, [r7, #32]
 8008e56:	e841 2300 	strex	r3, r2, [r1]
 8008e5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1e6      	bne.n	8008e30 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	375c      	adds	r7, #92	@ 0x5c
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr
 8008e70:	0800917d 	.word	0x0800917d
 8008e74:	08008fc1 	.word	0x08008fc1

08008e78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b095      	sub	sp, #84	@ 0x54
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e88:	e853 3f00 	ldrex	r3, [r3]
 8008e8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ea0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ea4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ea6:	e841 2300 	strex	r3, r2, [r1]
 8008eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1e6      	bne.n	8008e80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	3308      	adds	r3, #8
 8008eb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eba:	6a3b      	ldr	r3, [r7, #32]
 8008ebc:	e853 3f00 	ldrex	r3, [r3]
 8008ec0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	f023 0301 	bic.w	r3, r3, #1
 8008ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3308      	adds	r3, #8
 8008ed0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008eda:	e841 2300 	strex	r3, r2, [r1]
 8008ede:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1e5      	bne.n	8008eb2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d118      	bne.n	8008f20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	e853 3f00 	ldrex	r3, [r3]
 8008efa:	60bb      	str	r3, [r7, #8]
   return(result);
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	f023 0310 	bic.w	r3, r3, #16
 8008f02:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f0c:	61bb      	str	r3, [r7, #24]
 8008f0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f10:	6979      	ldr	r1, [r7, #20]
 8008f12:	69ba      	ldr	r2, [r7, #24]
 8008f14:	e841 2300 	strex	r3, r2, [r1]
 8008f18:	613b      	str	r3, [r7, #16]
   return(result);
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1e6      	bne.n	8008eee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2220      	movs	r2, #32
 8008f24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008f34:	bf00      	nop
 8008f36:	3754      	adds	r7, #84	@ 0x54
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f7ff fa44 	bl	80083ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f64:	bf00      	nop
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	e853 3f00 	ldrex	r3, [r3]
 8008f80:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f88:	61fb      	str	r3, [r7, #28]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	61bb      	str	r3, [r7, #24]
 8008f94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f96:	6979      	ldr	r1, [r7, #20]
 8008f98:	69ba      	ldr	r2, [r7, #24]
 8008f9a:	e841 2300 	strex	r3, r2, [r1]
 8008f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1e6      	bne.n	8008f74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7ff fa10 	bl	80083d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fb8:	bf00      	nop
 8008fba:	3720      	adds	r7, #32
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b09c      	sub	sp, #112	@ 0x70
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fd8:	2b22      	cmp	r3, #34	@ 0x22
 8008fda:	f040 80be 	bne.w	800915a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008fe4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008fe8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008fec:	b2d9      	uxtb	r1, r3
 8008fee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ff8:	400a      	ands	r2, r1
 8008ffa:	b2d2      	uxtb	r2, r2
 8008ffc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009002:	1c5a      	adds	r2, r3, #1
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800900e:	b29b      	uxth	r3, r3
 8009010:	3b01      	subs	r3, #1
 8009012:	b29a      	uxth	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009020:	b29b      	uxth	r3, r3
 8009022:	2b00      	cmp	r3, #0
 8009024:	f040 80a3 	bne.w	800916e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009030:	e853 3f00 	ldrex	r3, [r3]
 8009034:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009038:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800903c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	461a      	mov	r2, r3
 8009044:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009046:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009048:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800904c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009054:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e6      	bne.n	8009028 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3308      	adds	r3, #8
 8009060:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009064:	e853 3f00 	ldrex	r3, [r3]
 8009068:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800906a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800906c:	f023 0301 	bic.w	r3, r3, #1
 8009070:	667b      	str	r3, [r7, #100]	@ 0x64
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3308      	adds	r3, #8
 8009078:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800907a:	647a      	str	r2, [r7, #68]	@ 0x44
 800907c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009080:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009082:	e841 2300 	strex	r3, r2, [r1]
 8009086:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1e5      	bne.n	800905a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2220      	movs	r2, #32
 8009092:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a34      	ldr	r2, [pc, #208]	@ (8009178 <UART_RxISR_8BIT+0x1b8>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d01f      	beq.n	80090ec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d018      	beq.n	80090ec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c2:	e853 3f00 	ldrex	r3, [r3]
 80090c6:	623b      	str	r3, [r7, #32]
   return(result);
 80090c8:	6a3b      	ldr	r3, [r7, #32]
 80090ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80090ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	461a      	mov	r2, r3
 80090d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80090da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090e0:	e841 2300 	strex	r3, r2, [r1]
 80090e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d1e6      	bne.n	80090ba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d12e      	bne.n	8009152 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	60fb      	str	r3, [r7, #12]
   return(result);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f023 0310 	bic.w	r3, r3, #16
 800910e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	461a      	mov	r2, r3
 8009116:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009118:	61fb      	str	r3, [r7, #28]
 800911a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	69b9      	ldr	r1, [r7, #24]
 800911e:	69fa      	ldr	r2, [r7, #28]
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	617b      	str	r3, [r7, #20]
   return(result);
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e6      	bne.n	80090fa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	f003 0310 	and.w	r3, r3, #16
 8009136:	2b10      	cmp	r3, #16
 8009138:	d103      	bne.n	8009142 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2210      	movs	r2, #16
 8009140:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009148:	4619      	mov	r1, r3
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7ff f958 	bl	8008400 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009150:	e00d      	b.n	800916e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7f8 fd24 	bl	8001ba0 <HAL_UART_RxCpltCallback>
}
 8009158:	e009      	b.n	800916e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	8b1b      	ldrh	r3, [r3, #24]
 8009160:	b29a      	uxth	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f042 0208 	orr.w	r2, r2, #8
 800916a:	b292      	uxth	r2, r2
 800916c:	831a      	strh	r2, [r3, #24]
}
 800916e:	bf00      	nop
 8009170:	3770      	adds	r7, #112	@ 0x70
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	40008000 	.word	0x40008000

0800917c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b09c      	sub	sp, #112	@ 0x70
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800918a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009194:	2b22      	cmp	r3, #34	@ 0x22
 8009196:	f040 80be 	bne.w	8009316 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80091a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80091aa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80091ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80091b2:	4013      	ands	r3, r2
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80091b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091be:	1c9a      	adds	r2, r3, #2
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	3b01      	subs	r3, #1
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80091dc:	b29b      	uxth	r3, r3
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f040 80a3 	bne.w	800932a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091ec:	e853 3f00 	ldrex	r3, [r3]
 80091f0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80091f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	461a      	mov	r2, r3
 8009200:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009202:	657b      	str	r3, [r7, #84]	@ 0x54
 8009204:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009206:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009208:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800920a:	e841 2300 	strex	r3, r2, [r1]
 800920e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1e6      	bne.n	80091e4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	3308      	adds	r3, #8
 800921c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009220:	e853 3f00 	ldrex	r3, [r3]
 8009224:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009228:	f023 0301 	bic.w	r3, r3, #1
 800922c:	663b      	str	r3, [r7, #96]	@ 0x60
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3308      	adds	r3, #8
 8009234:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009236:	643a      	str	r2, [r7, #64]	@ 0x40
 8009238:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800923c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800923e:	e841 2300 	strex	r3, r2, [r1]
 8009242:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1e5      	bne.n	8009216 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2220      	movs	r2, #32
 800924e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a34      	ldr	r2, [pc, #208]	@ (8009334 <UART_RxISR_16BIT+0x1b8>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d01f      	beq.n	80092a8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d018      	beq.n	80092a8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	e853 3f00 	ldrex	r3, [r3]
 8009282:	61fb      	str	r3, [r7, #28]
   return(result);
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800928a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	461a      	mov	r2, r3
 8009292:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009296:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009298:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800929a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800929c:	e841 2300 	strex	r3, r2, [r1]
 80092a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1e6      	bne.n	8009276 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d12e      	bne.n	800930e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	e853 3f00 	ldrex	r3, [r3]
 80092c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	f023 0310 	bic.w	r3, r3, #16
 80092ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	461a      	mov	r2, r3
 80092d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80092d4:	61bb      	str	r3, [r7, #24]
 80092d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d8:	6979      	ldr	r1, [r7, #20]
 80092da:	69ba      	ldr	r2, [r7, #24]
 80092dc:	e841 2300 	strex	r3, r2, [r1]
 80092e0:	613b      	str	r3, [r7, #16]
   return(result);
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e6      	bne.n	80092b6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	69db      	ldr	r3, [r3, #28]
 80092ee:	f003 0310 	and.w	r3, r3, #16
 80092f2:	2b10      	cmp	r3, #16
 80092f4:	d103      	bne.n	80092fe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2210      	movs	r2, #16
 80092fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009304:	4619      	mov	r1, r3
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7ff f87a 	bl	8008400 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800930c:	e00d      	b.n	800932a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7f8 fc46 	bl	8001ba0 <HAL_UART_RxCpltCallback>
}
 8009314:	e009      	b.n	800932a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	8b1b      	ldrh	r3, [r3, #24]
 800931c:	b29a      	uxth	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f042 0208 	orr.w	r2, r2, #8
 8009326:	b292      	uxth	r2, r2
 8009328:	831a      	strh	r2, [r3, #24]
}
 800932a:	bf00      	nop
 800932c:	3770      	adds	r7, #112	@ 0x70
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	40008000 	.word	0x40008000

08009338 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <std>:
 800934c:	2300      	movs	r3, #0
 800934e:	b510      	push	{r4, lr}
 8009350:	4604      	mov	r4, r0
 8009352:	e9c0 3300 	strd	r3, r3, [r0]
 8009356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800935a:	6083      	str	r3, [r0, #8]
 800935c:	8181      	strh	r1, [r0, #12]
 800935e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009360:	81c2      	strh	r2, [r0, #14]
 8009362:	6183      	str	r3, [r0, #24]
 8009364:	4619      	mov	r1, r3
 8009366:	2208      	movs	r2, #8
 8009368:	305c      	adds	r0, #92	@ 0x5c
 800936a:	f000 f906 	bl	800957a <memset>
 800936e:	4b0d      	ldr	r3, [pc, #52]	@ (80093a4 <std+0x58>)
 8009370:	6263      	str	r3, [r4, #36]	@ 0x24
 8009372:	4b0d      	ldr	r3, [pc, #52]	@ (80093a8 <std+0x5c>)
 8009374:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009376:	4b0d      	ldr	r3, [pc, #52]	@ (80093ac <std+0x60>)
 8009378:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800937a:	4b0d      	ldr	r3, [pc, #52]	@ (80093b0 <std+0x64>)
 800937c:	6323      	str	r3, [r4, #48]	@ 0x30
 800937e:	4b0d      	ldr	r3, [pc, #52]	@ (80093b4 <std+0x68>)
 8009380:	6224      	str	r4, [r4, #32]
 8009382:	429c      	cmp	r4, r3
 8009384:	d006      	beq.n	8009394 <std+0x48>
 8009386:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800938a:	4294      	cmp	r4, r2
 800938c:	d002      	beq.n	8009394 <std+0x48>
 800938e:	33d0      	adds	r3, #208	@ 0xd0
 8009390:	429c      	cmp	r4, r3
 8009392:	d105      	bne.n	80093a0 <std+0x54>
 8009394:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800939c:	f000 b966 	b.w	800966c <__retarget_lock_init_recursive>
 80093a0:	bd10      	pop	{r4, pc}
 80093a2:	bf00      	nop
 80093a4:	080094f5 	.word	0x080094f5
 80093a8:	08009517 	.word	0x08009517
 80093ac:	0800954f 	.word	0x0800954f
 80093b0:	08009573 	.word	0x08009573
 80093b4:	20000520 	.word	0x20000520

080093b8 <stdio_exit_handler>:
 80093b8:	4a02      	ldr	r2, [pc, #8]	@ (80093c4 <stdio_exit_handler+0xc>)
 80093ba:	4903      	ldr	r1, [pc, #12]	@ (80093c8 <stdio_exit_handler+0x10>)
 80093bc:	4803      	ldr	r0, [pc, #12]	@ (80093cc <stdio_exit_handler+0x14>)
 80093be:	f000 b869 	b.w	8009494 <_fwalk_sglue>
 80093c2:	bf00      	nop
 80093c4:	2000000c 	.word	0x2000000c
 80093c8:	08009f29 	.word	0x08009f29
 80093cc:	2000001c 	.word	0x2000001c

080093d0 <cleanup_stdio>:
 80093d0:	6841      	ldr	r1, [r0, #4]
 80093d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009404 <cleanup_stdio+0x34>)
 80093d4:	4299      	cmp	r1, r3
 80093d6:	b510      	push	{r4, lr}
 80093d8:	4604      	mov	r4, r0
 80093da:	d001      	beq.n	80093e0 <cleanup_stdio+0x10>
 80093dc:	f000 fda4 	bl	8009f28 <_fflush_r>
 80093e0:	68a1      	ldr	r1, [r4, #8]
 80093e2:	4b09      	ldr	r3, [pc, #36]	@ (8009408 <cleanup_stdio+0x38>)
 80093e4:	4299      	cmp	r1, r3
 80093e6:	d002      	beq.n	80093ee <cleanup_stdio+0x1e>
 80093e8:	4620      	mov	r0, r4
 80093ea:	f000 fd9d 	bl	8009f28 <_fflush_r>
 80093ee:	68e1      	ldr	r1, [r4, #12]
 80093f0:	4b06      	ldr	r3, [pc, #24]	@ (800940c <cleanup_stdio+0x3c>)
 80093f2:	4299      	cmp	r1, r3
 80093f4:	d004      	beq.n	8009400 <cleanup_stdio+0x30>
 80093f6:	4620      	mov	r0, r4
 80093f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093fc:	f000 bd94 	b.w	8009f28 <_fflush_r>
 8009400:	bd10      	pop	{r4, pc}
 8009402:	bf00      	nop
 8009404:	20000520 	.word	0x20000520
 8009408:	20000588 	.word	0x20000588
 800940c:	200005f0 	.word	0x200005f0

08009410 <global_stdio_init.part.0>:
 8009410:	b510      	push	{r4, lr}
 8009412:	4b0b      	ldr	r3, [pc, #44]	@ (8009440 <global_stdio_init.part.0+0x30>)
 8009414:	4c0b      	ldr	r4, [pc, #44]	@ (8009444 <global_stdio_init.part.0+0x34>)
 8009416:	4a0c      	ldr	r2, [pc, #48]	@ (8009448 <global_stdio_init.part.0+0x38>)
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	4620      	mov	r0, r4
 800941c:	2200      	movs	r2, #0
 800941e:	2104      	movs	r1, #4
 8009420:	f7ff ff94 	bl	800934c <std>
 8009424:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009428:	2201      	movs	r2, #1
 800942a:	2109      	movs	r1, #9
 800942c:	f7ff ff8e 	bl	800934c <std>
 8009430:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009434:	2202      	movs	r2, #2
 8009436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800943a:	2112      	movs	r1, #18
 800943c:	f7ff bf86 	b.w	800934c <std>
 8009440:	20000658 	.word	0x20000658
 8009444:	20000520 	.word	0x20000520
 8009448:	080093b9 	.word	0x080093b9

0800944c <__sfp_lock_acquire>:
 800944c:	4801      	ldr	r0, [pc, #4]	@ (8009454 <__sfp_lock_acquire+0x8>)
 800944e:	f000 b90e 	b.w	800966e <__retarget_lock_acquire_recursive>
 8009452:	bf00      	nop
 8009454:	20000661 	.word	0x20000661

08009458 <__sfp_lock_release>:
 8009458:	4801      	ldr	r0, [pc, #4]	@ (8009460 <__sfp_lock_release+0x8>)
 800945a:	f000 b909 	b.w	8009670 <__retarget_lock_release_recursive>
 800945e:	bf00      	nop
 8009460:	20000661 	.word	0x20000661

08009464 <__sinit>:
 8009464:	b510      	push	{r4, lr}
 8009466:	4604      	mov	r4, r0
 8009468:	f7ff fff0 	bl	800944c <__sfp_lock_acquire>
 800946c:	6a23      	ldr	r3, [r4, #32]
 800946e:	b11b      	cbz	r3, 8009478 <__sinit+0x14>
 8009470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009474:	f7ff bff0 	b.w	8009458 <__sfp_lock_release>
 8009478:	4b04      	ldr	r3, [pc, #16]	@ (800948c <__sinit+0x28>)
 800947a:	6223      	str	r3, [r4, #32]
 800947c:	4b04      	ldr	r3, [pc, #16]	@ (8009490 <__sinit+0x2c>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1f5      	bne.n	8009470 <__sinit+0xc>
 8009484:	f7ff ffc4 	bl	8009410 <global_stdio_init.part.0>
 8009488:	e7f2      	b.n	8009470 <__sinit+0xc>
 800948a:	bf00      	nop
 800948c:	080093d1 	.word	0x080093d1
 8009490:	20000658 	.word	0x20000658

08009494 <_fwalk_sglue>:
 8009494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009498:	4607      	mov	r7, r0
 800949a:	4688      	mov	r8, r1
 800949c:	4614      	mov	r4, r2
 800949e:	2600      	movs	r6, #0
 80094a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094a4:	f1b9 0901 	subs.w	r9, r9, #1
 80094a8:	d505      	bpl.n	80094b6 <_fwalk_sglue+0x22>
 80094aa:	6824      	ldr	r4, [r4, #0]
 80094ac:	2c00      	cmp	r4, #0
 80094ae:	d1f7      	bne.n	80094a0 <_fwalk_sglue+0xc>
 80094b0:	4630      	mov	r0, r6
 80094b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094b6:	89ab      	ldrh	r3, [r5, #12]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d907      	bls.n	80094cc <_fwalk_sglue+0x38>
 80094bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094c0:	3301      	adds	r3, #1
 80094c2:	d003      	beq.n	80094cc <_fwalk_sglue+0x38>
 80094c4:	4629      	mov	r1, r5
 80094c6:	4638      	mov	r0, r7
 80094c8:	47c0      	blx	r8
 80094ca:	4306      	orrs	r6, r0
 80094cc:	3568      	adds	r5, #104	@ 0x68
 80094ce:	e7e9      	b.n	80094a4 <_fwalk_sglue+0x10>

080094d0 <iprintf>:
 80094d0:	b40f      	push	{r0, r1, r2, r3}
 80094d2:	b507      	push	{r0, r1, r2, lr}
 80094d4:	4906      	ldr	r1, [pc, #24]	@ (80094f0 <iprintf+0x20>)
 80094d6:	ab04      	add	r3, sp, #16
 80094d8:	6808      	ldr	r0, [r1, #0]
 80094da:	f853 2b04 	ldr.w	r2, [r3], #4
 80094de:	6881      	ldr	r1, [r0, #8]
 80094e0:	9301      	str	r3, [sp, #4]
 80094e2:	f000 f9f7 	bl	80098d4 <_vfiprintf_r>
 80094e6:	b003      	add	sp, #12
 80094e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094ec:	b004      	add	sp, #16
 80094ee:	4770      	bx	lr
 80094f0:	20000018 	.word	0x20000018

080094f4 <__sread>:
 80094f4:	b510      	push	{r4, lr}
 80094f6:	460c      	mov	r4, r1
 80094f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fc:	f000 f868 	bl	80095d0 <_read_r>
 8009500:	2800      	cmp	r0, #0
 8009502:	bfab      	itete	ge
 8009504:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009506:	89a3      	ldrhlt	r3, [r4, #12]
 8009508:	181b      	addge	r3, r3, r0
 800950a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800950e:	bfac      	ite	ge
 8009510:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009512:	81a3      	strhlt	r3, [r4, #12]
 8009514:	bd10      	pop	{r4, pc}

08009516 <__swrite>:
 8009516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800951a:	461f      	mov	r7, r3
 800951c:	898b      	ldrh	r3, [r1, #12]
 800951e:	05db      	lsls	r3, r3, #23
 8009520:	4605      	mov	r5, r0
 8009522:	460c      	mov	r4, r1
 8009524:	4616      	mov	r6, r2
 8009526:	d505      	bpl.n	8009534 <__swrite+0x1e>
 8009528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800952c:	2302      	movs	r3, #2
 800952e:	2200      	movs	r2, #0
 8009530:	f000 f83c 	bl	80095ac <_lseek_r>
 8009534:	89a3      	ldrh	r3, [r4, #12]
 8009536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800953a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800953e:	81a3      	strh	r3, [r4, #12]
 8009540:	4632      	mov	r2, r6
 8009542:	463b      	mov	r3, r7
 8009544:	4628      	mov	r0, r5
 8009546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800954a:	f000 b853 	b.w	80095f4 <_write_r>

0800954e <__sseek>:
 800954e:	b510      	push	{r4, lr}
 8009550:	460c      	mov	r4, r1
 8009552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009556:	f000 f829 	bl	80095ac <_lseek_r>
 800955a:	1c43      	adds	r3, r0, #1
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	bf15      	itete	ne
 8009560:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009562:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009566:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800956a:	81a3      	strheq	r3, [r4, #12]
 800956c:	bf18      	it	ne
 800956e:	81a3      	strhne	r3, [r4, #12]
 8009570:	bd10      	pop	{r4, pc}

08009572 <__sclose>:
 8009572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009576:	f000 b809 	b.w	800958c <_close_r>

0800957a <memset>:
 800957a:	4402      	add	r2, r0
 800957c:	4603      	mov	r3, r0
 800957e:	4293      	cmp	r3, r2
 8009580:	d100      	bne.n	8009584 <memset+0xa>
 8009582:	4770      	bx	lr
 8009584:	f803 1b01 	strb.w	r1, [r3], #1
 8009588:	e7f9      	b.n	800957e <memset+0x4>
	...

0800958c <_close_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	4d06      	ldr	r5, [pc, #24]	@ (80095a8 <_close_r+0x1c>)
 8009590:	2300      	movs	r3, #0
 8009592:	4604      	mov	r4, r0
 8009594:	4608      	mov	r0, r1
 8009596:	602b      	str	r3, [r5, #0]
 8009598:	f7f9 f855 	bl	8002646 <_close>
 800959c:	1c43      	adds	r3, r0, #1
 800959e:	d102      	bne.n	80095a6 <_close_r+0x1a>
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	b103      	cbz	r3, 80095a6 <_close_r+0x1a>
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
 80095a8:	2000065c 	.word	0x2000065c

080095ac <_lseek_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	4d07      	ldr	r5, [pc, #28]	@ (80095cc <_lseek_r+0x20>)
 80095b0:	4604      	mov	r4, r0
 80095b2:	4608      	mov	r0, r1
 80095b4:	4611      	mov	r1, r2
 80095b6:	2200      	movs	r2, #0
 80095b8:	602a      	str	r2, [r5, #0]
 80095ba:	461a      	mov	r2, r3
 80095bc:	f7f9 f86a 	bl	8002694 <_lseek>
 80095c0:	1c43      	adds	r3, r0, #1
 80095c2:	d102      	bne.n	80095ca <_lseek_r+0x1e>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	b103      	cbz	r3, 80095ca <_lseek_r+0x1e>
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	2000065c 	.word	0x2000065c

080095d0 <_read_r>:
 80095d0:	b538      	push	{r3, r4, r5, lr}
 80095d2:	4d07      	ldr	r5, [pc, #28]	@ (80095f0 <_read_r+0x20>)
 80095d4:	4604      	mov	r4, r0
 80095d6:	4608      	mov	r0, r1
 80095d8:	4611      	mov	r1, r2
 80095da:	2200      	movs	r2, #0
 80095dc:	602a      	str	r2, [r5, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	f7f9 f814 	bl	800260c <_read>
 80095e4:	1c43      	adds	r3, r0, #1
 80095e6:	d102      	bne.n	80095ee <_read_r+0x1e>
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	b103      	cbz	r3, 80095ee <_read_r+0x1e>
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	bd38      	pop	{r3, r4, r5, pc}
 80095f0:	2000065c 	.word	0x2000065c

080095f4 <_write_r>:
 80095f4:	b538      	push	{r3, r4, r5, lr}
 80095f6:	4d07      	ldr	r5, [pc, #28]	@ (8009614 <_write_r+0x20>)
 80095f8:	4604      	mov	r4, r0
 80095fa:	4608      	mov	r0, r1
 80095fc:	4611      	mov	r1, r2
 80095fe:	2200      	movs	r2, #0
 8009600:	602a      	str	r2, [r5, #0]
 8009602:	461a      	mov	r2, r3
 8009604:	f7f8 fb54 	bl	8001cb0 <_write>
 8009608:	1c43      	adds	r3, r0, #1
 800960a:	d102      	bne.n	8009612 <_write_r+0x1e>
 800960c:	682b      	ldr	r3, [r5, #0]
 800960e:	b103      	cbz	r3, 8009612 <_write_r+0x1e>
 8009610:	6023      	str	r3, [r4, #0]
 8009612:	bd38      	pop	{r3, r4, r5, pc}
 8009614:	2000065c 	.word	0x2000065c

08009618 <__errno>:
 8009618:	4b01      	ldr	r3, [pc, #4]	@ (8009620 <__errno+0x8>)
 800961a:	6818      	ldr	r0, [r3, #0]
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	20000018 	.word	0x20000018

08009624 <__libc_init_array>:
 8009624:	b570      	push	{r4, r5, r6, lr}
 8009626:	4d0d      	ldr	r5, [pc, #52]	@ (800965c <__libc_init_array+0x38>)
 8009628:	4c0d      	ldr	r4, [pc, #52]	@ (8009660 <__libc_init_array+0x3c>)
 800962a:	1b64      	subs	r4, r4, r5
 800962c:	10a4      	asrs	r4, r4, #2
 800962e:	2600      	movs	r6, #0
 8009630:	42a6      	cmp	r6, r4
 8009632:	d109      	bne.n	8009648 <__libc_init_array+0x24>
 8009634:	4d0b      	ldr	r5, [pc, #44]	@ (8009664 <__libc_init_array+0x40>)
 8009636:	4c0c      	ldr	r4, [pc, #48]	@ (8009668 <__libc_init_array+0x44>)
 8009638:	f000 fdc6 	bl	800a1c8 <_init>
 800963c:	1b64      	subs	r4, r4, r5
 800963e:	10a4      	asrs	r4, r4, #2
 8009640:	2600      	movs	r6, #0
 8009642:	42a6      	cmp	r6, r4
 8009644:	d105      	bne.n	8009652 <__libc_init_array+0x2e>
 8009646:	bd70      	pop	{r4, r5, r6, pc}
 8009648:	f855 3b04 	ldr.w	r3, [r5], #4
 800964c:	4798      	blx	r3
 800964e:	3601      	adds	r6, #1
 8009650:	e7ee      	b.n	8009630 <__libc_init_array+0xc>
 8009652:	f855 3b04 	ldr.w	r3, [r5], #4
 8009656:	4798      	blx	r3
 8009658:	3601      	adds	r6, #1
 800965a:	e7f2      	b.n	8009642 <__libc_init_array+0x1e>
 800965c:	0800a29c 	.word	0x0800a29c
 8009660:	0800a29c 	.word	0x0800a29c
 8009664:	0800a29c 	.word	0x0800a29c
 8009668:	0800a2a0 	.word	0x0800a2a0

0800966c <__retarget_lock_init_recursive>:
 800966c:	4770      	bx	lr

0800966e <__retarget_lock_acquire_recursive>:
 800966e:	4770      	bx	lr

08009670 <__retarget_lock_release_recursive>:
 8009670:	4770      	bx	lr

08009672 <memcpy>:
 8009672:	440a      	add	r2, r1
 8009674:	4291      	cmp	r1, r2
 8009676:	f100 33ff 	add.w	r3, r0, #4294967295
 800967a:	d100      	bne.n	800967e <memcpy+0xc>
 800967c:	4770      	bx	lr
 800967e:	b510      	push	{r4, lr}
 8009680:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009684:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009688:	4291      	cmp	r1, r2
 800968a:	d1f9      	bne.n	8009680 <memcpy+0xe>
 800968c:	bd10      	pop	{r4, pc}
	...

08009690 <_free_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4605      	mov	r5, r0
 8009694:	2900      	cmp	r1, #0
 8009696:	d041      	beq.n	800971c <_free_r+0x8c>
 8009698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800969c:	1f0c      	subs	r4, r1, #4
 800969e:	2b00      	cmp	r3, #0
 80096a0:	bfb8      	it	lt
 80096a2:	18e4      	addlt	r4, r4, r3
 80096a4:	f000 f8e0 	bl	8009868 <__malloc_lock>
 80096a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009720 <_free_r+0x90>)
 80096aa:	6813      	ldr	r3, [r2, #0]
 80096ac:	b933      	cbnz	r3, 80096bc <_free_r+0x2c>
 80096ae:	6063      	str	r3, [r4, #4]
 80096b0:	6014      	str	r4, [r2, #0]
 80096b2:	4628      	mov	r0, r5
 80096b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096b8:	f000 b8dc 	b.w	8009874 <__malloc_unlock>
 80096bc:	42a3      	cmp	r3, r4
 80096be:	d908      	bls.n	80096d2 <_free_r+0x42>
 80096c0:	6820      	ldr	r0, [r4, #0]
 80096c2:	1821      	adds	r1, r4, r0
 80096c4:	428b      	cmp	r3, r1
 80096c6:	bf01      	itttt	eq
 80096c8:	6819      	ldreq	r1, [r3, #0]
 80096ca:	685b      	ldreq	r3, [r3, #4]
 80096cc:	1809      	addeq	r1, r1, r0
 80096ce:	6021      	streq	r1, [r4, #0]
 80096d0:	e7ed      	b.n	80096ae <_free_r+0x1e>
 80096d2:	461a      	mov	r2, r3
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	b10b      	cbz	r3, 80096dc <_free_r+0x4c>
 80096d8:	42a3      	cmp	r3, r4
 80096da:	d9fa      	bls.n	80096d2 <_free_r+0x42>
 80096dc:	6811      	ldr	r1, [r2, #0]
 80096de:	1850      	adds	r0, r2, r1
 80096e0:	42a0      	cmp	r0, r4
 80096e2:	d10b      	bne.n	80096fc <_free_r+0x6c>
 80096e4:	6820      	ldr	r0, [r4, #0]
 80096e6:	4401      	add	r1, r0
 80096e8:	1850      	adds	r0, r2, r1
 80096ea:	4283      	cmp	r3, r0
 80096ec:	6011      	str	r1, [r2, #0]
 80096ee:	d1e0      	bne.n	80096b2 <_free_r+0x22>
 80096f0:	6818      	ldr	r0, [r3, #0]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	6053      	str	r3, [r2, #4]
 80096f6:	4408      	add	r0, r1
 80096f8:	6010      	str	r0, [r2, #0]
 80096fa:	e7da      	b.n	80096b2 <_free_r+0x22>
 80096fc:	d902      	bls.n	8009704 <_free_r+0x74>
 80096fe:	230c      	movs	r3, #12
 8009700:	602b      	str	r3, [r5, #0]
 8009702:	e7d6      	b.n	80096b2 <_free_r+0x22>
 8009704:	6820      	ldr	r0, [r4, #0]
 8009706:	1821      	adds	r1, r4, r0
 8009708:	428b      	cmp	r3, r1
 800970a:	bf04      	itt	eq
 800970c:	6819      	ldreq	r1, [r3, #0]
 800970e:	685b      	ldreq	r3, [r3, #4]
 8009710:	6063      	str	r3, [r4, #4]
 8009712:	bf04      	itt	eq
 8009714:	1809      	addeq	r1, r1, r0
 8009716:	6021      	streq	r1, [r4, #0]
 8009718:	6054      	str	r4, [r2, #4]
 800971a:	e7ca      	b.n	80096b2 <_free_r+0x22>
 800971c:	bd38      	pop	{r3, r4, r5, pc}
 800971e:	bf00      	nop
 8009720:	20000668 	.word	0x20000668

08009724 <sbrk_aligned>:
 8009724:	b570      	push	{r4, r5, r6, lr}
 8009726:	4e0f      	ldr	r6, [pc, #60]	@ (8009764 <sbrk_aligned+0x40>)
 8009728:	460c      	mov	r4, r1
 800972a:	6831      	ldr	r1, [r6, #0]
 800972c:	4605      	mov	r5, r0
 800972e:	b911      	cbnz	r1, 8009736 <sbrk_aligned+0x12>
 8009730:	f000 fcb6 	bl	800a0a0 <_sbrk_r>
 8009734:	6030      	str	r0, [r6, #0]
 8009736:	4621      	mov	r1, r4
 8009738:	4628      	mov	r0, r5
 800973a:	f000 fcb1 	bl	800a0a0 <_sbrk_r>
 800973e:	1c43      	adds	r3, r0, #1
 8009740:	d103      	bne.n	800974a <sbrk_aligned+0x26>
 8009742:	f04f 34ff 	mov.w	r4, #4294967295
 8009746:	4620      	mov	r0, r4
 8009748:	bd70      	pop	{r4, r5, r6, pc}
 800974a:	1cc4      	adds	r4, r0, #3
 800974c:	f024 0403 	bic.w	r4, r4, #3
 8009750:	42a0      	cmp	r0, r4
 8009752:	d0f8      	beq.n	8009746 <sbrk_aligned+0x22>
 8009754:	1a21      	subs	r1, r4, r0
 8009756:	4628      	mov	r0, r5
 8009758:	f000 fca2 	bl	800a0a0 <_sbrk_r>
 800975c:	3001      	adds	r0, #1
 800975e:	d1f2      	bne.n	8009746 <sbrk_aligned+0x22>
 8009760:	e7ef      	b.n	8009742 <sbrk_aligned+0x1e>
 8009762:	bf00      	nop
 8009764:	20000664 	.word	0x20000664

08009768 <_malloc_r>:
 8009768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800976c:	1ccd      	adds	r5, r1, #3
 800976e:	f025 0503 	bic.w	r5, r5, #3
 8009772:	3508      	adds	r5, #8
 8009774:	2d0c      	cmp	r5, #12
 8009776:	bf38      	it	cc
 8009778:	250c      	movcc	r5, #12
 800977a:	2d00      	cmp	r5, #0
 800977c:	4606      	mov	r6, r0
 800977e:	db01      	blt.n	8009784 <_malloc_r+0x1c>
 8009780:	42a9      	cmp	r1, r5
 8009782:	d904      	bls.n	800978e <_malloc_r+0x26>
 8009784:	230c      	movs	r3, #12
 8009786:	6033      	str	r3, [r6, #0]
 8009788:	2000      	movs	r0, #0
 800978a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800978e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009864 <_malloc_r+0xfc>
 8009792:	f000 f869 	bl	8009868 <__malloc_lock>
 8009796:	f8d8 3000 	ldr.w	r3, [r8]
 800979a:	461c      	mov	r4, r3
 800979c:	bb44      	cbnz	r4, 80097f0 <_malloc_r+0x88>
 800979e:	4629      	mov	r1, r5
 80097a0:	4630      	mov	r0, r6
 80097a2:	f7ff ffbf 	bl	8009724 <sbrk_aligned>
 80097a6:	1c43      	adds	r3, r0, #1
 80097a8:	4604      	mov	r4, r0
 80097aa:	d158      	bne.n	800985e <_malloc_r+0xf6>
 80097ac:	f8d8 4000 	ldr.w	r4, [r8]
 80097b0:	4627      	mov	r7, r4
 80097b2:	2f00      	cmp	r7, #0
 80097b4:	d143      	bne.n	800983e <_malloc_r+0xd6>
 80097b6:	2c00      	cmp	r4, #0
 80097b8:	d04b      	beq.n	8009852 <_malloc_r+0xea>
 80097ba:	6823      	ldr	r3, [r4, #0]
 80097bc:	4639      	mov	r1, r7
 80097be:	4630      	mov	r0, r6
 80097c0:	eb04 0903 	add.w	r9, r4, r3
 80097c4:	f000 fc6c 	bl	800a0a0 <_sbrk_r>
 80097c8:	4581      	cmp	r9, r0
 80097ca:	d142      	bne.n	8009852 <_malloc_r+0xea>
 80097cc:	6821      	ldr	r1, [r4, #0]
 80097ce:	1a6d      	subs	r5, r5, r1
 80097d0:	4629      	mov	r1, r5
 80097d2:	4630      	mov	r0, r6
 80097d4:	f7ff ffa6 	bl	8009724 <sbrk_aligned>
 80097d8:	3001      	adds	r0, #1
 80097da:	d03a      	beq.n	8009852 <_malloc_r+0xea>
 80097dc:	6823      	ldr	r3, [r4, #0]
 80097de:	442b      	add	r3, r5
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	f8d8 3000 	ldr.w	r3, [r8]
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	bb62      	cbnz	r2, 8009844 <_malloc_r+0xdc>
 80097ea:	f8c8 7000 	str.w	r7, [r8]
 80097ee:	e00f      	b.n	8009810 <_malloc_r+0xa8>
 80097f0:	6822      	ldr	r2, [r4, #0]
 80097f2:	1b52      	subs	r2, r2, r5
 80097f4:	d420      	bmi.n	8009838 <_malloc_r+0xd0>
 80097f6:	2a0b      	cmp	r2, #11
 80097f8:	d917      	bls.n	800982a <_malloc_r+0xc2>
 80097fa:	1961      	adds	r1, r4, r5
 80097fc:	42a3      	cmp	r3, r4
 80097fe:	6025      	str	r5, [r4, #0]
 8009800:	bf18      	it	ne
 8009802:	6059      	strne	r1, [r3, #4]
 8009804:	6863      	ldr	r3, [r4, #4]
 8009806:	bf08      	it	eq
 8009808:	f8c8 1000 	streq.w	r1, [r8]
 800980c:	5162      	str	r2, [r4, r5]
 800980e:	604b      	str	r3, [r1, #4]
 8009810:	4630      	mov	r0, r6
 8009812:	f000 f82f 	bl	8009874 <__malloc_unlock>
 8009816:	f104 000b 	add.w	r0, r4, #11
 800981a:	1d23      	adds	r3, r4, #4
 800981c:	f020 0007 	bic.w	r0, r0, #7
 8009820:	1ac2      	subs	r2, r0, r3
 8009822:	bf1c      	itt	ne
 8009824:	1a1b      	subne	r3, r3, r0
 8009826:	50a3      	strne	r3, [r4, r2]
 8009828:	e7af      	b.n	800978a <_malloc_r+0x22>
 800982a:	6862      	ldr	r2, [r4, #4]
 800982c:	42a3      	cmp	r3, r4
 800982e:	bf0c      	ite	eq
 8009830:	f8c8 2000 	streq.w	r2, [r8]
 8009834:	605a      	strne	r2, [r3, #4]
 8009836:	e7eb      	b.n	8009810 <_malloc_r+0xa8>
 8009838:	4623      	mov	r3, r4
 800983a:	6864      	ldr	r4, [r4, #4]
 800983c:	e7ae      	b.n	800979c <_malloc_r+0x34>
 800983e:	463c      	mov	r4, r7
 8009840:	687f      	ldr	r7, [r7, #4]
 8009842:	e7b6      	b.n	80097b2 <_malloc_r+0x4a>
 8009844:	461a      	mov	r2, r3
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	42a3      	cmp	r3, r4
 800984a:	d1fb      	bne.n	8009844 <_malloc_r+0xdc>
 800984c:	2300      	movs	r3, #0
 800984e:	6053      	str	r3, [r2, #4]
 8009850:	e7de      	b.n	8009810 <_malloc_r+0xa8>
 8009852:	230c      	movs	r3, #12
 8009854:	6033      	str	r3, [r6, #0]
 8009856:	4630      	mov	r0, r6
 8009858:	f000 f80c 	bl	8009874 <__malloc_unlock>
 800985c:	e794      	b.n	8009788 <_malloc_r+0x20>
 800985e:	6005      	str	r5, [r0, #0]
 8009860:	e7d6      	b.n	8009810 <_malloc_r+0xa8>
 8009862:	bf00      	nop
 8009864:	20000668 	.word	0x20000668

08009868 <__malloc_lock>:
 8009868:	4801      	ldr	r0, [pc, #4]	@ (8009870 <__malloc_lock+0x8>)
 800986a:	f7ff bf00 	b.w	800966e <__retarget_lock_acquire_recursive>
 800986e:	bf00      	nop
 8009870:	20000660 	.word	0x20000660

08009874 <__malloc_unlock>:
 8009874:	4801      	ldr	r0, [pc, #4]	@ (800987c <__malloc_unlock+0x8>)
 8009876:	f7ff befb 	b.w	8009670 <__retarget_lock_release_recursive>
 800987a:	bf00      	nop
 800987c:	20000660 	.word	0x20000660

08009880 <__sfputc_r>:
 8009880:	6893      	ldr	r3, [r2, #8]
 8009882:	3b01      	subs	r3, #1
 8009884:	2b00      	cmp	r3, #0
 8009886:	b410      	push	{r4}
 8009888:	6093      	str	r3, [r2, #8]
 800988a:	da08      	bge.n	800989e <__sfputc_r+0x1e>
 800988c:	6994      	ldr	r4, [r2, #24]
 800988e:	42a3      	cmp	r3, r4
 8009890:	db01      	blt.n	8009896 <__sfputc_r+0x16>
 8009892:	290a      	cmp	r1, #10
 8009894:	d103      	bne.n	800989e <__sfputc_r+0x1e>
 8009896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800989a:	f000 bb6d 	b.w	8009f78 <__swbuf_r>
 800989e:	6813      	ldr	r3, [r2, #0]
 80098a0:	1c58      	adds	r0, r3, #1
 80098a2:	6010      	str	r0, [r2, #0]
 80098a4:	7019      	strb	r1, [r3, #0]
 80098a6:	4608      	mov	r0, r1
 80098a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <__sfputs_r>:
 80098ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b0:	4606      	mov	r6, r0
 80098b2:	460f      	mov	r7, r1
 80098b4:	4614      	mov	r4, r2
 80098b6:	18d5      	adds	r5, r2, r3
 80098b8:	42ac      	cmp	r4, r5
 80098ba:	d101      	bne.n	80098c0 <__sfputs_r+0x12>
 80098bc:	2000      	movs	r0, #0
 80098be:	e007      	b.n	80098d0 <__sfputs_r+0x22>
 80098c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c4:	463a      	mov	r2, r7
 80098c6:	4630      	mov	r0, r6
 80098c8:	f7ff ffda 	bl	8009880 <__sfputc_r>
 80098cc:	1c43      	adds	r3, r0, #1
 80098ce:	d1f3      	bne.n	80098b8 <__sfputs_r+0xa>
 80098d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098d4 <_vfiprintf_r>:
 80098d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d8:	460d      	mov	r5, r1
 80098da:	b09d      	sub	sp, #116	@ 0x74
 80098dc:	4614      	mov	r4, r2
 80098de:	4698      	mov	r8, r3
 80098e0:	4606      	mov	r6, r0
 80098e2:	b118      	cbz	r0, 80098ec <_vfiprintf_r+0x18>
 80098e4:	6a03      	ldr	r3, [r0, #32]
 80098e6:	b90b      	cbnz	r3, 80098ec <_vfiprintf_r+0x18>
 80098e8:	f7ff fdbc 	bl	8009464 <__sinit>
 80098ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098ee:	07d9      	lsls	r1, r3, #31
 80098f0:	d405      	bmi.n	80098fe <_vfiprintf_r+0x2a>
 80098f2:	89ab      	ldrh	r3, [r5, #12]
 80098f4:	059a      	lsls	r2, r3, #22
 80098f6:	d402      	bmi.n	80098fe <_vfiprintf_r+0x2a>
 80098f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098fa:	f7ff feb8 	bl	800966e <__retarget_lock_acquire_recursive>
 80098fe:	89ab      	ldrh	r3, [r5, #12]
 8009900:	071b      	lsls	r3, r3, #28
 8009902:	d501      	bpl.n	8009908 <_vfiprintf_r+0x34>
 8009904:	692b      	ldr	r3, [r5, #16]
 8009906:	b99b      	cbnz	r3, 8009930 <_vfiprintf_r+0x5c>
 8009908:	4629      	mov	r1, r5
 800990a:	4630      	mov	r0, r6
 800990c:	f000 fb72 	bl	8009ff4 <__swsetup_r>
 8009910:	b170      	cbz	r0, 8009930 <_vfiprintf_r+0x5c>
 8009912:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009914:	07dc      	lsls	r4, r3, #31
 8009916:	d504      	bpl.n	8009922 <_vfiprintf_r+0x4e>
 8009918:	f04f 30ff 	mov.w	r0, #4294967295
 800991c:	b01d      	add	sp, #116	@ 0x74
 800991e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009922:	89ab      	ldrh	r3, [r5, #12]
 8009924:	0598      	lsls	r0, r3, #22
 8009926:	d4f7      	bmi.n	8009918 <_vfiprintf_r+0x44>
 8009928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800992a:	f7ff fea1 	bl	8009670 <__retarget_lock_release_recursive>
 800992e:	e7f3      	b.n	8009918 <_vfiprintf_r+0x44>
 8009930:	2300      	movs	r3, #0
 8009932:	9309      	str	r3, [sp, #36]	@ 0x24
 8009934:	2320      	movs	r3, #32
 8009936:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800993a:	f8cd 800c 	str.w	r8, [sp, #12]
 800993e:	2330      	movs	r3, #48	@ 0x30
 8009940:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009af0 <_vfiprintf_r+0x21c>
 8009944:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009948:	f04f 0901 	mov.w	r9, #1
 800994c:	4623      	mov	r3, r4
 800994e:	469a      	mov	sl, r3
 8009950:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009954:	b10a      	cbz	r2, 800995a <_vfiprintf_r+0x86>
 8009956:	2a25      	cmp	r2, #37	@ 0x25
 8009958:	d1f9      	bne.n	800994e <_vfiprintf_r+0x7a>
 800995a:	ebba 0b04 	subs.w	fp, sl, r4
 800995e:	d00b      	beq.n	8009978 <_vfiprintf_r+0xa4>
 8009960:	465b      	mov	r3, fp
 8009962:	4622      	mov	r2, r4
 8009964:	4629      	mov	r1, r5
 8009966:	4630      	mov	r0, r6
 8009968:	f7ff ffa1 	bl	80098ae <__sfputs_r>
 800996c:	3001      	adds	r0, #1
 800996e:	f000 80a7 	beq.w	8009ac0 <_vfiprintf_r+0x1ec>
 8009972:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009974:	445a      	add	r2, fp
 8009976:	9209      	str	r2, [sp, #36]	@ 0x24
 8009978:	f89a 3000 	ldrb.w	r3, [sl]
 800997c:	2b00      	cmp	r3, #0
 800997e:	f000 809f 	beq.w	8009ac0 <_vfiprintf_r+0x1ec>
 8009982:	2300      	movs	r3, #0
 8009984:	f04f 32ff 	mov.w	r2, #4294967295
 8009988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800998c:	f10a 0a01 	add.w	sl, sl, #1
 8009990:	9304      	str	r3, [sp, #16]
 8009992:	9307      	str	r3, [sp, #28]
 8009994:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009998:	931a      	str	r3, [sp, #104]	@ 0x68
 800999a:	4654      	mov	r4, sl
 800999c:	2205      	movs	r2, #5
 800999e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099a2:	4853      	ldr	r0, [pc, #332]	@ (8009af0 <_vfiprintf_r+0x21c>)
 80099a4:	f7f6 fc14 	bl	80001d0 <memchr>
 80099a8:	9a04      	ldr	r2, [sp, #16]
 80099aa:	b9d8      	cbnz	r0, 80099e4 <_vfiprintf_r+0x110>
 80099ac:	06d1      	lsls	r1, r2, #27
 80099ae:	bf44      	itt	mi
 80099b0:	2320      	movmi	r3, #32
 80099b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099b6:	0713      	lsls	r3, r2, #28
 80099b8:	bf44      	itt	mi
 80099ba:	232b      	movmi	r3, #43	@ 0x2b
 80099bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099c0:	f89a 3000 	ldrb.w	r3, [sl]
 80099c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80099c6:	d015      	beq.n	80099f4 <_vfiprintf_r+0x120>
 80099c8:	9a07      	ldr	r2, [sp, #28]
 80099ca:	4654      	mov	r4, sl
 80099cc:	2000      	movs	r0, #0
 80099ce:	f04f 0c0a 	mov.w	ip, #10
 80099d2:	4621      	mov	r1, r4
 80099d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099d8:	3b30      	subs	r3, #48	@ 0x30
 80099da:	2b09      	cmp	r3, #9
 80099dc:	d94b      	bls.n	8009a76 <_vfiprintf_r+0x1a2>
 80099de:	b1b0      	cbz	r0, 8009a0e <_vfiprintf_r+0x13a>
 80099e0:	9207      	str	r2, [sp, #28]
 80099e2:	e014      	b.n	8009a0e <_vfiprintf_r+0x13a>
 80099e4:	eba0 0308 	sub.w	r3, r0, r8
 80099e8:	fa09 f303 	lsl.w	r3, r9, r3
 80099ec:	4313      	orrs	r3, r2
 80099ee:	9304      	str	r3, [sp, #16]
 80099f0:	46a2      	mov	sl, r4
 80099f2:	e7d2      	b.n	800999a <_vfiprintf_r+0xc6>
 80099f4:	9b03      	ldr	r3, [sp, #12]
 80099f6:	1d19      	adds	r1, r3, #4
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	9103      	str	r1, [sp, #12]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	bfbb      	ittet	lt
 8009a00:	425b      	neglt	r3, r3
 8009a02:	f042 0202 	orrlt.w	r2, r2, #2
 8009a06:	9307      	strge	r3, [sp, #28]
 8009a08:	9307      	strlt	r3, [sp, #28]
 8009a0a:	bfb8      	it	lt
 8009a0c:	9204      	strlt	r2, [sp, #16]
 8009a0e:	7823      	ldrb	r3, [r4, #0]
 8009a10:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a12:	d10a      	bne.n	8009a2a <_vfiprintf_r+0x156>
 8009a14:	7863      	ldrb	r3, [r4, #1]
 8009a16:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a18:	d132      	bne.n	8009a80 <_vfiprintf_r+0x1ac>
 8009a1a:	9b03      	ldr	r3, [sp, #12]
 8009a1c:	1d1a      	adds	r2, r3, #4
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	9203      	str	r2, [sp, #12]
 8009a22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a26:	3402      	adds	r4, #2
 8009a28:	9305      	str	r3, [sp, #20]
 8009a2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b00 <_vfiprintf_r+0x22c>
 8009a2e:	7821      	ldrb	r1, [r4, #0]
 8009a30:	2203      	movs	r2, #3
 8009a32:	4650      	mov	r0, sl
 8009a34:	f7f6 fbcc 	bl	80001d0 <memchr>
 8009a38:	b138      	cbz	r0, 8009a4a <_vfiprintf_r+0x176>
 8009a3a:	9b04      	ldr	r3, [sp, #16]
 8009a3c:	eba0 000a 	sub.w	r0, r0, sl
 8009a40:	2240      	movs	r2, #64	@ 0x40
 8009a42:	4082      	lsls	r2, r0
 8009a44:	4313      	orrs	r3, r2
 8009a46:	3401      	adds	r4, #1
 8009a48:	9304      	str	r3, [sp, #16]
 8009a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a4e:	4829      	ldr	r0, [pc, #164]	@ (8009af4 <_vfiprintf_r+0x220>)
 8009a50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a54:	2206      	movs	r2, #6
 8009a56:	f7f6 fbbb 	bl	80001d0 <memchr>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d03f      	beq.n	8009ade <_vfiprintf_r+0x20a>
 8009a5e:	4b26      	ldr	r3, [pc, #152]	@ (8009af8 <_vfiprintf_r+0x224>)
 8009a60:	bb1b      	cbnz	r3, 8009aaa <_vfiprintf_r+0x1d6>
 8009a62:	9b03      	ldr	r3, [sp, #12]
 8009a64:	3307      	adds	r3, #7
 8009a66:	f023 0307 	bic.w	r3, r3, #7
 8009a6a:	3308      	adds	r3, #8
 8009a6c:	9303      	str	r3, [sp, #12]
 8009a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a70:	443b      	add	r3, r7
 8009a72:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a74:	e76a      	b.n	800994c <_vfiprintf_r+0x78>
 8009a76:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	2001      	movs	r0, #1
 8009a7e:	e7a8      	b.n	80099d2 <_vfiprintf_r+0xfe>
 8009a80:	2300      	movs	r3, #0
 8009a82:	3401      	adds	r4, #1
 8009a84:	9305      	str	r3, [sp, #20]
 8009a86:	4619      	mov	r1, r3
 8009a88:	f04f 0c0a 	mov.w	ip, #10
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a92:	3a30      	subs	r2, #48	@ 0x30
 8009a94:	2a09      	cmp	r2, #9
 8009a96:	d903      	bls.n	8009aa0 <_vfiprintf_r+0x1cc>
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d0c6      	beq.n	8009a2a <_vfiprintf_r+0x156>
 8009a9c:	9105      	str	r1, [sp, #20]
 8009a9e:	e7c4      	b.n	8009a2a <_vfiprintf_r+0x156>
 8009aa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e7f0      	b.n	8009a8c <_vfiprintf_r+0x1b8>
 8009aaa:	ab03      	add	r3, sp, #12
 8009aac:	9300      	str	r3, [sp, #0]
 8009aae:	462a      	mov	r2, r5
 8009ab0:	4b12      	ldr	r3, [pc, #72]	@ (8009afc <_vfiprintf_r+0x228>)
 8009ab2:	a904      	add	r1, sp, #16
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	f3af 8000 	nop.w
 8009aba:	4607      	mov	r7, r0
 8009abc:	1c78      	adds	r0, r7, #1
 8009abe:	d1d6      	bne.n	8009a6e <_vfiprintf_r+0x19a>
 8009ac0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ac2:	07d9      	lsls	r1, r3, #31
 8009ac4:	d405      	bmi.n	8009ad2 <_vfiprintf_r+0x1fe>
 8009ac6:	89ab      	ldrh	r3, [r5, #12]
 8009ac8:	059a      	lsls	r2, r3, #22
 8009aca:	d402      	bmi.n	8009ad2 <_vfiprintf_r+0x1fe>
 8009acc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ace:	f7ff fdcf 	bl	8009670 <__retarget_lock_release_recursive>
 8009ad2:	89ab      	ldrh	r3, [r5, #12]
 8009ad4:	065b      	lsls	r3, r3, #25
 8009ad6:	f53f af1f 	bmi.w	8009918 <_vfiprintf_r+0x44>
 8009ada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009adc:	e71e      	b.n	800991c <_vfiprintf_r+0x48>
 8009ade:	ab03      	add	r3, sp, #12
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	462a      	mov	r2, r5
 8009ae4:	4b05      	ldr	r3, [pc, #20]	@ (8009afc <_vfiprintf_r+0x228>)
 8009ae6:	a904      	add	r1, sp, #16
 8009ae8:	4630      	mov	r0, r6
 8009aea:	f000 f879 	bl	8009be0 <_printf_i>
 8009aee:	e7e4      	b.n	8009aba <_vfiprintf_r+0x1e6>
 8009af0:	0800a260 	.word	0x0800a260
 8009af4:	0800a26a 	.word	0x0800a26a
 8009af8:	00000000 	.word	0x00000000
 8009afc:	080098af 	.word	0x080098af
 8009b00:	0800a266 	.word	0x0800a266

08009b04 <_printf_common>:
 8009b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b08:	4616      	mov	r6, r2
 8009b0a:	4698      	mov	r8, r3
 8009b0c:	688a      	ldr	r2, [r1, #8]
 8009b0e:	690b      	ldr	r3, [r1, #16]
 8009b10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b14:	4293      	cmp	r3, r2
 8009b16:	bfb8      	it	lt
 8009b18:	4613      	movlt	r3, r2
 8009b1a:	6033      	str	r3, [r6, #0]
 8009b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b20:	4607      	mov	r7, r0
 8009b22:	460c      	mov	r4, r1
 8009b24:	b10a      	cbz	r2, 8009b2a <_printf_common+0x26>
 8009b26:	3301      	adds	r3, #1
 8009b28:	6033      	str	r3, [r6, #0]
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	0699      	lsls	r1, r3, #26
 8009b2e:	bf42      	ittt	mi
 8009b30:	6833      	ldrmi	r3, [r6, #0]
 8009b32:	3302      	addmi	r3, #2
 8009b34:	6033      	strmi	r3, [r6, #0]
 8009b36:	6825      	ldr	r5, [r4, #0]
 8009b38:	f015 0506 	ands.w	r5, r5, #6
 8009b3c:	d106      	bne.n	8009b4c <_printf_common+0x48>
 8009b3e:	f104 0a19 	add.w	sl, r4, #25
 8009b42:	68e3      	ldr	r3, [r4, #12]
 8009b44:	6832      	ldr	r2, [r6, #0]
 8009b46:	1a9b      	subs	r3, r3, r2
 8009b48:	42ab      	cmp	r3, r5
 8009b4a:	dc26      	bgt.n	8009b9a <_printf_common+0x96>
 8009b4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b50:	6822      	ldr	r2, [r4, #0]
 8009b52:	3b00      	subs	r3, #0
 8009b54:	bf18      	it	ne
 8009b56:	2301      	movne	r3, #1
 8009b58:	0692      	lsls	r2, r2, #26
 8009b5a:	d42b      	bmi.n	8009bb4 <_printf_common+0xb0>
 8009b5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b60:	4641      	mov	r1, r8
 8009b62:	4638      	mov	r0, r7
 8009b64:	47c8      	blx	r9
 8009b66:	3001      	adds	r0, #1
 8009b68:	d01e      	beq.n	8009ba8 <_printf_common+0xa4>
 8009b6a:	6823      	ldr	r3, [r4, #0]
 8009b6c:	6922      	ldr	r2, [r4, #16]
 8009b6e:	f003 0306 	and.w	r3, r3, #6
 8009b72:	2b04      	cmp	r3, #4
 8009b74:	bf02      	ittt	eq
 8009b76:	68e5      	ldreq	r5, [r4, #12]
 8009b78:	6833      	ldreq	r3, [r6, #0]
 8009b7a:	1aed      	subeq	r5, r5, r3
 8009b7c:	68a3      	ldr	r3, [r4, #8]
 8009b7e:	bf0c      	ite	eq
 8009b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b84:	2500      	movne	r5, #0
 8009b86:	4293      	cmp	r3, r2
 8009b88:	bfc4      	itt	gt
 8009b8a:	1a9b      	subgt	r3, r3, r2
 8009b8c:	18ed      	addgt	r5, r5, r3
 8009b8e:	2600      	movs	r6, #0
 8009b90:	341a      	adds	r4, #26
 8009b92:	42b5      	cmp	r5, r6
 8009b94:	d11a      	bne.n	8009bcc <_printf_common+0xc8>
 8009b96:	2000      	movs	r0, #0
 8009b98:	e008      	b.n	8009bac <_printf_common+0xa8>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	4652      	mov	r2, sl
 8009b9e:	4641      	mov	r1, r8
 8009ba0:	4638      	mov	r0, r7
 8009ba2:	47c8      	blx	r9
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	d103      	bne.n	8009bb0 <_printf_common+0xac>
 8009ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb0:	3501      	adds	r5, #1
 8009bb2:	e7c6      	b.n	8009b42 <_printf_common+0x3e>
 8009bb4:	18e1      	adds	r1, r4, r3
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	2030      	movs	r0, #48	@ 0x30
 8009bba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009bbe:	4422      	add	r2, r4
 8009bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009bc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009bc8:	3302      	adds	r3, #2
 8009bca:	e7c7      	b.n	8009b5c <_printf_common+0x58>
 8009bcc:	2301      	movs	r3, #1
 8009bce:	4622      	mov	r2, r4
 8009bd0:	4641      	mov	r1, r8
 8009bd2:	4638      	mov	r0, r7
 8009bd4:	47c8      	blx	r9
 8009bd6:	3001      	adds	r0, #1
 8009bd8:	d0e6      	beq.n	8009ba8 <_printf_common+0xa4>
 8009bda:	3601      	adds	r6, #1
 8009bdc:	e7d9      	b.n	8009b92 <_printf_common+0x8e>
	...

08009be0 <_printf_i>:
 8009be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009be4:	7e0f      	ldrb	r7, [r1, #24]
 8009be6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009be8:	2f78      	cmp	r7, #120	@ 0x78
 8009bea:	4691      	mov	r9, r2
 8009bec:	4680      	mov	r8, r0
 8009bee:	460c      	mov	r4, r1
 8009bf0:	469a      	mov	sl, r3
 8009bf2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009bf6:	d807      	bhi.n	8009c08 <_printf_i+0x28>
 8009bf8:	2f62      	cmp	r7, #98	@ 0x62
 8009bfa:	d80a      	bhi.n	8009c12 <_printf_i+0x32>
 8009bfc:	2f00      	cmp	r7, #0
 8009bfe:	f000 80d2 	beq.w	8009da6 <_printf_i+0x1c6>
 8009c02:	2f58      	cmp	r7, #88	@ 0x58
 8009c04:	f000 80b9 	beq.w	8009d7a <_printf_i+0x19a>
 8009c08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c10:	e03a      	b.n	8009c88 <_printf_i+0xa8>
 8009c12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c16:	2b15      	cmp	r3, #21
 8009c18:	d8f6      	bhi.n	8009c08 <_printf_i+0x28>
 8009c1a:	a101      	add	r1, pc, #4	@ (adr r1, 8009c20 <_printf_i+0x40>)
 8009c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c20:	08009c79 	.word	0x08009c79
 8009c24:	08009c8d 	.word	0x08009c8d
 8009c28:	08009c09 	.word	0x08009c09
 8009c2c:	08009c09 	.word	0x08009c09
 8009c30:	08009c09 	.word	0x08009c09
 8009c34:	08009c09 	.word	0x08009c09
 8009c38:	08009c8d 	.word	0x08009c8d
 8009c3c:	08009c09 	.word	0x08009c09
 8009c40:	08009c09 	.word	0x08009c09
 8009c44:	08009c09 	.word	0x08009c09
 8009c48:	08009c09 	.word	0x08009c09
 8009c4c:	08009d8d 	.word	0x08009d8d
 8009c50:	08009cb7 	.word	0x08009cb7
 8009c54:	08009d47 	.word	0x08009d47
 8009c58:	08009c09 	.word	0x08009c09
 8009c5c:	08009c09 	.word	0x08009c09
 8009c60:	08009daf 	.word	0x08009daf
 8009c64:	08009c09 	.word	0x08009c09
 8009c68:	08009cb7 	.word	0x08009cb7
 8009c6c:	08009c09 	.word	0x08009c09
 8009c70:	08009c09 	.word	0x08009c09
 8009c74:	08009d4f 	.word	0x08009d4f
 8009c78:	6833      	ldr	r3, [r6, #0]
 8009c7a:	1d1a      	adds	r2, r3, #4
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	6032      	str	r2, [r6, #0]
 8009c80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e09d      	b.n	8009dc8 <_printf_i+0x1e8>
 8009c8c:	6833      	ldr	r3, [r6, #0]
 8009c8e:	6820      	ldr	r0, [r4, #0]
 8009c90:	1d19      	adds	r1, r3, #4
 8009c92:	6031      	str	r1, [r6, #0]
 8009c94:	0606      	lsls	r6, r0, #24
 8009c96:	d501      	bpl.n	8009c9c <_printf_i+0xbc>
 8009c98:	681d      	ldr	r5, [r3, #0]
 8009c9a:	e003      	b.n	8009ca4 <_printf_i+0xc4>
 8009c9c:	0645      	lsls	r5, r0, #25
 8009c9e:	d5fb      	bpl.n	8009c98 <_printf_i+0xb8>
 8009ca0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ca4:	2d00      	cmp	r5, #0
 8009ca6:	da03      	bge.n	8009cb0 <_printf_i+0xd0>
 8009ca8:	232d      	movs	r3, #45	@ 0x2d
 8009caa:	426d      	negs	r5, r5
 8009cac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cb0:	4859      	ldr	r0, [pc, #356]	@ (8009e18 <_printf_i+0x238>)
 8009cb2:	230a      	movs	r3, #10
 8009cb4:	e011      	b.n	8009cda <_printf_i+0xfa>
 8009cb6:	6821      	ldr	r1, [r4, #0]
 8009cb8:	6833      	ldr	r3, [r6, #0]
 8009cba:	0608      	lsls	r0, r1, #24
 8009cbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009cc0:	d402      	bmi.n	8009cc8 <_printf_i+0xe8>
 8009cc2:	0649      	lsls	r1, r1, #25
 8009cc4:	bf48      	it	mi
 8009cc6:	b2ad      	uxthmi	r5, r5
 8009cc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009cca:	4853      	ldr	r0, [pc, #332]	@ (8009e18 <_printf_i+0x238>)
 8009ccc:	6033      	str	r3, [r6, #0]
 8009cce:	bf14      	ite	ne
 8009cd0:	230a      	movne	r3, #10
 8009cd2:	2308      	moveq	r3, #8
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009cda:	6866      	ldr	r6, [r4, #4]
 8009cdc:	60a6      	str	r6, [r4, #8]
 8009cde:	2e00      	cmp	r6, #0
 8009ce0:	bfa2      	ittt	ge
 8009ce2:	6821      	ldrge	r1, [r4, #0]
 8009ce4:	f021 0104 	bicge.w	r1, r1, #4
 8009ce8:	6021      	strge	r1, [r4, #0]
 8009cea:	b90d      	cbnz	r5, 8009cf0 <_printf_i+0x110>
 8009cec:	2e00      	cmp	r6, #0
 8009cee:	d04b      	beq.n	8009d88 <_printf_i+0x1a8>
 8009cf0:	4616      	mov	r6, r2
 8009cf2:	fbb5 f1f3 	udiv	r1, r5, r3
 8009cf6:	fb03 5711 	mls	r7, r3, r1, r5
 8009cfa:	5dc7      	ldrb	r7, [r0, r7]
 8009cfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d00:	462f      	mov	r7, r5
 8009d02:	42bb      	cmp	r3, r7
 8009d04:	460d      	mov	r5, r1
 8009d06:	d9f4      	bls.n	8009cf2 <_printf_i+0x112>
 8009d08:	2b08      	cmp	r3, #8
 8009d0a:	d10b      	bne.n	8009d24 <_printf_i+0x144>
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	07df      	lsls	r7, r3, #31
 8009d10:	d508      	bpl.n	8009d24 <_printf_i+0x144>
 8009d12:	6923      	ldr	r3, [r4, #16]
 8009d14:	6861      	ldr	r1, [r4, #4]
 8009d16:	4299      	cmp	r1, r3
 8009d18:	bfde      	ittt	le
 8009d1a:	2330      	movle	r3, #48	@ 0x30
 8009d1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d24:	1b92      	subs	r2, r2, r6
 8009d26:	6122      	str	r2, [r4, #16]
 8009d28:	f8cd a000 	str.w	sl, [sp]
 8009d2c:	464b      	mov	r3, r9
 8009d2e:	aa03      	add	r2, sp, #12
 8009d30:	4621      	mov	r1, r4
 8009d32:	4640      	mov	r0, r8
 8009d34:	f7ff fee6 	bl	8009b04 <_printf_common>
 8009d38:	3001      	adds	r0, #1
 8009d3a:	d14a      	bne.n	8009dd2 <_printf_i+0x1f2>
 8009d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d40:	b004      	add	sp, #16
 8009d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	f043 0320 	orr.w	r3, r3, #32
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	4833      	ldr	r0, [pc, #204]	@ (8009e1c <_printf_i+0x23c>)
 8009d50:	2778      	movs	r7, #120	@ 0x78
 8009d52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	6831      	ldr	r1, [r6, #0]
 8009d5a:	061f      	lsls	r7, r3, #24
 8009d5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d60:	d402      	bmi.n	8009d68 <_printf_i+0x188>
 8009d62:	065f      	lsls	r7, r3, #25
 8009d64:	bf48      	it	mi
 8009d66:	b2ad      	uxthmi	r5, r5
 8009d68:	6031      	str	r1, [r6, #0]
 8009d6a:	07d9      	lsls	r1, r3, #31
 8009d6c:	bf44      	itt	mi
 8009d6e:	f043 0320 	orrmi.w	r3, r3, #32
 8009d72:	6023      	strmi	r3, [r4, #0]
 8009d74:	b11d      	cbz	r5, 8009d7e <_printf_i+0x19e>
 8009d76:	2310      	movs	r3, #16
 8009d78:	e7ac      	b.n	8009cd4 <_printf_i+0xf4>
 8009d7a:	4827      	ldr	r0, [pc, #156]	@ (8009e18 <_printf_i+0x238>)
 8009d7c:	e7e9      	b.n	8009d52 <_printf_i+0x172>
 8009d7e:	6823      	ldr	r3, [r4, #0]
 8009d80:	f023 0320 	bic.w	r3, r3, #32
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	e7f6      	b.n	8009d76 <_printf_i+0x196>
 8009d88:	4616      	mov	r6, r2
 8009d8a:	e7bd      	b.n	8009d08 <_printf_i+0x128>
 8009d8c:	6833      	ldr	r3, [r6, #0]
 8009d8e:	6825      	ldr	r5, [r4, #0]
 8009d90:	6961      	ldr	r1, [r4, #20]
 8009d92:	1d18      	adds	r0, r3, #4
 8009d94:	6030      	str	r0, [r6, #0]
 8009d96:	062e      	lsls	r6, r5, #24
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	d501      	bpl.n	8009da0 <_printf_i+0x1c0>
 8009d9c:	6019      	str	r1, [r3, #0]
 8009d9e:	e002      	b.n	8009da6 <_printf_i+0x1c6>
 8009da0:	0668      	lsls	r0, r5, #25
 8009da2:	d5fb      	bpl.n	8009d9c <_printf_i+0x1bc>
 8009da4:	8019      	strh	r1, [r3, #0]
 8009da6:	2300      	movs	r3, #0
 8009da8:	6123      	str	r3, [r4, #16]
 8009daa:	4616      	mov	r6, r2
 8009dac:	e7bc      	b.n	8009d28 <_printf_i+0x148>
 8009dae:	6833      	ldr	r3, [r6, #0]
 8009db0:	1d1a      	adds	r2, r3, #4
 8009db2:	6032      	str	r2, [r6, #0]
 8009db4:	681e      	ldr	r6, [r3, #0]
 8009db6:	6862      	ldr	r2, [r4, #4]
 8009db8:	2100      	movs	r1, #0
 8009dba:	4630      	mov	r0, r6
 8009dbc:	f7f6 fa08 	bl	80001d0 <memchr>
 8009dc0:	b108      	cbz	r0, 8009dc6 <_printf_i+0x1e6>
 8009dc2:	1b80      	subs	r0, r0, r6
 8009dc4:	6060      	str	r0, [r4, #4]
 8009dc6:	6863      	ldr	r3, [r4, #4]
 8009dc8:	6123      	str	r3, [r4, #16]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dd0:	e7aa      	b.n	8009d28 <_printf_i+0x148>
 8009dd2:	6923      	ldr	r3, [r4, #16]
 8009dd4:	4632      	mov	r2, r6
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	4640      	mov	r0, r8
 8009dda:	47d0      	blx	sl
 8009ddc:	3001      	adds	r0, #1
 8009dde:	d0ad      	beq.n	8009d3c <_printf_i+0x15c>
 8009de0:	6823      	ldr	r3, [r4, #0]
 8009de2:	079b      	lsls	r3, r3, #30
 8009de4:	d413      	bmi.n	8009e0e <_printf_i+0x22e>
 8009de6:	68e0      	ldr	r0, [r4, #12]
 8009de8:	9b03      	ldr	r3, [sp, #12]
 8009dea:	4298      	cmp	r0, r3
 8009dec:	bfb8      	it	lt
 8009dee:	4618      	movlt	r0, r3
 8009df0:	e7a6      	b.n	8009d40 <_printf_i+0x160>
 8009df2:	2301      	movs	r3, #1
 8009df4:	4632      	mov	r2, r6
 8009df6:	4649      	mov	r1, r9
 8009df8:	4640      	mov	r0, r8
 8009dfa:	47d0      	blx	sl
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d09d      	beq.n	8009d3c <_printf_i+0x15c>
 8009e00:	3501      	adds	r5, #1
 8009e02:	68e3      	ldr	r3, [r4, #12]
 8009e04:	9903      	ldr	r1, [sp, #12]
 8009e06:	1a5b      	subs	r3, r3, r1
 8009e08:	42ab      	cmp	r3, r5
 8009e0a:	dcf2      	bgt.n	8009df2 <_printf_i+0x212>
 8009e0c:	e7eb      	b.n	8009de6 <_printf_i+0x206>
 8009e0e:	2500      	movs	r5, #0
 8009e10:	f104 0619 	add.w	r6, r4, #25
 8009e14:	e7f5      	b.n	8009e02 <_printf_i+0x222>
 8009e16:	bf00      	nop
 8009e18:	0800a271 	.word	0x0800a271
 8009e1c:	0800a282 	.word	0x0800a282

08009e20 <__sflush_r>:
 8009e20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e28:	0716      	lsls	r6, r2, #28
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	d454      	bmi.n	8009eda <__sflush_r+0xba>
 8009e30:	684b      	ldr	r3, [r1, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	dc02      	bgt.n	8009e3c <__sflush_r+0x1c>
 8009e36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	dd48      	ble.n	8009ece <__sflush_r+0xae>
 8009e3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e3e:	2e00      	cmp	r6, #0
 8009e40:	d045      	beq.n	8009ece <__sflush_r+0xae>
 8009e42:	2300      	movs	r3, #0
 8009e44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009e48:	682f      	ldr	r7, [r5, #0]
 8009e4a:	6a21      	ldr	r1, [r4, #32]
 8009e4c:	602b      	str	r3, [r5, #0]
 8009e4e:	d030      	beq.n	8009eb2 <__sflush_r+0x92>
 8009e50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009e52:	89a3      	ldrh	r3, [r4, #12]
 8009e54:	0759      	lsls	r1, r3, #29
 8009e56:	d505      	bpl.n	8009e64 <__sflush_r+0x44>
 8009e58:	6863      	ldr	r3, [r4, #4]
 8009e5a:	1ad2      	subs	r2, r2, r3
 8009e5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009e5e:	b10b      	cbz	r3, 8009e64 <__sflush_r+0x44>
 8009e60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009e62:	1ad2      	subs	r2, r2, r3
 8009e64:	2300      	movs	r3, #0
 8009e66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e68:	6a21      	ldr	r1, [r4, #32]
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	47b0      	blx	r6
 8009e6e:	1c43      	adds	r3, r0, #1
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	d106      	bne.n	8009e82 <__sflush_r+0x62>
 8009e74:	6829      	ldr	r1, [r5, #0]
 8009e76:	291d      	cmp	r1, #29
 8009e78:	d82b      	bhi.n	8009ed2 <__sflush_r+0xb2>
 8009e7a:	4a2a      	ldr	r2, [pc, #168]	@ (8009f24 <__sflush_r+0x104>)
 8009e7c:	410a      	asrs	r2, r1
 8009e7e:	07d6      	lsls	r6, r2, #31
 8009e80:	d427      	bmi.n	8009ed2 <__sflush_r+0xb2>
 8009e82:	2200      	movs	r2, #0
 8009e84:	6062      	str	r2, [r4, #4]
 8009e86:	04d9      	lsls	r1, r3, #19
 8009e88:	6922      	ldr	r2, [r4, #16]
 8009e8a:	6022      	str	r2, [r4, #0]
 8009e8c:	d504      	bpl.n	8009e98 <__sflush_r+0x78>
 8009e8e:	1c42      	adds	r2, r0, #1
 8009e90:	d101      	bne.n	8009e96 <__sflush_r+0x76>
 8009e92:	682b      	ldr	r3, [r5, #0]
 8009e94:	b903      	cbnz	r3, 8009e98 <__sflush_r+0x78>
 8009e96:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e9a:	602f      	str	r7, [r5, #0]
 8009e9c:	b1b9      	cbz	r1, 8009ece <__sflush_r+0xae>
 8009e9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ea2:	4299      	cmp	r1, r3
 8009ea4:	d002      	beq.n	8009eac <__sflush_r+0x8c>
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	f7ff fbf2 	bl	8009690 <_free_r>
 8009eac:	2300      	movs	r3, #0
 8009eae:	6363      	str	r3, [r4, #52]	@ 0x34
 8009eb0:	e00d      	b.n	8009ece <__sflush_r+0xae>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	47b0      	blx	r6
 8009eb8:	4602      	mov	r2, r0
 8009eba:	1c50      	adds	r0, r2, #1
 8009ebc:	d1c9      	bne.n	8009e52 <__sflush_r+0x32>
 8009ebe:	682b      	ldr	r3, [r5, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d0c6      	beq.n	8009e52 <__sflush_r+0x32>
 8009ec4:	2b1d      	cmp	r3, #29
 8009ec6:	d001      	beq.n	8009ecc <__sflush_r+0xac>
 8009ec8:	2b16      	cmp	r3, #22
 8009eca:	d11e      	bne.n	8009f0a <__sflush_r+0xea>
 8009ecc:	602f      	str	r7, [r5, #0]
 8009ece:	2000      	movs	r0, #0
 8009ed0:	e022      	b.n	8009f18 <__sflush_r+0xf8>
 8009ed2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ed6:	b21b      	sxth	r3, r3
 8009ed8:	e01b      	b.n	8009f12 <__sflush_r+0xf2>
 8009eda:	690f      	ldr	r7, [r1, #16]
 8009edc:	2f00      	cmp	r7, #0
 8009ede:	d0f6      	beq.n	8009ece <__sflush_r+0xae>
 8009ee0:	0793      	lsls	r3, r2, #30
 8009ee2:	680e      	ldr	r6, [r1, #0]
 8009ee4:	bf08      	it	eq
 8009ee6:	694b      	ldreq	r3, [r1, #20]
 8009ee8:	600f      	str	r7, [r1, #0]
 8009eea:	bf18      	it	ne
 8009eec:	2300      	movne	r3, #0
 8009eee:	eba6 0807 	sub.w	r8, r6, r7
 8009ef2:	608b      	str	r3, [r1, #8]
 8009ef4:	f1b8 0f00 	cmp.w	r8, #0
 8009ef8:	dde9      	ble.n	8009ece <__sflush_r+0xae>
 8009efa:	6a21      	ldr	r1, [r4, #32]
 8009efc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009efe:	4643      	mov	r3, r8
 8009f00:	463a      	mov	r2, r7
 8009f02:	4628      	mov	r0, r5
 8009f04:	47b0      	blx	r6
 8009f06:	2800      	cmp	r0, #0
 8009f08:	dc08      	bgt.n	8009f1c <__sflush_r+0xfc>
 8009f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f12:	81a3      	strh	r3, [r4, #12]
 8009f14:	f04f 30ff 	mov.w	r0, #4294967295
 8009f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f1c:	4407      	add	r7, r0
 8009f1e:	eba8 0800 	sub.w	r8, r8, r0
 8009f22:	e7e7      	b.n	8009ef4 <__sflush_r+0xd4>
 8009f24:	dfbffffe 	.word	0xdfbffffe

08009f28 <_fflush_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	690b      	ldr	r3, [r1, #16]
 8009f2c:	4605      	mov	r5, r0
 8009f2e:	460c      	mov	r4, r1
 8009f30:	b913      	cbnz	r3, 8009f38 <_fflush_r+0x10>
 8009f32:	2500      	movs	r5, #0
 8009f34:	4628      	mov	r0, r5
 8009f36:	bd38      	pop	{r3, r4, r5, pc}
 8009f38:	b118      	cbz	r0, 8009f42 <_fflush_r+0x1a>
 8009f3a:	6a03      	ldr	r3, [r0, #32]
 8009f3c:	b90b      	cbnz	r3, 8009f42 <_fflush_r+0x1a>
 8009f3e:	f7ff fa91 	bl	8009464 <__sinit>
 8009f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d0f3      	beq.n	8009f32 <_fflush_r+0xa>
 8009f4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009f4c:	07d0      	lsls	r0, r2, #31
 8009f4e:	d404      	bmi.n	8009f5a <_fflush_r+0x32>
 8009f50:	0599      	lsls	r1, r3, #22
 8009f52:	d402      	bmi.n	8009f5a <_fflush_r+0x32>
 8009f54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f56:	f7ff fb8a 	bl	800966e <__retarget_lock_acquire_recursive>
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	4621      	mov	r1, r4
 8009f5e:	f7ff ff5f 	bl	8009e20 <__sflush_r>
 8009f62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f64:	07da      	lsls	r2, r3, #31
 8009f66:	4605      	mov	r5, r0
 8009f68:	d4e4      	bmi.n	8009f34 <_fflush_r+0xc>
 8009f6a:	89a3      	ldrh	r3, [r4, #12]
 8009f6c:	059b      	lsls	r3, r3, #22
 8009f6e:	d4e1      	bmi.n	8009f34 <_fflush_r+0xc>
 8009f70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f72:	f7ff fb7d 	bl	8009670 <__retarget_lock_release_recursive>
 8009f76:	e7dd      	b.n	8009f34 <_fflush_r+0xc>

08009f78 <__swbuf_r>:
 8009f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7a:	460e      	mov	r6, r1
 8009f7c:	4614      	mov	r4, r2
 8009f7e:	4605      	mov	r5, r0
 8009f80:	b118      	cbz	r0, 8009f8a <__swbuf_r+0x12>
 8009f82:	6a03      	ldr	r3, [r0, #32]
 8009f84:	b90b      	cbnz	r3, 8009f8a <__swbuf_r+0x12>
 8009f86:	f7ff fa6d 	bl	8009464 <__sinit>
 8009f8a:	69a3      	ldr	r3, [r4, #24]
 8009f8c:	60a3      	str	r3, [r4, #8]
 8009f8e:	89a3      	ldrh	r3, [r4, #12]
 8009f90:	071a      	lsls	r2, r3, #28
 8009f92:	d501      	bpl.n	8009f98 <__swbuf_r+0x20>
 8009f94:	6923      	ldr	r3, [r4, #16]
 8009f96:	b943      	cbnz	r3, 8009faa <__swbuf_r+0x32>
 8009f98:	4621      	mov	r1, r4
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	f000 f82a 	bl	8009ff4 <__swsetup_r>
 8009fa0:	b118      	cbz	r0, 8009faa <__swbuf_r+0x32>
 8009fa2:	f04f 37ff 	mov.w	r7, #4294967295
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	6922      	ldr	r2, [r4, #16]
 8009fae:	1a98      	subs	r0, r3, r2
 8009fb0:	6963      	ldr	r3, [r4, #20]
 8009fb2:	b2f6      	uxtb	r6, r6
 8009fb4:	4283      	cmp	r3, r0
 8009fb6:	4637      	mov	r7, r6
 8009fb8:	dc05      	bgt.n	8009fc6 <__swbuf_r+0x4e>
 8009fba:	4621      	mov	r1, r4
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	f7ff ffb3 	bl	8009f28 <_fflush_r>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d1ed      	bne.n	8009fa2 <__swbuf_r+0x2a>
 8009fc6:	68a3      	ldr	r3, [r4, #8]
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	60a3      	str	r3, [r4, #8]
 8009fcc:	6823      	ldr	r3, [r4, #0]
 8009fce:	1c5a      	adds	r2, r3, #1
 8009fd0:	6022      	str	r2, [r4, #0]
 8009fd2:	701e      	strb	r6, [r3, #0]
 8009fd4:	6962      	ldr	r2, [r4, #20]
 8009fd6:	1c43      	adds	r3, r0, #1
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d004      	beq.n	8009fe6 <__swbuf_r+0x6e>
 8009fdc:	89a3      	ldrh	r3, [r4, #12]
 8009fde:	07db      	lsls	r3, r3, #31
 8009fe0:	d5e1      	bpl.n	8009fa6 <__swbuf_r+0x2e>
 8009fe2:	2e0a      	cmp	r6, #10
 8009fe4:	d1df      	bne.n	8009fa6 <__swbuf_r+0x2e>
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	4628      	mov	r0, r5
 8009fea:	f7ff ff9d 	bl	8009f28 <_fflush_r>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d0d9      	beq.n	8009fa6 <__swbuf_r+0x2e>
 8009ff2:	e7d6      	b.n	8009fa2 <__swbuf_r+0x2a>

08009ff4 <__swsetup_r>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	4b29      	ldr	r3, [pc, #164]	@ (800a09c <__swsetup_r+0xa8>)
 8009ff8:	4605      	mov	r5, r0
 8009ffa:	6818      	ldr	r0, [r3, #0]
 8009ffc:	460c      	mov	r4, r1
 8009ffe:	b118      	cbz	r0, 800a008 <__swsetup_r+0x14>
 800a000:	6a03      	ldr	r3, [r0, #32]
 800a002:	b90b      	cbnz	r3, 800a008 <__swsetup_r+0x14>
 800a004:	f7ff fa2e 	bl	8009464 <__sinit>
 800a008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a00c:	0719      	lsls	r1, r3, #28
 800a00e:	d422      	bmi.n	800a056 <__swsetup_r+0x62>
 800a010:	06da      	lsls	r2, r3, #27
 800a012:	d407      	bmi.n	800a024 <__swsetup_r+0x30>
 800a014:	2209      	movs	r2, #9
 800a016:	602a      	str	r2, [r5, #0]
 800a018:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a01c:	81a3      	strh	r3, [r4, #12]
 800a01e:	f04f 30ff 	mov.w	r0, #4294967295
 800a022:	e033      	b.n	800a08c <__swsetup_r+0x98>
 800a024:	0758      	lsls	r0, r3, #29
 800a026:	d512      	bpl.n	800a04e <__swsetup_r+0x5a>
 800a028:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a02a:	b141      	cbz	r1, 800a03e <__swsetup_r+0x4a>
 800a02c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a030:	4299      	cmp	r1, r3
 800a032:	d002      	beq.n	800a03a <__swsetup_r+0x46>
 800a034:	4628      	mov	r0, r5
 800a036:	f7ff fb2b 	bl	8009690 <_free_r>
 800a03a:	2300      	movs	r3, #0
 800a03c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a03e:	89a3      	ldrh	r3, [r4, #12]
 800a040:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a044:	81a3      	strh	r3, [r4, #12]
 800a046:	2300      	movs	r3, #0
 800a048:	6063      	str	r3, [r4, #4]
 800a04a:	6923      	ldr	r3, [r4, #16]
 800a04c:	6023      	str	r3, [r4, #0]
 800a04e:	89a3      	ldrh	r3, [r4, #12]
 800a050:	f043 0308 	orr.w	r3, r3, #8
 800a054:	81a3      	strh	r3, [r4, #12]
 800a056:	6923      	ldr	r3, [r4, #16]
 800a058:	b94b      	cbnz	r3, 800a06e <__swsetup_r+0x7a>
 800a05a:	89a3      	ldrh	r3, [r4, #12]
 800a05c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a064:	d003      	beq.n	800a06e <__swsetup_r+0x7a>
 800a066:	4621      	mov	r1, r4
 800a068:	4628      	mov	r0, r5
 800a06a:	f000 f84f 	bl	800a10c <__smakebuf_r>
 800a06e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a072:	f013 0201 	ands.w	r2, r3, #1
 800a076:	d00a      	beq.n	800a08e <__swsetup_r+0x9a>
 800a078:	2200      	movs	r2, #0
 800a07a:	60a2      	str	r2, [r4, #8]
 800a07c:	6962      	ldr	r2, [r4, #20]
 800a07e:	4252      	negs	r2, r2
 800a080:	61a2      	str	r2, [r4, #24]
 800a082:	6922      	ldr	r2, [r4, #16]
 800a084:	b942      	cbnz	r2, 800a098 <__swsetup_r+0xa4>
 800a086:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a08a:	d1c5      	bne.n	800a018 <__swsetup_r+0x24>
 800a08c:	bd38      	pop	{r3, r4, r5, pc}
 800a08e:	0799      	lsls	r1, r3, #30
 800a090:	bf58      	it	pl
 800a092:	6962      	ldrpl	r2, [r4, #20]
 800a094:	60a2      	str	r2, [r4, #8]
 800a096:	e7f4      	b.n	800a082 <__swsetup_r+0x8e>
 800a098:	2000      	movs	r0, #0
 800a09a:	e7f7      	b.n	800a08c <__swsetup_r+0x98>
 800a09c:	20000018 	.word	0x20000018

0800a0a0 <_sbrk_r>:
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	4d06      	ldr	r5, [pc, #24]	@ (800a0bc <_sbrk_r+0x1c>)
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	4608      	mov	r0, r1
 800a0aa:	602b      	str	r3, [r5, #0]
 800a0ac:	f7f8 fb00 	bl	80026b0 <_sbrk>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d102      	bne.n	800a0ba <_sbrk_r+0x1a>
 800a0b4:	682b      	ldr	r3, [r5, #0]
 800a0b6:	b103      	cbz	r3, 800a0ba <_sbrk_r+0x1a>
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	bd38      	pop	{r3, r4, r5, pc}
 800a0bc:	2000065c 	.word	0x2000065c

0800a0c0 <__swhatbuf_r>:
 800a0c0:	b570      	push	{r4, r5, r6, lr}
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0c8:	2900      	cmp	r1, #0
 800a0ca:	b096      	sub	sp, #88	@ 0x58
 800a0cc:	4615      	mov	r5, r2
 800a0ce:	461e      	mov	r6, r3
 800a0d0:	da0d      	bge.n	800a0ee <__swhatbuf_r+0x2e>
 800a0d2:	89a3      	ldrh	r3, [r4, #12]
 800a0d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a0d8:	f04f 0100 	mov.w	r1, #0
 800a0dc:	bf14      	ite	ne
 800a0de:	2340      	movne	r3, #64	@ 0x40
 800a0e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	6031      	str	r1, [r6, #0]
 800a0e8:	602b      	str	r3, [r5, #0]
 800a0ea:	b016      	add	sp, #88	@ 0x58
 800a0ec:	bd70      	pop	{r4, r5, r6, pc}
 800a0ee:	466a      	mov	r2, sp
 800a0f0:	f000 f848 	bl	800a184 <_fstat_r>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	dbec      	blt.n	800a0d2 <__swhatbuf_r+0x12>
 800a0f8:	9901      	ldr	r1, [sp, #4]
 800a0fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a0fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a102:	4259      	negs	r1, r3
 800a104:	4159      	adcs	r1, r3
 800a106:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a10a:	e7eb      	b.n	800a0e4 <__swhatbuf_r+0x24>

0800a10c <__smakebuf_r>:
 800a10c:	898b      	ldrh	r3, [r1, #12]
 800a10e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a110:	079d      	lsls	r5, r3, #30
 800a112:	4606      	mov	r6, r0
 800a114:	460c      	mov	r4, r1
 800a116:	d507      	bpl.n	800a128 <__smakebuf_r+0x1c>
 800a118:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a11c:	6023      	str	r3, [r4, #0]
 800a11e:	6123      	str	r3, [r4, #16]
 800a120:	2301      	movs	r3, #1
 800a122:	6163      	str	r3, [r4, #20]
 800a124:	b003      	add	sp, #12
 800a126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a128:	ab01      	add	r3, sp, #4
 800a12a:	466a      	mov	r2, sp
 800a12c:	f7ff ffc8 	bl	800a0c0 <__swhatbuf_r>
 800a130:	9f00      	ldr	r7, [sp, #0]
 800a132:	4605      	mov	r5, r0
 800a134:	4639      	mov	r1, r7
 800a136:	4630      	mov	r0, r6
 800a138:	f7ff fb16 	bl	8009768 <_malloc_r>
 800a13c:	b948      	cbnz	r0, 800a152 <__smakebuf_r+0x46>
 800a13e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a142:	059a      	lsls	r2, r3, #22
 800a144:	d4ee      	bmi.n	800a124 <__smakebuf_r+0x18>
 800a146:	f023 0303 	bic.w	r3, r3, #3
 800a14a:	f043 0302 	orr.w	r3, r3, #2
 800a14e:	81a3      	strh	r3, [r4, #12]
 800a150:	e7e2      	b.n	800a118 <__smakebuf_r+0xc>
 800a152:	89a3      	ldrh	r3, [r4, #12]
 800a154:	6020      	str	r0, [r4, #0]
 800a156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a15a:	81a3      	strh	r3, [r4, #12]
 800a15c:	9b01      	ldr	r3, [sp, #4]
 800a15e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a162:	b15b      	cbz	r3, 800a17c <__smakebuf_r+0x70>
 800a164:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a168:	4630      	mov	r0, r6
 800a16a:	f000 f81d 	bl	800a1a8 <_isatty_r>
 800a16e:	b128      	cbz	r0, 800a17c <__smakebuf_r+0x70>
 800a170:	89a3      	ldrh	r3, [r4, #12]
 800a172:	f023 0303 	bic.w	r3, r3, #3
 800a176:	f043 0301 	orr.w	r3, r3, #1
 800a17a:	81a3      	strh	r3, [r4, #12]
 800a17c:	89a3      	ldrh	r3, [r4, #12]
 800a17e:	431d      	orrs	r5, r3
 800a180:	81a5      	strh	r5, [r4, #12]
 800a182:	e7cf      	b.n	800a124 <__smakebuf_r+0x18>

0800a184 <_fstat_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	4d07      	ldr	r5, [pc, #28]	@ (800a1a4 <_fstat_r+0x20>)
 800a188:	2300      	movs	r3, #0
 800a18a:	4604      	mov	r4, r0
 800a18c:	4608      	mov	r0, r1
 800a18e:	4611      	mov	r1, r2
 800a190:	602b      	str	r3, [r5, #0]
 800a192:	f7f8 fa64 	bl	800265e <_fstat>
 800a196:	1c43      	adds	r3, r0, #1
 800a198:	d102      	bne.n	800a1a0 <_fstat_r+0x1c>
 800a19a:	682b      	ldr	r3, [r5, #0]
 800a19c:	b103      	cbz	r3, 800a1a0 <_fstat_r+0x1c>
 800a19e:	6023      	str	r3, [r4, #0]
 800a1a0:	bd38      	pop	{r3, r4, r5, pc}
 800a1a2:	bf00      	nop
 800a1a4:	2000065c 	.word	0x2000065c

0800a1a8 <_isatty_r>:
 800a1a8:	b538      	push	{r3, r4, r5, lr}
 800a1aa:	4d06      	ldr	r5, [pc, #24]	@ (800a1c4 <_isatty_r+0x1c>)
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	4608      	mov	r0, r1
 800a1b2:	602b      	str	r3, [r5, #0]
 800a1b4:	f7f8 fa63 	bl	800267e <_isatty>
 800a1b8:	1c43      	adds	r3, r0, #1
 800a1ba:	d102      	bne.n	800a1c2 <_isatty_r+0x1a>
 800a1bc:	682b      	ldr	r3, [r5, #0]
 800a1be:	b103      	cbz	r3, 800a1c2 <_isatty_r+0x1a>
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	bd38      	pop	{r3, r4, r5, pc}
 800a1c4:	2000065c 	.word	0x2000065c

0800a1c8 <_init>:
 800a1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ca:	bf00      	nop
 800a1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ce:	bc08      	pop	{r3}
 800a1d0:	469e      	mov	lr, r3
 800a1d2:	4770      	bx	lr

0800a1d4 <_fini>:
 800a1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d6:	bf00      	nop
 800a1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1da:	bc08      	pop	{r3}
 800a1dc:	469e      	mov	lr, r3
 800a1de:	4770      	bx	lr
