
SCUTTLE_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a674  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800a804  0800a804  0000b804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8b8  0800a8b8  0000c078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8b8  0800a8b8  0000b8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8c0  0800a8c0  0000c078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8c0  0800a8c0  0000b8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a8c4  0800a8c4  0000b8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800a8c8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  20000078  0800a940  0000c078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  0800a940  0000c6bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d66a  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c89  00000000  00000000  00029712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001860  00000000  00000000  0002d3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012fe  00000000  00000000  0002ec00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291d7  00000000  00000000  0002fefe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020e77  00000000  00000000  000590d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9c71  00000000  00000000  00079f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00173bbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f54  00000000  00000000  00173c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0017ab54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a7ec 	.word	0x0800a7ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800a7ec 	.word	0x0800a7ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2f>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000844:	bf24      	itt	cs
 8000846:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800084a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800084e:	d90d      	bls.n	800086c <__aeabi_d2f+0x30>
 8000850:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000854:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000858:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800085c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000860:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000864:	bf08      	it	eq
 8000866:	f020 0001 	biceq.w	r0, r0, #1
 800086a:	4770      	bx	lr
 800086c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000870:	d121      	bne.n	80008b6 <__aeabi_d2f+0x7a>
 8000872:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000876:	bfbc      	itt	lt
 8000878:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800087c:	4770      	bxlt	lr
 800087e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000882:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000886:	f1c2 0218 	rsb	r2, r2, #24
 800088a:	f1c2 0c20 	rsb	ip, r2, #32
 800088e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000892:	fa20 f002 	lsr.w	r0, r0, r2
 8000896:	bf18      	it	ne
 8000898:	f040 0001 	orrne.w	r0, r0, #1
 800089c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008a8:	ea40 000c 	orr.w	r0, r0, ip
 80008ac:	fa23 f302 	lsr.w	r3, r3, r2
 80008b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b4:	e7cc      	b.n	8000850 <__aeabi_d2f+0x14>
 80008b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ba:	d107      	bne.n	80008cc <__aeabi_d2f+0x90>
 80008bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c0:	bf1e      	ittt	ne
 80008c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008ca:	4770      	bxne	lr
 80008cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295
 80008f0:	f000 b96a 	b.w	8000bc8 <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	460c      	mov	r4, r1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d14e      	bne.n	80009b6 <__udivmoddi4+0xaa>
 8000918:	4694      	mov	ip, r2
 800091a:	458c      	cmp	ip, r1
 800091c:	4686      	mov	lr, r0
 800091e:	fab2 f282 	clz	r2, r2
 8000922:	d962      	bls.n	80009ea <__udivmoddi4+0xde>
 8000924:	b14a      	cbz	r2, 800093a <__udivmoddi4+0x2e>
 8000926:	f1c2 0320 	rsb	r3, r2, #32
 800092a:	4091      	lsls	r1, r2
 800092c:	fa20 f303 	lsr.w	r3, r0, r3
 8000930:	fa0c fc02 	lsl.w	ip, ip, r2
 8000934:	4319      	orrs	r1, r3
 8000936:	fa00 fe02 	lsl.w	lr, r0, r2
 800093a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800093e:	fa1f f68c 	uxth.w	r6, ip
 8000942:	fbb1 f4f7 	udiv	r4, r1, r7
 8000946:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800094a:	fb07 1114 	mls	r1, r7, r4, r1
 800094e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000952:	fb04 f106 	mul.w	r1, r4, r6
 8000956:	4299      	cmp	r1, r3
 8000958:	d90a      	bls.n	8000970 <__udivmoddi4+0x64>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000962:	f080 8112 	bcs.w	8000b8a <__udivmoddi4+0x27e>
 8000966:	4299      	cmp	r1, r3
 8000968:	f240 810f 	bls.w	8000b8a <__udivmoddi4+0x27e>
 800096c:	3c02      	subs	r4, #2
 800096e:	4463      	add	r3, ip
 8000970:	1a59      	subs	r1, r3, r1
 8000972:	fa1f f38e 	uxth.w	r3, lr
 8000976:	fbb1 f0f7 	udiv	r0, r1, r7
 800097a:	fb07 1110 	mls	r1, r7, r0, r1
 800097e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000982:	fb00 f606 	mul.w	r6, r0, r6
 8000986:	429e      	cmp	r6, r3
 8000988:	d90a      	bls.n	80009a0 <__udivmoddi4+0x94>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000992:	f080 80fc 	bcs.w	8000b8e <__udivmoddi4+0x282>
 8000996:	429e      	cmp	r6, r3
 8000998:	f240 80f9 	bls.w	8000b8e <__udivmoddi4+0x282>
 800099c:	4463      	add	r3, ip
 800099e:	3802      	subs	r0, #2
 80009a0:	1b9b      	subs	r3, r3, r6
 80009a2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009a6:	2100      	movs	r1, #0
 80009a8:	b11d      	cbz	r5, 80009b2 <__udivmoddi4+0xa6>
 80009aa:	40d3      	lsrs	r3, r2
 80009ac:	2200      	movs	r2, #0
 80009ae:	e9c5 3200 	strd	r3, r2, [r5]
 80009b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b6:	428b      	cmp	r3, r1
 80009b8:	d905      	bls.n	80009c6 <__udivmoddi4+0xba>
 80009ba:	b10d      	cbz	r5, 80009c0 <__udivmoddi4+0xb4>
 80009bc:	e9c5 0100 	strd	r0, r1, [r5]
 80009c0:	2100      	movs	r1, #0
 80009c2:	4608      	mov	r0, r1
 80009c4:	e7f5      	b.n	80009b2 <__udivmoddi4+0xa6>
 80009c6:	fab3 f183 	clz	r1, r3
 80009ca:	2900      	cmp	r1, #0
 80009cc:	d146      	bne.n	8000a5c <__udivmoddi4+0x150>
 80009ce:	42a3      	cmp	r3, r4
 80009d0:	d302      	bcc.n	80009d8 <__udivmoddi4+0xcc>
 80009d2:	4290      	cmp	r0, r2
 80009d4:	f0c0 80f0 	bcc.w	8000bb8 <__udivmoddi4+0x2ac>
 80009d8:	1a86      	subs	r6, r0, r2
 80009da:	eb64 0303 	sbc.w	r3, r4, r3
 80009de:	2001      	movs	r0, #1
 80009e0:	2d00      	cmp	r5, #0
 80009e2:	d0e6      	beq.n	80009b2 <__udivmoddi4+0xa6>
 80009e4:	e9c5 6300 	strd	r6, r3, [r5]
 80009e8:	e7e3      	b.n	80009b2 <__udivmoddi4+0xa6>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	f040 8090 	bne.w	8000b10 <__udivmoddi4+0x204>
 80009f0:	eba1 040c 	sub.w	r4, r1, ip
 80009f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	2101      	movs	r1, #1
 80009fe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a06:	fb08 4416 	mls	r4, r8, r6, r4
 8000a0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a0e:	fb07 f006 	mul.w	r0, r7, r6
 8000a12:	4298      	cmp	r0, r3
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x11c>
 8000a16:	eb1c 0303 	adds.w	r3, ip, r3
 8000a1a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x11a>
 8000a20:	4298      	cmp	r0, r3
 8000a22:	f200 80cd 	bhi.w	8000bc0 <__udivmoddi4+0x2b4>
 8000a26:	4626      	mov	r6, r4
 8000a28:	1a1c      	subs	r4, r3, r0
 8000a2a:	fa1f f38e 	uxth.w	r3, lr
 8000a2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a32:	fb08 4410 	mls	r4, r8, r0, r4
 8000a36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a3a:	fb00 f707 	mul.w	r7, r0, r7
 8000a3e:	429f      	cmp	r7, r3
 8000a40:	d908      	bls.n	8000a54 <__udivmoddi4+0x148>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a4a:	d202      	bcs.n	8000a52 <__udivmoddi4+0x146>
 8000a4c:	429f      	cmp	r7, r3
 8000a4e:	f200 80b0 	bhi.w	8000bb2 <__udivmoddi4+0x2a6>
 8000a52:	4620      	mov	r0, r4
 8000a54:	1bdb      	subs	r3, r3, r7
 8000a56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a5a:	e7a5      	b.n	80009a8 <__udivmoddi4+0x9c>
 8000a5c:	f1c1 0620 	rsb	r6, r1, #32
 8000a60:	408b      	lsls	r3, r1
 8000a62:	fa22 f706 	lsr.w	r7, r2, r6
 8000a66:	431f      	orrs	r7, r3
 8000a68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a70:	ea43 030c 	orr.w	r3, r3, ip
 8000a74:	40f4      	lsrs	r4, r6
 8000a76:	fa00 f801 	lsl.w	r8, r0, r1
 8000a7a:	0c38      	lsrs	r0, r7, #16
 8000a7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a80:	fbb4 fef0 	udiv	lr, r4, r0
 8000a84:	fa1f fc87 	uxth.w	ip, r7
 8000a88:	fb00 441e 	mls	r4, r0, lr, r4
 8000a8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a90:	fb0e f90c 	mul.w	r9, lr, ip
 8000a94:	45a1      	cmp	r9, r4
 8000a96:	fa02 f201 	lsl.w	r2, r2, r1
 8000a9a:	d90a      	bls.n	8000ab2 <__udivmoddi4+0x1a6>
 8000a9c:	193c      	adds	r4, r7, r4
 8000a9e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000aa2:	f080 8084 	bcs.w	8000bae <__udivmoddi4+0x2a2>
 8000aa6:	45a1      	cmp	r9, r4
 8000aa8:	f240 8081 	bls.w	8000bae <__udivmoddi4+0x2a2>
 8000aac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ab0:	443c      	add	r4, r7
 8000ab2:	eba4 0409 	sub.w	r4, r4, r9
 8000ab6:	fa1f f983 	uxth.w	r9, r3
 8000aba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000abe:	fb00 4413 	mls	r4, r0, r3, r4
 8000ac2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ac6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aca:	45a4      	cmp	ip, r4
 8000acc:	d907      	bls.n	8000ade <__udivmoddi4+0x1d2>
 8000ace:	193c      	adds	r4, r7, r4
 8000ad0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ad4:	d267      	bcs.n	8000ba6 <__udivmoddi4+0x29a>
 8000ad6:	45a4      	cmp	ip, r4
 8000ad8:	d965      	bls.n	8000ba6 <__udivmoddi4+0x29a>
 8000ada:	3b02      	subs	r3, #2
 8000adc:	443c      	add	r4, r7
 8000ade:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ae2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ae6:	eba4 040c 	sub.w	r4, r4, ip
 8000aea:	429c      	cmp	r4, r3
 8000aec:	46ce      	mov	lr, r9
 8000aee:	469c      	mov	ip, r3
 8000af0:	d351      	bcc.n	8000b96 <__udivmoddi4+0x28a>
 8000af2:	d04e      	beq.n	8000b92 <__udivmoddi4+0x286>
 8000af4:	b155      	cbz	r5, 8000b0c <__udivmoddi4+0x200>
 8000af6:	ebb8 030e 	subs.w	r3, r8, lr
 8000afa:	eb64 040c 	sbc.w	r4, r4, ip
 8000afe:	fa04 f606 	lsl.w	r6, r4, r6
 8000b02:	40cb      	lsrs	r3, r1
 8000b04:	431e      	orrs	r6, r3
 8000b06:	40cc      	lsrs	r4, r1
 8000b08:	e9c5 6400 	strd	r6, r4, [r5]
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	e750      	b.n	80009b2 <__udivmoddi4+0xa6>
 8000b10:	f1c2 0320 	rsb	r3, r2, #32
 8000b14:	fa20 f103 	lsr.w	r1, r0, r3
 8000b18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b20:	4094      	lsls	r4, r2
 8000b22:	430c      	orrs	r4, r1
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2c:	fa1f f78c 	uxth.w	r7, ip
 8000b30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b34:	fb08 3110 	mls	r1, r8, r0, r3
 8000b38:	0c23      	lsrs	r3, r4, #16
 8000b3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3e:	fb00 f107 	mul.w	r1, r0, r7
 8000b42:	4299      	cmp	r1, r3
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x24c>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b4e:	d22c      	bcs.n	8000baa <__udivmoddi4+0x29e>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	d92a      	bls.n	8000baa <__udivmoddi4+0x29e>
 8000b54:	3802      	subs	r0, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b60:	fb08 3311 	mls	r3, r8, r1, r3
 8000b64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b68:	fb01 f307 	mul.w	r3, r1, r7
 8000b6c:	42a3      	cmp	r3, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x276>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b78:	d213      	bcs.n	8000ba2 <__udivmoddi4+0x296>
 8000b7a:	42a3      	cmp	r3, r4
 8000b7c:	d911      	bls.n	8000ba2 <__udivmoddi4+0x296>
 8000b7e:	3902      	subs	r1, #2
 8000b80:	4464      	add	r4, ip
 8000b82:	1ae4      	subs	r4, r4, r3
 8000b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b88:	e739      	b.n	80009fe <__udivmoddi4+0xf2>
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	e6f0      	b.n	8000970 <__udivmoddi4+0x64>
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e706      	b.n	80009a0 <__udivmoddi4+0x94>
 8000b92:	45c8      	cmp	r8, r9
 8000b94:	d2ae      	bcs.n	8000af4 <__udivmoddi4+0x1e8>
 8000b96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b9e:	3801      	subs	r0, #1
 8000ba0:	e7a8      	b.n	8000af4 <__udivmoddi4+0x1e8>
 8000ba2:	4631      	mov	r1, r6
 8000ba4:	e7ed      	b.n	8000b82 <__udivmoddi4+0x276>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	e799      	b.n	8000ade <__udivmoddi4+0x1d2>
 8000baa:	4630      	mov	r0, r6
 8000bac:	e7d4      	b.n	8000b58 <__udivmoddi4+0x24c>
 8000bae:	46d6      	mov	lr, sl
 8000bb0:	e77f      	b.n	8000ab2 <__udivmoddi4+0x1a6>
 8000bb2:	4463      	add	r3, ip
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	e74d      	b.n	8000a54 <__udivmoddi4+0x148>
 8000bb8:	4606      	mov	r6, r0
 8000bba:	4623      	mov	r3, r4
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e70f      	b.n	80009e0 <__udivmoddi4+0xd4>
 8000bc0:	3e02      	subs	r6, #2
 8000bc2:	4463      	add	r3, ip
 8000bc4:	e730      	b.n	8000a28 <__udivmoddi4+0x11c>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_idiv0>:
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <Delay_us>:
/**
 * @brief Delay function to wait for a specified number of microseconds.
 * @param Timer Timer handle for the timer used for delay.
 * @param us Microseconds to delay.
 */
void Delay_us(TIM_HandleTypeDef Timer, uint16_t us) {
 8000bcc:	b084      	sub	sp, #16
 8000bce:	b490      	push	{r4, r7}
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	f107 0408 	add.w	r4, r7, #8
 8000bd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    __HAL_TIM_SET_COUNTER(&Timer, 0);  // Reset the timer counter
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&Timer) < us);  // Wait until the timer counter reaches the specified microseconds
 8000be0:	bf00      	nop
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000be6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d3f9      	bcc.n	8000be2 <Delay_us+0x16>
}
 8000bee:	bf00      	nop
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc90      	pop	{r4, r7}
 8000bf6:	b004      	add	sp, #16
 8000bf8:	4770      	bx	lr
	...

08000bfc <read_encoder>:
 * @brief Read encoder value
 * @param[in] encoder A pointer to a structure (encoder_t) containing encoder-related data such as position, velocity, and the last counter value.
 * @param[in] htim A pointer to the timer handle used to read the counter value.
 * @details This function reads a timer setup in encoder mode and finds position and velocity, accounting for overflow and direction change.
 */
void read_encoder(encoder_t *encoder) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

	//initialize internal variables
    uint32_t current_counter = __HAL_TIM_GET_COUNTER(encoder->htim); //Inverted due to wiring
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0c:	613b      	str	r3, [r7, #16]
    int32_t velocity_change;
    float delta_t;
    float current_tick = HAL_GetTick();
 8000c0e:	f002 fc0f 	bl	8003430 <HAL_GetTick>
 8000c12:	ee07 0a90 	vmov	s15, r0
 8000c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c1a:	edc7 7a03 	vstr	s15, [r7, #12]

	// Calculate velocity change
	if (current_counter >= encoder->last_counter_value) {
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d305      	bcc.n	8000c34 <read_encoder+0x38>
		velocity_change = current_counter - encoder->last_counter_value; //Velocity has units of counts per timer tick
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	e014      	b.n	8000c5e <read_encoder+0x62>
	} else {
		velocity_change = __HAL_TIM_GET_AUTORELOAD(encoder->htim) - encoder->last_counter_value + current_counter;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	1ad2      	subs	r2, r2, r3
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	4413      	add	r3, r2
 8000c46:	617b      	str	r3, [r7, #20]
		if (!__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) { //If encoder is rotating in other direction
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	2b10      	cmp	r3, #16
 8000c56:	d002      	beq.n	8000c5e <read_encoder+0x62>
			velocity_change *= -1; // Invert for counting down mode
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	425b      	negs	r3, r3
 8000c5c:	617b      	str	r3, [r7, #20]
		}
	}
	// Update position and store last counter value
	encoder->position += velocity_change;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	441a      	add	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	609a      	str	r2, [r3, #8]
	encoder->last_counter_value = current_counter;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	60da      	str	r2, [r3, #12]

	delta_t = (current_tick > encoder->last_tick) ? ((current_tick - encoder->last_tick)/1000) : 1; //how much time(ms) elapsed since last run
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	691b      	ldr	r3, [r3, #16]
 8000c74:	ee07 3a90 	vmov	s15, r3
 8000c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c88:	dd0e      	ble.n	8000ca8 <read_encoder+0xac>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	691b      	ldr	r3, [r3, #16]
 8000c8e:	ee07 3a90 	vmov	s15, r3
 8000c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c96:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c9e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000ce8 <read_encoder+0xec>
 8000ca2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ca6:	e001      	b.n	8000cac <read_encoder+0xb0>
 8000ca8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8000cac:	edc7 7a02 	vstr	s15, [r7, #8]
    encoder->velocity = (int16_t)(velocity_change / delta_t); //units of encoder counts / s
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	ee07 3a90 	vmov	s15, r3
 8000cb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cba:	ed97 7a02 	vldr	s14, [r7, #8]
 8000cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cc6:	ee17 3a90 	vmov	r3, s15
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	809a      	strh	r2, [r3, #4]
    encoder->last_tick = current_tick;
 8000cd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cd8:	ee17 2a90 	vmov	r2, s15
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	611a      	str	r2, [r3, #16]


}
 8000ce0:	bf00      	nop
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	447a0000 	.word	0x447a0000

08000cec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cf4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000cf8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d013      	beq.n	8000d2c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d04:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d08:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000d0c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d00b      	beq.n	8000d2c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d14:	e000      	b.n	8000d18 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d16:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d18:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d0f9      	beq.n	8000d16 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d22:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d2c:	687b      	ldr	r3, [r7, #4]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <main>:
/**
  * @brief  Main function
  * @retval int
  */
int main(void)
{
 8000d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3e:	b0e3      	sub	sp, #396	@ 0x18c
 8000d40:	af5e      	add	r7, sp, #376	@ 0x178
  uint8_t task = 0;       /**< State variable for main loop */
 8000d42:	2300      	movs	r3, #0
 8000d44:	73fb      	strb	r3, [r7, #15]
  uint8_t T1State = 0;    /**< Task 1 State */
 8000d46:	2300      	movs	r3, #0
 8000d48:	73bb      	strb	r3, [r7, #14]
  uint8_t T2State = 0;    /**< Task 2 State */
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	737b      	strb	r3, [r7, #13]
  uint8_t T4State = 0;    /**< Task 4 State */
 8000d4e:	2300      	movs	r3, #0
 8000d50:	733b      	strb	r3, [r7, #12]
  uint8_t T5State = 0;    /**< Task 5 State */
 8000d52:	2300      	movs	r3, #0
 8000d54:	72fb      	strb	r3, [r7, #11]
  uint8_t T6State = 0;    /**< Task 6 State */
 8000d56:	2300      	movs	r3, #0
 8000d58:	72bb      	strb	r3, [r7, #10]

  uint8_t DriveON_Rad = 1; /**< Radio Drive ON */
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	727b      	strb	r3, [r7, #9]
  uint8_t ArmON = 1;       /**< Arm Motor ON */
 8000d5e:	2301      	movs	r3, #1
 8000d60:	723b      	strb	r3, [r7, #8]

  uint8_t Follow = 1;      /**< Follow mode */
 8000d62:	2301      	movs	r3, #1
 8000d64:	71fb      	strb	r3, [r7, #7]

  uint8_t OpenMV = 1;      /**< OpenMV flag */
 8000d66:	2301      	movs	r3, #1
 8000d68:	71bb      	strb	r3, [r7, #6]

  uint8_t BatKill = 0;     /**< Kill switch states */
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	717b      	strb	r3, [r7, #5]
  uint8_t RadKill = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	713b      	strb	r3, [r7, #4]

  HAL_Init();  // Initialize HAL
 8000d72:	f002 faf4 	bl	800335e <HAL_Init>

  SystemClock_Config();  // Configure system clock
 8000d76:	f000 f91b 	bl	8000fb0 <SystemClock_Config>

  PeriphCommonClock_Config();  // Configure common peripherals clock
 8000d7a:	f000 f968 	bl	800104e <PeriphCommonClock_Config>

  MX_GPIO_Init();       // Initialize GPIO
 8000d7e:	f000 fed5 	bl	8001b2c <MX_GPIO_Init>
  MX_TIM1_Init();       // Initialize TIM1
 8000d82:	f000 fb1d 	bl	80013c0 <MX_TIM1_Init>
  MX_ADC1_Init();       // Initialize ADC1
 8000d86:	f000 f98d 	bl	80010a4 <MX_ADC1_Init>
  MX_ADC2_Init();       // Initialize ADC2
 8000d8a:	f000 fa01 	bl	8001190 <MX_ADC2_Init>
  MX_ADC3_Init();       // Initialize ADC3
 8000d8e:	f000 fa73 	bl	8001278 <MX_ADC3_Init>
  MX_TIM2_Init();       // Initialize TIM2
 8000d92:	f000 fc05 	bl	80015a0 <MX_TIM2_Init>
  MX_TIM3_Init();       // Initialize TIM3
 8000d96:	f000 fc57 	bl	8001648 <MX_TIM3_Init>
  MX_USART3_UART_Init();// Initialize USART3
 8000d9a:	f000 fe93 	bl	8001ac4 <MX_USART3_UART_Init>
  MX_TIM4_Init();       // Initialize TIM4
 8000d9e:	f000 fca9 	bl	80016f4 <MX_TIM4_Init>
  MX_TIM5_Init();       // Initialize TIM5
 8000da2:	f000 fcfd 	bl	80017a0 <MX_TIM5_Init>
  MX_I2C2_Init();       // Initialize I2C2
 8000da6:	f000 facb 	bl	8001340 <MX_I2C2_Init>
  MX_TIM8_Init();       // Initialize TIM8
 8000daa:	f000 fd59 	bl	8001860 <MX_TIM8_Init>
  MX_TIM15_Init();      // Initialize TIM15
 8000dae:	f000 fe0b 	bl	80019c8 <MX_TIM15_Init>
  MX_TIM17_Init();      // Initialize TIM17
 8000db2:	f000 fe61 	bl	8001a78 <MX_TIM17_Init>

  // Start PWM for motor 1 and motor 2 channels
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000db6:	2100      	movs	r1, #0
 8000db8:	486d      	ldr	r0, [pc, #436]	@ (8000f70 <main+0x234>)
 8000dba:	f005 fd89 	bl	80068d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000dbe:	2104      	movs	r1, #4
 8000dc0:	486b      	ldr	r0, [pc, #428]	@ (8000f70 <main+0x234>)
 8000dc2:	f005 fd85 	bl	80068d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000dc6:	2108      	movs	r1, #8
 8000dc8:	4869      	ldr	r0, [pc, #420]	@ (8000f70 <main+0x234>)
 8000dca:	f005 fd81 	bl	80068d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000dce:	210c      	movs	r1, #12
 8000dd0:	4867      	ldr	r0, [pc, #412]	@ (8000f70 <main+0x234>)
 8000dd2:	f005 fd7d 	bl	80068d0 <HAL_TIM_PWM_Start>

  // Enable motors 1 (PB1) and 2 (PB2)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f243 0106 	movw	r1, #12294	@ 0x3006
 8000ddc:	4865      	ldr	r0, [pc, #404]	@ (8000f74 <main+0x238>)
 8000dde:	f004 f88f 	bl	8004f00 <HAL_GPIO_WritePin>

  // Start the encoders and enable interrupts
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000de2:	213c      	movs	r1, #60	@ 0x3c
 8000de4:	4864      	ldr	r0, [pc, #400]	@ (8000f78 <main+0x23c>)
 8000de6:	f005 ff76 	bl	8006cd6 <HAL_TIM_Encoder_Start_IT>
  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000dea:	4b63      	ldr	r3, [pc, #396]	@ (8000f78 <main+0x23c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000df2:	213c      	movs	r1, #60	@ 0x3c
 8000df4:	4861      	ldr	r0, [pc, #388]	@ (8000f7c <main+0x240>)
 8000df6:	f005 ff6e 	bl	8006cd6 <HAL_TIM_Encoder_Start_IT>
  __HAL_TIM_SET_COUNTER(&htim4, 0);
 8000dfa:	4b60      	ldr	r3, [pc, #384]	@ (8000f7c <main+0x240>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	@ 0x24

  // Start ADCs
  HAL_ADC_Start(&hadc1);
 8000e02:	485f      	ldr	r0, [pc, #380]	@ (8000f80 <main+0x244>)
 8000e04:	f002 fe54 	bl	8003ab0 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000e08:	485e      	ldr	r0, [pc, #376]	@ (8000f84 <main+0x248>)
 8000e0a:	f002 fe51 	bl	8003ab0 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8000e0e:	485e      	ldr	r0, [pc, #376]	@ (8000f88 <main+0x24c>)
 8000e10:	f002 fe4e 	bl	8003ab0 <HAL_ADC_Start>

  // Start UART receive interrupt
  HAL_UART_Receive_IT(&huart3, rx_buff, 8);
 8000e14:	2208      	movs	r2, #8
 8000e16:	495d      	ldr	r1, [pc, #372]	@ (8000f8c <main+0x250>)
 8000e18:	485d      	ldr	r0, [pc, #372]	@ (8000f90 <main+0x254>)
 8000e1a:	f007 fab9 	bl	8008390 <HAL_UART_Receive_IT>

  while (1) {
    switch(task) {
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	2b06      	cmp	r3, #6
 8000e22:	d8fc      	bhi.n	8000e1e <main+0xe2>
 8000e24:	a201      	add	r2, pc, #4	@ (adr r2, 8000e2c <main+0xf0>)
 8000e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2a:	bf00      	nop
 8000e2c:	08000e49 	.word	0x08000e49
 8000e30:	08000e4f 	.word	0x08000e4f
 8000e34:	08000e77 	.word	0x08000e77
 8000e38:	08000e1f 	.word	0x08000e1f
 8000e3c:	08000e9f 	.word	0x08000e9f
 8000e40:	08000ef1 	.word	0x08000ef1
 8000e44:	08000f1d 	.word	0x08000f1d
      case 0: // Initialization
        task = 1;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
        break;
 8000e4c:	e08e      	b.n	8000f6c <main+0x230>

      case 1: // Diagnostics
        task1_run(&T1State, hadc2, &BatKill);
 8000e4e:	4c4d      	ldr	r4, [pc, #308]	@ (8000f84 <main+0x248>)
 8000e50:	f107 050e 	add.w	r5, r7, #14
 8000e54:	1d7b      	adds	r3, r7, #5
 8000e56:	9316      	str	r3, [sp, #88]	@ 0x58
 8000e58:	4668      	mov	r0, sp
 8000e5a:	f104 030c 	add.w	r3, r4, #12
 8000e5e:	2258      	movs	r2, #88	@ 0x58
 8000e60:	4619      	mov	r1, r3
 8000e62:	f008 ff18 	bl	8009c96 <memcpy>
 8000e66:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000e6a:	4628      	mov	r0, r5
 8000e6c:	f001 fcc4 	bl	80027f8 <task1_run>
        task = 2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	73fb      	strb	r3, [r7, #15]
        break;
 8000e74:	e07a      	b.n	8000f6c <main+0x230>

      case 2: // Radio Control
        task2_run(&T2State, &BatKill, &RadKill, &usWidth, &DriveON_Rad, &ArmON, &MDON, &OpenMV);
 8000e76:	1d3a      	adds	r2, r7, #4
 8000e78:	1d79      	adds	r1, r7, #5
 8000e7a:	f107 000d 	add.w	r0, r7, #13
 8000e7e:	1dbb      	adds	r3, r7, #6
 8000e80:	9303      	str	r3, [sp, #12]
 8000e82:	4b44      	ldr	r3, [pc, #272]	@ (8000f94 <main+0x258>)
 8000e84:	9302      	str	r3, [sp, #8]
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	f107 0309 	add.w	r3, r7, #9
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	4b41      	ldr	r3, [pc, #260]	@ (8000f98 <main+0x25c>)
 8000e94:	f001 fcf8 	bl	8002888 <task2_run>
        task = 4;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	73fb      	strb	r3, [r7, #15]
        break;
 8000e9c:	e066      	b.n	8000f6c <main+0x230>

      case 4: // Metal Detector
        task4_run(&T4State, &MDON, &sumval, htim17, &Metal_Found, hadc1, hadc2, hadc3);
 8000e9e:	4c3f      	ldr	r4, [pc, #252]	@ (8000f9c <main+0x260>)
 8000ea0:	f107 050c 	add.w	r5, r7, #12
 8000ea4:	4a38      	ldr	r2, [pc, #224]	@ (8000f88 <main+0x24c>)
 8000ea6:	ab45      	add	r3, sp, #276	@ 0x114
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	2264      	movs	r2, #100	@ 0x64
 8000eac:	4618      	mov	r0, r3
 8000eae:	f008 fef2 	bl	8009c96 <memcpy>
 8000eb2:	4a34      	ldr	r2, [pc, #208]	@ (8000f84 <main+0x248>)
 8000eb4:	ab2c      	add	r3, sp, #176	@ 0xb0
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	2264      	movs	r2, #100	@ 0x64
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f008 feeb 	bl	8009c96 <memcpy>
 8000ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8000f80 <main+0x244>)
 8000ec2:	ab13      	add	r3, sp, #76	@ 0x4c
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	2264      	movs	r2, #100	@ 0x64
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f008 fee4 	bl	8009c96 <memcpy>
 8000ece:	4b34      	ldr	r3, [pc, #208]	@ (8000fa0 <main+0x264>)
 8000ed0:	9312      	str	r3, [sp, #72]	@ 0x48
 8000ed2:	4668      	mov	r0, sp
 8000ed4:	1d23      	adds	r3, r4, #4
 8000ed6:	2248      	movs	r2, #72	@ 0x48
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f008 fedc 	bl	8009c96 <memcpy>
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	4a30      	ldr	r2, [pc, #192]	@ (8000fa4 <main+0x268>)
 8000ee2:	492c      	ldr	r1, [pc, #176]	@ (8000f94 <main+0x258>)
 8000ee4:	4628      	mov	r0, r5
 8000ee6:	f001 fd33 	bl	8002950 <task4_run>
        task = 5;
 8000eea:	2305      	movs	r3, #5
 8000eec:	73fb      	strb	r3, [r7, #15]
        break;
 8000eee:	e03d      	b.n	8000f6c <main+0x230>

      case 5: // Arm Motor
        task5_run(&T5State, &ArmON, &Metal_Found, htim17, &sumval);
 8000ef0:	4c2a      	ldr	r4, [pc, #168]	@ (8000f9c <main+0x260>)
 8000ef2:	f107 0608 	add.w	r6, r7, #8
 8000ef6:	f107 050b 	add.w	r5, r7, #11
 8000efa:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa4 <main+0x268>)
 8000efc:	9312      	str	r3, [sp, #72]	@ 0x48
 8000efe:	4668      	mov	r0, sp
 8000f00:	1d23      	adds	r3, r4, #4
 8000f02:	2248      	movs	r2, #72	@ 0x48
 8000f04:	4619      	mov	r1, r3
 8000f06:	f008 fec6 	bl	8009c96 <memcpy>
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	4a24      	ldr	r2, [pc, #144]	@ (8000fa0 <main+0x264>)
 8000f0e:	4631      	mov	r1, r6
 8000f10:	4628      	mov	r0, r5
 8000f12:	f001 fe83 	bl	8002c1c <task5_run>
        task = 6;
 8000f16:	2306      	movs	r3, #6
 8000f18:	73fb      	strb	r3, [r7, #15]
        break;
 8000f1a:	e027      	b.n	8000f6c <main+0x230>

      case 6: // Drive Motors
        task6_run(&T6State, &Metal_Found, &DriveON_Rad, &Follow, &Distance_Target, &Angle_Target, htim1, htim3, htim4);
 8000f1c:	1dfe      	adds	r6, r7, #7
 8000f1e:	f107 0509 	add.w	r5, r7, #9
 8000f22:	f107 040a 	add.w	r4, r7, #10
 8000f26:	4a15      	ldr	r2, [pc, #84]	@ (8000f7c <main+0x240>)
 8000f28:	ab28      	add	r3, sp, #160	@ 0xa0
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	224c      	movs	r2, #76	@ 0x4c
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f008 feb1 	bl	8009c96 <memcpy>
 8000f34:	4a10      	ldr	r2, [pc, #64]	@ (8000f78 <main+0x23c>)
 8000f36:	ab15      	add	r3, sp, #84	@ 0x54
 8000f38:	4611      	mov	r1, r2
 8000f3a:	224c      	movs	r2, #76	@ 0x4c
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f008 feaa 	bl	8009c96 <memcpy>
 8000f42:	4a0b      	ldr	r2, [pc, #44]	@ (8000f70 <main+0x234>)
 8000f44:	ab02      	add	r3, sp, #8
 8000f46:	4611      	mov	r1, r2
 8000f48:	224c      	movs	r2, #76	@ 0x4c
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f008 fea3 	bl	8009c96 <memcpy>
 8000f50:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <main+0x26c>)
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <main+0x270>)
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	4633      	mov	r3, r6
 8000f5a:	462a      	mov	r2, r5
 8000f5c:	4910      	ldr	r1, [pc, #64]	@ (8000fa0 <main+0x264>)
 8000f5e:	4620      	mov	r0, r4
 8000f60:	f001 ff9a 	bl	8002e98 <task6_run>
        task = 1; // Do not return to initialization
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
        break;
 8000f68:	bf00      	nop
 8000f6a:	e758      	b.n	8000e1e <main+0xe2>
    switch(task) {
 8000f6c:	e757      	b.n	8000e1e <main+0xe2>
 8000f6e:	bf00      	nop
 8000f70:	20000214 	.word	0x20000214
 8000f74:	48000400 	.word	0x48000400
 8000f78:	200002ac 	.word	0x200002ac
 8000f7c:	200002f8 	.word	0x200002f8
 8000f80:	20000094 	.word	0x20000094
 8000f84:	200000f8 	.word	0x200000f8
 8000f88:	2000015c 	.word	0x2000015c
 8000f8c:	20000520 	.word	0x20000520
 8000f90:	20000474 	.word	0x20000474
 8000f94:	20000514 	.word	0x20000514
 8000f98:	200004fc 	.word	0x200004fc
 8000f9c:	20000428 	.word	0x20000428
 8000fa0:	20000515 	.word	0x20000515
 8000fa4:	20000510 	.word	0x20000510
 8000fa8:	2000051c 	.word	0x2000051c
 8000fac:	20000518 	.word	0x20000518

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b096      	sub	sp, #88	@ 0x58
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	2244      	movs	r2, #68	@ 0x44
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f008 fded 	bl	8009b9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fd2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fd6:	f004 f8eb 	bl	80051b0 <HAL_PWREx_ControlVoltageScaling>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fe0:	f000 fede 	bl	8001da0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000ffa:	2320      	movs	r3, #32
 8000ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ffe:	2307      	movs	r3, #7
 8001000:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001002:	2302      	movs	r3, #2
 8001004:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001006:	2302      	movs	r3, #2
 8001008:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4618      	mov	r0, r3
 8001010:	f004 f924 	bl	800525c <HAL_RCC_OscConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800101a:	f000 fec1 	bl	8001da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101e:	230f      	movs	r3, #15
 8001020:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001022:	2303      	movs	r3, #3
 8001024:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001032:	463b      	mov	r3, r7
 8001034:	2104      	movs	r1, #4
 8001036:	4618      	mov	r0, r3
 8001038:	f004 fcec 	bl	8005a14 <HAL_RCC_ClockConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001042:	f000 fead 	bl	8001da0 <Error_Handler>
  }
}
 8001046:	bf00      	nop
 8001048:	3758      	adds	r7, #88	@ 0x58
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b0a2      	sub	sp, #136	@ 0x88
 8001052:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2284      	movs	r2, #132	@ 0x84
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f008 fd9f 	bl	8009b9e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001060:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001064:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001066:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800106a:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800106c:	2303      	movs	r3, #3
 800106e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8001070:	2305      	movs	r3, #5
 8001072:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001074:	2318      	movs	r3, #24
 8001076:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001078:	2307      	movs	r3, #7
 800107a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800107c:	2302      	movs	r3, #2
 800107e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001080:	2302      	movs	r3, #2
 8001082:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001084:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001088:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4618      	mov	r0, r3
 800108e:	f004 fee5 	bl	8005e5c <HAL_RCCEx_PeriphCLKConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001098:	f000 fe82 	bl	8001da0 <Error_Handler>
  }
}
 800109c:	bf00      	nop
 800109e:	3788      	adds	r7, #136	@ 0x88
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	@ 0x28
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
 80010c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001184 <MX_ADC1_Init+0xe0>)
 80010c8:	4a2f      	ldr	r2, [pc, #188]	@ (8001188 <MX_ADC1_Init+0xe4>)
 80010ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001184 <MX_ADC1_Init+0xe0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001184 <MX_ADC1_Init+0xe0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001184 <MX_ADC1_Init+0xe0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010de:	4b29      	ldr	r3, [pc, #164]	@ (8001184 <MX_ADC1_Init+0xe0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e4:	4b27      	ldr	r3, [pc, #156]	@ (8001184 <MX_ADC1_Init+0xe0>)
 80010e6:	2204      	movs	r2, #4
 80010e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010ea:	4b26      	ldr	r3, [pc, #152]	@ (8001184 <MX_ADC1_Init+0xe0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f0:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <MX_ADC1_Init+0xe0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010f6:	4b23      	ldr	r3, [pc, #140]	@ (8001184 <MX_ADC1_Init+0xe0>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010fc:	4b21      	ldr	r3, [pc, #132]	@ (8001184 <MX_ADC1_Init+0xe0>)
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001104:	4b1f      	ldr	r3, [pc, #124]	@ (8001184 <MX_ADC1_Init+0xe0>)
 8001106:	2200      	movs	r2, #0
 8001108:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110a:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <MX_ADC1_Init+0xe0>)
 800110c:	2200      	movs	r2, #0
 800110e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001110:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <MX_ADC1_Init+0xe0>)
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001118:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <MX_ADC1_Init+0xe0>)
 800111a:	2200      	movs	r2, #0
 800111c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800111e:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <MX_ADC1_Init+0xe0>)
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001126:	4817      	ldr	r0, [pc, #92]	@ (8001184 <MX_ADC1_Init+0xe0>)
 8001128:	f002 fb72 	bl	8003810 <HAL_ADC_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001132:	f000 fe35 	bl	8001da0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	4810      	ldr	r0, [pc, #64]	@ (8001184 <MX_ADC1_Init+0xe0>)
 8001142:	f003 faf3 	bl	800472c <HAL_ADCEx_MultiModeConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800114c:	f000 fe28 	bl	8001da0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001150:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <MX_ADC1_Init+0xe8>)
 8001152:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001154:	2306      	movs	r3, #6
 8001156:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800115c:	237f      	movs	r3, #127	@ 0x7f
 800115e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001160:	2304      	movs	r3, #4
 8001162:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	4619      	mov	r1, r3
 800116c:	4805      	ldr	r0, [pc, #20]	@ (8001184 <MX_ADC1_Init+0xe0>)
 800116e:	f002 fe3f 	bl	8003df0 <HAL_ADC_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001178:	f000 fe12 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	@ 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000094 	.word	0x20000094
 8001188:	50040000 	.word	0x50040000
 800118c:	04300002 	.word	0x04300002

08001190 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001196:	463b      	mov	r3, r7
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
 80011a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011a6:	4b30      	ldr	r3, [pc, #192]	@ (8001268 <MX_ADC2_Init+0xd8>)
 80011a8:	4a30      	ldr	r2, [pc, #192]	@ (800126c <MX_ADC2_Init+0xdc>)
 80011aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001268 <MX_ADC2_Init+0xd8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001268 <MX_ADC2_Init+0xd8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001268 <MX_ADC2_Init+0xd8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011be:	4b2a      	ldr	r3, [pc, #168]	@ (8001268 <MX_ADC2_Init+0xd8>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c4:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <MX_ADC2_Init+0xd8>)
 80011c6:	2204      	movs	r2, #4
 80011c8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011ca:	4b27      	ldr	r3, [pc, #156]	@ (8001268 <MX_ADC2_Init+0xd8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011d0:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <MX_ADC2_Init+0xd8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 2;
 80011d6:	4b24      	ldr	r3, [pc, #144]	@ (8001268 <MX_ADC2_Init+0xd8>)
 80011d8:	2202      	movs	r2, #2
 80011da:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011dc:	4b22      	ldr	r3, [pc, #136]	@ (8001268 <MX_ADC2_Init+0xd8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e4:	4b20      	ldr	r3, [pc, #128]	@ (8001268 <MX_ADC2_Init+0xd8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <MX_ADC2_Init+0xd8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001268 <MX_ADC2_Init+0xd8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <MX_ADC2_Init+0xd8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <MX_ADC2_Init+0xd8>)
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001206:	4818      	ldr	r0, [pc, #96]	@ (8001268 <MX_ADC2_Init+0xd8>)
 8001208:	f002 fb02 	bl	8003810 <HAL_ADC_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8001212:	f000 fdc5 	bl	8001da0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001216:	4b16      	ldr	r3, [pc, #88]	@ (8001270 <MX_ADC2_Init+0xe0>)
 8001218:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800121a:	2306      	movs	r3, #6
 800121c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001222:	237f      	movs	r3, #127	@ 0x7f
 8001224:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001226:	2304      	movs	r3, #4
 8001228:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800122e:	463b      	mov	r3, r7
 8001230:	4619      	mov	r1, r3
 8001232:	480d      	ldr	r0, [pc, #52]	@ (8001268 <MX_ADC2_Init+0xd8>)
 8001234:	f002 fddc 	bl	8003df0 <HAL_ADC_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800123e:	f000 fdaf 	bl	8001da0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001242:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <MX_ADC2_Init+0xe4>)
 8001244:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001246:	230c      	movs	r3, #12
 8001248:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800124a:	463b      	mov	r3, r7
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	@ (8001268 <MX_ADC2_Init+0xd8>)
 8001250:	f002 fdce 	bl	8003df0 <HAL_ADC_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 800125a:	f000 fda1 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200000f8 	.word	0x200000f8
 800126c:	50040100 	.word	0x50040100
 8001270:	08600004 	.word	0x08600004
 8001274:	3ef08000 	.word	0x3ef08000

08001278 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800127e:	463b      	mov	r3, r7
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800128e:	4b29      	ldr	r3, [pc, #164]	@ (8001334 <MX_ADC3_Init+0xbc>)
 8001290:	4a29      	ldr	r2, [pc, #164]	@ (8001338 <MX_ADC3_Init+0xc0>)
 8001292:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001294:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <MX_ADC3_Init+0xbc>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800129a:	4b26      	ldr	r3, [pc, #152]	@ (8001334 <MX_ADC3_Init+0xbc>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a0:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <MX_ADC3_Init+0xbc>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012a6:	4b23      	ldr	r3, [pc, #140]	@ (8001334 <MX_ADC3_Init+0xbc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ac:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <MX_ADC3_Init+0xbc>)
 80012ae:	2204      	movs	r2, #4
 80012b0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <MX_ADC3_Init+0xbc>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80012b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <MX_ADC3_Init+0xbc>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80012be:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <MX_ADC3_Init+0xbc>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <MX_ADC3_Init+0xbc>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012cc:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <MX_ADC3_Init+0xbc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012d2:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <MX_ADC3_Init+0xbc>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80012d8:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <MX_ADC3_Init+0xbc>)
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <MX_ADC3_Init+0xbc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80012e6:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <MX_ADC3_Init+0xbc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012ee:	4811      	ldr	r0, [pc, #68]	@ (8001334 <MX_ADC3_Init+0xbc>)
 80012f0:	f002 fa8e 	bl	8003810 <HAL_ADC_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80012fa:	f000 fd51 	bl	8001da0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012fe:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <MX_ADC3_Init+0xc4>)
 8001300:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001302:	2306      	movs	r3, #6
 8001304:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800130a:	237f      	movs	r3, #127	@ 0x7f
 800130c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800130e:	2304      	movs	r3, #4
 8001310:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001316:	463b      	mov	r3, r7
 8001318:	4619      	mov	r1, r3
 800131a:	4806      	ldr	r0, [pc, #24]	@ (8001334 <MX_ADC3_Init+0xbc>)
 800131c:	f002 fd68 	bl	8003df0 <HAL_ADC_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001326:	f000 fd3b 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000015c 	.word	0x2000015c
 8001338:	50040200 	.word	0x50040200
 800133c:	0c900008 	.word	0x0c900008

08001340 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001344:	4b1b      	ldr	r3, [pc, #108]	@ (80013b4 <MX_I2C2_Init+0x74>)
 8001346:	4a1c      	ldr	r2, [pc, #112]	@ (80013b8 <MX_I2C2_Init+0x78>)
 8001348:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800134a:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <MX_I2C2_Init+0x74>)
 800134c:	4a1b      	ldr	r2, [pc, #108]	@ (80013bc <MX_I2C2_Init+0x7c>)
 800134e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001350:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <MX_I2C2_Init+0x74>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001356:	4b17      	ldr	r3, [pc, #92]	@ (80013b4 <MX_I2C2_Init+0x74>)
 8001358:	2201      	movs	r2, #1
 800135a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800135c:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <MX_I2C2_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001362:	4b14      	ldr	r3, [pc, #80]	@ (80013b4 <MX_I2C2_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001368:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <MX_I2C2_Init+0x74>)
 800136a:	2200      	movs	r2, #0
 800136c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800136e:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <MX_I2C2_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001374:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <MX_I2C2_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800137a:	480e      	ldr	r0, [pc, #56]	@ (80013b4 <MX_I2C2_Init+0x74>)
 800137c:	f003 fdd8 	bl	8004f30 <HAL_I2C_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001386:	f000 fd0b 	bl	8001da0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800138a:	2100      	movs	r1, #0
 800138c:	4809      	ldr	r0, [pc, #36]	@ (80013b4 <MX_I2C2_Init+0x74>)
 800138e:	f003 fe6a 	bl	8005066 <HAL_I2CEx_ConfigAnalogFilter>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001398:	f000 fd02 	bl	8001da0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800139c:	2100      	movs	r1, #0
 800139e:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_I2C2_Init+0x74>)
 80013a0:	f003 feac 	bl	80050fc <HAL_I2CEx_ConfigDigitalFilter>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013aa:	f000 fcf9 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200001c0 	.word	0x200001c0
 80013b8:	40005800 	.word	0x40005800
 80013bc:	10909cec 	.word	0x10909cec

080013c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b09a      	sub	sp, #104	@ 0x68
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
 80013f0:	615a      	str	r2, [r3, #20]
 80013f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	222c      	movs	r2, #44	@ 0x2c
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f008 fbcf 	bl	8009b9e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001400:	4b65      	ldr	r3, [pc, #404]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 8001402:	4a66      	ldr	r2, [pc, #408]	@ (800159c <MX_TIM1_Init+0x1dc>)
 8001404:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001406:	4b64      	ldr	r3, [pc, #400]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 8001408:	2200      	movs	r2, #0
 800140a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140c:	4b62      	ldr	r3, [pc, #392]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8001412:	4b61      	ldr	r3, [pc, #388]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 8001414:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001418:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141a:	4b5f      	ldr	r3, [pc, #380]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001420:	4b5d      	ldr	r3, [pc, #372]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001426:	4b5c      	ldr	r3, [pc, #368]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800142c:	485a      	ldr	r0, [pc, #360]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 800142e:	f005 f9a1 	bl	8006774 <HAL_TIM_Base_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001438:	f000 fcb2 	bl	8001da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001440:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001442:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001446:	4619      	mov	r1, r3
 8001448:	4853      	ldr	r0, [pc, #332]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 800144a:	f005 ffa5 	bl	8007398 <HAL_TIM_ConfigClockSource>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001454:	f000 fca4 	bl	8001da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001458:	484f      	ldr	r0, [pc, #316]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 800145a:	f005 f9e2 	bl	8006822 <HAL_TIM_PWM_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001464:	f000 fc9c 	bl	8001da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001474:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001478:	4619      	mov	r1, r3
 800147a:	4847      	ldr	r0, [pc, #284]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 800147c:	f006 fe16 	bl	80080ac <HAL_TIMEx_MasterConfigSynchronization>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001486:	f000 fc8b 	bl	8001da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800148a:	2360      	movs	r3, #96	@ 0x60
 800148c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001492:	2300      	movs	r3, #0
 8001494:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001496:	2300      	movs	r3, #0
 8001498:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014aa:	2200      	movs	r2, #0
 80014ac:	4619      	mov	r1, r3
 80014ae:	483a      	ldr	r0, [pc, #232]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 80014b0:	f005 fe5e 	bl	8007170 <HAL_TIM_PWM_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80014ba:	f000 fc71 	bl	8001da0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80014be:	4b36      	ldr	r3, [pc, #216]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	699a      	ldr	r2, [r3, #24]
 80014c4:	4b34      	ldr	r3, [pc, #208]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0208 	bic.w	r2, r2, #8
 80014cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014d2:	2204      	movs	r2, #4
 80014d4:	4619      	mov	r1, r3
 80014d6:	4830      	ldr	r0, [pc, #192]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 80014d8:	f005 fe4a 	bl	8007170 <HAL_TIM_PWM_ConfigChannel>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80014e2:	f000 fc5d 	bl	8001da0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 80014e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	699a      	ldr	r2, [r3, #24]
 80014ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014fa:	2208      	movs	r2, #8
 80014fc:	4619      	mov	r1, r3
 80014fe:	4826      	ldr	r0, [pc, #152]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 8001500:	f005 fe36 	bl	8007170 <HAL_TIM_PWM_ConfigChannel>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 800150a:	f000 fc49 	bl	8001da0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 800150e:	4b22      	ldr	r3, [pc, #136]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	69da      	ldr	r2, [r3, #28]
 8001514:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0208 	bic.w	r2, r2, #8
 800151c:	61da      	str	r2, [r3, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800151e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001522:	220c      	movs	r2, #12
 8001524:	4619      	mov	r1, r3
 8001526:	481c      	ldr	r0, [pc, #112]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 8001528:	f005 fe22 	bl	8007170 <HAL_TIM_PWM_ConfigChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 8001532:	f000 fc35 	bl	8001da0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8001536:	4b18      	ldr	r3, [pc, #96]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	69da      	ldr	r2, [r3, #28]
 800153c:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001544:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800155a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800155e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001568:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	4619      	mov	r1, r3
 800157a:	4807      	ldr	r0, [pc, #28]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 800157c:	f006 fe1e 	bl	80081bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM1_Init+0x1ca>
  {
    Error_Handler();
 8001586:	f000 fc0b 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800158a:	4803      	ldr	r0, [pc, #12]	@ (8001598 <MX_TIM1_Init+0x1d8>)
 800158c:	f000 ff88 	bl	80024a0 <HAL_TIM_MspPostInit>

}
 8001590:	bf00      	nop
 8001592:	3768      	adds	r7, #104	@ 0x68
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000214 	.word	0x20000214
 800159c:	40012c00 	.word	0x40012c00

080015a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08c      	sub	sp, #48	@ 0x30
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	2224      	movs	r2, #36	@ 0x24
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f008 faf5 	bl	8009b9e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b4:	463b      	mov	r3, r7
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015be:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <MX_TIM2_Init+0xa4>)
 80015c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001644 <MX_TIM2_Init+0xa4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001644 <MX_TIM2_Init+0xa4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <MX_TIM2_Init+0xa4>)
 80015d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015da:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <MX_TIM2_Init+0xa4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e0:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <MX_TIM2_Init+0xa4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015e6:	2301      	movs	r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015ee:	2301      	movs	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015fe:	2301      	movs	r3, #1
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001602:	2300      	movs	r3, #0
 8001604:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	4619      	mov	r1, r3
 8001610:	480c      	ldr	r0, [pc, #48]	@ (8001644 <MX_TIM2_Init+0xa4>)
 8001612:	f005 faba 	bl	8006b8a <HAL_TIM_Encoder_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800161c:	f000 fbc0 	bl	8001da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001620:	2300      	movs	r3, #0
 8001622:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001628:	463b      	mov	r3, r7
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MX_TIM2_Init+0xa4>)
 800162e:	f006 fd3d 	bl	80080ac <HAL_TIMEx_MasterConfigSynchronization>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001638:	f000 fbb2 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	3730      	adds	r7, #48	@ 0x30
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000260 	.word	0x20000260

08001648 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08c      	sub	sp, #48	@ 0x30
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	2224      	movs	r2, #36	@ 0x24
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f008 faa1 	bl	8009b9e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	463b      	mov	r3, r7
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001666:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <MX_TIM3_Init+0xa4>)
 8001668:	4a21      	ldr	r2, [pc, #132]	@ (80016f0 <MX_TIM3_Init+0xa8>)
 800166a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800166c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <MX_TIM3_Init+0xa4>)
 800166e:	2200      	movs	r2, #0
 8001670:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001672:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <MX_TIM3_Init+0xa4>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001678:	4b1c      	ldr	r3, [pc, #112]	@ (80016ec <MX_TIM3_Init+0xa4>)
 800167a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800167e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b1a      	ldr	r3, [pc, #104]	@ (80016ec <MX_TIM3_Init+0xa4>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001686:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <MX_TIM3_Init+0xa4>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800168c:	2301      	movs	r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001694:	2301      	movs	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016a0:	2300      	movs	r3, #0
 80016a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016a4:	2301      	movs	r3, #1
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	480d      	ldr	r0, [pc, #52]	@ (80016ec <MX_TIM3_Init+0xa4>)
 80016b8:	f005 fa67 	bl	8006b8a <HAL_TIM_Encoder_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80016c2:	f000 fb6d 	bl	8001da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ce:	463b      	mov	r3, r7
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	@ (80016ec <MX_TIM3_Init+0xa4>)
 80016d4:	f006 fcea 	bl	80080ac <HAL_TIMEx_MasterConfigSynchronization>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80016de:	f000 fb5f 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	3730      	adds	r7, #48	@ 0x30
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200002ac 	.word	0x200002ac
 80016f0:	40000400 	.word	0x40000400

080016f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08c      	sub	sp, #48	@ 0x30
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016fa:	f107 030c 	add.w	r3, r7, #12
 80016fe:	2224      	movs	r2, #36	@ 0x24
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f008 fa4b 	bl	8009b9e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001708:	463b      	mov	r3, r7
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001712:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <MX_TIM4_Init+0xa4>)
 8001714:	4a21      	ldr	r2, [pc, #132]	@ (800179c <MX_TIM4_Init+0xa8>)
 8001716:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001718:	4b1f      	ldr	r3, [pc, #124]	@ (8001798 <MX_TIM4_Init+0xa4>)
 800171a:	2200      	movs	r2, #0
 800171c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171e:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <MX_TIM4_Init+0xa4>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001724:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <MX_TIM4_Init+0xa4>)
 8001726:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800172a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172c:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <MX_TIM4_Init+0xa4>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001732:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <MX_TIM4_Init+0xa4>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001738:	2301      	movs	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001740:	2301      	movs	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001750:	2301      	movs	r3, #1
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	4619      	mov	r1, r3
 8001762:	480d      	ldr	r0, [pc, #52]	@ (8001798 <MX_TIM4_Init+0xa4>)
 8001764:	f005 fa11 	bl	8006b8a <HAL_TIM_Encoder_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800176e:	f000 fb17 	bl	8001da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800177a:	463b      	mov	r3, r7
 800177c:	4619      	mov	r1, r3
 800177e:	4806      	ldr	r0, [pc, #24]	@ (8001798 <MX_TIM4_Init+0xa4>)
 8001780:	f006 fc94 	bl	80080ac <HAL_TIMEx_MasterConfigSynchronization>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800178a:	f000 fb09 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	3730      	adds	r7, #48	@ 0x30
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200002f8 	.word	0x200002f8
 800179c:	40000800 	.word	0x40000800

080017a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017be:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <MX_TIM5_Init+0xb8>)
 80017c0:	4a26      	ldr	r2, [pc, #152]	@ (800185c <MX_TIM5_Init+0xbc>)
 80017c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80017c4:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <MX_TIM5_Init+0xb8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ca:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <MX_TIM5_Init+0xb8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80017d0:	4b21      	ldr	r3, [pc, #132]	@ (8001858 <MX_TIM5_Init+0xb8>)
 80017d2:	f04f 32ff 	mov.w	r2, #4294967295
 80017d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <MX_TIM5_Init+0xb8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017de:	4b1e      	ldr	r3, [pc, #120]	@ (8001858 <MX_TIM5_Init+0xb8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80017e4:	481c      	ldr	r0, [pc, #112]	@ (8001858 <MX_TIM5_Init+0xb8>)
 80017e6:	f005 f979 	bl	8006adc <HAL_TIM_IC_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80017f0:	f000 fad6 	bl	8001da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	4815      	ldr	r0, [pc, #84]	@ (8001858 <MX_TIM5_Init+0xb8>)
 8001804:	f006 fc52 	bl	80080ac <HAL_TIMEx_MasterConfigSynchronization>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800180e:	f000 fac7 	bl	8001da0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001816:	2301      	movs	r3, #1
 8001818:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2208      	movs	r2, #8
 8001826:	4619      	mov	r1, r3
 8001828:	480b      	ldr	r0, [pc, #44]	@ (8001858 <MX_TIM5_Init+0xb8>)
 800182a:	f005 fc04 	bl	8007036 <HAL_TIM_IC_ConfigChannel>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001834:	f000 fab4 	bl	8001da0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	220c      	movs	r2, #12
 800183c:	4619      	mov	r1, r3
 800183e:	4806      	ldr	r0, [pc, #24]	@ (8001858 <MX_TIM5_Init+0xb8>)
 8001840:	f005 fbf9 	bl	8007036 <HAL_TIM_IC_ConfigChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 800184a:	f000 faa9 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800184e:	bf00      	nop
 8001850:	3720      	adds	r7, #32
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000344 	.word	0x20000344
 800185c:	40000c00 	.word	0x40000c00

08001860 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b096      	sub	sp, #88	@ 0x58
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001866:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001872:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]
 8001882:	615a      	str	r2, [r3, #20]
 8001884:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	222c      	movs	r2, #44	@ 0x2c
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f008 f986 	bl	8009b9e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001892:	4b4b      	ldr	r3, [pc, #300]	@ (80019c0 <MX_TIM8_Init+0x160>)
 8001894:	4a4b      	ldr	r2, [pc, #300]	@ (80019c4 <MX_TIM8_Init+0x164>)
 8001896:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001898:	4b49      	ldr	r3, [pc, #292]	@ (80019c0 <MX_TIM8_Init+0x160>)
 800189a:	2200      	movs	r2, #0
 800189c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189e:	4b48      	ldr	r3, [pc, #288]	@ (80019c0 <MX_TIM8_Init+0x160>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 59999;
 80018a4:	4b46      	ldr	r3, [pc, #280]	@ (80019c0 <MX_TIM8_Init+0x160>)
 80018a6:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80018aa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ac:	4b44      	ldr	r3, [pc, #272]	@ (80019c0 <MX_TIM8_Init+0x160>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018b2:	4b43      	ldr	r3, [pc, #268]	@ (80019c0 <MX_TIM8_Init+0x160>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b8:	4b41      	ldr	r3, [pc, #260]	@ (80019c0 <MX_TIM8_Init+0x160>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80018be:	4840      	ldr	r0, [pc, #256]	@ (80019c0 <MX_TIM8_Init+0x160>)
 80018c0:	f004 ffaf 	bl	8006822 <HAL_TIM_PWM_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80018ca:	f000 fa69 	bl	8001da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018da:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80018de:	4619      	mov	r1, r3
 80018e0:	4837      	ldr	r0, [pc, #220]	@ (80019c0 <MX_TIM8_Init+0x160>)
 80018e2:	f006 fbe3 	bl	80080ac <HAL_TIMEx_MasterConfigSynchronization>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80018ec:	f000 fa58 	bl	8001da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018f0:	2360      	movs	r3, #96	@ 0x60
 80018f2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f8:	2300      	movs	r3, #0
 80018fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018fc:	2300      	movs	r3, #0
 80018fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001900:	2300      	movs	r3, #0
 8001902:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001904:	2300      	movs	r3, #0
 8001906:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800190c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001910:	2200      	movs	r2, #0
 8001912:	4619      	mov	r1, r3
 8001914:	482a      	ldr	r0, [pc, #168]	@ (80019c0 <MX_TIM8_Init+0x160>)
 8001916:	f005 fc2b 	bl	8007170 <HAL_TIM_PWM_ConfigChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001920:	f000 fa3e 	bl	8001da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001924:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001928:	2204      	movs	r2, #4
 800192a:	4619      	mov	r1, r3
 800192c:	4824      	ldr	r0, [pc, #144]	@ (80019c0 <MX_TIM8_Init+0x160>)
 800192e:	f005 fc1f 	bl	8007170 <HAL_TIM_PWM_ConfigChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8001938:	f000 fa32 	bl	8001da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800193c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001940:	2208      	movs	r2, #8
 8001942:	4619      	mov	r1, r3
 8001944:	481e      	ldr	r0, [pc, #120]	@ (80019c0 <MX_TIM8_Init+0x160>)
 8001946:	f005 fc13 	bl	8007170 <HAL_TIM_PWM_ConfigChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8001950:	f000 fa26 	bl	8001da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001954:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001958:	220c      	movs	r2, #12
 800195a:	4619      	mov	r1, r3
 800195c:	4818      	ldr	r0, [pc, #96]	@ (80019c0 <MX_TIM8_Init+0x160>)
 800195e:	f005 fc07 	bl	8007170 <HAL_TIM_PWM_ConfigChannel>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8001968:	f000 fa1a 	bl	8001da0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001980:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001984:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800198e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	4807      	ldr	r0, [pc, #28]	@ (80019c0 <MX_TIM8_Init+0x160>)
 80019a2:	f006 fc0b 	bl	80081bc <HAL_TIMEx_ConfigBreakDeadTime>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM8_Init+0x150>
  {
    Error_Handler();
 80019ac:	f000 f9f8 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80019b0:	4803      	ldr	r0, [pc, #12]	@ (80019c0 <MX_TIM8_Init+0x160>)
 80019b2:	f000 fd75 	bl	80024a0 <HAL_TIM_MspPostInit>

}
 80019b6:	bf00      	nop
 80019b8:	3758      	adds	r7, #88	@ 0x58
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000390 	.word	0x20000390
 80019c4:	40013400 	.word	0x40013400

080019c8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80019e6:	4b22      	ldr	r3, [pc, #136]	@ (8001a70 <MX_TIM15_Init+0xa8>)
 80019e8:	4a22      	ldr	r2, [pc, #136]	@ (8001a74 <MX_TIM15_Init+0xac>)
 80019ea:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 79;
 80019ec:	4b20      	ldr	r3, [pc, #128]	@ (8001a70 <MX_TIM15_Init+0xa8>)
 80019ee:	224f      	movs	r2, #79	@ 0x4f
 80019f0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a70 <MX_TIM15_Init+0xa8>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80019f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a70 <MX_TIM15_Init+0xa8>)
 80019fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019fe:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	@ (8001a70 <MX_TIM15_Init+0xa8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <MX_TIM15_Init+0xa8>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <MX_TIM15_Init+0xa8>)
 8001a0e:	2280      	movs	r2, #128	@ 0x80
 8001a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001a12:	4817      	ldr	r0, [pc, #92]	@ (8001a70 <MX_TIM15_Init+0xa8>)
 8001a14:	f005 f862 	bl	8006adc <HAL_TIM_IC_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001a1e:	f000 f9bf 	bl	8001da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480f      	ldr	r0, [pc, #60]	@ (8001a70 <MX_TIM15_Init+0xa8>)
 8001a32:	f006 fb3b 	bl	80080ac <HAL_TIMEx_MasterConfigSynchronization>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001a3c:	f000 f9b0 	bl	8001da0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001a40:	230a      	movs	r3, #10
 8001a42:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a44:	2301      	movs	r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	4619      	mov	r1, r3
 8001a56:	4806      	ldr	r0, [pc, #24]	@ (8001a70 <MX_TIM15_Init+0xa8>)
 8001a58:	f005 faed 	bl	8007036 <HAL_TIM_IC_ConfigChannel>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 8001a62:	f000 f99d 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	3720      	adds	r7, #32
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200003dc 	.word	0x200003dc
 8001a74:	40014000 	.word	0x40014000

08001a78 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <MX_TIM17_Init+0x44>)
 8001a7e:	4a10      	ldr	r2, [pc, #64]	@ (8001ac0 <MX_TIM17_Init+0x48>)
 8001a80:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 79;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <MX_TIM17_Init+0x44>)
 8001a84:	224f      	movs	r2, #79	@ 0x4f
 8001a86:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <MX_TIM17_Init+0x44>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <MX_TIM17_Init+0x44>)
 8001a90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a94:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a96:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <MX_TIM17_Init+0x44>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001a9c:	4b07      	ldr	r3, [pc, #28]	@ (8001abc <MX_TIM17_Init+0x44>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa2:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <MX_TIM17_Init+0x44>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001aa8:	4804      	ldr	r0, [pc, #16]	@ (8001abc <MX_TIM17_Init+0x44>)
 8001aaa:	f004 fe63 	bl	8006774 <HAL_TIM_Base_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001ab4:	f000 f974 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000428 	.word	0x20000428
 8001ac0:	40014800 	.word	0x40014800

08001ac4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ac8:	4b16      	ldr	r3, [pc, #88]	@ (8001b24 <MX_USART3_UART_Init+0x60>)
 8001aca:	4a17      	ldr	r2, [pc, #92]	@ (8001b28 <MX_USART3_UART_Init+0x64>)
 8001acc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ace:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <MX_USART3_UART_Init+0x60>)
 8001ad0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ad4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad6:	4b13      	ldr	r3, [pc, #76]	@ (8001b24 <MX_USART3_UART_Init+0x60>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001adc:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <MX_USART3_UART_Init+0x60>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ae2:	4b10      	ldr	r3, [pc, #64]	@ (8001b24 <MX_USART3_UART_Init+0x60>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b24 <MX_USART3_UART_Init+0x60>)
 8001aea:	220c      	movs	r2, #12
 8001aec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aee:	4b0d      	ldr	r3, [pc, #52]	@ (8001b24 <MX_USART3_UART_Init+0x60>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <MX_USART3_UART_Init+0x60>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <MX_USART3_UART_Init+0x60>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001b00:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <MX_USART3_UART_Init+0x60>)
 8001b02:	2220      	movs	r2, #32
 8001b04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001b06:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <MX_USART3_UART_Init+0x60>)
 8001b08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b0e:	4805      	ldr	r0, [pc, #20]	@ (8001b24 <MX_USART3_UART_Init+0x60>)
 8001b10:	f006 fbf0 	bl	80082f4 <HAL_UART_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8001b1a:	f000 f941 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000474 	.word	0x20000474
 8001b28:	40004800 	.word	0x40004800

08001b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	@ 0x28
 8001b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b42:	4b42      	ldr	r3, [pc, #264]	@ (8001c4c <MX_GPIO_Init+0x120>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b46:	4a41      	ldr	r2, [pc, #260]	@ (8001c4c <MX_GPIO_Init+0x120>)
 8001b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c4c <MX_GPIO_Init+0x120>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c4c <MX_GPIO_Init+0x120>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5e:	4a3b      	ldr	r2, [pc, #236]	@ (8001c4c <MX_GPIO_Init+0x120>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b66:	4b39      	ldr	r3, [pc, #228]	@ (8001c4c <MX_GPIO_Init+0x120>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	4b36      	ldr	r3, [pc, #216]	@ (8001c4c <MX_GPIO_Init+0x120>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b76:	4a35      	ldr	r2, [pc, #212]	@ (8001c4c <MX_GPIO_Init+0x120>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b7e:	4b33      	ldr	r3, [pc, #204]	@ (8001c4c <MX_GPIO_Init+0x120>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8a:	4b30      	ldr	r3, [pc, #192]	@ (8001c4c <MX_GPIO_Init+0x120>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c4c <MX_GPIO_Init+0x120>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b96:	4b2d      	ldr	r3, [pc, #180]	@ (8001c4c <MX_GPIO_Init+0x120>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2108      	movs	r1, #8
 8001ba6:	482a      	ldr	r0, [pc, #168]	@ (8001c50 <MX_GPIO_Init+0x124>)
 8001ba8:	f003 f9aa 	bl	8004f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8001bb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb6:	f003 f9a3 	bl	8004f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f243 0106 	movw	r1, #12294	@ 0x3006
 8001bc0:	4824      	ldr	r0, [pc, #144]	@ (8001c54 <MX_GPIO_Init+0x128>)
 8001bc2:	f003 f99d 	bl	8004f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	481c      	ldr	r0, [pc, #112]	@ (8001c50 <MX_GPIO_Init+0x124>)
 8001bde:	f002 ffe5 	bl	8004bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001be2:	2310      	movs	r3, #16
 8001be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bf2:	2306      	movs	r3, #6
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c00:	f002 ffd4 	bl	8004bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 8001c04:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c20:	f002 ffc4 	bl	8004bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13;
 8001c24:	f243 0306 	movw	r3, #12294	@ 0x3006
 8001c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4805      	ldr	r0, [pc, #20]	@ (8001c54 <MX_GPIO_Init+0x128>)
 8001c3e:	f002 ffb5 	bl	8004bac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c42:	bf00      	nop
 8001c44:	3728      	adds	r7, #40	@ 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	48000800 	.word	0x48000800
 8001c54:	48000400 	.word	0x48000400

08001c58 <HAL_UART_RxCpltCallback>:
  *
  * @param huart Pointer to UART handle that triggered the interrupt
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
    // Interpret the received bytes as float values
    Distance_Target = *(float *)&rx_buff[0];
 8001c60:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <HAL_UART_RxCpltCallback+0x34>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <HAL_UART_RxCpltCallback+0x38>)
 8001c66:	6013      	str	r3, [r2, #0]
    Angle_Target = *(float *)&rx_buff[4];
 8001c68:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <HAL_UART_RxCpltCallback+0x3c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c98 <HAL_UART_RxCpltCallback+0x40>)
 8001c6e:	6013      	str	r3, [r2, #0]

    // Clear the receive buffer
    memset(rx_buff, 0, sizeof(rx_buff));
 8001c70:	2208      	movs	r2, #8
 8001c72:	2100      	movs	r1, #0
 8001c74:	4805      	ldr	r0, [pc, #20]	@ (8001c8c <HAL_UART_RxCpltCallback+0x34>)
 8001c76:	f007 ff92 	bl	8009b9e <memset>

    // Restart UART reception
    HAL_UART_Receive_IT(&huart3, rx_buff, 8);
 8001c7a:	2208      	movs	r2, #8
 8001c7c:	4903      	ldr	r1, [pc, #12]	@ (8001c8c <HAL_UART_RxCpltCallback+0x34>)
 8001c7e:	4807      	ldr	r0, [pc, #28]	@ (8001c9c <HAL_UART_RxCpltCallback+0x44>)
 8001c80:	f006 fb86 	bl	8008390 <HAL_UART_Receive_IT>
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000520 	.word	0x20000520
 8001c90:	20000518 	.word	0x20000518
 8001c94:	20000524 	.word	0x20000524
 8001c98:	2000051c 	.word	0x2000051c
 8001c9c:	20000474 	.word	0x20000474

08001ca0 <HAL_TIM_IC_CaptureCallback>:
  *
  * @param htim Pointer to TIM handle that triggered the interrupt
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7f1b      	ldrb	r3, [r3, #28]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d14a      	bne.n	8001d46 <HAL_TIM_IC_CaptureCallback+0xa6>
    {
        if (Is_First_Captured == 0) // if the first value is not captured
 8001cb0:	4b27      	ldr	r3, [pc, #156]	@ (8001d50 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10b      	bne.n	8001cd0 <HAL_TIM_IC_CaptureCallback+0x30>
        {
            IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001cb8:	2100      	movs	r1, #0
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f005 fc36 	bl	800752c <HAL_TIM_ReadCapturedValue>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b23      	ldr	r3, [pc, #140]	@ (8001d54 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001cc6:	601a      	str	r2, [r3, #0]
            Is_First_Captured = 1;  // set the first captured as true
 8001cc8:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

            __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
            Is_First_Captured = 0; // set it back to false
        }
    }
}
 8001cce:	e03a      	b.n	8001d46 <HAL_TIM_IC_CaptureCallback+0xa6>
            IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f005 fc2a 	bl	800752c <HAL_TIM_ReadCapturedValue>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d58 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001cde:	601a      	str	r2, [r3, #0]
            if (IC_Val2 > IC_Val1)
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d58 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d54 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	dd07      	ble.n	8001cfc <HAL_TIM_IC_CaptureCallback+0x5c>
                Difference = IC_Val2 - IC_Val1;
 8001cec:	4b1a      	ldr	r3, [pc, #104]	@ (8001d58 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b18      	ldr	r3, [pc, #96]	@ (8001d54 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	4a19      	ldr	r2, [pc, #100]	@ (8001d5c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e00f      	b.n	8001d1c <HAL_TIM_IC_CaptureCallback+0x7c>
            else if (IC_Val1 > IC_Val2)
 8001cfc:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	dd09      	ble.n	8001d1c <HAL_TIM_IC_CaptureCallback+0x7c>
                Difference = (0xffff - IC_Val1) + IC_Val2;
 8001d08:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001d10:	33ff      	adds	r3, #255	@ 0xff
 8001d12:	4a11      	ldr	r2, [pc, #68]	@ (8001d58 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	4a10      	ldr	r2, [pc, #64]	@ (8001d5c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001d1a:	6013      	str	r3, [r2, #0]
            int refClock = TIMCLOCK / (PRESCALAR);
 8001d1c:	4b10      	ldr	r3, [pc, #64]	@ (8001d60 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001d1e:	60fb      	str	r3, [r7, #12]
            int mFactor = 1000000 / refClock;
 8001d20:	4a0f      	ldr	r2, [pc, #60]	@ (8001d60 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d28:	60bb      	str	r3, [r7, #8]
            usWidth = Difference * mFactor;
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	4a0b      	ldr	r2, [pc, #44]	@ (8001d64 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001d36:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	625a      	str	r2, [r3, #36]	@ 0x24
            Is_First_Captured = 0; // set it back to false
 8001d40:	4b03      	ldr	r3, [pc, #12]	@ (8001d50 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
}
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	2000050c 	.word	0x2000050c
 8001d54:	20000500 	.word	0x20000500
 8001d58:	20000504 	.word	0x20000504
 8001d5c:	20000508 	.word	0x20000508
 8001d60:	000f4240 	.word	0x000f4240
 8001d64:	200004fc 	.word	0x200004fc

08001d68 <_write>:
  * @param ptr Pointer to the data to be written
  * @param len Length of the data to be written
  * @retval Number of bytes written
  */
int _write(int file, char *ptr, int len)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
    for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	e009      	b.n	8001d8e <_write+0x26>
        ITM_SendChar(*ptr++);
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	60ba      	str	r2, [r7, #8]
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe ffb2 	bl	8000cec <ITM_SendChar>
    for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	dbf1      	blt.n	8001d7a <_write+0x12>

    return len;
 8001d96:	687b      	ldr	r3, [r7, #4]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <set_duty>:
 * @param[in] p_mot Pointer to the motor object structure.
 * @param[in] level Desired duty cycle percentage (-100 to 100).
 * @details This function constrains the level to the valid range and sets the
 * 			PWM duty cycle by updating the compare register pointer directly.
 */
void set_duty(motor_t* p_mot, float level) {
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	ed87 0a00 	vstr	s0, [r7]
	/// Constrain level to valid range
	if (level > 100) level = 100;
 8001dbc:	edd7 7a00 	vldr	s15, [r7]
 8001dc0:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001e7c <set_duty+0xcc>
 8001dc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dcc:	dd01      	ble.n	8001dd2 <set_duty+0x22>
 8001dce:	4b2c      	ldr	r3, [pc, #176]	@ (8001e80 <set_duty+0xd0>)
 8001dd0:	603b      	str	r3, [r7, #0]
    if (level < -100) level = -100;
 8001dd2:	edd7 7a00 	vldr	s15, [r7]
 8001dd6:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001e84 <set_duty+0xd4>
 8001dda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de2:	d501      	bpl.n	8001de8 <set_duty+0x38>
 8001de4:	4b28      	ldr	r3, [pc, #160]	@ (8001e88 <set_duty+0xd8>)
 8001de6:	603b      	str	r3, [r7, #0]
	/// Initialize pulse width variables
    uint32_t pulse1 = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
    uint32_t pulse2 = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60bb      	str	r3, [r7, #8]
    if(level > 0 ){
 8001df0:	edd7 7a00 	vldr	s15, [r7]
 8001df4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfc:	dd13      	ble.n	8001e26 <set_duty+0x76>
    	pulse2 = (uint32_t)((level * p_mot->Period) / 100);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e0a:	edd7 7a00 	vldr	s15, [r7]
 8001e0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e12:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8001e7c <set_duty+0xcc>
 8001e16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e1e:	ee17 3a90 	vmov	r3, s15
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	e01b      	b.n	8001e5e <set_duty+0xae>
    }
    else if(level < 0){
 8001e26:	edd7 7a00 	vldr	s15, [r7]
 8001e2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e32:	d514      	bpl.n	8001e5e <set_duty+0xae>
    	pulse1 = (uint32_t)((-level * p_mot->Period) / 100);
 8001e34:	edd7 7a00 	vldr	s15, [r7]
 8001e38:	eeb1 7a67 	vneg.f32	s14, s15
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	ee07 3a90 	vmov	s15, r3
 8001e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e4c:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001e7c <set_duty+0xcc>
 8001e50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e58:	ee17 3a90 	vmov	r3, s15
 8001e5c:	60fb      	str	r3, [r7, #12]
    }
    /// Set the PWM duty cycle by updating the compare register
    *(p_mot->chA) = pulse1;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	601a      	str	r2, [r3, #0]
    *(p_mot->chB) = pulse2;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	601a      	str	r2, [r3, #0]

}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	42c80000 	.word	0x42c80000
 8001e80:	42c80000 	.word	0x42c80000
 8001e84:	c2c80000 	.word	0xc2c80000
 8001e88:	c2c80000 	.word	0xc2c80000

08001e8c <run_control>:
 * @param[in] controller A pointer to a structure (controller_t) containing controller gains and relevant information
 * @param[in] motor A pointer to a structure (motor_t) containing motor data
 * @param[in] encoder A pointer to a structure (encoder_t) containing encoder-related data such as position, velocity, and the last counter value.
 * @details This function runs the motor controller loop that alters motor duty cycle to reach a position or velocity setpoint
 */
void run_control(controller_t *controller, motor_t *motor, encoder_t *encoder) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
	// Read the current position and velocity from the encoder
	read_encoder(encoder);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7fe feaf 	bl	8000bfc <read_encoder>

	// Calculate the error
	int32_t error = controller->velocity_setpoint - encoder->velocity;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]

	// Integral term calculation
	controller->esum += error;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	441a      	add	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	60da      	str	r2, [r3, #12]

	// Calculate the duty cycle
	float duty = controller->Pgain_velocity * error + controller->Igain_velocity * controller->esum;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	ed93 7a00 	vldr	s14, [r3]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	ee07 3a90 	vmov	s15, r3
 8001ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ede:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee6:	edc7 7a04 	vstr	s15, [r7, #16]
//	printf("Duty sent: %ld\n", (long)duty); // For debug

	// Apply to the motor
	set_duty(motor, duty);
 8001eea:	ed97 0a04 	vldr	s0, [r7, #16]
 8001eee:	68b8      	ldr	r0, [r7, #8]
 8001ef0:	f7ff ff5e 	bl	8001db0 <set_duty>


}
 8001ef4:	bf00      	nop
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <HAL_MspInit+0x50>)
 8001f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f06:	4a11      	ldr	r2, [pc, #68]	@ (8001f4c <HAL_MspInit+0x50>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f4c <HAL_MspInit+0x50>)
 8001f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <HAL_MspInit+0x50>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001f4c <HAL_MspInit+0x50>)
 8001f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f26:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <HAL_MspInit+0x50>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	2005      	movs	r0, #5
 8001f38:	f002 fd83 	bl	8004a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001f3c:	2005      	movs	r0, #5
 8001f3e:	f002 fd9c 	bl	8004a7a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000

08001f50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08e      	sub	sp, #56	@ 0x38
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a58      	ldr	r2, [pc, #352]	@ (80020d0 <HAL_ADC_MspInit+0x180>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d12d      	bne.n	8001fce <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001f72:	4b58      	ldr	r3, [pc, #352]	@ (80020d4 <HAL_ADC_MspInit+0x184>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	4a56      	ldr	r2, [pc, #344]	@ (80020d4 <HAL_ADC_MspInit+0x184>)
 8001f7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001f7c:	4b55      	ldr	r3, [pc, #340]	@ (80020d4 <HAL_ADC_MspInit+0x184>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d10b      	bne.n	8001f9c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001f84:	4b54      	ldr	r3, [pc, #336]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 8001f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f88:	4a53      	ldr	r2, [pc, #332]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 8001f8a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f90:	4b51      	ldr	r3, [pc, #324]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 8001f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f98:	623b      	str	r3, [r7, #32]
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9c:	4b4e      	ldr	r3, [pc, #312]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 8001f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa0:	4a4d      	ldr	r2, [pc, #308]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 8001fa2:	f043 0304 	orr.w	r3, r3, #4
 8001fa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa8:	4b4b      	ldr	r3, [pc, #300]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 8001faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4845      	ldr	r0, [pc, #276]	@ (80020dc <HAL_ADC_MspInit+0x18c>)
 8001fc8:	f002 fdf0 	bl	8004bac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001fcc:	e07c      	b.n	80020c8 <HAL_ADC_MspInit+0x178>
  else if(hadc->Instance==ADC2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a43      	ldr	r2, [pc, #268]	@ (80020e0 <HAL_ADC_MspInit+0x190>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d145      	bne.n	8002064 <HAL_ADC_MspInit+0x114>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80020d4 <HAL_ADC_MspInit+0x184>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	4a3d      	ldr	r2, [pc, #244]	@ (80020d4 <HAL_ADC_MspInit+0x184>)
 8001fe0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001fe2:	4b3c      	ldr	r3, [pc, #240]	@ (80020d4 <HAL_ADC_MspInit+0x184>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d10b      	bne.n	8002002 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001fea:	4b3b      	ldr	r3, [pc, #236]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fee:	4a3a      	ldr	r2, [pc, #232]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 8001ff0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ff6:	4b38      	ldr	r3, [pc, #224]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002002:	4b35      	ldr	r3, [pc, #212]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002006:	4a34      	ldr	r2, [pc, #208]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800200e:	4b32      	ldr	r3, [pc, #200]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201a:	4b2f      	ldr	r3, [pc, #188]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201e:	4a2e      	ldr	r2, [pc, #184]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002026:	4b2c      	ldr	r3, [pc, #176]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002032:	2306      	movs	r3, #6
 8002034:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002036:	2303      	movs	r3, #3
 8002038:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800203e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002042:	4619      	mov	r1, r3
 8002044:	4825      	ldr	r0, [pc, #148]	@ (80020dc <HAL_ADC_MspInit+0x18c>)
 8002046:	f002 fdb1 	bl	8004bac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800204a:	2301      	movs	r3, #1
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800204e:	230b      	movs	r3, #11
 8002050:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002056:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800205a:	4619      	mov	r1, r3
 800205c:	4821      	ldr	r0, [pc, #132]	@ (80020e4 <HAL_ADC_MspInit+0x194>)
 800205e:	f002 fda5 	bl	8004bac <HAL_GPIO_Init>
}
 8002062:	e031      	b.n	80020c8 <HAL_ADC_MspInit+0x178>
  else if(hadc->Instance==ADC3)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1f      	ldr	r2, [pc, #124]	@ (80020e8 <HAL_ADC_MspInit+0x198>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d12c      	bne.n	80020c8 <HAL_ADC_MspInit+0x178>
    HAL_RCC_ADC_CLK_ENABLED++;
 800206e:	4b19      	ldr	r3, [pc, #100]	@ (80020d4 <HAL_ADC_MspInit+0x184>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3301      	adds	r3, #1
 8002074:	4a17      	ldr	r2, [pc, #92]	@ (80020d4 <HAL_ADC_MspInit+0x184>)
 8002076:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002078:	4b16      	ldr	r3, [pc, #88]	@ (80020d4 <HAL_ADC_MspInit+0x184>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d10b      	bne.n	8002098 <HAL_ADC_MspInit+0x148>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002080:	4b15      	ldr	r3, [pc, #84]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 8002082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002084:	4a14      	ldr	r2, [pc, #80]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 8002086:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800208a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800208c:	4b12      	ldr	r3, [pc, #72]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 800208e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002090:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002098:	4b0f      	ldr	r3, [pc, #60]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209c:	4a0e      	ldr	r2, [pc, #56]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020a4:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <HAL_ADC_MspInit+0x188>)
 80020a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020b0:	2304      	movs	r3, #4
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b4:	2303      	movs	r3, #3
 80020b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020c0:	4619      	mov	r1, r3
 80020c2:	4806      	ldr	r0, [pc, #24]	@ (80020dc <HAL_ADC_MspInit+0x18c>)
 80020c4:	f002 fd72 	bl	8004bac <HAL_GPIO_Init>
}
 80020c8:	bf00      	nop
 80020ca:	3738      	adds	r7, #56	@ 0x38
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	50040000 	.word	0x50040000
 80020d4:	20000528 	.word	0x20000528
 80020d8:	40021000 	.word	0x40021000
 80020dc:	48000800 	.word	0x48000800
 80020e0:	50040100 	.word	0x50040100
 80020e4:	48000400 	.word	0x48000400
 80020e8:	50040200 	.word	0x50040200

080020ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b0aa      	sub	sp, #168	@ 0xa8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	2284      	movs	r2, #132	@ 0x84
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f007 fd46 	bl	8009b9e <memset>
  if(hi2c->Instance==I2C2)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a21      	ldr	r2, [pc, #132]	@ (800219c <HAL_I2C_MspInit+0xb0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d13b      	bne.n	8002194 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800211c:	2380      	movs	r3, #128	@ 0x80
 800211e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002120:	2300      	movs	r3, #0
 8002122:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002124:	f107 0310 	add.w	r3, r7, #16
 8002128:	4618      	mov	r0, r3
 800212a:	f003 fe97 	bl	8005e5c <HAL_RCCEx_PeriphCLKConfig>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002134:	f7ff fe34 	bl	8001da0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002138:	4b19      	ldr	r3, [pc, #100]	@ (80021a0 <HAL_I2C_MspInit+0xb4>)
 800213a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213c:	4a18      	ldr	r2, [pc, #96]	@ (80021a0 <HAL_I2C_MspInit+0xb4>)
 800213e:	f043 0302 	orr.w	r3, r3, #2
 8002142:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002144:	4b16      	ldr	r3, [pc, #88]	@ (80021a0 <HAL_I2C_MspInit+0xb4>)
 8002146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002150:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002154:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002158:	2312      	movs	r3, #18
 800215a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002164:	2303      	movs	r3, #3
 8002166:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800216a:	2304      	movs	r3, #4
 800216c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002170:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002174:	4619      	mov	r1, r3
 8002176:	480b      	ldr	r0, [pc, #44]	@ (80021a4 <HAL_I2C_MspInit+0xb8>)
 8002178:	f002 fd18 	bl	8004bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800217c:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <HAL_I2C_MspInit+0xb4>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002180:	4a07      	ldr	r2, [pc, #28]	@ (80021a0 <HAL_I2C_MspInit+0xb4>)
 8002182:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002186:	6593      	str	r3, [r2, #88]	@ 0x58
 8002188:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <HAL_I2C_MspInit+0xb4>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002194:	bf00      	nop
 8002196:	37a8      	adds	r7, #168	@ 0xa8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40005800 	.word	0x40005800
 80021a0:	40021000 	.word	0x40021000
 80021a4:	48000400 	.word	0x48000400

080021a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a16      	ldr	r2, [pc, #88]	@ (8002210 <HAL_TIM_Base_MspInit+0x68>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d114      	bne.n	80021e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021ba:	4b16      	ldr	r3, [pc, #88]	@ (8002214 <HAL_TIM_Base_MspInit+0x6c>)
 80021bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021be:	4a15      	ldr	r2, [pc, #84]	@ (8002214 <HAL_TIM_Base_MspInit+0x6c>)
 80021c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80021c6:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <HAL_TIM_Base_MspInit+0x6c>)
 80021c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	2018      	movs	r0, #24
 80021d8:	f002 fc33 	bl	8004a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80021dc:	2018      	movs	r0, #24
 80021de:	f002 fc4c 	bl	8004a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80021e2:	e010      	b.n	8002206 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002218 <HAL_TIM_Base_MspInit+0x70>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d10b      	bne.n	8002206 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80021ee:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <HAL_TIM_Base_MspInit+0x6c>)
 80021f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f2:	4a08      	ldr	r2, [pc, #32]	@ (8002214 <HAL_TIM_Base_MspInit+0x6c>)
 80021f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_TIM_Base_MspInit+0x6c>)
 80021fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40012c00 	.word	0x40012c00
 8002214:	40021000 	.word	0x40021000
 8002218:	40014800 	.word	0x40014800

0800221c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08e      	sub	sp, #56	@ 0x38
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800223c:	d129      	bne.n	8002292 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800223e:	4b45      	ldr	r3, [pc, #276]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x138>)
 8002240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002242:	4a44      	ldr	r2, [pc, #272]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x138>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6593      	str	r3, [r2, #88]	@ 0x58
 800224a:	4b42      	ldr	r3, [pc, #264]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x138>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	623b      	str	r3, [r7, #32]
 8002254:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	4b3f      	ldr	r3, [pc, #252]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x138>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	4a3e      	ldr	r2, [pc, #248]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x138>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002262:	4b3c      	ldr	r3, [pc, #240]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x138>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	61fb      	str	r3, [r7, #28]
 800226c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800226e:	2303      	movs	r3, #3
 8002270:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800227e:	2301      	movs	r3, #1
 8002280:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002282:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002286:	4619      	mov	r1, r3
 8002288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800228c:	f002 fc8e 	bl	8004bac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002290:	e05b      	b.n	800234a <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a30      	ldr	r2, [pc, #192]	@ (8002358 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d129      	bne.n	80022f0 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800229c:	4b2d      	ldr	r3, [pc, #180]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x138>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x138>)
 80022a2:	f043 0302 	orr.w	r3, r3, #2
 80022a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80022a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x138>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b4:	4b27      	ldr	r3, [pc, #156]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x138>)
 80022b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b8:	4a26      	ldr	r2, [pc, #152]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x138>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022c0:	4b24      	ldr	r3, [pc, #144]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x138>)
 80022c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022cc:	23c0      	movs	r3, #192	@ 0xc0
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022dc:	2302      	movs	r3, #2
 80022de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022e4:	4619      	mov	r1, r3
 80022e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ea:	f002 fc5f 	bl	8004bac <HAL_GPIO_Init>
}
 80022ee:	e02c      	b.n	800234a <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a19      	ldr	r2, [pc, #100]	@ (800235c <HAL_TIM_Encoder_MspInit+0x140>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d127      	bne.n	800234a <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022fa:	4b16      	ldr	r3, [pc, #88]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x138>)
 80022fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fe:	4a15      	ldr	r2, [pc, #84]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x138>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6593      	str	r3, [r2, #88]	@ 0x58
 8002306:	4b13      	ldr	r3, [pc, #76]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x138>)
 8002308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002312:	4b10      	ldr	r3, [pc, #64]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x138>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002316:	4a0f      	ldr	r2, [pc, #60]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x138>)
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800231e:	4b0d      	ldr	r3, [pc, #52]	@ (8002354 <HAL_TIM_Encoder_MspInit+0x138>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800232a:	23c0      	movs	r3, #192	@ 0xc0
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2300      	movs	r3, #0
 8002338:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800233a:	2302      	movs	r3, #2
 800233c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002342:	4619      	mov	r1, r3
 8002344:	4806      	ldr	r0, [pc, #24]	@ (8002360 <HAL_TIM_Encoder_MspInit+0x144>)
 8002346:	f002 fc31 	bl	8004bac <HAL_GPIO_Init>
}
 800234a:	bf00      	nop
 800234c:	3738      	adds	r7, #56	@ 0x38
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
 8002358:	40000400 	.word	0x40000400
 800235c:	40000800 	.word	0x40000800
 8002360:	48000400 	.word	0x48000400

08002364 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08c      	sub	sp, #48	@ 0x30
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 031c 	add.w	r3, r7, #28
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a33      	ldr	r2, [pc, #204]	@ (8002450 <HAL_TIM_IC_MspInit+0xec>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d129      	bne.n	80023da <HAL_TIM_IC_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002386:	4b33      	ldr	r3, [pc, #204]	@ (8002454 <HAL_TIM_IC_MspInit+0xf0>)
 8002388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238a:	4a32      	ldr	r2, [pc, #200]	@ (8002454 <HAL_TIM_IC_MspInit+0xf0>)
 800238c:	f043 0308 	orr.w	r3, r3, #8
 8002390:	6593      	str	r3, [r2, #88]	@ 0x58
 8002392:	4b30      	ldr	r3, [pc, #192]	@ (8002454 <HAL_TIM_IC_MspInit+0xf0>)
 8002394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	61bb      	str	r3, [r7, #24]
 800239c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239e:	4b2d      	ldr	r3, [pc, #180]	@ (8002454 <HAL_TIM_IC_MspInit+0xf0>)
 80023a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002454 <HAL_TIM_IC_MspInit+0xf0>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002454 <HAL_TIM_IC_MspInit+0xf0>)
 80023ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023b6:	230c      	movs	r3, #12
 80023b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80023c6:	2302      	movs	r3, #2
 80023c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ca:	f107 031c 	add.w	r3, r7, #28
 80023ce:	4619      	mov	r1, r3
 80023d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023d4:	f002 fbea 	bl	8004bac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80023d8:	e035      	b.n	8002446 <HAL_TIM_IC_MspInit+0xe2>
  else if(htim_ic->Instance==TIM15)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1e      	ldr	r2, [pc, #120]	@ (8002458 <HAL_TIM_IC_MspInit+0xf4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d130      	bne.n	8002446 <HAL_TIM_IC_MspInit+0xe2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80023e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <HAL_TIM_IC_MspInit+0xf0>)
 80023e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002454 <HAL_TIM_IC_MspInit+0xf0>)
 80023ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80023f0:	4b18      	ldr	r3, [pc, #96]	@ (8002454 <HAL_TIM_IC_MspInit+0xf0>)
 80023f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fc:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <HAL_TIM_IC_MspInit+0xf0>)
 80023fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002400:	4a14      	ldr	r2, [pc, #80]	@ (8002454 <HAL_TIM_IC_MspInit+0xf0>)
 8002402:	f043 0302 	orr.w	r3, r3, #2
 8002406:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002408:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <HAL_TIM_IC_MspInit+0xf0>)
 800240a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002414:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002426:	230e      	movs	r3, #14
 8002428:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242a:	f107 031c 	add.w	r3, r7, #28
 800242e:	4619      	mov	r1, r3
 8002430:	480a      	ldr	r0, [pc, #40]	@ (800245c <HAL_TIM_IC_MspInit+0xf8>)
 8002432:	f002 fbbb 	bl	8004bac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002436:	2200      	movs	r2, #0
 8002438:	2100      	movs	r1, #0
 800243a:	2018      	movs	r0, #24
 800243c:	f002 fb01 	bl	8004a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002440:	2018      	movs	r0, #24
 8002442:	f002 fb1a 	bl	8004a7a <HAL_NVIC_EnableIRQ>
}
 8002446:	bf00      	nop
 8002448:	3730      	adds	r7, #48	@ 0x30
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40000c00 	.word	0x40000c00
 8002454:	40021000 	.word	0x40021000
 8002458:	40014000 	.word	0x40014000
 800245c:	48000400 	.word	0x48000400

08002460 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0a      	ldr	r2, [pc, #40]	@ (8002498 <HAL_TIM_PWM_MspInit+0x38>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d10b      	bne.n	800248a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002472:	4b0a      	ldr	r3, [pc, #40]	@ (800249c <HAL_TIM_PWM_MspInit+0x3c>)
 8002474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002476:	4a09      	ldr	r2, [pc, #36]	@ (800249c <HAL_TIM_PWM_MspInit+0x3c>)
 8002478:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800247c:	6613      	str	r3, [r2, #96]	@ 0x60
 800247e:	4b07      	ldr	r3, [pc, #28]	@ (800249c <HAL_TIM_PWM_MspInit+0x3c>)
 8002480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002482:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40013400 	.word	0x40013400
 800249c:	40021000 	.word	0x40021000

080024a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	@ 0x28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a23      	ldr	r2, [pc, #140]	@ (800254c <HAL_TIM_MspPostInit+0xac>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d11e      	bne.n	8002500 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	4b23      	ldr	r3, [pc, #140]	@ (8002550 <HAL_TIM_MspPostInit+0xb0>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c6:	4a22      	ldr	r2, [pc, #136]	@ (8002550 <HAL_TIM_MspPostInit+0xb0>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ce:	4b20      	ldr	r3, [pc, #128]	@ (8002550 <HAL_TIM_MspPostInit+0xb0>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80024da:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80024de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024ec:	2301      	movs	r3, #1
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	4619      	mov	r1, r3
 80024f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024fa:	f002 fb57 	bl	8004bac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80024fe:	e021      	b.n	8002544 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM8)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a13      	ldr	r2, [pc, #76]	@ (8002554 <HAL_TIM_MspPostInit+0xb4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d11c      	bne.n	8002544 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800250a:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <HAL_TIM_MspPostInit+0xb0>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250e:	4a10      	ldr	r2, [pc, #64]	@ (8002550 <HAL_TIM_MspPostInit+0xb0>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002516:	4b0e      	ldr	r3, [pc, #56]	@ (8002550 <HAL_TIM_MspPostInit+0xb0>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002522:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002530:	2300      	movs	r3, #0
 8002532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002534:	2303      	movs	r3, #3
 8002536:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4619      	mov	r1, r3
 800253e:	4806      	ldr	r0, [pc, #24]	@ (8002558 <HAL_TIM_MspPostInit+0xb8>)
 8002540:	f002 fb34 	bl	8004bac <HAL_GPIO_Init>
}
 8002544:	bf00      	nop
 8002546:	3728      	adds	r7, #40	@ 0x28
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40012c00 	.word	0x40012c00
 8002550:	40021000 	.word	0x40021000
 8002554:	40013400 	.word	0x40013400
 8002558:	48000800 	.word	0x48000800

0800255c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b0aa      	sub	sp, #168	@ 0xa8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002574:	f107 0310 	add.w	r3, r7, #16
 8002578:	2284      	movs	r2, #132	@ 0x84
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f007 fb0e 	bl	8009b9e <memset>
  if(huart->Instance==USART3)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a25      	ldr	r2, [pc, #148]	@ (800261c <HAL_UART_MspInit+0xc0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d142      	bne.n	8002612 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800258c:	2304      	movs	r3, #4
 800258e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002590:	2300      	movs	r3, #0
 8002592:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002594:	f107 0310 	add.w	r3, r7, #16
 8002598:	4618      	mov	r0, r3
 800259a:	f003 fc5f 	bl	8005e5c <HAL_RCCEx_PeriphCLKConfig>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025a4:	f7ff fbfc 	bl	8001da0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80025a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002620 <HAL_UART_MspInit+0xc4>)
 80025aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002620 <HAL_UART_MspInit+0xc4>)
 80025ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80025b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002620 <HAL_UART_MspInit+0xc4>)
 80025b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c0:	4b17      	ldr	r3, [pc, #92]	@ (8002620 <HAL_UART_MspInit+0xc4>)
 80025c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c4:	4a16      	ldr	r2, [pc, #88]	@ (8002620 <HAL_UART_MspInit+0xc4>)
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025cc:	4b14      	ldr	r3, [pc, #80]	@ (8002620 <HAL_UART_MspInit+0xc4>)
 80025ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80025d8:	2330      	movs	r3, #48	@ 0x30
 80025da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ea:	2303      	movs	r3, #3
 80025ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025f0:	2307      	movs	r3, #7
 80025f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80025fa:	4619      	mov	r1, r3
 80025fc:	4809      	ldr	r0, [pc, #36]	@ (8002624 <HAL_UART_MspInit+0xc8>)
 80025fe:	f002 fad5 	bl	8004bac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	2027      	movs	r0, #39	@ 0x27
 8002608:	f002 fa1b 	bl	8004a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800260c:	2027      	movs	r0, #39	@ 0x27
 800260e:	f002 fa34 	bl	8004a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002612:	bf00      	nop
 8002614:	37a8      	adds	r7, #168	@ 0xa8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40004800 	.word	0x40004800
 8002620:	40021000 	.word	0x40021000
 8002624:	48000800 	.word	0x48000800

08002628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800262c:	bf00      	nop
 800262e:	e7fd      	b.n	800262c <NMI_Handler+0x4>

08002630 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <HardFault_Handler+0x4>

08002638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800263c:	bf00      	nop
 800263e:	e7fd      	b.n	800263c <MemManage_Handler+0x4>

08002640 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <BusFault_Handler+0x4>

08002648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <UsageFault_Handler+0x4>

08002650 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800267e:	f000 fec3 	bl	8003408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}

08002686 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002686:	b480      	push	{r7}
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002698:	4803      	ldr	r0, [pc, #12]	@ (80026a8 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800269a:	f004 fbca 	bl	8006e32 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800269e:	4803      	ldr	r0, [pc, #12]	@ (80026ac <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80026a0:	f004 fbc7 	bl	8006e32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80026a4:	bf00      	nop
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000214 	.word	0x20000214
 80026ac:	200003dc 	.word	0x200003dc

080026b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80026b4:	4802      	ldr	r0, [pc, #8]	@ (80026c0 <USART3_IRQHandler+0x10>)
 80026b6:	f005 feb7 	bl	8008428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000474 	.word	0x20000474

080026c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	e00a      	b.n	80026ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026d6:	f3af 8000 	nop.w
 80026da:	4601      	mov	r1, r0
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	60ba      	str	r2, [r7, #8]
 80026e2:	b2ca      	uxtb	r2, r1
 80026e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	3301      	adds	r3, #1
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	dbf0      	blt.n	80026d6 <_read+0x12>
  }

  return len;
 80026f4:	687b      	ldr	r3, [r7, #4]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <_close>:
  }
  return len;
}

int _close(int file)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002726:	605a      	str	r2, [r3, #4]
  return 0;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <_isatty>:

int _isatty(int file)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800273e:	2301      	movs	r3, #1
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002770:	4a14      	ldr	r2, [pc, #80]	@ (80027c4 <_sbrk+0x5c>)
 8002772:	4b15      	ldr	r3, [pc, #84]	@ (80027c8 <_sbrk+0x60>)
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800277c:	4b13      	ldr	r3, [pc, #76]	@ (80027cc <_sbrk+0x64>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002784:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <_sbrk+0x64>)
 8002786:	4a12      	ldr	r2, [pc, #72]	@ (80027d0 <_sbrk+0x68>)
 8002788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800278a:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	429a      	cmp	r2, r3
 8002796:	d207      	bcs.n	80027a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002798:	f007 fa50 	bl	8009c3c <__errno>
 800279c:	4603      	mov	r3, r0
 800279e:	220c      	movs	r2, #12
 80027a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
 80027a6:	e009      	b.n	80027bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027a8:	4b08      	ldr	r3, [pc, #32]	@ (80027cc <_sbrk+0x64>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ae:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <_sbrk+0x64>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	4a05      	ldr	r2, [pc, #20]	@ (80027cc <_sbrk+0x64>)
 80027b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ba:	68fb      	ldr	r3, [r7, #12]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20018000 	.word	0x20018000
 80027c8:	00000400 	.word	0x00000400
 80027cc:	2000052c 	.word	0x2000052c
 80027d0:	200006c0 	.word	0x200006c0

080027d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027d8:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <SystemInit+0x20>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027de:	4a05      	ldr	r2, [pc, #20]	@ (80027f4 <SystemInit+0x20>)
 80027e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <task1_run>:
 * @brief Run task 1 FSM, which includes diagnostics and battery level check.
 * @param State Pointer to the state variable.
 * @param Analog2 ADC handle for battery level check.
 * @param Kill Pointer to the kill switch variable.
 */
void task1_run(uint8_t* State, ADC_HandleTypeDef Analog2,uint8_t* Kill) {
 80027f8:	b084      	sub	sp, #16
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	f107 0014 	add.w	r0, r7, #20
 8002806:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    // Task 1 implementation
    while(1) {
        switch(*State) {
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <task1_run+0x20>
 8002812:	2b01      	cmp	r3, #1
 8002814:	d009      	beq.n	800282a <task1_run+0x32>
            *State = 1; // Always return to state 1

            break;

        }
        break;
 8002816:	e02c      	b.n	8002872 <task1_run+0x7a>
            HAL_ADC_Start(&Analog2);
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	4618      	mov	r0, r3
 800281e:	f001 f947 	bl	8003ab0 <HAL_ADC_Start>
            *State = 1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]
            break;
 8002828:	e023      	b.n	8002872 <task1_run+0x7a>
            Bat_Res = HAL_ADC_GetValue(&Analog2);
 800282a:	f107 0314 	add.w	r3, r7, #20
 800282e:	4618      	mov	r0, r3
 8002830:	f001 fad0 	bl	8003dd4 <HAL_ADC_GetValue>
 8002834:	4603      	mov	r3, r0
 8002836:	b29a      	uxth	r2, r3
 8002838:	4b12      	ldr	r3, [pc, #72]	@ (8002884 <task1_run+0x8c>)
 800283a:	801a      	strh	r2, [r3, #0]
            Bat_Res = HAL_ADC_GetValue(&Analog2); // Have to do it twice i think
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	4618      	mov	r0, r3
 8002842:	f001 fac7 	bl	8003dd4 <HAL_ADC_GetValue>
 8002846:	4603      	mov	r3, r0
 8002848:	b29a      	uxth	r2, r3
 800284a:	4b0e      	ldr	r3, [pc, #56]	@ (8002884 <task1_run+0x8c>)
 800284c:	801a      	strh	r2, [r3, #0]
            HAL_ADC_Start(&Analog2);
 800284e:	f107 0314 	add.w	r3, r7, #20
 8002852:	4618      	mov	r0, r3
 8002854:	f001 f92c 	bl	8003ab0 <HAL_ADC_Start>
            if (Bat_Res < 3303) {
 8002858:	4b0a      	ldr	r3, [pc, #40]	@ (8002884 <task1_run+0x8c>)
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	f640 42e6 	movw	r2, #3302	@ 0xce6
 8002860:	4293      	cmp	r3, r2
 8002862:	d802      	bhi.n	800286a <task1_run+0x72>
                *Kill = 1; // Kill if battery too low
 8002864:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002866:	2201      	movs	r2, #1
 8002868:	701a      	strb	r2, [r3, #0]
            *State = 1; // Always return to state 1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
            break;
 8002870:	bf00      	nop
        break;
 8002872:	bf00      	nop
    }
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800287e:	b004      	add	sp, #16
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000530 	.word	0x20000530

08002888 <task2_run>:
 * @param ArmON Pointer to the arm system status flag.
 * @param MDON Pointer to the metal detector on/off flag.
 * @param OPENMV Pointer to the OpenMV camera status flag.
 */
void task2_run(uint8_t* State, uint8_t* BatKill, uint8_t* RadKill, int* usWidth, uint8_t* DriveON, uint8_t* ArmON, uint8_t* MDON, uint8_t* OPENMV)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
    // Task 2 implementation
    while(1) {
        switch(*State) {
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <task2_run+0x1c>
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d004      	beq.n	80028ac <task2_run+0x24>
            *State = 1; // Always return to state 1
            printf("%d\r\n", *usWidth);
            break;

        }
        break;
 80028a2:	e04e      	b.n	8002942 <task2_run+0xba>
            *State = 1;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]
            break;
 80028aa:	e04a      	b.n	8002942 <task2_run+0xba>
            if((abs(*usWidth - 1950) > 200) & (*usWidth > 500)) {
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f2a3 739e 	subw	r3, r3, #1950	@ 0x79e
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bfb8      	it	lt
 80028b8:	425b      	neglt	r3, r3
 80028ba:	2bc8      	cmp	r3, #200	@ 0xc8
 80028bc:	bfcc      	ite	gt
 80028be:	2301      	movgt	r3, #1
 80028c0:	2300      	movle	r3, #0
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80028cc:	bfcc      	ite	gt
 80028ce:	2301      	movgt	r3, #1
 80028d0:	2300      	movle	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	4013      	ands	r3, r2
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00c      	beq.n	80028f6 <task2_run+0x6e>
                *RadKill = 1;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	701a      	strb	r2, [r3, #0]
                *DriveON = 0;
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
                *ArmON = 0;
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
                *MDON = 0;
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
 80028f4:	e00b      	b.n	800290e <task2_run+0x86>
                *RadKill = 0;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
                *DriveON = 1;
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2201      	movs	r2, #1
 8002900:	701a      	strb	r2, [r3, #0]
                *ArmON = 1;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
                *MDON = 1;
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]
            if (*BatKill == 1) {
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d10b      	bne.n	800292e <task2_run+0xa6>
                *DriveON = 0;
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
                *ArmON = 0;
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
                *MDON = 0;
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
                *OPENMV = 0;
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
            *State = 1; // Always return to state 1
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]
            printf("%d\r\n", *usWidth);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4619      	mov	r1, r3
 800293a:	4804      	ldr	r0, [pc, #16]	@ (800294c <task2_run+0xc4>)
 800293c:	f007 f8da 	bl	8009af4 <iprintf>
            break;
 8002940:	bf00      	nop
        break;
 8002942:	bf00      	nop
    }
}
 8002944:	bf00      	nop
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	0800a804 	.word	0x0800a804

08002950 <task4_run>:
 * @param Metal_Found Pointer to the metal found status flag.
 * @param Analog1 ADC handle for the first ADC channel.
 * @param Analog2 ADC handle for the second ADC channel.
 * @param Analog3 ADC handle for the third ADC channel.
 */
void task4_run(uint8_t* State, uint8_t* MDON, uint32_t* sumval, TIM_HandleTypeDef Timer, uint8_t* Metal_Found, ADC_HandleTypeDef Analog1, ADC_HandleTypeDef Analog2, ADC_HandleTypeDef Analog3) {
 8002950:	b082      	sub	sp, #8
 8002952:	b5b0      	push	{r4, r5, r7, lr}
 8002954:	b094      	sub	sp, #80	@ 0x50
 8002956:	af10      	add	r7, sp, #64	@ 0x40
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (1) {
        switch (*State) {
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d025      	beq.n	80029b4 <task4_run+0x64>
 8002968:	2b02      	cmp	r3, #2
 800296a:	f300 813d 	bgt.w	8002be8 <task4_run+0x298>
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <task4_run+0x28>
 8002972:	2b01      	cmp	r3, #1
 8002974:	d004      	beq.n	8002980 <task4_run+0x30>
                    }
                }
                *State = 1; // Always return to State 1
                break;
        }
        break;
 8002976:	e137      	b.n	8002be8 <task4_run+0x298>
                *State = 1;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
                break;
 800297e:	e133      	b.n	8002be8 <task4_run+0x298>
                if (*MDON == 1) {
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d10a      	bne.n	800299e <task4_run+0x4e>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002988:	2201      	movs	r2, #1
 800298a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800298e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002992:	f002 fab5 	bl	8004f00 <HAL_GPIO_WritePin>
                    *State = 2; // Go to state 2
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2202      	movs	r2, #2
 800299a:	701a      	strb	r2, [r3, #0]
                break;
 800299c:	e124      	b.n	8002be8 <task4_run+0x298>
                    *sumval = 0;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80029a4:	2200      	movs	r2, #0
 80029a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029ae:	f002 faa7 	bl	8004f00 <HAL_GPIO_WritePin>
                break;
 80029b2:	e119      	b.n	8002be8 <task4_run+0x298>
                if (HAL_ADC_PollForConversion(&Analog3, 10000) == HAL_OK) {
 80029b4:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 80029b8:	f242 7110 	movw	r1, #10000	@ 0x2710
 80029bc:	4618      	mov	r0, r3
 80029be:	f001 f931 	bl	8003c24 <HAL_ADC_PollForConversion>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f040 810e 	bne.w	8002be6 <task4_run+0x296>
                    Delay_MD = HAL_ADC_GetValue(&Analog3);
 80029ca:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 80029ce:	4618      	mov	r0, r3
 80029d0:	f001 fa00 	bl	8003dd4 <HAL_ADC_GetValue>
 80029d4:	4603      	mov	r3, r0
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	4b87      	ldr	r3, [pc, #540]	@ (8002bf8 <task4_run+0x2a8>)
 80029da:	801a      	strh	r2, [r3, #0]
                    HAL_ADC_Start(&Analog3);
 80029dc:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 80029e0:	4618      	mov	r0, r3
 80029e2:	f001 f865 	bl	8003ab0 <HAL_ADC_Start>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80029e6:	2201      	movs	r2, #1
 80029e8:	2108      	movs	r1, #8
 80029ea:	4884      	ldr	r0, [pc, #528]	@ (8002bfc <task4_run+0x2ac>)
 80029ec:	f002 fa88 	bl	8004f00 <HAL_GPIO_WritePin>
                for (i = 0; i < 9; i++) {
 80029f0:	4b83      	ldr	r3, [pc, #524]	@ (8002c00 <task4_run+0x2b0>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	e046      	b.n	8002a86 <task4_run+0x136>
                    Delay_us(Timer, impuls);
 80029f8:	4b82      	ldr	r3, [pc, #520]	@ (8002c04 <task4_run+0x2b4>)
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80029fe:	466d      	mov	r5, sp
 8002a00:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8002a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a10:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002a14:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a1e:	f7fe f8d5 	bl	8000bcc <Delay_us>
                    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8002a22:	2200      	movs	r2, #0
 8002a24:	2108      	movs	r1, #8
 8002a26:	4875      	ldr	r0, [pc, #468]	@ (8002bfc <task4_run+0x2ac>)
 8002a28:	f002 fa6a 	bl	8004f00 <HAL_GPIO_WritePin>
                    Delay_us(Timer, Delay_MD);
 8002a2c:	4b72      	ldr	r3, [pc, #456]	@ (8002bf8 <task4_run+0x2a8>)
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002a32:	466d      	mov	r5, sp
 8002a34:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8002a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a44:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002a48:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a52:	f7fe f8bb 	bl	8000bcc <Delay_us>
                    val[0] = HAL_ADC_GetValue(&Analog1);
 8002a56:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f001 f9ba 	bl	8003dd4 <HAL_ADC_GetValue>
 8002a60:	4603      	mov	r3, r0
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	4b68      	ldr	r3, [pc, #416]	@ (8002c08 <task4_run+0x2b8>)
 8002a66:	801a      	strh	r2, [r3, #0]
                    HAL_ADC_Start(&Analog1);
 8002a68:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f001 f81f 	bl	8003ab0 <HAL_ADC_Start>
                    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8002a72:	2201      	movs	r2, #1
 8002a74:	2108      	movs	r1, #8
 8002a76:	4861      	ldr	r0, [pc, #388]	@ (8002bfc <task4_run+0x2ac>)
 8002a78:	f002 fa42 	bl	8004f00 <HAL_GPIO_WritePin>
                for (i = 0; i < 9; i++) {
 8002a7c:	4b60      	ldr	r3, [pc, #384]	@ (8002c00 <task4_run+0x2b0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3301      	adds	r3, #1
 8002a82:	4a5f      	ldr	r2, [pc, #380]	@ (8002c00 <task4_run+0x2b0>)
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	4b5e      	ldr	r3, [pc, #376]	@ (8002c00 <task4_run+0x2b0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	ddb4      	ble.n	80029f8 <task4_run+0xa8>
                Delay_us(Timer, impuls);
 8002a8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002c04 <task4_run+0x2b4>)
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002a94:	466d      	mov	r5, sp
 8002a96:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8002a9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002aaa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ab2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ab4:	f7fe f88a 	bl	8000bcc <Delay_us>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2108      	movs	r1, #8
 8002abc:	484f      	ldr	r0, [pc, #316]	@ (8002bfc <task4_run+0x2ac>)
 8002abe:	f002 fa1f 	bl	8004f00 <HAL_GPIO_WritePin>
                Delay_us(Timer, Delay_MD);
 8002ac2:	4b4d      	ldr	r3, [pc, #308]	@ (8002bf8 <task4_run+0x2a8>)
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002ac8:	466d      	mov	r5, sp
 8002aca:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8002ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ada:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002ade:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002ae2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ae6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ae8:	f7fe f870 	bl	8000bcc <Delay_us>
                val[9] = HAL_ADC_GetValue(&Analog1);
 8002aec:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002af0:	4618      	mov	r0, r3
 8002af2:	f001 f96f 	bl	8003dd4 <HAL_ADC_GetValue>
 8002af6:	4603      	mov	r3, r0
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	4b43      	ldr	r3, [pc, #268]	@ (8002c08 <task4_run+0x2b8>)
 8002afc:	825a      	strh	r2, [r3, #18]
                HAL_ADC_Start(&Analog1);
 8002afe:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 ffd4 	bl	8003ab0 <HAL_ADC_Start>
                *sumval = val[0] + val[1] + val[2] + val[3] + val[4] + val[5] + val[6] + val[7] + val[8] + val[9];
 8002b08:	4b3f      	ldr	r3, [pc, #252]	@ (8002c08 <task4_run+0x2b8>)
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c08 <task4_run+0x2b8>)
 8002b10:	885b      	ldrh	r3, [r3, #2]
 8002b12:	4413      	add	r3, r2
 8002b14:	4a3c      	ldr	r2, [pc, #240]	@ (8002c08 <task4_run+0x2b8>)
 8002b16:	8892      	ldrh	r2, [r2, #4]
 8002b18:	4413      	add	r3, r2
 8002b1a:	4a3b      	ldr	r2, [pc, #236]	@ (8002c08 <task4_run+0x2b8>)
 8002b1c:	88d2      	ldrh	r2, [r2, #6]
 8002b1e:	4413      	add	r3, r2
 8002b20:	4a39      	ldr	r2, [pc, #228]	@ (8002c08 <task4_run+0x2b8>)
 8002b22:	8912      	ldrh	r2, [r2, #8]
 8002b24:	4413      	add	r3, r2
 8002b26:	4a38      	ldr	r2, [pc, #224]	@ (8002c08 <task4_run+0x2b8>)
 8002b28:	8952      	ldrh	r2, [r2, #10]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	4a36      	ldr	r2, [pc, #216]	@ (8002c08 <task4_run+0x2b8>)
 8002b2e:	8992      	ldrh	r2, [r2, #12]
 8002b30:	4413      	add	r3, r2
 8002b32:	4a35      	ldr	r2, [pc, #212]	@ (8002c08 <task4_run+0x2b8>)
 8002b34:	89d2      	ldrh	r2, [r2, #14]
 8002b36:	4413      	add	r3, r2
 8002b38:	4a33      	ldr	r2, [pc, #204]	@ (8002c08 <task4_run+0x2b8>)
 8002b3a:	8a12      	ldrh	r2, [r2, #16]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	4a32      	ldr	r2, [pc, #200]	@ (8002c08 <task4_run+0x2b8>)
 8002b40:	8a52      	ldrh	r2, [r2, #18]
 8002b42:	4413      	add	r3, r2
 8002b44:	461a      	mov	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	601a      	str	r2, [r3, #0]
                *sumval = *sumval / 5;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a2f      	ldr	r2, [pc, #188]	@ (8002c0c <task4_run+0x2bc>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	089a      	lsrs	r2, r3, #2
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	601a      	str	r2, [r3, #0]
                base = HAL_ADC_GetValue(&Analog2);
 8002b5a:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f001 f938 	bl	8003dd4 <HAL_ADC_GetValue>
 8002b64:	4603      	mov	r3, r0
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	4b29      	ldr	r3, [pc, #164]	@ (8002c10 <task4_run+0x2c0>)
 8002b6a:	801a      	strh	r2, [r3, #0]
                HAL_ADC_Start(&Analog2);
 8002b6c:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 ff9d 	bl	8003ab0 <HAL_ADC_Start>
                if (*sumval > base) {
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a25      	ldr	r2, [pc, #148]	@ (8002c10 <task4_run+0x2c0>)
 8002b7c:	8812      	ldrh	r2, [r2, #0]
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d911      	bls.n	8002ba6 <task4_run+0x256>
                    *Metal_Found = 1;
 8002b82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]
                    Countdown_Start = 1;
 8002b88:	4b22      	ldr	r3, [pc, #136]	@ (8002c14 <task4_run+0x2c4>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
                    Countdown_Time = HAL_GetTick(); // Find EndTime using HAL
 8002b8e:	f000 fc4f 	bl	8003430 <HAL_GetTick>
 8002b92:	4603      	mov	r3, r0
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	4b20      	ldr	r3, [pc, #128]	@ (8002c18 <task4_run+0x2c8>)
 8002b98:	801a      	strh	r2, [r3, #0]
                    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	2108      	movs	r1, #8
 8002b9e:	4817      	ldr	r0, [pc, #92]	@ (8002bfc <task4_run+0x2ac>)
 8002ba0:	f002 f9ae 	bl	8004f00 <HAL_GPIO_WritePin>
 8002ba4:	e01b      	b.n	8002bde <task4_run+0x28e>
                    if (Countdown_Start == 1) {
 8002ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c14 <task4_run+0x2c4>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d112      	bne.n	8002bd4 <task4_run+0x284>
                        if (HAL_GetTick() > 3000) {
 8002bae:	f000 fc3f 	bl	8003430 <HAL_GetTick>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d910      	bls.n	8002bde <task4_run+0x28e>
                            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2108      	movs	r1, #8
 8002bc0:	480e      	ldr	r0, [pc, #56]	@ (8002bfc <task4_run+0x2ac>)
 8002bc2:	f002 f99d 	bl	8004f00 <HAL_GPIO_WritePin>
                            *Metal_Found = 0;
 8002bc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
                            Countdown_Start = 0;
 8002bcc:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <task4_run+0x2c4>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	e004      	b.n	8002bde <task4_run+0x28e>
                        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2108      	movs	r1, #8
 8002bd8:	4808      	ldr	r0, [pc, #32]	@ (8002bfc <task4_run+0x2ac>)
 8002bda:	f002 f991 	bl	8004f00 <HAL_GPIO_WritePin>
                *State = 1; // Always return to State 1
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	701a      	strb	r2, [r3, #0]
                break;
 8002be4:	e000      	b.n	8002be8 <task4_run+0x298>
                    break;
 8002be6:	bf00      	nop
        break;
 8002be8:	bf00      	nop
    }
}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002bf4:	b002      	add	sp, #8
 8002bf6:	4770      	bx	lr
 8002bf8:	2000054a 	.word	0x2000054a
 8002bfc:	48000800 	.word	0x48000800
 8002c00:	2000054c 	.word	0x2000054c
 8002c04:	20000004 	.word	0x20000004
 8002c08:	20000538 	.word	0x20000538
 8002c0c:	cccccccd 	.word	0xcccccccd
 8002c10:	20000532 	.word	0x20000532
 8002c14:	20000534 	.word	0x20000534
 8002c18:	20000536 	.word	0x20000536

08002c1c <task5_run>:
 * @param ArmON Pointer to the variable indicating whether the arm motor is enabled.
 * @param Metal_Found Pointer to the variable indicating whether metal is detected.
 * @param Timer Timer handle for timing operations.
 * @param sumval Pointer to the variable storing the sum value from metal detection.
 */
void task5_run(uint8_t* State, uint8_t* ArmON, uint8_t* Metal_Found, TIM_HandleTypeDef Timer, uint32_t* sumval) {
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	61fb      	str	r3, [r7, #28]
    while (1) {
        switch (*State) {
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	f200 810b 	bhi.w	8002e4c <task5_run+0x230>
 8002c36:	a201      	add	r2, pc, #4	@ (adr r2, 8002c3c <task5_run+0x20>)
 8002c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3c:	08002c4d 	.word	0x08002c4d
 8002c40:	08002c6b 	.word	0x08002c6b
 8002c44:	08002cb7 	.word	0x08002cb7
 8002c48:	08002d55 	.word	0x08002d55
            case 0:
                // State 0: INIT

                // ZERO ARM ENCODER

                Arm_Pos_Target = 0; // Set passive sweep target to 0
 8002c4c:	4b83      	ldr	r3, [pc, #524]	@ (8002e5c <task5_run+0x240>)
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
                Arm_Deg_Target = 0; // Set passive sweep target to 0
 8002c54:	4b82      	ldr	r3, [pc, #520]	@ (8002e60 <task5_run+0x244>)
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
                Deg_inc = 0.01; // Set degree increment
 8002c5c:	4b81      	ldr	r3, [pc, #516]	@ (8002e64 <task5_run+0x248>)
 8002c5e:	4a82      	ldr	r2, [pc, #520]	@ (8002e68 <task5_run+0x24c>)
 8002c60:	601a      	str	r2, [r3, #0]

                *State = 1;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	701a      	strb	r2, [r3, #0]

                break;
 8002c68:	e0f0      	b.n	8002e4c <task5_run+0x230>

            case 1:
                // State 1: Flag check
                if (*ArmON == 1) {
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d11d      	bne.n	8002cae <task5_run+0x92>

                    if (*Metal_Found == 1) {
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d103      	bne.n	8002c82 <task5_run+0x66>
                        // If metal found, go to state 3
                        *State = 3;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	701a      	strb	r2, [r3, #0]
                    // SET ARM MOTOR TO ZERO DUTY CYCLE

                    *State = 1;
                }

                break;
 8002c80:	e0e1      	b.n	8002e46 <task5_run+0x22a>
                        *State = 2;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2202      	movs	r2, #2
 8002c86:	701a      	strb	r2, [r3, #0]
                        sumval_old = *sumval; // Reset metal detector sumval
 8002c88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a77      	ldr	r2, [pc, #476]	@ (8002e6c <task5_run+0x250>)
 8002c8e:	6013      	str	r3, [r2, #0]
                        if (TimerStarted == 0) {
 8002c90:	4b77      	ldr	r3, [pc, #476]	@ (8002e70 <task5_run+0x254>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f040 80d6 	bne.w	8002e46 <task5_run+0x22a>
                            Time_Start = HAL_GetTick(); // Find EndTime using HAL
 8002c9a:	f000 fbc9 	bl	8003430 <HAL_GetTick>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	4b74      	ldr	r3, [pc, #464]	@ (8002e74 <task5_run+0x258>)
 8002ca4:	801a      	strh	r2, [r3, #0]
                            TimerStarted = 1;
 8002ca6:	4b72      	ldr	r3, [pc, #456]	@ (8002e70 <task5_run+0x254>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
                break;
 8002cac:	e0cb      	b.n	8002e46 <task5_run+0x22a>
                    *State = 1;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
                break;
 8002cb4:	e0c7      	b.n	8002e46 <task5_run+0x22a>
                // State 2: Passive Arm Movement

                // SET TARGET ENCODER VALUE

                // Get current time difference, if it is greater than or equal to 10ms, then set new arm target.
                TimeDiff = HAL_GetTick() - Time_Start;
 8002cb6:	f000 fbbb 	bl	8003430 <HAL_GetTick>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	4a6d      	ldr	r2, [pc, #436]	@ (8002e74 <task5_run+0x258>)
 8002cbe:	8812      	ldrh	r2, [r2, #0]
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	ee07 3a90 	vmov	s15, r3
 8002cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cca:	4b6b      	ldr	r3, [pc, #428]	@ (8002e78 <task5_run+0x25c>)
 8002ccc:	edc3 7a00 	vstr	s15, [r3]
                if (TimeDiff >= 10) {
 8002cd0:	4b69      	ldr	r3, [pc, #420]	@ (8002e78 <task5_run+0x25c>)
 8002cd2:	edd3 7a00 	vldr	s15, [r3]
 8002cd6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002cda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce2:	db33      	blt.n	8002d4c <task5_run+0x130>
                    // If 10ms have passed, update arm position target

                    if (abs(Arm_Deg_Target) >= SweepDeg) {
 8002ce4:	4b5e      	ldr	r3, [pc, #376]	@ (8002e60 <task5_run+0x244>)
 8002ce6:	edd3 7a00 	vldr	s15, [r3]
 8002cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cee:	ee17 3a90 	vmov	r3, s15
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	bfb8      	it	lt
 8002cf6:	425b      	neglt	r3, r3
 8002cf8:	4a60      	ldr	r2, [pc, #384]	@ (8002e7c <task5_run+0x260>)
 8002cfa:	f992 2000 	ldrsb.w	r2, [r2]
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	db07      	blt.n	8002d12 <task5_run+0xf6>
                        // If we have gone past our max degrees, then change direction
                        Deg_inc = -Deg_inc;
 8002d02:	4b58      	ldr	r3, [pc, #352]	@ (8002e64 <task5_run+0x248>)
 8002d04:	edd3 7a00 	vldr	s15, [r3]
 8002d08:	eef1 7a67 	vneg.f32	s15, s15
 8002d0c:	4b55      	ldr	r3, [pc, #340]	@ (8002e64 <task5_run+0x248>)
 8002d0e:	edc3 7a00 	vstr	s15, [r3]
                    }

                    // Set new Target in degrees
                    Arm_Deg_Target = Arm_Deg_Target + Deg_inc;
 8002d12:	4b53      	ldr	r3, [pc, #332]	@ (8002e60 <task5_run+0x244>)
 8002d14:	ed93 7a00 	vldr	s14, [r3]
 8002d18:	4b52      	ldr	r3, [pc, #328]	@ (8002e64 <task5_run+0x248>)
 8002d1a:	edd3 7a00 	vldr	s15, [r3]
 8002d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d22:	4b4f      	ldr	r3, [pc, #316]	@ (8002e60 <task5_run+0x244>)
 8002d24:	edc3 7a00 	vstr	s15, [r3]

                    // Convert to desired encoder position
                    Arm_Pos_Target = Arm_Deg_Target / 360 * Arm_Encoder_CPR;
 8002d28:	4b4d      	ldr	r3, [pc, #308]	@ (8002e60 <task5_run+0x244>)
 8002d2a:	edd3 7a00 	vldr	s15, [r3]
 8002d2e:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002e80 <task5_run+0x264>
 8002d32:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d36:	4b53      	ldr	r3, [pc, #332]	@ (8002e84 <task5_run+0x268>)
 8002d38:	edd3 7a00 	vldr	s15, [r3]
 8002d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d40:	4b46      	ldr	r3, [pc, #280]	@ (8002e5c <task5_run+0x240>)
 8002d42:	edc3 7a00 	vstr	s15, [r3]

                    TimerStarted = 0; // Reset Timer
 8002d46:	4b4a      	ldr	r3, [pc, #296]	@ (8002e70 <task5_run+0x254>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]

                // if (abs(reading/Arm_Encoder_CPR*360)>=90)   {
                // *ArmON = 0;
                // }

                *State = 1; // Always return to state 1
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]

                break;
 8002d52:	e07b      	b.n	8002e4c <task5_run+0x230>

            case 3:
                // State 3: Control algorithm to find metal.
                if (S3_First == 1) {
 8002d54:	4b4c      	ldr	r3, [pc, #304]	@ (8002e88 <task5_run+0x26c>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d126      	bne.n	8002daa <task5_run+0x18e>
                    S3_First = 0; // Don't go through this loop again
 8002d5c:	4b4a      	ldr	r3, [pc, #296]	@ (8002e88 <task5_run+0x26c>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
                    Arm_Deg_Target = Arm_Deg_Target + Deg_inc; // Try going one way first
 8002d62:	4b3f      	ldr	r3, [pc, #252]	@ (8002e60 <task5_run+0x244>)
 8002d64:	ed93 7a00 	vldr	s14, [r3]
 8002d68:	4b3e      	ldr	r3, [pc, #248]	@ (8002e64 <task5_run+0x248>)
 8002d6a:	edd3 7a00 	vldr	s15, [r3]
 8002d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d72:	4b3b      	ldr	r3, [pc, #236]	@ (8002e60 <task5_run+0x244>)
 8002d74:	edc3 7a00 	vstr	s15, [r3]
                    Arm_Pos_Target = Arm_Deg_Target / 360 * Arm_Encoder_CPR;
 8002d78:	4b39      	ldr	r3, [pc, #228]	@ (8002e60 <task5_run+0x244>)
 8002d7a:	edd3 7a00 	vldr	s15, [r3]
 8002d7e:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8002e80 <task5_run+0x264>
 8002d82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d86:	4b3f      	ldr	r3, [pc, #252]	@ (8002e84 <task5_run+0x268>)
 8002d88:	edd3 7a00 	vldr	s15, [r3]
 8002d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d90:	4b32      	ldr	r3, [pc, #200]	@ (8002e5c <task5_run+0x240>)
 8002d92:	edc3 7a00 	vstr	s15, [r3]
                    Time_Start = __HAL_TIM_GET_COUNTER(&Timer); // Find EndTime using HAL
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	4b35      	ldr	r3, [pc, #212]	@ (8002e74 <task5_run+0x258>)
 8002d9e:	801a      	strh	r2, [r3, #0]
                    sumval_old = *sumval;
 8002da0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a31      	ldr	r2, [pc, #196]	@ (8002e6c <task5_run+0x250>)
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	e045      	b.n	8002e36 <task5_run+0x21a>
                } else {
                    TimeDiff = HAL_GetTick() - Time_Start;
 8002daa:	f000 fb41 	bl	8003430 <HAL_GetTick>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4a30      	ldr	r2, [pc, #192]	@ (8002e74 <task5_run+0x258>)
 8002db2:	8812      	ldrh	r2, [r2, #0]
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	ee07 3a90 	vmov	s15, r3
 8002dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dbe:	4b2e      	ldr	r3, [pc, #184]	@ (8002e78 <task5_run+0x25c>)
 8002dc0:	edc3 7a00 	vstr	s15, [r3]
                    if (TimeDiff >= 10) {
 8002dc4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e78 <task5_run+0x25c>)
 8002dc6:	edd3 7a00 	vldr	s15, [r3]
 8002dca:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd6:	db2e      	blt.n	8002e36 <task5_run+0x21a>
                        // If 10ms have passed, update arm position target
                        Metal_Delta = *sumval - sumval_old;
 8002dd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b23      	ldr	r3, [pc, #140]	@ (8002e6c <task5_run+0x250>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	4a2a      	ldr	r2, [pc, #168]	@ (8002e8c <task5_run+0x270>)
 8002de4:	6013      	str	r3, [r2, #0]
                        Time_Start = HAL_GetTick(); // Find EndTime using HAL
 8002de6:	f000 fb23 	bl	8003430 <HAL_GetTick>
 8002dea:	4603      	mov	r3, r0
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	4b21      	ldr	r3, [pc, #132]	@ (8002e74 <task5_run+0x258>)
 8002df0:	801a      	strh	r2, [r3, #0]
                        if (Metal_Delta < 0) {
                            // If we moved away from the metal detection, reverse direction
                            ArmDir = -ArmDir; // Reverse arm direction
                        }
                        // I think this code tries to make the Delta = 0
                        Arm_Pos_Target = Arm_Pos_Target + K_arm * ArmDir * abs(Metal_Delta);
 8002df2:	4b27      	ldr	r3, [pc, #156]	@ (8002e90 <task5_run+0x274>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	ee07 3a90 	vmov	s15, r3
 8002dfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dfe:	4b25      	ldr	r3, [pc, #148]	@ (8002e94 <task5_run+0x278>)
 8002e00:	edd3 7a00 	vldr	s15, [r3]
 8002e04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e08:	4b20      	ldr	r3, [pc, #128]	@ (8002e8c <task5_run+0x270>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bfb8      	it	lt
 8002e10:	425b      	neglt	r3, r3
 8002e12:	ee07 3a90 	vmov	s15, r3
 8002e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e5c <task5_run+0x240>)
 8002e20:	edd3 7a00 	vldr	s15, [r3]
 8002e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e28:	4b0c      	ldr	r3, [pc, #48]	@ (8002e5c <task5_run+0x240>)
 8002e2a:	edc3 7a00 	vstr	s15, [r3]
                        sumval_old = *sumval;
 8002e2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a0e      	ldr	r2, [pc, #56]	@ (8002e6c <task5_run+0x250>)
 8002e34:	6013      	str	r3, [r2, #0]
                // Arm_Pos_Target = Arm_Deg_Target/360*Arm_Encoder_CPR;
                // }

                // SET ENCODER TARGET VALUE

                if (*Metal_Found == 0) {
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d105      	bne.n	8002e4a <task5_run+0x22e>
                    // Arm_Dir = 1; // Reset Arm Direction
                    *State = 1; // Return to State 1
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]
                }
                break;
 8002e44:	e001      	b.n	8002e4a <task5_run+0x22e>
                break;
 8002e46:	bf00      	nop
 8002e48:	e000      	b.n	8002e4c <task5_run+0x230>
                break;
 8002e4a:	bf00      	nop

        }

        break;
 8002e4c:	bf00      	nop
    }

}
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e58:	b002      	add	sp, #8
 8002e5a:	4770      	bx	lr
 8002e5c:	20000550 	.word	0x20000550
 8002e60:	20000554 	.word	0x20000554
 8002e64:	20000558 	.word	0x20000558
 8002e68:	3c23d70a 	.word	0x3c23d70a
 8002e6c:	20000564 	.word	0x20000564
 8002e70:	2000055e 	.word	0x2000055e
 8002e74:	2000055c 	.word	0x2000055c
 8002e78:	20000560 	.word	0x20000560
 8002e7c:	2000000c 	.word	0x2000000c
 8002e80:	43b40000 	.word	0x43b40000
 8002e84:	20000008 	.word	0x20000008
 8002e88:	2000055f 	.word	0x2000055f
 8002e8c:	20000568 	.word	0x20000568
 8002e90:	2000000d 	.word	0x2000000d
 8002e94:	20000010 	.word	0x20000010

08002e98 <task6_run>:
 * @param Angle_Target Pointer to the target angle variable.
 * @param htim1 Timer handle for motor PWM control.
 * @param htim3 Timer handle for encoder 1.
 * @param htim4 Timer handle for encoder 2.
 */
void task6_run(uint8_t* State, uint8_t* DriveON_MD,uint8_t* DriveON_Rad,uint8_t* Follow, float* Distance_Target, float* Angle_Target, TIM_HandleTypeDef htim1,TIM_HandleTypeDef htim3,TIM_HandleTypeDef htim4){
 8002e98:	b5b0      	push	{r4, r5, r7, lr}
 8002e9a:	b0c8      	sub	sp, #288	@ 0x120
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8002ea2:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 8002ea6:	6020      	str	r0, [r4, #0]
 8002ea8:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8002eac:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 8002eb0:	6001      	str	r1, [r0, #0]
 8002eb2:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8002eb6:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8002eba:	600a      	str	r2, [r1, #0]
 8002ebc:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002ec0:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8002ec4:	6013      	str	r3, [r2, #0]

	while(1){
			switch(*State){
 8002ec6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002eca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	f200 820d 	bhi.w	80032f2 <task6_run+0x45a>
 8002ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee0 <task6_run+0x48>)
 8002eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ede:	bf00      	nop
 8002ee0:	08002ef5 	.word	0x08002ef5
 8002ee4:	0800308d 	.word	0x0800308d
 8002ee8:	080030fd 	.word	0x080030fd
 8002eec:	08003237 	.word	0x08003237
 8002ef0:	0800329d 	.word	0x0800329d

			case 0:
				//State 0: INIT

				uint32_t previousMillis = 0;//for debug
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
				encoder_t encoder2;
				controller_t controller1;
				controller_t controller2;

				// Assign motor 1 to Timer 1 channels 1 and 3
				motor1.chA = &(htim1.Instance->CCR2);
 8002efa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002efe:	3338      	adds	r3, #56	@ 0x38
 8002f00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
				motor1.chB = &(htim1.Instance->CCR4);
 8002f04:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002f08:	3340      	adds	r3, #64	@ 0x40
 8002f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
				motor1.Period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8002f0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

				// Assign motor 2 to Timer 1 channels 2 and 4
				motor2.chA = &(htim1.Instance->CCR1);
 8002f18:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002f1c:	3334      	adds	r3, #52	@ 0x34
 8002f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
				motor2.chB = &(htim1.Instance->CCR3);
 8002f22:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002f26:	333c      	adds	r3, #60	@ 0x3c
 8002f28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				motor2.Period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8002f2c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

				//Set initial duty cycles
				set_duty(&motor1, 0);
 8002f36:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002f3a:	ed9f 0ad1 	vldr	s0, [pc, #836]	@ 8003280 <task6_run+0x3e8>
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe ff36 	bl	8001db0 <set_duty>
				set_duty(&motor2, 0);
 8002f44:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002f48:	ed9f 0acd 	vldr	s0, [pc, #820]	@ 8003280 <task6_run+0x3e8>
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe ff2f 	bl	8001db0 <set_duty>

				// Initialize encoders
				int16_t mot1_velocity = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
				int32_t mot1_position = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
				uint32_t enc1_lastval = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
				uint32_t last_tick1 = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
				encoder1 = (encoder_t){&htim3, mot1_velocity, mot1_position, enc1_lastval, last_tick1};
 8002f6a:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8002f6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f72:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8002f76:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002f7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f7e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002f8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

				int16_t mot2_velocity = 0;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
				int32_t mot2_position = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
				uint32_t enc2_lastval = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
				uint32_t last_tick2 = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
				encoder2 = (encoder_t){&htim4, mot2_velocity, mot2_position, enc2_lastval, last_tick2};
 8002faa:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8002fae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002fb0:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8002fb4:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
 8002fb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002fbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

				//Set test duty cycles
				set_duty(&motor1, 0);
 8002fd0:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002fd4:	ed9f 0aaa 	vldr	s0, [pc, #680]	@ 8003280 <task6_run+0x3e8>
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fe fee9 	bl	8001db0 <set_duty>
				set_duty(&motor2, 0);
 8002fde:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002fe2:	ed9f 0aa7 	vldr	s0, [pc, #668]	@ 8003280 <task6_run+0x3e8>
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe fee2 	bl	8001db0 <set_duty>

				// Initialize controllers
				float Pgain_velocity1 = 0.04;
 8002fec:	4ba5      	ldr	r3, [pc, #660]	@ (8003284 <task6_run+0x3ec>)
 8002fee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				float Igain_velocity1 = 0.01;
 8002ff2:	4ba5      	ldr	r3, [pc, #660]	@ (8003288 <task6_run+0x3f0>)
 8002ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
				int32_t velocity_setpoint1 = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
				int32_t esum1 = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
				controller1 = (controller_t){Pgain_velocity1, Igain_velocity1, velocity_setpoint1, esum1};
 8003004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003008:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800300a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800300e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003010:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003014:	677b      	str	r3, [r7, #116]	@ 0x74
 8003016:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800301a:	67bb      	str	r3, [r7, #120]	@ 0x78

				float Pgain_velocity2 = 0.04;
 800301c:	4b99      	ldr	r3, [pc, #612]	@ (8003284 <task6_run+0x3ec>)
 800301e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				float Igain_velocity2 = 0.01;
 8003022:	4b99      	ldr	r3, [pc, #612]	@ (8003288 <task6_run+0x3f0>)
 8003024:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
				int32_t velocity_setpoint2 = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
				int32_t esum2 = 0;
 800302e:	2300      	movs	r3, #0
 8003030:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
				controller2 = (controller_t){Pgain_velocity2, Igain_velocity2, velocity_setpoint2, esum2};
 8003034:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003038:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800303a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800303e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003040:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003044:	667b      	str	r3, [r7, #100]	@ 0x64
 8003046:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800304a:	66bb      	str	r3, [r7, #104]	@ 0x68


				float Pgain_distance = 500; //how much to scale velocity based on distance away
 800304c:	4b8f      	ldr	r3, [pc, #572]	@ (800328c <task6_run+0x3f4>)
 800304e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
				//float angle_error; // updated by open mv H7 camera
				float Pgain_angle = 4000;//0.6; //how much to scale skid steering based on angle error
 8003052:	4b8f      	ldr	r3, [pc, #572]	@ (8003290 <task6_run+0x3f8>)
 8003054:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
				float skid_modifier; // how much to scale motor setpoints to achieve angle turn

				//Setup follow variables
				//int32_t current_distance; //updated by open mv H7 camera
				float distance_error = 0;
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
				float velocity_setpoint = 0;
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
				float optimal_distance = -11; // desired follow distance
 8003068:	4b8a      	ldr	r3, [pc, #552]	@ (8003294 <task6_run+0x3fc>)
 800306a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

				float max_skid_modifier = 1.0; // Adjust this value as needed
 800306e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003072:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
				float max_velocity = 3000;
 8003076:	4b88      	ldr	r3, [pc, #544]	@ (8003298 <task6_run+0x400>)
 8003078:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
				*State = 1;
 800307c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003080:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2201      	movs	r2, #1
 8003088:	701a      	strb	r2, [r3, #0]

				break;
 800308a:	e132      	b.n	80032f2 <task6_run+0x45a>


			case 1:
				//State 1: Flag check
				if (*DriveON_Rad == 1){
 800308c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003090:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d127      	bne.n	80030ec <task6_run+0x254>
					//If radio triggered, run rest of code
					if (*DriveON_MD == 1){
 800309c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80030a0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d107      	bne.n	80030bc <task6_run+0x224>
						//If Metal Detected, Go to state 3
						*State = 3;
 80030ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80030b0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2203      	movs	r2, #3
 80030b8:	701a      	strb	r2, [r3, #0]
					*State = 1; //Else, return to state 1

					//SET DRIVE MOTORS TO 0;
				}

				break;
 80030ba:	e11a      	b.n	80032f2 <task6_run+0x45a>
						if (*Follow == 1){
 80030bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80030c0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d107      	bne.n	80030dc <task6_run+0x244>
							*State = 2;
 80030cc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80030d0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2202      	movs	r2, #2
 80030d8:	701a      	strb	r2, [r3, #0]
				break;
 80030da:	e10a      	b.n	80032f2 <task6_run+0x45a>
							*State = 4;
 80030dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80030e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2204      	movs	r2, #4
 80030e8:	701a      	strb	r2, [r3, #0]
				break;
 80030ea:	e102      	b.n	80032f2 <task6_run+0x45a>
					*State = 1; //Else, return to state 1
 80030ec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80030f0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
				break;
 80030fa:	e0fa      	b.n	80032f2 <task6_run+0x45a>

			case 2:
				//State 2: Follow mode


				if(*Distance_Target != 0){
 80030fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003100:	edd3 7a00 	vldr	s15, [r3]
 8003104:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310c:	d069      	beq.n	80031e2 <task6_run+0x34a>
					distance_error = *Distance_Target - optimal_distance;
 800310e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003112:	ed93 7a00 	vldr	s14, [r3]
 8003116:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 800311a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800311e:	edc7 7a44 	vstr	s15, [r7, #272]	@ 0x110

				velocity_setpoint = -distance_error*Pgain_distance;
 8003122:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 8003126:	eef1 7a67 	vneg.f32	s15, s15
 800312a:	ed97 7a43 	vldr	s14, [r7, #268]	@ 0x10c
 800312e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003132:	edc7 7a47 	vstr	s15, [r7, #284]	@ 0x11c
				if (velocity_setpoint > max_velocity) {
 8003136:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 800313a:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 800313e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003146:	dd04      	ble.n	8003152 <task6_run+0x2ba>
					velocity_setpoint = max_velocity;
 8003148:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800314c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003150:	e010      	b.n	8003174 <task6_run+0x2dc>
					} else if (velocity_setpoint < -max_velocity) {
 8003152:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 8003156:	eef1 7a67 	vneg.f32	s15, s15
 800315a:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 800315e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003166:	d505      	bpl.n	8003174 <task6_run+0x2dc>
						velocity_setpoint = -max_velocity;
 8003168:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 800316c:	eef1 7a67 	vneg.f32	s15, s15
 8003170:	edc7 7a47 	vstr	s15, [r7, #284]	@ 0x11c
					}
				skid_modifier = Pgain_angle*(*Angle_Target+0.09);
 8003174:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8003178:	f7fd fb08 	bl	800078c <__aeabi_f2d>
 800317c:	4604      	mov	r4, r0
 800317e:	460d      	mov	r5, r1
 8003180:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd fb00 	bl	800078c <__aeabi_f2d>
 800318c:	a33a      	add	r3, pc, #232	@ (adr r3, 8003278 <task6_run+0x3e0>)
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	f7fd f99d 	bl	80004d0 <__adddf3>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4620      	mov	r0, r4
 800319c:	4629      	mov	r1, r5
 800319e:	f7fd f867 	bl	8000270 <__aeabi_dmul>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	f7fd fb47 	bl	800083c <__aeabi_d2f>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
//
//					// Turn
//					controller1.velocity_setpoint = velocity_setpoint * (1 + skid_modifier);
//					controller2.velocity_setpoint = velocity_setpoint * (1 - skid_modifier);

				controller1.velocity_setpoint = velocity_setpoint  + skid_modifier;
 80031b4:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 80031b8:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 80031bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031c4:	ee17 3a90 	vmov	r3, s15
 80031c8:	677b      	str	r3, [r7, #116]	@ 0x74
				controller2.velocity_setpoint = velocity_setpoint  - skid_modifier;
 80031ca:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 80031ce:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 80031d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031da:	ee17 3a90 	vmov	r3, s15
 80031de:	667b      	str	r3, [r7, #100]	@ 0x64
 80031e0:	e003      	b.n	80031ea <task6_run+0x352>
				}
				else{
					controller1.velocity_setpoint = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	677b      	str	r3, [r7, #116]	@ 0x74
					controller2.velocity_setpoint = 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	667b      	str	r3, [r7, #100]	@ 0x64
				}



				if (HAL_GetTick() - previousMillis >= 100) {
 80031ea:	f000 f921 	bl	8003430 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b63      	cmp	r3, #99	@ 0x63
 80031f8:	d915      	bls.n	8003226 <task6_run+0x38e>
					previousMillis = HAL_GetTick();
 80031fa:	f000 f919 	bl	8003430 <HAL_GetTick>
 80031fe:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

			        // Print velocities
//					printf("Angle: %ld\n", (int)Angle_Target);
//			        printf("Velocity1: %ld\n", controller1.velocity_setpoint);
//			        printf("Velocity2: %ld\n", controller2.velocity_setpoint);
			        run_control(&controller1, &motor1, &encoder1);
 8003202:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8003206:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 800320a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800320e:	4618      	mov	r0, r3
 8003210:	f7fe fe3c 	bl	8001e8c <run_control>
			        run_control(&controller2, &motor2, &encoder2);
 8003214:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8003218:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800321c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe fe33 	bl	8001e8c <run_control>
			    }



				*State = 1; //Always return to State 1
 8003226:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800322a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
				break;
 8003234:	e05d      	b.n	80032f2 <task6_run+0x45a>

			case 3:
				//State 3: Metal Detected Mode

				//SET ALL MOTORS TO BRAKE MODE
				controller1.velocity_setpoint = 0;
 8003236:	2300      	movs	r3, #0
 8003238:	677b      	str	r3, [r7, #116]	@ 0x74
				controller2.velocity_setpoint = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	667b      	str	r3, [r7, #100]	@ 0x64

				run_control(&controller1, &motor1, &encoder1);
 800323e:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8003242:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8003246:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe fe1e 	bl	8001e8c <run_control>
				run_control(&controller2, &motor2, &encoder2);
 8003250:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8003254:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8003258:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800325c:	4618      	mov	r0, r3
 800325e:	f7fe fe15 	bl	8001e8c <run_control>

				//Could add additional drive forward and backward functionality here
				//But for demo, we have simplified the design

				*State = 1; //Always return to State 1
 8003262:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003266:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]

				break;
 8003270:	e03f      	b.n	80032f2 <task6_run+0x45a>
 8003272:	bf00      	nop
 8003274:	f3af 8000 	nop.w
 8003278:	70a3d70a 	.word	0x70a3d70a
 800327c:	3fb70a3d 	.word	0x3fb70a3d
 8003280:	00000000 	.word	0x00000000
 8003284:	3d23d70a 	.word	0x3d23d70a
 8003288:	3c23d70a 	.word	0x3c23d70a
 800328c:	43fa0000 	.word	0x43fa0000
 8003290:	457a0000 	.word	0x457a0000
 8003294:	c1300000 	.word	0xc1300000
 8003298:	453b8000 	.word	0x453b8000



			case 4:
				//State 4: DEBUG Testing, should be empty on final code
				*State = 1; //Always return to State 1
 800329c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80032a0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
				if (HAL_GetTick() - previousMillis >= 100) {
 80032aa:	f000 f8c1 	bl	8003430 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b63      	cmp	r3, #99	@ 0x63
 80032b8:	d91a      	bls.n	80032f0 <task6_run+0x458>
						  previousMillis = HAL_GetTick();
 80032ba:	f000 f8b9 	bl	8003430 <HAL_GetTick>
 80032be:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
						  controller1.velocity_setpoint = 100000;
 80032c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003300 <task6_run+0x468>)
 80032c4:	677b      	str	r3, [r7, #116]	@ 0x74
						  run_control(&controller1, &motor1, &encoder1);
 80032c6:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80032ca:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 80032ce:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe fdda 	bl	8001e8c <run_control>
//						  controller2.velocity_setpoint = 100000;
//						  run_control(&controller2, &motor2, &encoder2);

	//		  	          read_encoder(&encoder1);
	//		  	          read_encoder(&encoder2);
			  	    	  printf("Encoder1 position: %ld\n", encoder1.position);
 80032d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032dc:	4619      	mov	r1, r3
 80032de:	4809      	ldr	r0, [pc, #36]	@ (8003304 <task6_run+0x46c>)
 80032e0:	f006 fc08 	bl	8009af4 <iprintf>
			  	    	  printf("Encoder1 Velocity: %d\n", encoder1.velocity);
 80032e4:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 80032e8:	4619      	mov	r1, r3
 80032ea:	4807      	ldr	r0, [pc, #28]	@ (8003308 <task6_run+0x470>)
 80032ec:	f006 fc02 	bl	8009af4 <iprintf>
//						  printf("Encoder2 position: %ld\n", encoder2.position);
//						  printf("Encoder2 Velocity: %d\n", encoder2.velocity);
				}
				break;
 80032f0:	bf00      	nop




			}
			break;
 80032f2:	bf00      	nop
	}


}
 80032f4:	bf00      	nop
 80032f6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bdb0      	pop	{r4, r5, r7, pc}
 80032fe:	bf00      	nop
 8003300:	000186a0 	.word	0x000186a0
 8003304:	0800a80c 	.word	0x0800a80c
 8003308:	0800a824 	.word	0x0800a824

0800330c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800330c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003344 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003310:	f7ff fa60 	bl	80027d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003314:	480c      	ldr	r0, [pc, #48]	@ (8003348 <LoopForever+0x6>)
  ldr r1, =_edata
 8003316:	490d      	ldr	r1, [pc, #52]	@ (800334c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003318:	4a0d      	ldr	r2, [pc, #52]	@ (8003350 <LoopForever+0xe>)
  movs r3, #0
 800331a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800331c:	e002      	b.n	8003324 <LoopCopyDataInit>

0800331e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800331e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003322:	3304      	adds	r3, #4

08003324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003328:	d3f9      	bcc.n	800331e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800332a:	4a0a      	ldr	r2, [pc, #40]	@ (8003354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800332c:	4c0a      	ldr	r4, [pc, #40]	@ (8003358 <LoopForever+0x16>)
  movs r3, #0
 800332e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003330:	e001      	b.n	8003336 <LoopFillZerobss>

08003332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003334:	3204      	adds	r2, #4

08003336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003338:	d3fb      	bcc.n	8003332 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800333a:	f006 fc85 	bl	8009c48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800333e:	f7fd fcfd 	bl	8000d3c <main>

08003342 <LoopForever>:

LoopForever:
    b LoopForever
 8003342:	e7fe      	b.n	8003342 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003344:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800334c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003350:	0800a8c8 	.word	0x0800a8c8
  ldr r2, =_sbss
 8003354:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003358:	200006bc 	.word	0x200006bc

0800335c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800335c:	e7fe      	b.n	800335c <ADC1_2_IRQHandler>

0800335e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003368:	2003      	movs	r0, #3
 800336a:	f001 fb5f 	bl	8004a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800336e:	200f      	movs	r0, #15
 8003370:	f000 f80e 	bl	8003390 <HAL_InitTick>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	71fb      	strb	r3, [r7, #7]
 800337e:	e001      	b.n	8003384 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003380:	f7fe fdbc 	bl	8001efc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003384:	79fb      	ldrb	r3, [r7, #7]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800339c:	4b17      	ldr	r3, [pc, #92]	@ (80033fc <HAL_InitTick+0x6c>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d023      	beq.n	80033ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80033a4:	4b16      	ldr	r3, [pc, #88]	@ (8003400 <HAL_InitTick+0x70>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4b14      	ldr	r3, [pc, #80]	@ (80033fc <HAL_InitTick+0x6c>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	4619      	mov	r1, r3
 80033ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80033b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ba:	4618      	mov	r0, r3
 80033bc:	f001 fb6b 	bl	8004a96 <HAL_SYSTICK_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10f      	bne.n	80033e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b0f      	cmp	r3, #15
 80033ca:	d809      	bhi.n	80033e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033cc:	2200      	movs	r2, #0
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	f04f 30ff 	mov.w	r0, #4294967295
 80033d4:	f001 fb35 	bl	8004a42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003404 <HAL_InitTick+0x74>)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e007      	b.n	80033f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
 80033e4:	e004      	b.n	80033f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	73fb      	strb	r3, [r7, #15]
 80033ea:	e001      	b.n	80033f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000018 	.word	0x20000018
 8003400:	20000000 	.word	0x20000000
 8003404:	20000014 	.word	0x20000014

08003408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800340c:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <HAL_IncTick+0x20>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	4b06      	ldr	r3, [pc, #24]	@ (800342c <HAL_IncTick+0x24>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4413      	add	r3, r2
 8003418:	4a04      	ldr	r2, [pc, #16]	@ (800342c <HAL_IncTick+0x24>)
 800341a:	6013      	str	r3, [r2, #0]
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000018 	.word	0x20000018
 800342c:	2000056c 	.word	0x2000056c

08003430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return uwTick;
 8003434:	4b03      	ldr	r3, [pc, #12]	@ (8003444 <HAL_GetTick+0x14>)
 8003436:	681b      	ldr	r3, [r3, #0]
}
 8003438:	4618      	mov	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	2000056c 	.word	0x2000056c

08003448 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	609a      	str	r2, [r3, #8]
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	609a      	str	r2, [r3, #8]
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3360      	adds	r3, #96	@ 0x60
 80034c2:	461a      	mov	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b08      	ldr	r3, [pc, #32]	@ (80034f4 <LL_ADC_SetOffset+0x44>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	4313      	orrs	r3, r2
 80034e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80034e8:	bf00      	nop
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	03fff000 	.word	0x03fff000

080034f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3360      	adds	r3, #96	@ 0x60
 8003506:	461a      	mov	r2, r3
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3360      	adds	r3, #96	@ 0x60
 8003534:	461a      	mov	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	431a      	orrs	r2, r3
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800354e:	bf00      	nop
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3330      	adds	r3, #48	@ 0x30
 8003590:	461a      	mov	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	0a1b      	lsrs	r3, r3, #8
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	f003 030c 	and.w	r3, r3, #12
 800359c:	4413      	add	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	211f      	movs	r1, #31
 80035ac:	fa01 f303 	lsl.w	r3, r1, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	401a      	ands	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	0e9b      	lsrs	r3, r3, #26
 80035b8:	f003 011f 	and.w	r1, r3, #31
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f003 031f 	and.w	r3, r3, #31
 80035c2:	fa01 f303 	lsl.w	r3, r1, r3
 80035c6:	431a      	orrs	r2, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80035cc:	bf00      	nop
 80035ce:	371c      	adds	r7, #28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	3314      	adds	r3, #20
 80035e8:	461a      	mov	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	0e5b      	lsrs	r3, r3, #25
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	4413      	add	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	0d1b      	lsrs	r3, r3, #20
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	2107      	movs	r1, #7
 8003606:	fa01 f303 	lsl.w	r3, r1, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	401a      	ands	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	0d1b      	lsrs	r3, r3, #20
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	fa01 f303 	lsl.w	r3, r1, r3
 800361c:	431a      	orrs	r2, r3
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003622:	bf00      	nop
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003648:	43db      	mvns	r3, r3
 800364a:	401a      	ands	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f003 0318 	and.w	r3, r3, #24
 8003652:	4908      	ldr	r1, [pc, #32]	@ (8003674 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003654:	40d9      	lsrs	r1, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	400b      	ands	r3, r1
 800365a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365e:	431a      	orrs	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003666:	bf00      	nop
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	0007ffff 	.word	0x0007ffff

08003678 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 031f 	and.w	r3, r3, #31
}
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80036c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6093      	str	r3, [r2, #8]
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036e8:	d101      	bne.n	80036ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800370c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003710:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003734:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003738:	d101      	bne.n	800373e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800375c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003760:	f043 0201 	orr.w	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <LL_ADC_IsEnabled+0x18>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <LL_ADC_IsEnabled+0x1a>
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037aa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037ae:	f043 0204 	orr.w	r2, r3, #4
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d101      	bne.n	80037da <LL_ADC_REG_IsConversionOngoing+0x18>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d101      	bne.n	8003800 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b089      	sub	sp, #36	@ 0x24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e130      	b.n	8003a8c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003834:	2b00      	cmp	r3, #0
 8003836:	d109      	bne.n	800384c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7fe fb89 	bl	8001f50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff ff3f 	bl	80036d4 <LL_ADC_IsDeepPowerDownEnabled>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d004      	beq.n	8003866 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff ff25 	bl	80036b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff ff5a 	bl	8003724 <LL_ADC_IsInternalRegulatorEnabled>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d115      	bne.n	80038a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff ff3e 	bl	80036fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003880:	4b84      	ldr	r3, [pc, #528]	@ (8003a94 <HAL_ADC_Init+0x284>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	099b      	lsrs	r3, r3, #6
 8003886:	4a84      	ldr	r2, [pc, #528]	@ (8003a98 <HAL_ADC_Init+0x288>)
 8003888:	fba2 2303 	umull	r2, r3, r2, r3
 800388c:	099b      	lsrs	r3, r3, #6
 800388e:	3301      	adds	r3, #1
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003894:	e002      	b.n	800389c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3b01      	subs	r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f9      	bne.n	8003896 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff ff3c 	bl	8003724 <LL_ADC_IsInternalRegulatorEnabled>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10d      	bne.n	80038ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b6:	f043 0210 	orr.w	r2, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff ff75 	bl	80037c2 <LL_ADC_REG_IsConversionOngoing>
 80038d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f040 80c9 	bne.w	8003a7a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f040 80c5 	bne.w	8003a7a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80038f8:	f043 0202 	orr.w	r2, r3, #2
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff ff35 	bl	8003774 <LL_ADC_IsEnabled>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d115      	bne.n	800393c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003910:	4862      	ldr	r0, [pc, #392]	@ (8003a9c <HAL_ADC_Init+0x28c>)
 8003912:	f7ff ff2f 	bl	8003774 <LL_ADC_IsEnabled>
 8003916:	4604      	mov	r4, r0
 8003918:	4861      	ldr	r0, [pc, #388]	@ (8003aa0 <HAL_ADC_Init+0x290>)
 800391a:	f7ff ff2b 	bl	8003774 <LL_ADC_IsEnabled>
 800391e:	4603      	mov	r3, r0
 8003920:	431c      	orrs	r4, r3
 8003922:	4860      	ldr	r0, [pc, #384]	@ (8003aa4 <HAL_ADC_Init+0x294>)
 8003924:	f7ff ff26 	bl	8003774 <LL_ADC_IsEnabled>
 8003928:	4603      	mov	r3, r0
 800392a:	4323      	orrs	r3, r4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d105      	bne.n	800393c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4619      	mov	r1, r3
 8003936:	485c      	ldr	r0, [pc, #368]	@ (8003aa8 <HAL_ADC_Init+0x298>)
 8003938:	f7ff fd86 	bl	8003448 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	7e5b      	ldrb	r3, [r3, #25]
 8003940:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003946:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800394c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003952:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800395a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800395c:	4313      	orrs	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d106      	bne.n	8003978 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	3b01      	subs	r3, #1
 8003970:	045b      	lsls	r3, r3, #17
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397c:	2b00      	cmp	r3, #0
 800397e:	d009      	beq.n	8003994 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003984:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4313      	orrs	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	4b44      	ldr	r3, [pc, #272]	@ (8003aac <HAL_ADC_Init+0x29c>)
 800399c:	4013      	ands	r3, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	69b9      	ldr	r1, [r7, #24]
 80039a4:	430b      	orrs	r3, r1
 80039a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff1b 	bl	80037e8 <LL_ADC_INJ_IsConversionOngoing>
 80039b2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d13d      	bne.n	8003a36 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d13a      	bne.n	8003a36 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80039c4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80039cc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039dc:	f023 0302 	bic.w	r3, r3, #2
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	69b9      	ldr	r1, [r7, #24]
 80039e6:	430b      	orrs	r3, r1
 80039e8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d118      	bne.n	8003a26 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80039fe:	f023 0304 	bic.w	r3, r3, #4
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a0a:	4311      	orrs	r1, r2
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003a10:	4311      	orrs	r1, r2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a16:	430a      	orrs	r2, r1
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	611a      	str	r2, [r3, #16]
 8003a24:	e007      	b.n	8003a36 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0201 	bic.w	r2, r2, #1
 8003a34:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d10c      	bne.n	8003a58 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a44:	f023 010f 	bic.w	r1, r3, #15
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	1e5a      	subs	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a56:	e007      	b.n	8003a68 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 020f 	bic.w	r2, r2, #15
 8003a66:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6c:	f023 0303 	bic.w	r3, r3, #3
 8003a70:	f043 0201 	orr.w	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	655a      	str	r2, [r3, #84]	@ 0x54
 8003a78:	e007      	b.n	8003a8a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a7e:	f043 0210 	orr.w	r2, r3, #16
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3724      	adds	r7, #36	@ 0x24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd90      	pop	{r4, r7, pc}
 8003a94:	20000000 	.word	0x20000000
 8003a98:	053e2d63 	.word	0x053e2d63
 8003a9c:	50040000 	.word	0x50040000
 8003aa0:	50040100 	.word	0x50040100
 8003aa4:	50040200 	.word	0x50040200
 8003aa8:	50040300 	.word	0x50040300
 8003aac:	fff0c007 	.word	0xfff0c007

08003ab0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ab8:	4857      	ldr	r0, [pc, #348]	@ (8003c18 <HAL_ADC_Start+0x168>)
 8003aba:	f7ff fddd 	bl	8003678 <LL_ADC_GetMultimode>
 8003abe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fe7c 	bl	80037c2 <LL_ADC_REG_IsConversionOngoing>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f040 809c 	bne.w	8003c0a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_ADC_Start+0x30>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e097      	b.n	8003c10 <HAL_ADC_Start+0x160>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fd73 	bl	80045d4 <ADC_Enable>
 8003aee:	4603      	mov	r3, r0
 8003af0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f040 8083 	bne.w	8003c00 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a42      	ldr	r2, [pc, #264]	@ (8003c1c <HAL_ADC_Start+0x16c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d002      	beq.n	8003b1e <HAL_ADC_Start+0x6e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	e000      	b.n	8003b20 <HAL_ADC_Start+0x70>
 8003b1e:	4b40      	ldr	r3, [pc, #256]	@ (8003c20 <HAL_ADC_Start+0x170>)
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d002      	beq.n	8003b2e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d105      	bne.n	8003b3a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b32:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b46:	d106      	bne.n	8003b56 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4c:	f023 0206 	bic.w	r2, r3, #6
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b54:	e002      	b.n	8003b5c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	221c      	movs	r2, #28
 8003b62:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a2a      	ldr	r2, [pc, #168]	@ (8003c1c <HAL_ADC_Start+0x16c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d002      	beq.n	8003b7c <HAL_ADC_Start+0xcc>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	e000      	b.n	8003b7e <HAL_ADC_Start+0xce>
 8003b7c:	4b28      	ldr	r3, [pc, #160]	@ (8003c20 <HAL_ADC_Start+0x170>)
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d008      	beq.n	8003b98 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	2b05      	cmp	r3, #5
 8003b90:	d002      	beq.n	8003b98 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2b09      	cmp	r3, #9
 8003b96:	d114      	bne.n	8003bc2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d007      	beq.n	8003bb6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003baa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003bae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff fded 	bl	800379a <LL_ADC_REG_StartConversion>
 8003bc0:	e025      	b.n	8003c0e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a12      	ldr	r2, [pc, #72]	@ (8003c1c <HAL_ADC_Start+0x16c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d002      	beq.n	8003bde <HAL_ADC_Start+0x12e>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	e000      	b.n	8003be0 <HAL_ADC_Start+0x130>
 8003bde:	4b10      	ldr	r3, [pc, #64]	@ (8003c20 <HAL_ADC_Start+0x170>)
 8003be0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00f      	beq.n	8003c0e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003bf6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	655a      	str	r2, [r3, #84]	@ 0x54
 8003bfe:	e006      	b.n	8003c0e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003c08:	e001      	b.n	8003c0e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	50040300 	.word	0x50040300
 8003c1c:	50040100 	.word	0x50040100
 8003c20:	50040000 	.word	0x50040000

08003c24 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c2e:	4866      	ldr	r0, [pc, #408]	@ (8003dc8 <HAL_ADC_PollForConversion+0x1a4>)
 8003c30:	f7ff fd22 	bl	8003678 <LL_ADC_GetMultimode>
 8003c34:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d102      	bne.n	8003c44 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003c3e:	2308      	movs	r3, #8
 8003c40:	61fb      	str	r3, [r7, #28]
 8003c42:	e02a      	b.n	8003c9a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b05      	cmp	r3, #5
 8003c4e:	d002      	beq.n	8003c56 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2b09      	cmp	r3, #9
 8003c54:	d111      	bne.n	8003c7a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d007      	beq.n	8003c74 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c68:	f043 0220 	orr.w	r2, r3, #32
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0a4      	b.n	8003dbe <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003c74:	2304      	movs	r3, #4
 8003c76:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003c78:	e00f      	b.n	8003c9a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003c7a:	4853      	ldr	r0, [pc, #332]	@ (8003dc8 <HAL_ADC_PollForConversion+0x1a4>)
 8003c7c:	f7ff fd0a 	bl	8003694 <LL_ADC_GetMultiDMATransfer>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8a:	f043 0220 	orr.w	r2, r3, #32
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e093      	b.n	8003dbe <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003c96:	2304      	movs	r3, #4
 8003c98:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003c9a:	f7ff fbc9 	bl	8003430 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003ca0:	e021      	b.n	8003ce6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d01d      	beq.n	8003ce6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003caa:	f7ff fbc1 	bl	8003430 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d302      	bcc.n	8003cc0 <HAL_ADC_PollForConversion+0x9c>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d112      	bne.n	8003ce6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10b      	bne.n	8003ce6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd2:	f043 0204 	orr.w	r2, r3, #4
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e06b      	b.n	8003dbe <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0d6      	beq.n	8003ca2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fc28 	bl	800355a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01c      	beq.n	8003d4a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	7e5b      	ldrb	r3, [r3, #25]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d118      	bne.n	8003d4a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d111      	bne.n	8003d4a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d105      	bne.n	8003d4a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d42:	f043 0201 	orr.w	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003dcc <HAL_ADC_PollForConversion+0x1a8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d002      	beq.n	8003d5a <HAL_ADC_PollForConversion+0x136>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	e000      	b.n	8003d5c <HAL_ADC_PollForConversion+0x138>
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd0 <HAL_ADC_PollForConversion+0x1ac>)
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d008      	beq.n	8003d76 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b05      	cmp	r3, #5
 8003d6e:	d002      	beq.n	8003d76 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2b09      	cmp	r3, #9
 8003d74:	d104      	bne.n	8003d80 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	61bb      	str	r3, [r7, #24]
 8003d7e:	e00c      	b.n	8003d9a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a11      	ldr	r2, [pc, #68]	@ (8003dcc <HAL_ADC_PollForConversion+0x1a8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d002      	beq.n	8003d90 <HAL_ADC_PollForConversion+0x16c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	e000      	b.n	8003d92 <HAL_ADC_PollForConversion+0x16e>
 8003d90:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd0 <HAL_ADC_PollForConversion+0x1ac>)
 8003d92:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d104      	bne.n	8003daa <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2208      	movs	r2, #8
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	e008      	b.n	8003dbc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d103      	bne.n	8003dbc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	220c      	movs	r2, #12
 8003dba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	50040300 	.word	0x50040300
 8003dcc:	50040100 	.word	0x50040100
 8003dd0:	50040000 	.word	0x50040000

08003dd4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b0b6      	sub	sp, #216	@ 0xd8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x22>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e3c9      	b.n	80045a6 <HAL_ADC_ConfigChannel+0x7b6>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fccf 	bl	80037c2 <LL_ADC_REG_IsConversionOngoing>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f040 83aa 	bne.w	8004580 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b05      	cmp	r3, #5
 8003e3a:	d824      	bhi.n	8003e86 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	3b02      	subs	r3, #2
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d81b      	bhi.n	8003e7e <HAL_ADC_ConfigChannel+0x8e>
 8003e46:	a201      	add	r2, pc, #4	@ (adr r2, 8003e4c <HAL_ADC_ConfigChannel+0x5c>)
 8003e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4c:	08003e5d 	.word	0x08003e5d
 8003e50:	08003e65 	.word	0x08003e65
 8003e54:	08003e6d 	.word	0x08003e6d
 8003e58:	08003e75 	.word	0x08003e75
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003e5c:	230c      	movs	r3, #12
 8003e5e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003e62:	e010      	b.n	8003e86 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003e64:	2312      	movs	r3, #18
 8003e66:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003e6a:	e00c      	b.n	8003e86 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003e6c:	2318      	movs	r3, #24
 8003e6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003e72:	e008      	b.n	8003e86 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003e74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003e7c:	e003      	b.n	8003e86 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003e7e:	2306      	movs	r3, #6
 8003e80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003e84:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003e94:	f7ff fb74 	bl	8003580 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fc90 	bl	80037c2 <LL_ADC_REG_IsConversionOngoing>
 8003ea2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fc9c 	bl	80037e8 <LL_ADC_INJ_IsConversionOngoing>
 8003eb0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003eb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f040 81a4 	bne.w	8004206 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ebe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f040 819f 	bne.w	8004206 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	6819      	ldr	r1, [r3, #0]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	f7ff fb7f 	bl	80035d8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	695a      	ldr	r2, [r3, #20]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	08db      	lsrs	r3, r3, #3
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d00a      	beq.n	8003f12 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6818      	ldr	r0, [r3, #0]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	6919      	ldr	r1, [r3, #16]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f0c:	f7ff fad0 	bl	80034b0 <LL_ADC_SetOffset>
 8003f10:	e179      	b.n	8004206 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2100      	movs	r1, #0
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff faed 	bl	80034f8 <LL_ADC_GetOffsetChannel>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x14e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fae2 	bl	80034f8 <LL_ADC_GetOffsetChannel>
 8003f34:	4603      	mov	r3, r0
 8003f36:	0e9b      	lsrs	r3, r3, #26
 8003f38:	f003 021f 	and.w	r2, r3, #31
 8003f3c:	e01e      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x18c>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2100      	movs	r1, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff fad7 	bl	80034f8 <LL_ADC_GetOffsetChannel>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f54:	fa93 f3a3 	rbit	r3, r3
 8003f58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003f6c:	2320      	movs	r3, #32
 8003f6e:	e004      	b.n	8003f7a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003f70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f74:	fab3 f383 	clz	r3, r3
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d105      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x1a4>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	0e9b      	lsrs	r3, r3, #26
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	e018      	b.n	8003fc6 <HAL_ADC_ConfigChannel+0x1d6>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fa0:	fa93 f3a3 	rbit	r3, r3
 8003fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003fa8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003fac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003fb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003fb8:	2320      	movs	r3, #32
 8003fba:	e004      	b.n	8003fc6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003fbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003fc0:	fab3 f383 	clz	r3, r3
 8003fc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d106      	bne.n	8003fd8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff faa6 	bl	8003524 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2101      	movs	r1, #1
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff fa8a 	bl	80034f8 <LL_ADC_GetOffsetChannel>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10a      	bne.n	8004004 <HAL_ADC_ConfigChannel+0x214>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fa7f 	bl	80034f8 <LL_ADC_GetOffsetChannel>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	0e9b      	lsrs	r3, r3, #26
 8003ffe:	f003 021f 	and.w	r2, r3, #31
 8004002:	e01e      	b.n	8004042 <HAL_ADC_ConfigChannel+0x252>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2101      	movs	r1, #1
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff fa74 	bl	80034f8 <LL_ADC_GetOffsetChannel>
 8004010:	4603      	mov	r3, r0
 8004012:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800401a:	fa93 f3a3 	rbit	r3, r3
 800401e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004022:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800402a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004032:	2320      	movs	r3, #32
 8004034:	e004      	b.n	8004040 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004036:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800403a:	fab3 f383 	clz	r3, r3
 800403e:	b2db      	uxtb	r3, r3
 8004040:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800404a:	2b00      	cmp	r3, #0
 800404c:	d105      	bne.n	800405a <HAL_ADC_ConfigChannel+0x26a>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	0e9b      	lsrs	r3, r3, #26
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	e018      	b.n	800408c <HAL_ADC_ConfigChannel+0x29c>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004062:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004066:	fa93 f3a3 	rbit	r3, r3
 800406a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800406e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004072:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004076:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800407e:	2320      	movs	r3, #32
 8004080:	e004      	b.n	800408c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004082:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004086:	fab3 f383 	clz	r3, r3
 800408a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800408c:	429a      	cmp	r2, r3
 800408e:	d106      	bne.n	800409e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2200      	movs	r2, #0
 8004096:	2101      	movs	r1, #1
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff fa43 	bl	8003524 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2102      	movs	r1, #2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff fa27 	bl	80034f8 <LL_ADC_GetOffsetChannel>
 80040aa:	4603      	mov	r3, r0
 80040ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x2da>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2102      	movs	r1, #2
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff fa1c 	bl	80034f8 <LL_ADC_GetOffsetChannel>
 80040c0:	4603      	mov	r3, r0
 80040c2:	0e9b      	lsrs	r3, r3, #26
 80040c4:	f003 021f 	and.w	r2, r3, #31
 80040c8:	e01e      	b.n	8004108 <HAL_ADC_ConfigChannel+0x318>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2102      	movs	r1, #2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff fa11 	bl	80034f8 <LL_ADC_GetOffsetChannel>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040e0:	fa93 f3a3 	rbit	r3, r3
 80040e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80040e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80040f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80040f8:	2320      	movs	r3, #32
 80040fa:	e004      	b.n	8004106 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80040fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004100:	fab3 f383 	clz	r3, r3
 8004104:	b2db      	uxtb	r3, r3
 8004106:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004110:	2b00      	cmp	r3, #0
 8004112:	d105      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x330>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	0e9b      	lsrs	r3, r3, #26
 800411a:	f003 031f 	and.w	r3, r3, #31
 800411e:	e014      	b.n	800414a <HAL_ADC_ConfigChannel+0x35a>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004126:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004128:	fa93 f3a3 	rbit	r3, r3
 800412c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800412e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004130:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004134:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800413c:	2320      	movs	r3, #32
 800413e:	e004      	b.n	800414a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004140:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004144:	fab3 f383 	clz	r3, r3
 8004148:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800414a:	429a      	cmp	r2, r3
 800414c:	d106      	bne.n	800415c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2200      	movs	r2, #0
 8004154:	2102      	movs	r1, #2
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff f9e4 	bl	8003524 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2103      	movs	r1, #3
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff f9c8 	bl	80034f8 <LL_ADC_GetOffsetChannel>
 8004168:	4603      	mov	r3, r0
 800416a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10a      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x398>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2103      	movs	r1, #3
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff f9bd 	bl	80034f8 <LL_ADC_GetOffsetChannel>
 800417e:	4603      	mov	r3, r0
 8004180:	0e9b      	lsrs	r3, r3, #26
 8004182:	f003 021f 	and.w	r2, r3, #31
 8004186:	e017      	b.n	80041b8 <HAL_ADC_ConfigChannel+0x3c8>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2103      	movs	r1, #3
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff f9b2 	bl	80034f8 <LL_ADC_GetOffsetChannel>
 8004194:	4603      	mov	r3, r0
 8004196:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004198:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800419a:	fa93 f3a3 	rbit	r3, r3
 800419e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80041a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041a2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80041a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80041aa:	2320      	movs	r3, #32
 80041ac:	e003      	b.n	80041b6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80041ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041b0:	fab3 f383 	clz	r3, r3
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d105      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x3e0>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	0e9b      	lsrs	r3, r3, #26
 80041ca:	f003 031f 	and.w	r3, r3, #31
 80041ce:	e011      	b.n	80041f4 <HAL_ADC_ConfigChannel+0x404>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041d8:	fa93 f3a3 	rbit	r3, r3
 80041dc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80041de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80041e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80041e8:	2320      	movs	r3, #32
 80041ea:	e003      	b.n	80041f4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80041ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041ee:	fab3 f383 	clz	r3, r3
 80041f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d106      	bne.n	8004206 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2200      	movs	r2, #0
 80041fe:	2103      	movs	r1, #3
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff f98f 	bl	8003524 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff fab2 	bl	8003774 <LL_ADC_IsEnabled>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	f040 8140 	bne.w	8004498 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	6819      	ldr	r1, [r3, #0]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	461a      	mov	r2, r3
 8004226:	f7ff fa03 	bl	8003630 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	4a8f      	ldr	r2, [pc, #572]	@ (800446c <HAL_ADC_ConfigChannel+0x67c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	f040 8131 	bne.w	8004498 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10b      	bne.n	800425e <HAL_ADC_ConfigChannel+0x46e>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	0e9b      	lsrs	r3, r3, #26
 800424c:	3301      	adds	r3, #1
 800424e:	f003 031f 	and.w	r3, r3, #31
 8004252:	2b09      	cmp	r3, #9
 8004254:	bf94      	ite	ls
 8004256:	2301      	movls	r3, #1
 8004258:	2300      	movhi	r3, #0
 800425a:	b2db      	uxtb	r3, r3
 800425c:	e019      	b.n	8004292 <HAL_ADC_ConfigChannel+0x4a2>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004264:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004266:	fa93 f3a3 	rbit	r3, r3
 800426a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800426c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004270:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004276:	2320      	movs	r3, #32
 8004278:	e003      	b.n	8004282 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800427a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800427c:	fab3 f383 	clz	r3, r3
 8004280:	b2db      	uxtb	r3, r3
 8004282:	3301      	adds	r3, #1
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	2b09      	cmp	r3, #9
 800428a:	bf94      	ite	ls
 800428c:	2301      	movls	r3, #1
 800428e:	2300      	movhi	r3, #0
 8004290:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004292:	2b00      	cmp	r3, #0
 8004294:	d079      	beq.n	800438a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d107      	bne.n	80042b2 <HAL_ADC_ConfigChannel+0x4c2>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	0e9b      	lsrs	r3, r3, #26
 80042a8:	3301      	adds	r3, #1
 80042aa:	069b      	lsls	r3, r3, #26
 80042ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042b0:	e015      	b.n	80042de <HAL_ADC_ConfigChannel+0x4ee>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042ba:	fa93 f3a3 	rbit	r3, r3
 80042be:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80042c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042c2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80042c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80042ca:	2320      	movs	r3, #32
 80042cc:	e003      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80042ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042d0:	fab3 f383 	clz	r3, r3
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	3301      	adds	r3, #1
 80042d8:	069b      	lsls	r3, r3, #26
 80042da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d109      	bne.n	80042fe <HAL_ADC_ConfigChannel+0x50e>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	0e9b      	lsrs	r3, r3, #26
 80042f0:	3301      	adds	r3, #1
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	2101      	movs	r1, #1
 80042f8:	fa01 f303 	lsl.w	r3, r1, r3
 80042fc:	e017      	b.n	800432e <HAL_ADC_ConfigChannel+0x53e>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004306:	fa93 f3a3 	rbit	r3, r3
 800430a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800430c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800430e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004316:	2320      	movs	r3, #32
 8004318:	e003      	b.n	8004322 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800431a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800431c:	fab3 f383 	clz	r3, r3
 8004320:	b2db      	uxtb	r3, r3
 8004322:	3301      	adds	r3, #1
 8004324:	f003 031f 	and.w	r3, r3, #31
 8004328:	2101      	movs	r1, #1
 800432a:	fa01 f303 	lsl.w	r3, r1, r3
 800432e:	ea42 0103 	orr.w	r1, r2, r3
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <HAL_ADC_ConfigChannel+0x564>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	0e9b      	lsrs	r3, r3, #26
 8004344:	3301      	adds	r3, #1
 8004346:	f003 021f 	and.w	r2, r3, #31
 800434a:	4613      	mov	r3, r2
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	4413      	add	r3, r2
 8004350:	051b      	lsls	r3, r3, #20
 8004352:	e018      	b.n	8004386 <HAL_ADC_ConfigChannel+0x596>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435c:	fa93 f3a3 	rbit	r3, r3
 8004360:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004364:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800436c:	2320      	movs	r3, #32
 800436e:	e003      	b.n	8004378 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004372:	fab3 f383 	clz	r3, r3
 8004376:	b2db      	uxtb	r3, r3
 8004378:	3301      	adds	r3, #1
 800437a:	f003 021f 	and.w	r2, r3, #31
 800437e:	4613      	mov	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4413      	add	r3, r2
 8004384:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004386:	430b      	orrs	r3, r1
 8004388:	e081      	b.n	800448e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004392:	2b00      	cmp	r3, #0
 8004394:	d107      	bne.n	80043a6 <HAL_ADC_ConfigChannel+0x5b6>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	0e9b      	lsrs	r3, r3, #26
 800439c:	3301      	adds	r3, #1
 800439e:	069b      	lsls	r3, r3, #26
 80043a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043a4:	e015      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x5e2>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ae:	fa93 f3a3 	rbit	r3, r3
 80043b2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80043b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80043b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80043be:	2320      	movs	r3, #32
 80043c0:	e003      	b.n	80043ca <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80043c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c4:	fab3 f383 	clz	r3, r3
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	3301      	adds	r3, #1
 80043cc:	069b      	lsls	r3, r3, #26
 80043ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d109      	bne.n	80043f2 <HAL_ADC_ConfigChannel+0x602>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	0e9b      	lsrs	r3, r3, #26
 80043e4:	3301      	adds	r3, #1
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	2101      	movs	r1, #1
 80043ec:	fa01 f303 	lsl.w	r3, r1, r3
 80043f0:	e017      	b.n	8004422 <HAL_ADC_ConfigChannel+0x632>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	fa93 f3a3 	rbit	r3, r3
 80043fe:	61bb      	str	r3, [r7, #24]
  return result;
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800440a:	2320      	movs	r3, #32
 800440c:	e003      	b.n	8004416 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	fab3 f383 	clz	r3, r3
 8004414:	b2db      	uxtb	r3, r3
 8004416:	3301      	adds	r3, #1
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	2101      	movs	r1, #1
 800441e:	fa01 f303 	lsl.w	r3, r1, r3
 8004422:	ea42 0103 	orr.w	r1, r2, r3
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10d      	bne.n	800444e <HAL_ADC_ConfigChannel+0x65e>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	0e9b      	lsrs	r3, r3, #26
 8004438:	3301      	adds	r3, #1
 800443a:	f003 021f 	and.w	r2, r3, #31
 800443e:	4613      	mov	r3, r2
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	4413      	add	r3, r2
 8004444:	3b1e      	subs	r3, #30
 8004446:	051b      	lsls	r3, r3, #20
 8004448:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800444c:	e01e      	b.n	800448c <HAL_ADC_ConfigChannel+0x69c>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	fa93 f3a3 	rbit	r3, r3
 800445a:	60fb      	str	r3, [r7, #12]
  return result;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d104      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004466:	2320      	movs	r3, #32
 8004468:	e006      	b.n	8004478 <HAL_ADC_ConfigChannel+0x688>
 800446a:	bf00      	nop
 800446c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	fab3 f383 	clz	r3, r3
 8004476:	b2db      	uxtb	r3, r3
 8004478:	3301      	adds	r3, #1
 800447a:	f003 021f 	and.w	r2, r3, #31
 800447e:	4613      	mov	r3, r2
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	4413      	add	r3, r2
 8004484:	3b1e      	subs	r3, #30
 8004486:	051b      	lsls	r3, r3, #20
 8004488:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800448c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004492:	4619      	mov	r1, r3
 8004494:	f7ff f8a0 	bl	80035d8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	4b44      	ldr	r3, [pc, #272]	@ (80045b0 <HAL_ADC_ConfigChannel+0x7c0>)
 800449e:	4013      	ands	r3, r2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d07a      	beq.n	800459a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044a4:	4843      	ldr	r0, [pc, #268]	@ (80045b4 <HAL_ADC_ConfigChannel+0x7c4>)
 80044a6:	f7fe fff5 	bl	8003494 <LL_ADC_GetCommonPathInternalCh>
 80044aa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a41      	ldr	r2, [pc, #260]	@ (80045b8 <HAL_ADC_ConfigChannel+0x7c8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d12c      	bne.n	8004512 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d126      	bne.n	8004512 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a3c      	ldr	r2, [pc, #240]	@ (80045bc <HAL_ADC_ConfigChannel+0x7cc>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d004      	beq.n	80044d8 <HAL_ADC_ConfigChannel+0x6e8>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a3b      	ldr	r2, [pc, #236]	@ (80045c0 <HAL_ADC_ConfigChannel+0x7d0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d15d      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044e0:	4619      	mov	r1, r3
 80044e2:	4834      	ldr	r0, [pc, #208]	@ (80045b4 <HAL_ADC_ConfigChannel+0x7c4>)
 80044e4:	f7fe ffc3 	bl	800346e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044e8:	4b36      	ldr	r3, [pc, #216]	@ (80045c4 <HAL_ADC_ConfigChannel+0x7d4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	099b      	lsrs	r3, r3, #6
 80044ee:	4a36      	ldr	r2, [pc, #216]	@ (80045c8 <HAL_ADC_ConfigChannel+0x7d8>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	099b      	lsrs	r3, r3, #6
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	4613      	mov	r3, r2
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004502:	e002      	b.n	800450a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	3b01      	subs	r3, #1
 8004508:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1f9      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004510:	e040      	b.n	8004594 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a2d      	ldr	r2, [pc, #180]	@ (80045cc <HAL_ADC_ConfigChannel+0x7dc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d118      	bne.n	800454e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800451c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004520:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d112      	bne.n	800454e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a23      	ldr	r2, [pc, #140]	@ (80045bc <HAL_ADC_ConfigChannel+0x7cc>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d004      	beq.n	800453c <HAL_ADC_ConfigChannel+0x74c>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a22      	ldr	r2, [pc, #136]	@ (80045c0 <HAL_ADC_ConfigChannel+0x7d0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d12d      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800453c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004540:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004544:	4619      	mov	r1, r3
 8004546:	481b      	ldr	r0, [pc, #108]	@ (80045b4 <HAL_ADC_ConfigChannel+0x7c4>)
 8004548:	f7fe ff91 	bl	800346e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800454c:	e024      	b.n	8004598 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1f      	ldr	r2, [pc, #124]	@ (80045d0 <HAL_ADC_ConfigChannel+0x7e0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d120      	bne.n	800459a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004558:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800455c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d11a      	bne.n	800459a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a14      	ldr	r2, [pc, #80]	@ (80045bc <HAL_ADC_ConfigChannel+0x7cc>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d115      	bne.n	800459a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800456e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004572:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004576:	4619      	mov	r1, r3
 8004578:	480e      	ldr	r0, [pc, #56]	@ (80045b4 <HAL_ADC_ConfigChannel+0x7c4>)
 800457a:	f7fe ff78 	bl	800346e <LL_ADC_SetCommonPathInternalCh>
 800457e:	e00c      	b.n	800459a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004584:	f043 0220 	orr.w	r2, r3, #32
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004592:	e002      	b.n	800459a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004594:	bf00      	nop
 8004596:	e000      	b.n	800459a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004598:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80045a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	37d8      	adds	r7, #216	@ 0xd8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	80080000 	.word	0x80080000
 80045b4:	50040300 	.word	0x50040300
 80045b8:	c7520000 	.word	0xc7520000
 80045bc:	50040000 	.word	0x50040000
 80045c0:	50040200 	.word	0x50040200
 80045c4:	20000000 	.word	0x20000000
 80045c8:	053e2d63 	.word	0x053e2d63
 80045cc:	cb840000 	.word	0xcb840000
 80045d0:	80000001 	.word	0x80000001

080045d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80045dc:	2300      	movs	r3, #0
 80045de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff f8c5 	bl	8003774 <LL_ADC_IsEnabled>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d169      	bne.n	80046c4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	4b36      	ldr	r3, [pc, #216]	@ (80046d0 <ADC_Enable+0xfc>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00d      	beq.n	800461a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004602:	f043 0210 	orr.w	r2, r3, #16
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800460e:	f043 0201 	orr.w	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e055      	b.n	80046c6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff f894 	bl	800374c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004624:	482b      	ldr	r0, [pc, #172]	@ (80046d4 <ADC_Enable+0x100>)
 8004626:	f7fe ff35 	bl	8003494 <LL_ADC_GetCommonPathInternalCh>
 800462a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800462c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004630:	2b00      	cmp	r3, #0
 8004632:	d013      	beq.n	800465c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004634:	4b28      	ldr	r3, [pc, #160]	@ (80046d8 <ADC_Enable+0x104>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	099b      	lsrs	r3, r3, #6
 800463a:	4a28      	ldr	r2, [pc, #160]	@ (80046dc <ADC_Enable+0x108>)
 800463c:	fba2 2303 	umull	r2, r3, r2, r3
 8004640:	099b      	lsrs	r3, r3, #6
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	4613      	mov	r3, r2
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800464e:	e002      	b.n	8004656 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	3b01      	subs	r3, #1
 8004654:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1f9      	bne.n	8004650 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800465c:	f7fe fee8 	bl	8003430 <HAL_GetTick>
 8004660:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004662:	e028      	b.n	80046b6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff f883 	bl	8003774 <LL_ADC_IsEnabled>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d104      	bne.n	800467e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff f867 	bl	800374c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800467e:	f7fe fed7 	bl	8003430 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d914      	bls.n	80046b6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b01      	cmp	r3, #1
 8004698:	d00d      	beq.n	80046b6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469e:	f043 0210 	orr.w	r2, r3, #16
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046aa:	f043 0201 	orr.w	r2, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e007      	b.n	80046c6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d1cf      	bne.n	8004664 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	8000003f 	.word	0x8000003f
 80046d4:	50040300 	.word	0x50040300
 80046d8:	20000000 	.word	0x20000000
 80046dc:	053e2d63 	.word	0x053e2d63

080046e0 <LL_ADC_IsEnabled>:
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <LL_ADC_IsEnabled+0x18>
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <LL_ADC_IsEnabled+0x1a>
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <LL_ADC_REG_IsConversionOngoing>:
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b04      	cmp	r3, #4
 8004718:	d101      	bne.n	800471e <LL_ADC_REG_IsConversionOngoing+0x18>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800472c:	b590      	push	{r4, r7, lr}
 800472e:	b09f      	sub	sp, #124	@ 0x7c
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004742:	2b01      	cmp	r3, #1
 8004744:	d101      	bne.n	800474a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004746:	2302      	movs	r3, #2
 8004748:	e093      	b.n	8004872 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004752:	2300      	movs	r3, #0
 8004754:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004756:	2300      	movs	r3, #0
 8004758:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a47      	ldr	r2, [pc, #284]	@ (800487c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d102      	bne.n	800476a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004764:	4b46      	ldr	r3, [pc, #280]	@ (8004880 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	e001      	b.n	800476e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800476a:	2300      	movs	r3, #0
 800476c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10b      	bne.n	800478c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e072      	b.n	8004872 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff ffb9 	bl	8004706 <LL_ADC_REG_IsConversionOngoing>
 8004794:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff ffb3 	bl	8004706 <LL_ADC_REG_IsConversionOngoing>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d154      	bne.n	8004850 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80047a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d151      	bne.n	8004850 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80047ac:	4b35      	ldr	r3, [pc, #212]	@ (8004884 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80047ae:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d02c      	beq.n	8004812 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80047b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	6859      	ldr	r1, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80047ca:	035b      	lsls	r3, r3, #13
 80047cc:	430b      	orrs	r3, r1
 80047ce:	431a      	orrs	r2, r3
 80047d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047d4:	4829      	ldr	r0, [pc, #164]	@ (800487c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80047d6:	f7ff ff83 	bl	80046e0 <LL_ADC_IsEnabled>
 80047da:	4604      	mov	r4, r0
 80047dc:	4828      	ldr	r0, [pc, #160]	@ (8004880 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80047de:	f7ff ff7f 	bl	80046e0 <LL_ADC_IsEnabled>
 80047e2:	4603      	mov	r3, r0
 80047e4:	431c      	orrs	r4, r3
 80047e6:	4828      	ldr	r0, [pc, #160]	@ (8004888 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80047e8:	f7ff ff7a 	bl	80046e0 <LL_ADC_IsEnabled>
 80047ec:	4603      	mov	r3, r0
 80047ee:	4323      	orrs	r3, r4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d137      	bne.n	8004864 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80047f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80047fc:	f023 030f 	bic.w	r3, r3, #15
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	6811      	ldr	r1, [r2, #0]
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	6892      	ldr	r2, [r2, #8]
 8004808:	430a      	orrs	r2, r1
 800480a:	431a      	orrs	r2, r3
 800480c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800480e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004810:	e028      	b.n	8004864 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004812:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800481a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800481c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800481e:	4817      	ldr	r0, [pc, #92]	@ (800487c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004820:	f7ff ff5e 	bl	80046e0 <LL_ADC_IsEnabled>
 8004824:	4604      	mov	r4, r0
 8004826:	4816      	ldr	r0, [pc, #88]	@ (8004880 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004828:	f7ff ff5a 	bl	80046e0 <LL_ADC_IsEnabled>
 800482c:	4603      	mov	r3, r0
 800482e:	431c      	orrs	r4, r3
 8004830:	4815      	ldr	r0, [pc, #84]	@ (8004888 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004832:	f7ff ff55 	bl	80046e0 <LL_ADC_IsEnabled>
 8004836:	4603      	mov	r3, r0
 8004838:	4323      	orrs	r3, r4
 800483a:	2b00      	cmp	r3, #0
 800483c:	d112      	bne.n	8004864 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800483e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004846:	f023 030f 	bic.w	r3, r3, #15
 800484a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800484c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800484e:	e009      	b.n	8004864 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004854:	f043 0220 	orr.w	r2, r3, #32
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004862:	e000      	b.n	8004866 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004864:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800486e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004872:	4618      	mov	r0, r3
 8004874:	377c      	adds	r7, #124	@ 0x7c
 8004876:	46bd      	mov	sp, r7
 8004878:	bd90      	pop	{r4, r7, pc}
 800487a:	bf00      	nop
 800487c:	50040000 	.word	0x50040000
 8004880:	50040100 	.word	0x50040100
 8004884:	50040300 	.word	0x50040300
 8004888:	50040200 	.word	0x50040200

0800488c <__NVIC_SetPriorityGrouping>:
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800489c:	4b0c      	ldr	r3, [pc, #48]	@ (80048d0 <__NVIC_SetPriorityGrouping+0x44>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048a8:	4013      	ands	r3, r2
 80048aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048be:	4a04      	ldr	r2, [pc, #16]	@ (80048d0 <__NVIC_SetPriorityGrouping+0x44>)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	60d3      	str	r3, [r2, #12]
}
 80048c4:	bf00      	nop
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	e000ed00 	.word	0xe000ed00

080048d4 <__NVIC_GetPriorityGrouping>:
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048d8:	4b04      	ldr	r3, [pc, #16]	@ (80048ec <__NVIC_GetPriorityGrouping+0x18>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	0a1b      	lsrs	r3, r3, #8
 80048de:	f003 0307 	and.w	r3, r3, #7
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	e000ed00 	.word	0xe000ed00

080048f0 <__NVIC_EnableIRQ>:
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	db0b      	blt.n	800491a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	f003 021f 	and.w	r2, r3, #31
 8004908:	4907      	ldr	r1, [pc, #28]	@ (8004928 <__NVIC_EnableIRQ+0x38>)
 800490a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	2001      	movs	r0, #1
 8004912:	fa00 f202 	lsl.w	r2, r0, r2
 8004916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	e000e100 	.word	0xe000e100

0800492c <__NVIC_SetPriority>:
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	6039      	str	r1, [r7, #0]
 8004936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493c:	2b00      	cmp	r3, #0
 800493e:	db0a      	blt.n	8004956 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	b2da      	uxtb	r2, r3
 8004944:	490c      	ldr	r1, [pc, #48]	@ (8004978 <__NVIC_SetPriority+0x4c>)
 8004946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494a:	0112      	lsls	r2, r2, #4
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	440b      	add	r3, r1
 8004950:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004954:	e00a      	b.n	800496c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	b2da      	uxtb	r2, r3
 800495a:	4908      	ldr	r1, [pc, #32]	@ (800497c <__NVIC_SetPriority+0x50>)
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	3b04      	subs	r3, #4
 8004964:	0112      	lsls	r2, r2, #4
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	440b      	add	r3, r1
 800496a:	761a      	strb	r2, [r3, #24]
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	e000e100 	.word	0xe000e100
 800497c:	e000ed00 	.word	0xe000ed00

08004980 <NVIC_EncodePriority>:
{
 8004980:	b480      	push	{r7}
 8004982:	b089      	sub	sp, #36	@ 0x24
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f1c3 0307 	rsb	r3, r3, #7
 800499a:	2b04      	cmp	r3, #4
 800499c:	bf28      	it	cs
 800499e:	2304      	movcs	r3, #4
 80049a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	3304      	adds	r3, #4
 80049a6:	2b06      	cmp	r3, #6
 80049a8:	d902      	bls.n	80049b0 <NVIC_EncodePriority+0x30>
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	3b03      	subs	r3, #3
 80049ae:	e000      	b.n	80049b2 <NVIC_EncodePriority+0x32>
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049b4:	f04f 32ff 	mov.w	r2, #4294967295
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	43da      	mvns	r2, r3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	401a      	ands	r2, r3
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049c8:	f04f 31ff 	mov.w	r1, #4294967295
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	fa01 f303 	lsl.w	r3, r1, r3
 80049d2:	43d9      	mvns	r1, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049d8:	4313      	orrs	r3, r2
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3724      	adds	r7, #36	@ 0x24
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <SysTick_Config>:
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049f8:	d301      	bcc.n	80049fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80049fa:	2301      	movs	r3, #1
 80049fc:	e00f      	b.n	8004a1e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004a28 <SysTick_Config+0x40>)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a06:	210f      	movs	r1, #15
 8004a08:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0c:	f7ff ff8e 	bl	800492c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a10:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <SysTick_Config+0x40>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a16:	4b04      	ldr	r3, [pc, #16]	@ (8004a28 <SysTick_Config+0x40>)
 8004a18:	2207      	movs	r2, #7
 8004a1a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	e000e010 	.word	0xe000e010

08004a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7ff ff29 	bl	800488c <__NVIC_SetPriorityGrouping>
}
 8004a3a:	bf00      	nop
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b086      	sub	sp, #24
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	4603      	mov	r3, r0
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
 8004a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a50:	2300      	movs	r3, #0
 8004a52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a54:	f7ff ff3e 	bl	80048d4 <__NVIC_GetPriorityGrouping>
 8004a58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	68b9      	ldr	r1, [r7, #8]
 8004a5e:	6978      	ldr	r0, [r7, #20]
 8004a60:	f7ff ff8e 	bl	8004980 <NVIC_EncodePriority>
 8004a64:	4602      	mov	r2, r0
 8004a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff ff5d 	bl	800492c <__NVIC_SetPriority>
}
 8004a72:	bf00      	nop
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b082      	sub	sp, #8
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	4603      	mov	r3, r0
 8004a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff ff31 	bl	80048f0 <__NVIC_EnableIRQ>
}
 8004a8e:	bf00      	nop
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b082      	sub	sp, #8
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7ff ffa2 	bl	80049e8 <SysTick_Config>
 8004aa4:	4603      	mov	r3, r0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b085      	sub	sp, #20
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d008      	beq.n	8004ad8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2204      	movs	r2, #4
 8004aca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e022      	b.n	8004b1e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 020e 	bic.w	r2, r2, #14
 8004ae6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0201 	bic.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afc:	f003 021c 	and.w	r2, r3, #28
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b04:	2101      	movs	r1, #1
 8004b06:	fa01 f202 	lsl.w	r2, r1, r2
 8004b0a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d005      	beq.n	8004b4e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2204      	movs	r2, #4
 8004b46:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	73fb      	strb	r3, [r7, #15]
 8004b4c:	e029      	b.n	8004ba2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 020e 	bic.w	r2, r2, #14
 8004b5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0201 	bic.w	r2, r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b72:	f003 021c 	and.w	r2, r3, #28
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b80:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	4798      	blx	r3
    }
  }
  return status;
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bba:	e17f      	b.n	8004ebc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc8:	4013      	ands	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 8171 	beq.w	8004eb6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 0303 	and.w	r3, r3, #3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d005      	beq.n	8004bec <HAL_GPIO_Init+0x40>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 0303 	and.w	r3, r3, #3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d130      	bne.n	8004c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	2203      	movs	r2, #3
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4013      	ands	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c22:	2201      	movs	r2, #1
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	091b      	lsrs	r3, r3, #4
 8004c38:	f003 0201 	and.w	r2, r3, #1
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	2b03      	cmp	r3, #3
 8004c58:	d118      	bne.n	8004c8c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004c60:	2201      	movs	r2, #1
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	43db      	mvns	r3, r3
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	08db      	lsrs	r3, r3, #3
 8004c76:	f003 0201 	and.w	r2, r3, #1
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 0303 	and.w	r3, r3, #3
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d017      	beq.n	8004cc8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4013      	ands	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d123      	bne.n	8004d1c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	08da      	lsrs	r2, r3, #3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3208      	adds	r2, #8
 8004cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	220f      	movs	r2, #15
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	08da      	lsrs	r2, r3, #3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3208      	adds	r2, #8
 8004d16:	6939      	ldr	r1, [r7, #16]
 8004d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	2203      	movs	r2, #3
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4013      	ands	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f003 0203 	and.w	r2, r3, #3
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 80ac 	beq.w	8004eb6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8004edc <HAL_GPIO_Init+0x330>)
 8004d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d62:	4a5e      	ldr	r2, [pc, #376]	@ (8004edc <HAL_GPIO_Init+0x330>)
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	6613      	str	r3, [r2, #96]	@ 0x60
 8004d6a:	4b5c      	ldr	r3, [pc, #368]	@ (8004edc <HAL_GPIO_Init+0x330>)
 8004d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	60bb      	str	r3, [r7, #8]
 8004d74:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d76:	4a5a      	ldr	r2, [pc, #360]	@ (8004ee0 <HAL_GPIO_Init+0x334>)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	089b      	lsrs	r3, r3, #2
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	220f      	movs	r2, #15
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	43db      	mvns	r3, r3
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	4013      	ands	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004da0:	d025      	beq.n	8004dee <HAL_GPIO_Init+0x242>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a4f      	ldr	r2, [pc, #316]	@ (8004ee4 <HAL_GPIO_Init+0x338>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d01f      	beq.n	8004dea <HAL_GPIO_Init+0x23e>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a4e      	ldr	r2, [pc, #312]	@ (8004ee8 <HAL_GPIO_Init+0x33c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d019      	beq.n	8004de6 <HAL_GPIO_Init+0x23a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a4d      	ldr	r2, [pc, #308]	@ (8004eec <HAL_GPIO_Init+0x340>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d013      	beq.n	8004de2 <HAL_GPIO_Init+0x236>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a4c      	ldr	r2, [pc, #304]	@ (8004ef0 <HAL_GPIO_Init+0x344>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00d      	beq.n	8004dde <HAL_GPIO_Init+0x232>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8004ef4 <HAL_GPIO_Init+0x348>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d007      	beq.n	8004dda <HAL_GPIO_Init+0x22e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a4a      	ldr	r2, [pc, #296]	@ (8004ef8 <HAL_GPIO_Init+0x34c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d101      	bne.n	8004dd6 <HAL_GPIO_Init+0x22a>
 8004dd2:	2306      	movs	r3, #6
 8004dd4:	e00c      	b.n	8004df0 <HAL_GPIO_Init+0x244>
 8004dd6:	2307      	movs	r3, #7
 8004dd8:	e00a      	b.n	8004df0 <HAL_GPIO_Init+0x244>
 8004dda:	2305      	movs	r3, #5
 8004ddc:	e008      	b.n	8004df0 <HAL_GPIO_Init+0x244>
 8004dde:	2304      	movs	r3, #4
 8004de0:	e006      	b.n	8004df0 <HAL_GPIO_Init+0x244>
 8004de2:	2303      	movs	r3, #3
 8004de4:	e004      	b.n	8004df0 <HAL_GPIO_Init+0x244>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e002      	b.n	8004df0 <HAL_GPIO_Init+0x244>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <HAL_GPIO_Init+0x244>
 8004dee:	2300      	movs	r3, #0
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	f002 0203 	and.w	r2, r2, #3
 8004df6:	0092      	lsls	r2, r2, #2
 8004df8:	4093      	lsls	r3, r2
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e00:	4937      	ldr	r1, [pc, #220]	@ (8004ee0 <HAL_GPIO_Init+0x334>)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	089b      	lsrs	r3, r3, #2
 8004e06:	3302      	adds	r3, #2
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8004efc <HAL_GPIO_Init+0x350>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	43db      	mvns	r3, r3
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e32:	4a32      	ldr	r2, [pc, #200]	@ (8004efc <HAL_GPIO_Init+0x350>)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e38:	4b30      	ldr	r3, [pc, #192]	@ (8004efc <HAL_GPIO_Init+0x350>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	43db      	mvns	r3, r3
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4013      	ands	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e5c:	4a27      	ldr	r2, [pc, #156]	@ (8004efc <HAL_GPIO_Init+0x350>)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004e62:	4b26      	ldr	r3, [pc, #152]	@ (8004efc <HAL_GPIO_Init+0x350>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e86:	4a1d      	ldr	r2, [pc, #116]	@ (8004efc <HAL_GPIO_Init+0x350>)
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004efc <HAL_GPIO_Init+0x350>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	43db      	mvns	r3, r3
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004eb0:	4a12      	ldr	r2, [pc, #72]	@ (8004efc <HAL_GPIO_Init+0x350>)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f47f ae78 	bne.w	8004bbc <HAL_GPIO_Init+0x10>
  }
}
 8004ecc:	bf00      	nop
 8004ece:	bf00      	nop
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	40010000 	.word	0x40010000
 8004ee4:	48000400 	.word	0x48000400
 8004ee8:	48000800 	.word	0x48000800
 8004eec:	48000c00 	.word	0x48000c00
 8004ef0:	48001000 	.word	0x48001000
 8004ef4:	48001400 	.word	0x48001400
 8004ef8:	48001800 	.word	0x48001800
 8004efc:	40010400 	.word	0x40010400

08004f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	807b      	strh	r3, [r7, #2]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f10:	787b      	ldrb	r3, [r7, #1]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f16:	887a      	ldrh	r2, [r7, #2]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f1c:	e002      	b.n	8004f24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f1e:	887a      	ldrh	r2, [r7, #2]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e08d      	b.n	800505e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fd f8c8 	bl	80020ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2224      	movs	r2, #36	@ 0x24
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0201 	bic.w	r2, r2, #1
 8004f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d107      	bne.n	8004faa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fa6:	609a      	str	r2, [r3, #8]
 8004fa8:	e006      	b.n	8004fb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004fb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d108      	bne.n	8004fd2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fce:	605a      	str	r2, [r3, #4]
 8004fd0:	e007      	b.n	8004fe2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fe0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ff0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ff4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005004:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691a      	ldr	r2, [r3, #16]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69d9      	ldr	r1, [r3, #28]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1a      	ldr	r2, [r3, #32]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b20      	cmp	r3, #32
 800507a:	d138      	bne.n	80050ee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005082:	2b01      	cmp	r3, #1
 8005084:	d101      	bne.n	800508a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005086:	2302      	movs	r3, #2
 8005088:	e032      	b.n	80050f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2224      	movs	r2, #36	@ 0x24
 8005096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0201 	bic.w	r2, r2, #1
 80050a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6819      	ldr	r1, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0201 	orr.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	e000      	b.n	80050f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050ee:	2302      	movs	r3, #2
  }
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b20      	cmp	r3, #32
 8005110:	d139      	bne.n	8005186 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800511c:	2302      	movs	r3, #2
 800511e:	e033      	b.n	8005188 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2224      	movs	r2, #36	@ 0x24
 800512c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0201 	bic.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800514e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0201 	orr.w	r2, r2, #1
 8005170:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	e000      	b.n	8005188 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005186:	2302      	movs	r3, #2
  }
}
 8005188:	4618      	mov	r0, r3
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005198:	4b04      	ldr	r3, [pc, #16]	@ (80051ac <HAL_PWREx_GetVoltageRange+0x18>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40007000 	.word	0x40007000

080051b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051be:	d130      	bne.n	8005222 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80051c0:	4b23      	ldr	r3, [pc, #140]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051cc:	d038      	beq.n	8005240 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051ce:	4b20      	ldr	r3, [pc, #128]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051de:	4b1d      	ldr	r3, [pc, #116]	@ (8005254 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2232      	movs	r2, #50	@ 0x32
 80051e4:	fb02 f303 	mul.w	r3, r2, r3
 80051e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005258 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80051ea:	fba2 2303 	umull	r2, r3, r2, r3
 80051ee:	0c9b      	lsrs	r3, r3, #18
 80051f0:	3301      	adds	r3, #1
 80051f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051f4:	e002      	b.n	80051fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051fc:	4b14      	ldr	r3, [pc, #80]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005208:	d102      	bne.n	8005210 <HAL_PWREx_ControlVoltageScaling+0x60>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f2      	bne.n	80051f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005210:	4b0f      	ldr	r3, [pc, #60]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800521c:	d110      	bne.n	8005240 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e00f      	b.n	8005242 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005222:	4b0b      	ldr	r3, [pc, #44]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800522a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800522e:	d007      	beq.n	8005240 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005230:	4b07      	ldr	r3, [pc, #28]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005238:	4a05      	ldr	r2, [pc, #20]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800523a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800523e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40007000 	.word	0x40007000
 8005254:	20000000 	.word	0x20000000
 8005258:	431bde83 	.word	0x431bde83

0800525c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e3ca      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800526e:	4b97      	ldr	r3, [pc, #604]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005278:	4b94      	ldr	r3, [pc, #592]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0310 	and.w	r3, r3, #16
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 80e4 	beq.w	8005458 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d007      	beq.n	80052a6 <HAL_RCC_OscConfig+0x4a>
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	2b0c      	cmp	r3, #12
 800529a:	f040 808b 	bne.w	80053b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	f040 8087 	bne.w	80053b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052a6:	4b89      	ldr	r3, [pc, #548]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <HAL_RCC_OscConfig+0x62>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e3a2      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1a      	ldr	r2, [r3, #32]
 80052c2:	4b82      	ldr	r3, [pc, #520]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d004      	beq.n	80052d8 <HAL_RCC_OscConfig+0x7c>
 80052ce:	4b7f      	ldr	r3, [pc, #508]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052d6:	e005      	b.n	80052e4 <HAL_RCC_OscConfig+0x88>
 80052d8:	4b7c      	ldr	r3, [pc, #496]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 80052da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052de:	091b      	lsrs	r3, r3, #4
 80052e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d223      	bcs.n	8005330 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fd55 	bl	8005d9c <RCC_SetFlashLatencyFromMSIRange>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e383      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052fc:	4b73      	ldr	r3, [pc, #460]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a72      	ldr	r2, [pc, #456]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 8005302:	f043 0308 	orr.w	r3, r3, #8
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	4b70      	ldr	r3, [pc, #448]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	496d      	ldr	r1, [pc, #436]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 8005316:	4313      	orrs	r3, r2
 8005318:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800531a:	4b6c      	ldr	r3, [pc, #432]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	021b      	lsls	r3, r3, #8
 8005328:	4968      	ldr	r1, [pc, #416]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 800532a:	4313      	orrs	r3, r2
 800532c:	604b      	str	r3, [r1, #4]
 800532e:	e025      	b.n	800537c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005330:	4b66      	ldr	r3, [pc, #408]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a65      	ldr	r2, [pc, #404]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 8005336:	f043 0308 	orr.w	r3, r3, #8
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	4b63      	ldr	r3, [pc, #396]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	4960      	ldr	r1, [pc, #384]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 800534a:	4313      	orrs	r3, r2
 800534c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800534e:	4b5f      	ldr	r3, [pc, #380]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	021b      	lsls	r3, r3, #8
 800535c:	495b      	ldr	r1, [pc, #364]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 800535e:	4313      	orrs	r3, r2
 8005360:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d109      	bne.n	800537c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fd15 	bl	8005d9c <RCC_SetFlashLatencyFromMSIRange>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e343      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800537c:	f000 fc4a 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 8005380:	4602      	mov	r2, r0
 8005382:	4b52      	ldr	r3, [pc, #328]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	091b      	lsrs	r3, r3, #4
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	4950      	ldr	r1, [pc, #320]	@ (80054d0 <HAL_RCC_OscConfig+0x274>)
 800538e:	5ccb      	ldrb	r3, [r1, r3]
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
 8005398:	4a4e      	ldr	r2, [pc, #312]	@ (80054d4 <HAL_RCC_OscConfig+0x278>)
 800539a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800539c:	4b4e      	ldr	r3, [pc, #312]	@ (80054d8 <HAL_RCC_OscConfig+0x27c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fd fff5 	bl	8003390 <HAL_InitTick>
 80053a6:	4603      	mov	r3, r0
 80053a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d052      	beq.n	8005456 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
 80053b2:	e327      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d032      	beq.n	8005422 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053bc:	4b43      	ldr	r3, [pc, #268]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a42      	ldr	r2, [pc, #264]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 80053c2:	f043 0301 	orr.w	r3, r3, #1
 80053c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053c8:	f7fe f832 	bl	8003430 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053d0:	f7fe f82e 	bl	8003430 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e310      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053e2:	4b3a      	ldr	r3, [pc, #232]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0f0      	beq.n	80053d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053ee:	4b37      	ldr	r3, [pc, #220]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a36      	ldr	r2, [pc, #216]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 80053f4:	f043 0308 	orr.w	r3, r3, #8
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	4b34      	ldr	r3, [pc, #208]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	4931      	ldr	r1, [pc, #196]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 8005408:	4313      	orrs	r3, r2
 800540a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800540c:	4b2f      	ldr	r3, [pc, #188]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	021b      	lsls	r3, r3, #8
 800541a:	492c      	ldr	r1, [pc, #176]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 800541c:	4313      	orrs	r3, r2
 800541e:	604b      	str	r3, [r1, #4]
 8005420:	e01a      	b.n	8005458 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005422:	4b2a      	ldr	r3, [pc, #168]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a29      	ldr	r2, [pc, #164]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 8005428:	f023 0301 	bic.w	r3, r3, #1
 800542c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800542e:	f7fd ffff 	bl	8003430 <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005436:	f7fd fffb 	bl	8003430 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e2dd      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005448:	4b20      	ldr	r3, [pc, #128]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1f0      	bne.n	8005436 <HAL_RCC_OscConfig+0x1da>
 8005454:	e000      	b.n	8005458 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005456:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d074      	beq.n	800554e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	2b08      	cmp	r3, #8
 8005468:	d005      	beq.n	8005476 <HAL_RCC_OscConfig+0x21a>
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2b0c      	cmp	r3, #12
 800546e:	d10e      	bne.n	800548e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2b03      	cmp	r3, #3
 8005474:	d10b      	bne.n	800548e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005476:	4b15      	ldr	r3, [pc, #84]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d064      	beq.n	800554c <HAL_RCC_OscConfig+0x2f0>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d160      	bne.n	800554c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e2ba      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005496:	d106      	bne.n	80054a6 <HAL_RCC_OscConfig+0x24a>
 8005498:	4b0c      	ldr	r3, [pc, #48]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a0b      	ldr	r2, [pc, #44]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 800549e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	e026      	b.n	80054f4 <HAL_RCC_OscConfig+0x298>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054ae:	d115      	bne.n	80054dc <HAL_RCC_OscConfig+0x280>
 80054b0:	4b06      	ldr	r3, [pc, #24]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a05      	ldr	r2, [pc, #20]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 80054b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	4b03      	ldr	r3, [pc, #12]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a02      	ldr	r2, [pc, #8]	@ (80054cc <HAL_RCC_OscConfig+0x270>)
 80054c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	e014      	b.n	80054f4 <HAL_RCC_OscConfig+0x298>
 80054ca:	bf00      	nop
 80054cc:	40021000 	.word	0x40021000
 80054d0:	0800a83c 	.word	0x0800a83c
 80054d4:	20000000 	.word	0x20000000
 80054d8:	20000014 	.word	0x20000014
 80054dc:	4ba0      	ldr	r3, [pc, #640]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a9f      	ldr	r2, [pc, #636]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 80054e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	4b9d      	ldr	r3, [pc, #628]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a9c      	ldr	r2, [pc, #624]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 80054ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d013      	beq.n	8005524 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fc:	f7fd ff98 	bl	8003430 <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005504:	f7fd ff94 	bl	8003430 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b64      	cmp	r3, #100	@ 0x64
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e276      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005516:	4b92      	ldr	r3, [pc, #584]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0f0      	beq.n	8005504 <HAL_RCC_OscConfig+0x2a8>
 8005522:	e014      	b.n	800554e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005524:	f7fd ff84 	bl	8003430 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800552c:	f7fd ff80 	bl	8003430 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b64      	cmp	r3, #100	@ 0x64
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e262      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800553e:	4b88      	ldr	r3, [pc, #544]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1f0      	bne.n	800552c <HAL_RCC_OscConfig+0x2d0>
 800554a:	e000      	b.n	800554e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800554c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d060      	beq.n	800561c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	2b04      	cmp	r3, #4
 800555e:	d005      	beq.n	800556c <HAL_RCC_OscConfig+0x310>
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	2b0c      	cmp	r3, #12
 8005564:	d119      	bne.n	800559a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2b02      	cmp	r3, #2
 800556a:	d116      	bne.n	800559a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800556c:	4b7c      	ldr	r3, [pc, #496]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005574:	2b00      	cmp	r3, #0
 8005576:	d005      	beq.n	8005584 <HAL_RCC_OscConfig+0x328>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e23f      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005584:	4b76      	ldr	r3, [pc, #472]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	061b      	lsls	r3, r3, #24
 8005592:	4973      	ldr	r1, [pc, #460]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 8005594:	4313      	orrs	r3, r2
 8005596:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005598:	e040      	b.n	800561c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d023      	beq.n	80055ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055a2:	4b6f      	ldr	r3, [pc, #444]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a6e      	ldr	r2, [pc, #440]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 80055a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ae:	f7fd ff3f 	bl	8003430 <HAL_GetTick>
 80055b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055b4:	e008      	b.n	80055c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b6:	f7fd ff3b 	bl	8003430 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e21d      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055c8:	4b65      	ldr	r3, [pc, #404]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0f0      	beq.n	80055b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d4:	4b62      	ldr	r3, [pc, #392]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	061b      	lsls	r3, r3, #24
 80055e2:	495f      	ldr	r1, [pc, #380]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	604b      	str	r3, [r1, #4]
 80055e8:	e018      	b.n	800561c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ea:	4b5d      	ldr	r3, [pc, #372]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a5c      	ldr	r2, [pc, #368]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 80055f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f6:	f7fd ff1b 	bl	8003430 <HAL_GetTick>
 80055fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055fe:	f7fd ff17 	bl	8003430 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e1f9      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005610:	4b53      	ldr	r3, [pc, #332]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1f0      	bne.n	80055fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	2b00      	cmp	r3, #0
 8005626:	d03c      	beq.n	80056a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01c      	beq.n	800566a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005630:	4b4b      	ldr	r3, [pc, #300]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 8005632:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005636:	4a4a      	ldr	r2, [pc, #296]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 8005638:	f043 0301 	orr.w	r3, r3, #1
 800563c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005640:	f7fd fef6 	bl	8003430 <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005648:	f7fd fef2 	bl	8003430 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e1d4      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800565a:	4b41      	ldr	r3, [pc, #260]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 800565c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d0ef      	beq.n	8005648 <HAL_RCC_OscConfig+0x3ec>
 8005668:	e01b      	b.n	80056a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800566a:	4b3d      	ldr	r3, [pc, #244]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 800566c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005670:	4a3b      	ldr	r2, [pc, #236]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 8005672:	f023 0301 	bic.w	r3, r3, #1
 8005676:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567a:	f7fd fed9 	bl	8003430 <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005680:	e008      	b.n	8005694 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005682:	f7fd fed5 	bl	8003430 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e1b7      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005694:	4b32      	ldr	r3, [pc, #200]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 8005696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1ef      	bne.n	8005682 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 80a6 	beq.w	80057fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056b0:	2300      	movs	r3, #0
 80056b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80056b4:	4b2a      	ldr	r3, [pc, #168]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 80056b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10d      	bne.n	80056dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056c0:	4b27      	ldr	r3, [pc, #156]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 80056c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c4:	4a26      	ldr	r2, [pc, #152]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 80056c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80056cc:	4b24      	ldr	r3, [pc, #144]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 80056ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056d4:	60bb      	str	r3, [r7, #8]
 80056d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056d8:	2301      	movs	r3, #1
 80056da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056dc:	4b21      	ldr	r3, [pc, #132]	@ (8005764 <HAL_RCC_OscConfig+0x508>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d118      	bne.n	800571a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005764 <HAL_RCC_OscConfig+0x508>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005764 <HAL_RCC_OscConfig+0x508>)
 80056ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056f4:	f7fd fe9c 	bl	8003430 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056fc:	f7fd fe98 	bl	8003430 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e17a      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800570e:	4b15      	ldr	r3, [pc, #84]	@ (8005764 <HAL_RCC_OscConfig+0x508>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d108      	bne.n	8005734 <HAL_RCC_OscConfig+0x4d8>
 8005722:	4b0f      	ldr	r3, [pc, #60]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 8005724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005728:	4a0d      	ldr	r2, [pc, #52]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 800572a:	f043 0301 	orr.w	r3, r3, #1
 800572e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005732:	e029      	b.n	8005788 <HAL_RCC_OscConfig+0x52c>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	2b05      	cmp	r3, #5
 800573a:	d115      	bne.n	8005768 <HAL_RCC_OscConfig+0x50c>
 800573c:	4b08      	ldr	r3, [pc, #32]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 800573e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005742:	4a07      	ldr	r2, [pc, #28]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 8005744:	f043 0304 	orr.w	r3, r3, #4
 8005748:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800574c:	4b04      	ldr	r3, [pc, #16]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 800574e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005752:	4a03      	ldr	r2, [pc, #12]	@ (8005760 <HAL_RCC_OscConfig+0x504>)
 8005754:	f043 0301 	orr.w	r3, r3, #1
 8005758:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800575c:	e014      	b.n	8005788 <HAL_RCC_OscConfig+0x52c>
 800575e:	bf00      	nop
 8005760:	40021000 	.word	0x40021000
 8005764:	40007000 	.word	0x40007000
 8005768:	4b9c      	ldr	r3, [pc, #624]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 800576a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800576e:	4a9b      	ldr	r2, [pc, #620]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 8005770:	f023 0301 	bic.w	r3, r3, #1
 8005774:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005778:	4b98      	ldr	r3, [pc, #608]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 800577a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800577e:	4a97      	ldr	r2, [pc, #604]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 8005780:	f023 0304 	bic.w	r3, r3, #4
 8005784:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d016      	beq.n	80057be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005790:	f7fd fe4e 	bl	8003430 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005796:	e00a      	b.n	80057ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005798:	f7fd fe4a 	bl	8003430 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e12a      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ae:	4b8b      	ldr	r3, [pc, #556]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 80057b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0ed      	beq.n	8005798 <HAL_RCC_OscConfig+0x53c>
 80057bc:	e015      	b.n	80057ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057be:	f7fd fe37 	bl	8003430 <HAL_GetTick>
 80057c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057c4:	e00a      	b.n	80057dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c6:	f7fd fe33 	bl	8003430 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e113      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057dc:	4b7f      	ldr	r3, [pc, #508]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 80057de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1ed      	bne.n	80057c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057ea:	7ffb      	ldrb	r3, [r7, #31]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d105      	bne.n	80057fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057f0:	4b7a      	ldr	r3, [pc, #488]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 80057f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f4:	4a79      	ldr	r2, [pc, #484]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 80057f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057fa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 80fe 	beq.w	8005a02 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580a:	2b02      	cmp	r3, #2
 800580c:	f040 80d0 	bne.w	80059b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005810:	4b72      	ldr	r3, [pc, #456]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f003 0203 	and.w	r2, r3, #3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005820:	429a      	cmp	r2, r3
 8005822:	d130      	bne.n	8005886 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582e:	3b01      	subs	r3, #1
 8005830:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005832:	429a      	cmp	r2, r3
 8005834:	d127      	bne.n	8005886 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005840:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005842:	429a      	cmp	r2, r3
 8005844:	d11f      	bne.n	8005886 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005850:	2a07      	cmp	r2, #7
 8005852:	bf14      	ite	ne
 8005854:	2201      	movne	r2, #1
 8005856:	2200      	moveq	r2, #0
 8005858:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800585a:	4293      	cmp	r3, r2
 800585c:	d113      	bne.n	8005886 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005868:	085b      	lsrs	r3, r3, #1
 800586a:	3b01      	subs	r3, #1
 800586c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800586e:	429a      	cmp	r2, r3
 8005870:	d109      	bne.n	8005886 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587c:	085b      	lsrs	r3, r3, #1
 800587e:	3b01      	subs	r3, #1
 8005880:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005882:	429a      	cmp	r2, r3
 8005884:	d06e      	beq.n	8005964 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	2b0c      	cmp	r3, #12
 800588a:	d069      	beq.n	8005960 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800588c:	4b53      	ldr	r3, [pc, #332]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d105      	bne.n	80058a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005898:	4b50      	ldr	r3, [pc, #320]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e0ad      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80058a8:	4b4c      	ldr	r3, [pc, #304]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a4b      	ldr	r2, [pc, #300]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 80058ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058b4:	f7fd fdbc 	bl	8003430 <HAL_GetTick>
 80058b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058ba:	e008      	b.n	80058ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058bc:	f7fd fdb8 	bl	8003430 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e09a      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058ce:	4b43      	ldr	r3, [pc, #268]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1f0      	bne.n	80058bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058da:	4b40      	ldr	r3, [pc, #256]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	4b40      	ldr	r3, [pc, #256]	@ (80059e0 <HAL_RCC_OscConfig+0x784>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80058ea:	3a01      	subs	r2, #1
 80058ec:	0112      	lsls	r2, r2, #4
 80058ee:	4311      	orrs	r1, r2
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80058f4:	0212      	lsls	r2, r2, #8
 80058f6:	4311      	orrs	r1, r2
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80058fc:	0852      	lsrs	r2, r2, #1
 80058fe:	3a01      	subs	r2, #1
 8005900:	0552      	lsls	r2, r2, #21
 8005902:	4311      	orrs	r1, r2
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005908:	0852      	lsrs	r2, r2, #1
 800590a:	3a01      	subs	r2, #1
 800590c:	0652      	lsls	r2, r2, #25
 800590e:	4311      	orrs	r1, r2
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005914:	0912      	lsrs	r2, r2, #4
 8005916:	0452      	lsls	r2, r2, #17
 8005918:	430a      	orrs	r2, r1
 800591a:	4930      	ldr	r1, [pc, #192]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 800591c:	4313      	orrs	r3, r2
 800591e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005920:	4b2e      	ldr	r3, [pc, #184]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a2d      	ldr	r2, [pc, #180]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 8005926:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800592a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800592c:	4b2b      	ldr	r3, [pc, #172]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	4a2a      	ldr	r2, [pc, #168]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 8005932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005936:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005938:	f7fd fd7a 	bl	8003430 <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005940:	f7fd fd76 	bl	8003430 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e058      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005952:	4b22      	ldr	r3, [pc, #136]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0f0      	beq.n	8005940 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800595e:	e050      	b.n	8005a02 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e04f      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005964:	4b1d      	ldr	r3, [pc, #116]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d148      	bne.n	8005a02 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005970:	4b1a      	ldr	r3, [pc, #104]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a19      	ldr	r2, [pc, #100]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 8005976:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800597a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800597c:	4b17      	ldr	r3, [pc, #92]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	4a16      	ldr	r2, [pc, #88]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 8005982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005986:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005988:	f7fd fd52 	bl	8003430 <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005990:	f7fd fd4e 	bl	8003430 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e030      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059a2:	4b0e      	ldr	r3, [pc, #56]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0f0      	beq.n	8005990 <HAL_RCC_OscConfig+0x734>
 80059ae:	e028      	b.n	8005a02 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	2b0c      	cmp	r3, #12
 80059b4:	d023      	beq.n	80059fe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059b6:	4b09      	ldr	r3, [pc, #36]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a08      	ldr	r2, [pc, #32]	@ (80059dc <HAL_RCC_OscConfig+0x780>)
 80059bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c2:	f7fd fd35 	bl	8003430 <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059c8:	e00c      	b.n	80059e4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ca:	f7fd fd31 	bl	8003430 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d905      	bls.n	80059e4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e013      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
 80059dc:	40021000 	.word	0x40021000
 80059e0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059e4:	4b09      	ldr	r3, [pc, #36]	@ (8005a0c <HAL_RCC_OscConfig+0x7b0>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1ec      	bne.n	80059ca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80059f0:	4b06      	ldr	r3, [pc, #24]	@ (8005a0c <HAL_RCC_OscConfig+0x7b0>)
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	4905      	ldr	r1, [pc, #20]	@ (8005a0c <HAL_RCC_OscConfig+0x7b0>)
 80059f6:	4b06      	ldr	r3, [pc, #24]	@ (8005a10 <HAL_RCC_OscConfig+0x7b4>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	60cb      	str	r3, [r1, #12]
 80059fc:	e001      	b.n	8005a02 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e000      	b.n	8005a04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3720      	adds	r7, #32
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	feeefffc 	.word	0xfeeefffc

08005a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e0e7      	b.n	8005bf8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a28:	4b75      	ldr	r3, [pc, #468]	@ (8005c00 <HAL_RCC_ClockConfig+0x1ec>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0307 	and.w	r3, r3, #7
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d910      	bls.n	8005a58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a36:	4b72      	ldr	r3, [pc, #456]	@ (8005c00 <HAL_RCC_ClockConfig+0x1ec>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f023 0207 	bic.w	r2, r3, #7
 8005a3e:	4970      	ldr	r1, [pc, #448]	@ (8005c00 <HAL_RCC_ClockConfig+0x1ec>)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a46:	4b6e      	ldr	r3, [pc, #440]	@ (8005c00 <HAL_RCC_ClockConfig+0x1ec>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d001      	beq.n	8005a58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e0cf      	b.n	8005bf8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d010      	beq.n	8005a86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	4b66      	ldr	r3, [pc, #408]	@ (8005c04 <HAL_RCC_ClockConfig+0x1f0>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d908      	bls.n	8005a86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a74:	4b63      	ldr	r3, [pc, #396]	@ (8005c04 <HAL_RCC_ClockConfig+0x1f0>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	4960      	ldr	r1, [pc, #384]	@ (8005c04 <HAL_RCC_ClockConfig+0x1f0>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d04c      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d107      	bne.n	8005aaa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a9a:	4b5a      	ldr	r3, [pc, #360]	@ (8005c04 <HAL_RCC_ClockConfig+0x1f0>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d121      	bne.n	8005aea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e0a6      	b.n	8005bf8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d107      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ab2:	4b54      	ldr	r3, [pc, #336]	@ (8005c04 <HAL_RCC_ClockConfig+0x1f0>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d115      	bne.n	8005aea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e09a      	b.n	8005bf8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d107      	bne.n	8005ada <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005aca:	4b4e      	ldr	r3, [pc, #312]	@ (8005c04 <HAL_RCC_ClockConfig+0x1f0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d109      	bne.n	8005aea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e08e      	b.n	8005bf8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ada:	4b4a      	ldr	r3, [pc, #296]	@ (8005c04 <HAL_RCC_ClockConfig+0x1f0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e086      	b.n	8005bf8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005aea:	4b46      	ldr	r3, [pc, #280]	@ (8005c04 <HAL_RCC_ClockConfig+0x1f0>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f023 0203 	bic.w	r2, r3, #3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	4943      	ldr	r1, [pc, #268]	@ (8005c04 <HAL_RCC_ClockConfig+0x1f0>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005afc:	f7fd fc98 	bl	8003430 <HAL_GetTick>
 8005b00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b02:	e00a      	b.n	8005b1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b04:	f7fd fc94 	bl	8003430 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e06e      	b.n	8005bf8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b1a:	4b3a      	ldr	r3, [pc, #232]	@ (8005c04 <HAL_RCC_ClockConfig+0x1f0>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 020c 	and.w	r2, r3, #12
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d1eb      	bne.n	8005b04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d010      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	4b31      	ldr	r3, [pc, #196]	@ (8005c04 <HAL_RCC_ClockConfig+0x1f0>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d208      	bcs.n	8005b5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b48:	4b2e      	ldr	r3, [pc, #184]	@ (8005c04 <HAL_RCC_ClockConfig+0x1f0>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	492b      	ldr	r1, [pc, #172]	@ (8005c04 <HAL_RCC_ClockConfig+0x1f0>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b5a:	4b29      	ldr	r3, [pc, #164]	@ (8005c00 <HAL_RCC_ClockConfig+0x1ec>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0307 	and.w	r3, r3, #7
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d210      	bcs.n	8005b8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b68:	4b25      	ldr	r3, [pc, #148]	@ (8005c00 <HAL_RCC_ClockConfig+0x1ec>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f023 0207 	bic.w	r2, r3, #7
 8005b70:	4923      	ldr	r1, [pc, #140]	@ (8005c00 <HAL_RCC_ClockConfig+0x1ec>)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b78:	4b21      	ldr	r3, [pc, #132]	@ (8005c00 <HAL_RCC_ClockConfig+0x1ec>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d001      	beq.n	8005b8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e036      	b.n	8005bf8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0304 	and.w	r3, r3, #4
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d008      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b96:	4b1b      	ldr	r3, [pc, #108]	@ (8005c04 <HAL_RCC_ClockConfig+0x1f0>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	4918      	ldr	r1, [pc, #96]	@ (8005c04 <HAL_RCC_ClockConfig+0x1f0>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d009      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bb4:	4b13      	ldr	r3, [pc, #76]	@ (8005c04 <HAL_RCC_ClockConfig+0x1f0>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	4910      	ldr	r1, [pc, #64]	@ (8005c04 <HAL_RCC_ClockConfig+0x1f0>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bc8:	f000 f824 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	4b0d      	ldr	r3, [pc, #52]	@ (8005c04 <HAL_RCC_ClockConfig+0x1f0>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	091b      	lsrs	r3, r3, #4
 8005bd4:	f003 030f 	and.w	r3, r3, #15
 8005bd8:	490b      	ldr	r1, [pc, #44]	@ (8005c08 <HAL_RCC_ClockConfig+0x1f4>)
 8005bda:	5ccb      	ldrb	r3, [r1, r3]
 8005bdc:	f003 031f 	and.w	r3, r3, #31
 8005be0:	fa22 f303 	lsr.w	r3, r2, r3
 8005be4:	4a09      	ldr	r2, [pc, #36]	@ (8005c0c <HAL_RCC_ClockConfig+0x1f8>)
 8005be6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005be8:	4b09      	ldr	r3, [pc, #36]	@ (8005c10 <HAL_RCC_ClockConfig+0x1fc>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fd fbcf 	bl	8003390 <HAL_InitTick>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	72fb      	strb	r3, [r7, #11]

  return status;
 8005bf6:	7afb      	ldrb	r3, [r7, #11]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	40022000 	.word	0x40022000
 8005c04:	40021000 	.word	0x40021000
 8005c08:	0800a83c 	.word	0x0800a83c
 8005c0c:	20000000 	.word	0x20000000
 8005c10:	20000014 	.word	0x20000014

08005c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b089      	sub	sp, #36	@ 0x24
 8005c18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c22:	4b3e      	ldr	r3, [pc, #248]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 030c 	and.w	r3, r3, #12
 8005c2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0303 	and.w	r3, r3, #3
 8005c34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <HAL_RCC_GetSysClockFreq+0x34>
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2b0c      	cmp	r3, #12
 8005c40:	d121      	bne.n	8005c86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d11e      	bne.n	8005c86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c48:	4b34      	ldr	r3, [pc, #208]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0308 	and.w	r3, r3, #8
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d107      	bne.n	8005c64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c54:	4b31      	ldr	r3, [pc, #196]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c5a:	0a1b      	lsrs	r3, r3, #8
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	61fb      	str	r3, [r7, #28]
 8005c62:	e005      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c64:	4b2d      	ldr	r3, [pc, #180]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	091b      	lsrs	r3, r3, #4
 8005c6a:	f003 030f 	and.w	r3, r3, #15
 8005c6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c70:	4a2b      	ldr	r2, [pc, #172]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10d      	bne.n	8005c9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c84:	e00a      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d102      	bne.n	8005c92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c8c:	4b25      	ldr	r3, [pc, #148]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c8e:	61bb      	str	r3, [r7, #24]
 8005c90:	e004      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d101      	bne.n	8005c9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c98:	4b23      	ldr	r3, [pc, #140]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2b0c      	cmp	r3, #12
 8005ca0:	d134      	bne.n	8005d0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d003      	beq.n	8005cba <HAL_RCC_GetSysClockFreq+0xa6>
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d003      	beq.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xac>
 8005cb8:	e005      	b.n	8005cc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005cba:	4b1a      	ldr	r3, [pc, #104]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0x110>)
 8005cbc:	617b      	str	r3, [r7, #20]
      break;
 8005cbe:	e005      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005cc0:	4b19      	ldr	r3, [pc, #100]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x114>)
 8005cc2:	617b      	str	r3, [r7, #20]
      break;
 8005cc4:	e002      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	617b      	str	r3, [r7, #20]
      break;
 8005cca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ccc:	4b13      	ldr	r3, [pc, #76]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	091b      	lsrs	r3, r3, #4
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005cda:	4b10      	ldr	r3, [pc, #64]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	0a1b      	lsrs	r3, r3, #8
 8005ce0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	fb03 f202 	mul.w	r2, r3, r2
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	0e5b      	lsrs	r3, r3, #25
 8005cf8:	f003 0303 	and.w	r3, r3, #3
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d0c:	69bb      	ldr	r3, [r7, #24]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3724      	adds	r7, #36	@ 0x24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40021000 	.word	0x40021000
 8005d20:	0800a854 	.word	0x0800a854
 8005d24:	00f42400 	.word	0x00f42400
 8005d28:	017d7840 	.word	0x017d7840

08005d2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d30:	4b03      	ldr	r3, [pc, #12]	@ (8005d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d32:	681b      	ldr	r3, [r3, #0]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	20000000 	.word	0x20000000

08005d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d48:	f7ff fff0 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	4b06      	ldr	r3, [pc, #24]	@ (8005d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	0a1b      	lsrs	r3, r3, #8
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	4904      	ldr	r1, [pc, #16]	@ (8005d6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d5a:	5ccb      	ldrb	r3, [r1, r3]
 8005d5c:	f003 031f 	and.w	r3, r3, #31
 8005d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	0800a84c 	.word	0x0800a84c

08005d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d74:	f7ff ffda 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b06      	ldr	r3, [pc, #24]	@ (8005d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	0adb      	lsrs	r3, r3, #11
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4904      	ldr	r1, [pc, #16]	@ (8005d98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d86:	5ccb      	ldrb	r3, [r1, r3]
 8005d88:	f003 031f 	and.w	r3, r3, #31
 8005d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40021000 	.word	0x40021000
 8005d98:	0800a84c 	.word	0x0800a84c

08005d9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005da4:	2300      	movs	r3, #0
 8005da6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005da8:	4b2a      	ldr	r3, [pc, #168]	@ (8005e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005db4:	f7ff f9ee 	bl	8005194 <HAL_PWREx_GetVoltageRange>
 8005db8:	6178      	str	r0, [r7, #20]
 8005dba:	e014      	b.n	8005de6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005dbc:	4b25      	ldr	r3, [pc, #148]	@ (8005e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc0:	4a24      	ldr	r2, [pc, #144]	@ (8005e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dc8:	4b22      	ldr	r3, [pc, #136]	@ (8005e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005dd4:	f7ff f9de 	bl	8005194 <HAL_PWREx_GetVoltageRange>
 8005dd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005dda:	4b1e      	ldr	r3, [pc, #120]	@ (8005e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dde:	4a1d      	ldr	r2, [pc, #116]	@ (8005e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005de4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dec:	d10b      	bne.n	8005e06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b80      	cmp	r3, #128	@ 0x80
 8005df2:	d919      	bls.n	8005e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2ba0      	cmp	r3, #160	@ 0xa0
 8005df8:	d902      	bls.n	8005e00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	e013      	b.n	8005e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e00:	2301      	movs	r3, #1
 8005e02:	613b      	str	r3, [r7, #16]
 8005e04:	e010      	b.n	8005e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b80      	cmp	r3, #128	@ 0x80
 8005e0a:	d902      	bls.n	8005e12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	e00a      	b.n	8005e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b80      	cmp	r3, #128	@ 0x80
 8005e16:	d102      	bne.n	8005e1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e18:	2302      	movs	r3, #2
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	e004      	b.n	8005e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b70      	cmp	r3, #112	@ 0x70
 8005e22:	d101      	bne.n	8005e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e24:	2301      	movs	r3, #1
 8005e26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e28:	4b0b      	ldr	r3, [pc, #44]	@ (8005e58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f023 0207 	bic.w	r2, r3, #7
 8005e30:	4909      	ldr	r1, [pc, #36]	@ (8005e58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e38:	4b07      	ldr	r3, [pc, #28]	@ (8005e58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0307 	and.w	r3, r3, #7
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d001      	beq.n	8005e4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e000      	b.n	8005e4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	40021000 	.word	0x40021000
 8005e58:	40022000 	.word	0x40022000

08005e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e64:	2300      	movs	r3, #0
 8005e66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e68:	2300      	movs	r3, #0
 8005e6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d041      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e7c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005e80:	d02a      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005e82:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005e86:	d824      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e8c:	d008      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005e8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e92:	d81e      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00a      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005e98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e9c:	d010      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e9e:	e018      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ea0:	4b86      	ldr	r3, [pc, #536]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	4a85      	ldr	r2, [pc, #532]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ea6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eaa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005eac:	e015      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fa8b 	bl	80063d0 <RCCEx_PLLSAI1_Config>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ebe:	e00c      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3320      	adds	r3, #32
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fb76 	bl	80065b8 <RCCEx_PLLSAI2_Config>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ed0:	e003      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	74fb      	strb	r3, [r7, #19]
      break;
 8005ed6:	e000      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005ed8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eda:	7cfb      	ldrb	r3, [r7, #19]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10b      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ee0:	4b76      	ldr	r3, [pc, #472]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eee:	4973      	ldr	r1, [pc, #460]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005ef6:	e001      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef8:	7cfb      	ldrb	r3, [r7, #19]
 8005efa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d041      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f0c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f10:	d02a      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005f12:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f16:	d824      	bhi.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005f18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f1c:	d008      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005f1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f22:	d81e      	bhi.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f2c:	d010      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005f2e:	e018      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f30:	4b62      	ldr	r3, [pc, #392]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	4a61      	ldr	r2, [pc, #388]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f3a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005f3c:	e015      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3304      	adds	r3, #4
 8005f42:	2100      	movs	r1, #0
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 fa43 	bl	80063d0 <RCCEx_PLLSAI1_Config>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005f4e:	e00c      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3320      	adds	r3, #32
 8005f54:	2100      	movs	r1, #0
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 fb2e 	bl	80065b8 <RCCEx_PLLSAI2_Config>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005f60:	e003      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	74fb      	strb	r3, [r7, #19]
      break;
 8005f66:	e000      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005f68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f6a:	7cfb      	ldrb	r3, [r7, #19]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10b      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f70:	4b52      	ldr	r3, [pc, #328]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f76:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f7e:	494f      	ldr	r1, [pc, #316]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005f86:	e001      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f88:	7cfb      	ldrb	r3, [r7, #19]
 8005f8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 80a0 	beq.w	80060da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f9e:	4b47      	ldr	r3, [pc, #284]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00d      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fb4:	4b41      	ldr	r3, [pc, #260]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fb8:	4a40      	ldr	r2, [pc, #256]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fc0:	4b3e      	ldr	r3, [pc, #248]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fc8:	60bb      	str	r3, [r7, #8]
 8005fca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a3a      	ldr	r2, [pc, #232]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005fd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fdc:	f7fd fa28 	bl	8003430 <HAL_GetTick>
 8005fe0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005fe2:	e009      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fe4:	f7fd fa24 	bl	8003430 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d902      	bls.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	74fb      	strb	r3, [r7, #19]
        break;
 8005ff6:	e005      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ff8:	4b31      	ldr	r3, [pc, #196]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0ef      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006004:	7cfb      	ldrb	r3, [r7, #19]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d15c      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800600a:	4b2c      	ldr	r3, [pc, #176]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800600c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006010:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006014:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01f      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	429a      	cmp	r2, r3
 8006026:	d019      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006028:	4b24      	ldr	r3, [pc, #144]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800602e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006032:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006034:	4b21      	ldr	r3, [pc, #132]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800603a:	4a20      	ldr	r2, [pc, #128]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800603c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006040:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006044:	4b1d      	ldr	r3, [pc, #116]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800604a:	4a1c      	ldr	r2, [pc, #112]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800604c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006054:	4a19      	ldr	r2, [pc, #100]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d016      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006066:	f7fd f9e3 	bl	8003430 <HAL_GetTick>
 800606a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800606c:	e00b      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800606e:	f7fd f9df 	bl	8003430 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800607c:	4293      	cmp	r3, r2
 800607e:	d902      	bls.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	74fb      	strb	r3, [r7, #19]
            break;
 8006084:	e006      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006086:	4b0d      	ldr	r3, [pc, #52]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0ec      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006094:	7cfb      	ldrb	r3, [r7, #19]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10c      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800609a:	4b08      	ldr	r3, [pc, #32]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800609c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060aa:	4904      	ldr	r1, [pc, #16]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80060b2:	e009      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060b4:	7cfb      	ldrb	r3, [r7, #19]
 80060b6:	74bb      	strb	r3, [r7, #18]
 80060b8:	e006      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80060ba:	bf00      	nop
 80060bc:	40021000 	.word	0x40021000
 80060c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c4:	7cfb      	ldrb	r3, [r7, #19]
 80060c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060c8:	7c7b      	ldrb	r3, [r7, #17]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d105      	bne.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060ce:	4ba1      	ldr	r3, [pc, #644]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80060d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d2:	4aa0      	ldr	r2, [pc, #640]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80060d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060e6:	4b9b      	ldr	r3, [pc, #620]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80060e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ec:	f023 0203 	bic.w	r2, r3, #3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f4:	4997      	ldr	r1, [pc, #604]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006108:	4b92      	ldr	r3, [pc, #584]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800610a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800610e:	f023 020c 	bic.w	r2, r3, #12
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006116:	498f      	ldr	r1, [pc, #572]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0304 	and.w	r3, r3, #4
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800612a:	4b8a      	ldr	r3, [pc, #552]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800612c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006130:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006138:	4986      	ldr	r1, [pc, #536]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0308 	and.w	r3, r3, #8
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800614c:	4b81      	ldr	r3, [pc, #516]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800614e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006152:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800615a:	497e      	ldr	r1, [pc, #504]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0310 	and.w	r3, r3, #16
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800616e:	4b79      	ldr	r3, [pc, #484]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006174:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800617c:	4975      	ldr	r1, [pc, #468]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800617e:	4313      	orrs	r3, r2
 8006180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0320 	and.w	r3, r3, #32
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006190:	4b70      	ldr	r3, [pc, #448]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006196:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800619e:	496d      	ldr	r1, [pc, #436]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061b2:	4b68      	ldr	r3, [pc, #416]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80061b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061c0:	4964      	ldr	r1, [pc, #400]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061d4:	4b5f      	ldr	r3, [pc, #380]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061e2:	495c      	ldr	r1, [pc, #368]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061f6:	4b57      	ldr	r3, [pc, #348]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006204:	4953      	ldr	r1, [pc, #332]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00a      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006218:	4b4e      	ldr	r3, [pc, #312]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006226:	494b      	ldr	r1, [pc, #300]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800623a:	4b46      	ldr	r3, [pc, #280]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800623c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006240:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006248:	4942      	ldr	r1, [pc, #264]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d028      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800625c:	4b3d      	ldr	r3, [pc, #244]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800625e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006262:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800626a:	493a      	ldr	r1, [pc, #232]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006276:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800627a:	d106      	bne.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800627c:	4b35      	ldr	r3, [pc, #212]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	4a34      	ldr	r2, [pc, #208]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006286:	60d3      	str	r3, [r2, #12]
 8006288:	e011      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800628e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006292:	d10c      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3304      	adds	r3, #4
 8006298:	2101      	movs	r1, #1
 800629a:	4618      	mov	r0, r3
 800629c:	f000 f898 	bl	80063d0 <RCCEx_PLLSAI1_Config>
 80062a0:	4603      	mov	r3, r0
 80062a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062a4:	7cfb      	ldrb	r3, [r7, #19]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 80062aa:	7cfb      	ldrb	r3, [r7, #19]
 80062ac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d028      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062ba:	4b26      	ldr	r3, [pc, #152]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80062bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c8:	4922      	ldr	r1, [pc, #136]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062d8:	d106      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062da:	4b1e      	ldr	r3, [pc, #120]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	4a1d      	ldr	r2, [pc, #116]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80062e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062e4:	60d3      	str	r3, [r2, #12]
 80062e6:	e011      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062f0:	d10c      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3304      	adds	r3, #4
 80062f6:	2101      	movs	r1, #1
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 f869 	bl	80063d0 <RCCEx_PLLSAI1_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006302:	7cfb      	ldrb	r3, [r7, #19]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006308:	7cfb      	ldrb	r3, [r7, #19]
 800630a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d031      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006318:	4b0e      	ldr	r3, [pc, #56]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800631a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800631e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006326:	490b      	ldr	r1, [pc, #44]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006328:	4313      	orrs	r3, r2
 800632a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006336:	d10f      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3304      	adds	r3, #4
 800633c:	2102      	movs	r1, #2
 800633e:	4618      	mov	r0, r3
 8006340:	f000 f846 	bl	80063d0 <RCCEx_PLLSAI1_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006348:	7cfb      	ldrb	r3, [r7, #19]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d016      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 800634e:	7cfb      	ldrb	r3, [r7, #19]
 8006350:	74bb      	strb	r3, [r7, #18]
 8006352:	e013      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006354:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800635c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006360:	d10c      	bne.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3320      	adds	r3, #32
 8006366:	2102      	movs	r1, #2
 8006368:	4618      	mov	r0, r3
 800636a:	f000 f925 	bl	80065b8 <RCCEx_PLLSAI2_Config>
 800636e:	4603      	mov	r3, r0
 8006370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006372:	7cfb      	ldrb	r3, [r7, #19]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8006378:	7cfb      	ldrb	r3, [r7, #19]
 800637a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00a      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006388:	4b10      	ldr	r3, [pc, #64]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x570>)
 800638a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800638e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006396:	490d      	ldr	r1, [pc, #52]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8006398:	4313      	orrs	r3, r2
 800639a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063aa:	4b08      	ldr	r3, [pc, #32]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80063ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063b8:	4904      	ldr	r1, [pc, #16]	@ (80063cc <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80063c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	40021000 	.word	0x40021000

080063d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063de:	4b75      	ldr	r3, [pc, #468]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d018      	beq.n	800641c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80063ea:	4b72      	ldr	r3, [pc, #456]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f003 0203 	and.w	r2, r3, #3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d10d      	bne.n	8006416 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
       ||
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d009      	beq.n	8006416 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006402:	4b6c      	ldr	r3, [pc, #432]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	091b      	lsrs	r3, r3, #4
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
       ||
 8006412:	429a      	cmp	r2, r3
 8006414:	d047      	beq.n	80064a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	73fb      	strb	r3, [r7, #15]
 800641a:	e044      	b.n	80064a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b03      	cmp	r3, #3
 8006422:	d018      	beq.n	8006456 <RCCEx_PLLSAI1_Config+0x86>
 8006424:	2b03      	cmp	r3, #3
 8006426:	d825      	bhi.n	8006474 <RCCEx_PLLSAI1_Config+0xa4>
 8006428:	2b01      	cmp	r3, #1
 800642a:	d002      	beq.n	8006432 <RCCEx_PLLSAI1_Config+0x62>
 800642c:	2b02      	cmp	r3, #2
 800642e:	d009      	beq.n	8006444 <RCCEx_PLLSAI1_Config+0x74>
 8006430:	e020      	b.n	8006474 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006432:	4b60      	ldr	r3, [pc, #384]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d11d      	bne.n	800647a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006442:	e01a      	b.n	800647a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006444:	4b5b      	ldr	r3, [pc, #364]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800644c:	2b00      	cmp	r3, #0
 800644e:	d116      	bne.n	800647e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006454:	e013      	b.n	800647e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006456:	4b57      	ldr	r3, [pc, #348]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10f      	bne.n	8006482 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006462:	4b54      	ldr	r3, [pc, #336]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d109      	bne.n	8006482 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006472:	e006      	b.n	8006482 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	73fb      	strb	r3, [r7, #15]
      break;
 8006478:	e004      	b.n	8006484 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800647a:	bf00      	nop
 800647c:	e002      	b.n	8006484 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800647e:	bf00      	nop
 8006480:	e000      	b.n	8006484 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006482:	bf00      	nop
    }

    if(status == HAL_OK)
 8006484:	7bfb      	ldrb	r3, [r7, #15]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10d      	bne.n	80064a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800648a:	4b4a      	ldr	r3, [pc, #296]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6819      	ldr	r1, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	3b01      	subs	r3, #1
 800649c:	011b      	lsls	r3, r3, #4
 800649e:	430b      	orrs	r3, r1
 80064a0:	4944      	ldr	r1, [pc, #272]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d17d      	bne.n	80065a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80064ac:	4b41      	ldr	r3, [pc, #260]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a40      	ldr	r2, [pc, #256]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80064b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064b8:	f7fc ffba 	bl	8003430 <HAL_GetTick>
 80064bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064be:	e009      	b.n	80064d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064c0:	f7fc ffb6 	bl	8003430 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d902      	bls.n	80064d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	73fb      	strb	r3, [r7, #15]
        break;
 80064d2:	e005      	b.n	80064e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064d4:	4b37      	ldr	r3, [pc, #220]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1ef      	bne.n	80064c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d160      	bne.n	80065a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d111      	bne.n	8006510 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064ec:	4b31      	ldr	r3, [pc, #196]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80064f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	6892      	ldr	r2, [r2, #8]
 80064fc:	0211      	lsls	r1, r2, #8
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	68d2      	ldr	r2, [r2, #12]
 8006502:	0912      	lsrs	r2, r2, #4
 8006504:	0452      	lsls	r2, r2, #17
 8006506:	430a      	orrs	r2, r1
 8006508:	492a      	ldr	r1, [pc, #168]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800650a:	4313      	orrs	r3, r2
 800650c:	610b      	str	r3, [r1, #16]
 800650e:	e027      	b.n	8006560 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d112      	bne.n	800653c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006516:	4b27      	ldr	r3, [pc, #156]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800651e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6892      	ldr	r2, [r2, #8]
 8006526:	0211      	lsls	r1, r2, #8
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6912      	ldr	r2, [r2, #16]
 800652c:	0852      	lsrs	r2, r2, #1
 800652e:	3a01      	subs	r2, #1
 8006530:	0552      	lsls	r2, r2, #21
 8006532:	430a      	orrs	r2, r1
 8006534:	491f      	ldr	r1, [pc, #124]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006536:	4313      	orrs	r3, r2
 8006538:	610b      	str	r3, [r1, #16]
 800653a:	e011      	b.n	8006560 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800653c:	4b1d      	ldr	r3, [pc, #116]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006544:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6892      	ldr	r2, [r2, #8]
 800654c:	0211      	lsls	r1, r2, #8
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6952      	ldr	r2, [r2, #20]
 8006552:	0852      	lsrs	r2, r2, #1
 8006554:	3a01      	subs	r2, #1
 8006556:	0652      	lsls	r2, r2, #25
 8006558:	430a      	orrs	r2, r1
 800655a:	4916      	ldr	r1, [pc, #88]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800655c:	4313      	orrs	r3, r2
 800655e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006560:	4b14      	ldr	r3, [pc, #80]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a13      	ldr	r2, [pc, #76]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006566:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800656a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800656c:	f7fc ff60 	bl	8003430 <HAL_GetTick>
 8006570:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006572:	e009      	b.n	8006588 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006574:	f7fc ff5c 	bl	8003430 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d902      	bls.n	8006588 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	73fb      	strb	r3, [r7, #15]
          break;
 8006586:	e005      	b.n	8006594 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006588:	4b0a      	ldr	r3, [pc, #40]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d0ef      	beq.n	8006574 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800659a:	4b06      	ldr	r3, [pc, #24]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800659c:	691a      	ldr	r2, [r3, #16]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	4904      	ldr	r1, [pc, #16]	@ (80065b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	40021000 	.word	0x40021000

080065b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065c6:	4b6a      	ldr	r3, [pc, #424]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d018      	beq.n	8006604 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80065d2:	4b67      	ldr	r3, [pc, #412]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f003 0203 	and.w	r2, r3, #3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d10d      	bne.n	80065fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
       ||
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d009      	beq.n	80065fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80065ea:	4b61      	ldr	r3, [pc, #388]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	091b      	lsrs	r3, r3, #4
 80065f0:	f003 0307 	and.w	r3, r3, #7
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
       ||
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d047      	beq.n	800668e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	73fb      	strb	r3, [r7, #15]
 8006602:	e044      	b.n	800668e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b03      	cmp	r3, #3
 800660a:	d018      	beq.n	800663e <RCCEx_PLLSAI2_Config+0x86>
 800660c:	2b03      	cmp	r3, #3
 800660e:	d825      	bhi.n	800665c <RCCEx_PLLSAI2_Config+0xa4>
 8006610:	2b01      	cmp	r3, #1
 8006612:	d002      	beq.n	800661a <RCCEx_PLLSAI2_Config+0x62>
 8006614:	2b02      	cmp	r3, #2
 8006616:	d009      	beq.n	800662c <RCCEx_PLLSAI2_Config+0x74>
 8006618:	e020      	b.n	800665c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800661a:	4b55      	ldr	r3, [pc, #340]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b00      	cmp	r3, #0
 8006624:	d11d      	bne.n	8006662 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800662a:	e01a      	b.n	8006662 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800662c:	4b50      	ldr	r3, [pc, #320]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006634:	2b00      	cmp	r3, #0
 8006636:	d116      	bne.n	8006666 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800663c:	e013      	b.n	8006666 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800663e:	4b4c      	ldr	r3, [pc, #304]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10f      	bne.n	800666a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800664a:	4b49      	ldr	r3, [pc, #292]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d109      	bne.n	800666a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800665a:	e006      	b.n	800666a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	73fb      	strb	r3, [r7, #15]
      break;
 8006660:	e004      	b.n	800666c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006662:	bf00      	nop
 8006664:	e002      	b.n	800666c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006666:	bf00      	nop
 8006668:	e000      	b.n	800666c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800666a:	bf00      	nop
    }

    if(status == HAL_OK)
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10d      	bne.n	800668e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006672:	4b3f      	ldr	r3, [pc, #252]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6819      	ldr	r1, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	3b01      	subs	r3, #1
 8006684:	011b      	lsls	r3, r3, #4
 8006686:	430b      	orrs	r3, r1
 8006688:	4939      	ldr	r1, [pc, #228]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 800668a:	4313      	orrs	r3, r2
 800668c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d167      	bne.n	8006764 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006694:	4b36      	ldr	r3, [pc, #216]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a35      	ldr	r2, [pc, #212]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 800669a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800669e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066a0:	f7fc fec6 	bl	8003430 <HAL_GetTick>
 80066a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066a6:	e009      	b.n	80066bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066a8:	f7fc fec2 	bl	8003430 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d902      	bls.n	80066bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	73fb      	strb	r3, [r7, #15]
        break;
 80066ba:	e005      	b.n	80066c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066bc:	4b2c      	ldr	r3, [pc, #176]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1ef      	bne.n	80066a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d14a      	bne.n	8006764 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d111      	bne.n	80066f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066d4:	4b26      	ldr	r3, [pc, #152]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80066dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6892      	ldr	r2, [r2, #8]
 80066e4:	0211      	lsls	r1, r2, #8
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	68d2      	ldr	r2, [r2, #12]
 80066ea:	0912      	lsrs	r2, r2, #4
 80066ec:	0452      	lsls	r2, r2, #17
 80066ee:	430a      	orrs	r2, r1
 80066f0:	491f      	ldr	r1, [pc, #124]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	614b      	str	r3, [r1, #20]
 80066f6:	e011      	b.n	800671c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006700:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6892      	ldr	r2, [r2, #8]
 8006708:	0211      	lsls	r1, r2, #8
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	6912      	ldr	r2, [r2, #16]
 800670e:	0852      	lsrs	r2, r2, #1
 8006710:	3a01      	subs	r2, #1
 8006712:	0652      	lsls	r2, r2, #25
 8006714:	430a      	orrs	r2, r1
 8006716:	4916      	ldr	r1, [pc, #88]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006718:	4313      	orrs	r3, r2
 800671a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800671c:	4b14      	ldr	r3, [pc, #80]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a13      	ldr	r2, [pc, #76]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006726:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006728:	f7fc fe82 	bl	8003430 <HAL_GetTick>
 800672c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800672e:	e009      	b.n	8006744 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006730:	f7fc fe7e 	bl	8003430 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d902      	bls.n	8006744 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	73fb      	strb	r3, [r7, #15]
          break;
 8006742:	e005      	b.n	8006750 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006744:	4b0a      	ldr	r3, [pc, #40]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0ef      	beq.n	8006730 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d106      	bne.n	8006764 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006756:	4b06      	ldr	r3, [pc, #24]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	4904      	ldr	r1, [pc, #16]	@ (8006770 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006760:	4313      	orrs	r3, r2
 8006762:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006764:	7bfb      	ldrb	r3, [r7, #15]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	40021000 	.word	0x40021000

08006774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e049      	b.n	800681a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7fb fd04 	bl	80021a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	3304      	adds	r3, #4
 80067b0:	4619      	mov	r1, r3
 80067b2:	4610      	mov	r0, r2
 80067b4:	f000 ff26 	bl	8007604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b082      	sub	sp, #8
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e049      	b.n	80068c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d106      	bne.n	800684e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7fb fe09 	bl	8002460 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2202      	movs	r2, #2
 8006852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3304      	adds	r3, #4
 800685e:	4619      	mov	r1, r3
 8006860:	4610      	mov	r0, r2
 8006862:	f000 fecf 	bl	8007604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d109      	bne.n	80068f4 <HAL_TIM_PWM_Start+0x24>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	bf14      	ite	ne
 80068ec:	2301      	movne	r3, #1
 80068ee:	2300      	moveq	r3, #0
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	e03c      	b.n	800696e <HAL_TIM_PWM_Start+0x9e>
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b04      	cmp	r3, #4
 80068f8:	d109      	bne.n	800690e <HAL_TIM_PWM_Start+0x3e>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b01      	cmp	r3, #1
 8006904:	bf14      	ite	ne
 8006906:	2301      	movne	r3, #1
 8006908:	2300      	moveq	r3, #0
 800690a:	b2db      	uxtb	r3, r3
 800690c:	e02f      	b.n	800696e <HAL_TIM_PWM_Start+0x9e>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b08      	cmp	r3, #8
 8006912:	d109      	bne.n	8006928 <HAL_TIM_PWM_Start+0x58>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b01      	cmp	r3, #1
 800691e:	bf14      	ite	ne
 8006920:	2301      	movne	r3, #1
 8006922:	2300      	moveq	r3, #0
 8006924:	b2db      	uxtb	r3, r3
 8006926:	e022      	b.n	800696e <HAL_TIM_PWM_Start+0x9e>
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	2b0c      	cmp	r3, #12
 800692c:	d109      	bne.n	8006942 <HAL_TIM_PWM_Start+0x72>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b01      	cmp	r3, #1
 8006938:	bf14      	ite	ne
 800693a:	2301      	movne	r3, #1
 800693c:	2300      	moveq	r3, #0
 800693e:	b2db      	uxtb	r3, r3
 8006940:	e015      	b.n	800696e <HAL_TIM_PWM_Start+0x9e>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b10      	cmp	r3, #16
 8006946:	d109      	bne.n	800695c <HAL_TIM_PWM_Start+0x8c>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b01      	cmp	r3, #1
 8006952:	bf14      	ite	ne
 8006954:	2301      	movne	r3, #1
 8006956:	2300      	moveq	r3, #0
 8006958:	b2db      	uxtb	r3, r3
 800695a:	e008      	b.n	800696e <HAL_TIM_PWM_Start+0x9e>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b01      	cmp	r3, #1
 8006966:	bf14      	ite	ne
 8006968:	2301      	movne	r3, #1
 800696a:	2300      	moveq	r3, #0
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e09c      	b.n	8006ab0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d104      	bne.n	8006986 <HAL_TIM_PWM_Start+0xb6>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006984:	e023      	b.n	80069ce <HAL_TIM_PWM_Start+0xfe>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b04      	cmp	r3, #4
 800698a:	d104      	bne.n	8006996 <HAL_TIM_PWM_Start+0xc6>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006994:	e01b      	b.n	80069ce <HAL_TIM_PWM_Start+0xfe>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b08      	cmp	r3, #8
 800699a:	d104      	bne.n	80069a6 <HAL_TIM_PWM_Start+0xd6>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069a4:	e013      	b.n	80069ce <HAL_TIM_PWM_Start+0xfe>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b0c      	cmp	r3, #12
 80069aa:	d104      	bne.n	80069b6 <HAL_TIM_PWM_Start+0xe6>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069b4:	e00b      	b.n	80069ce <HAL_TIM_PWM_Start+0xfe>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b10      	cmp	r3, #16
 80069ba:	d104      	bne.n	80069c6 <HAL_TIM_PWM_Start+0xf6>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069c4:	e003      	b.n	80069ce <HAL_TIM_PWM_Start+0xfe>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2202      	movs	r2, #2
 80069ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2201      	movs	r2, #1
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f001 fb42 	bl	8008060 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a35      	ldr	r2, [pc, #212]	@ (8006ab8 <HAL_TIM_PWM_Start+0x1e8>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d013      	beq.n	8006a0e <HAL_TIM_PWM_Start+0x13e>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a34      	ldr	r2, [pc, #208]	@ (8006abc <HAL_TIM_PWM_Start+0x1ec>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d00e      	beq.n	8006a0e <HAL_TIM_PWM_Start+0x13e>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a32      	ldr	r2, [pc, #200]	@ (8006ac0 <HAL_TIM_PWM_Start+0x1f0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d009      	beq.n	8006a0e <HAL_TIM_PWM_Start+0x13e>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a31      	ldr	r2, [pc, #196]	@ (8006ac4 <HAL_TIM_PWM_Start+0x1f4>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d004      	beq.n	8006a0e <HAL_TIM_PWM_Start+0x13e>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a2f      	ldr	r2, [pc, #188]	@ (8006ac8 <HAL_TIM_PWM_Start+0x1f8>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d101      	bne.n	8006a12 <HAL_TIM_PWM_Start+0x142>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e000      	b.n	8006a14 <HAL_TIM_PWM_Start+0x144>
 8006a12:	2300      	movs	r3, #0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d007      	beq.n	8006a28 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a26:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a22      	ldr	r2, [pc, #136]	@ (8006ab8 <HAL_TIM_PWM_Start+0x1e8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d01d      	beq.n	8006a6e <HAL_TIM_PWM_Start+0x19e>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a3a:	d018      	beq.n	8006a6e <HAL_TIM_PWM_Start+0x19e>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a22      	ldr	r2, [pc, #136]	@ (8006acc <HAL_TIM_PWM_Start+0x1fc>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d013      	beq.n	8006a6e <HAL_TIM_PWM_Start+0x19e>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a21      	ldr	r2, [pc, #132]	@ (8006ad0 <HAL_TIM_PWM_Start+0x200>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00e      	beq.n	8006a6e <HAL_TIM_PWM_Start+0x19e>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a1f      	ldr	r2, [pc, #124]	@ (8006ad4 <HAL_TIM_PWM_Start+0x204>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d009      	beq.n	8006a6e <HAL_TIM_PWM_Start+0x19e>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a17      	ldr	r2, [pc, #92]	@ (8006abc <HAL_TIM_PWM_Start+0x1ec>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d004      	beq.n	8006a6e <HAL_TIM_PWM_Start+0x19e>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a15      	ldr	r2, [pc, #84]	@ (8006ac0 <HAL_TIM_PWM_Start+0x1f0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d115      	bne.n	8006a9a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	4b18      	ldr	r3, [pc, #96]	@ (8006ad8 <HAL_TIM_PWM_Start+0x208>)
 8006a76:	4013      	ands	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b06      	cmp	r3, #6
 8006a7e:	d015      	beq.n	8006aac <HAL_TIM_PWM_Start+0x1dc>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a86:	d011      	beq.n	8006aac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0201 	orr.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a98:	e008      	b.n	8006aac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f042 0201 	orr.w	r2, r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	e000      	b.n	8006aae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	40012c00 	.word	0x40012c00
 8006abc:	40013400 	.word	0x40013400
 8006ac0:	40014000 	.word	0x40014000
 8006ac4:	40014400 	.word	0x40014400
 8006ac8:	40014800 	.word	0x40014800
 8006acc:	40000400 	.word	0x40000400
 8006ad0:	40000800 	.word	0x40000800
 8006ad4:	40000c00 	.word	0x40000c00
 8006ad8:	00010007 	.word	0x00010007

08006adc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e049      	b.n	8006b82 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d106      	bne.n	8006b08 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7fb fc2e 	bl	8002364 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3304      	adds	r3, #4
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	f000 fd72 	bl	8007604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b086      	sub	sp, #24
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e097      	b.n	8006cce <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d106      	bne.n	8006bb8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7fb fb32 	bl	800221c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	6812      	ldr	r2, [r2, #0]
 8006bca:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006bce:	f023 0307 	bic.w	r3, r3, #7
 8006bd2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4610      	mov	r0, r2
 8006be0:	f000 fd10 	bl	8007604 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c0c:	f023 0303 	bic.w	r3, r3, #3
 8006c10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006c2a:	f023 030c 	bic.w	r3, r3, #12
 8006c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	021b      	lsls	r3, r3, #8
 8006c46:	4313      	orrs	r3, r2
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	011a      	lsls	r2, r3, #4
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	031b      	lsls	r3, r3, #12
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006c68:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006c70:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	011b      	lsls	r3, r3, #4
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b084      	sub	sp, #16
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ce6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006cee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cf6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cfe:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d110      	bne.n	8006d28 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d102      	bne.n	8006d12 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d0c:	7b7b      	ldrb	r3, [r7, #13]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d001      	beq.n	8006d16 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e089      	b.n	8006e2a <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2202      	movs	r2, #2
 8006d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2202      	movs	r2, #2
 8006d22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d26:	e031      	b.n	8006d8c <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	d110      	bne.n	8006d50 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d102      	bne.n	8006d3a <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d34:	7b3b      	ldrb	r3, [r7, #12]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d001      	beq.n	8006d3e <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e075      	b.n	8006e2a <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2202      	movs	r2, #2
 8006d42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2202      	movs	r2, #2
 8006d4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d4e:	e01d      	b.n	8006d8c <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d108      	bne.n	8006d68 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d56:	7bbb      	ldrb	r3, [r7, #14]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d105      	bne.n	8006d68 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d5c:	7b7b      	ldrb	r3, [r7, #13]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d102      	bne.n	8006d68 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d62:	7b3b      	ldrb	r3, [r7, #12]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d001      	beq.n	8006d6c <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e05e      	b.n	8006e2a <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_TIM_Encoder_Start_IT+0xc4>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d010      	beq.n	8006dba <HAL_TIM_Encoder_Start_IT+0xe4>
 8006d98:	e01f      	b.n	8006dda <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	2100      	movs	r1, #0
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 f95c 	bl	8008060 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68da      	ldr	r2, [r3, #12]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f042 0202 	orr.w	r2, r2, #2
 8006db6:	60da      	str	r2, [r3, #12]
      break;
 8006db8:	e02e      	b.n	8006e18 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	2104      	movs	r1, #4
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f001 f94c 	bl	8008060 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0204 	orr.w	r2, r2, #4
 8006dd6:	60da      	str	r2, [r3, #12]
      break;
 8006dd8:	e01e      	b.n	8006e18 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2201      	movs	r2, #1
 8006de0:	2100      	movs	r1, #0
 8006de2:	4618      	mov	r0, r3
 8006de4:	f001 f93c 	bl	8008060 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2201      	movs	r2, #1
 8006dee:	2104      	movs	r1, #4
 8006df0:	4618      	mov	r0, r3
 8006df2:	f001 f935 	bl	8008060 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 0202 	orr.w	r2, r2, #2
 8006e04:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0204 	orr.w	r2, r2, #4
 8006e14:	60da      	str	r2, [r3, #12]
      break;
 8006e16:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0201 	orr.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b084      	sub	sp, #16
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d020      	beq.n	8006e96 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d01b      	beq.n	8006e96 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f06f 0202 	mvn.w	r2, #2
 8006e66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	f003 0303 	and.w	r3, r3, #3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7fa ff0f 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8006e82:	e005      	b.n	8006e90 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fb9f 	bl	80075c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fba6 	bl	80075dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f003 0304 	and.w	r3, r3, #4
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d020      	beq.n	8006ee2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f003 0304 	and.w	r3, r3, #4
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d01b      	beq.n	8006ee2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f06f 0204 	mvn.w	r2, #4
 8006eb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7fa fee9 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8006ece:	e005      	b.n	8006edc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fb79 	bl	80075c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fb80 	bl	80075dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	f003 0308 	and.w	r3, r3, #8
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d020      	beq.n	8006f2e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f003 0308 	and.w	r3, r3, #8
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d01b      	beq.n	8006f2e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f06f 0208 	mvn.w	r2, #8
 8006efe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2204      	movs	r2, #4
 8006f04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	69db      	ldr	r3, [r3, #28]
 8006f0c:	f003 0303 	and.w	r3, r3, #3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7fa fec3 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8006f1a:	e005      	b.n	8006f28 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fb53 	bl	80075c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fb5a 	bl	80075dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f003 0310 	and.w	r3, r3, #16
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d020      	beq.n	8006f7a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f003 0310 	and.w	r3, r3, #16
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d01b      	beq.n	8006f7a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f06f 0210 	mvn.w	r2, #16
 8006f4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2208      	movs	r2, #8
 8006f50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7fa fe9d 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8006f66:	e005      	b.n	8006f74 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fb2d 	bl	80075c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fb34 	bl	80075dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00c      	beq.n	8006f9e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d007      	beq.n	8006f9e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f06f 0201 	mvn.w	r2, #1
 8006f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fb0b 	bl	80075b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00c      	beq.n	8006fc2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d007      	beq.n	8006fc2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 f985 	bl	80082cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00c      	beq.n	8006fe6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d007      	beq.n	8006fe6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f001 f97d 	bl	80082e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00c      	beq.n	800700a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d007      	beq.n	800700a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 faf3 	bl	80075f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	f003 0320 	and.w	r3, r3, #32
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00c      	beq.n	800702e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b00      	cmp	r3, #0
 800701c:	d007      	beq.n	800702e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f06f 0220 	mvn.w	r2, #32
 8007026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f001 f945 	bl	80082b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800702e:	bf00      	nop
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b086      	sub	sp, #24
 800703a:	af00      	add	r7, sp, #0
 800703c:	60f8      	str	r0, [r7, #12]
 800703e:	60b9      	str	r1, [r7, #8]
 8007040:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800704c:	2b01      	cmp	r3, #1
 800704e:	d101      	bne.n	8007054 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007050:	2302      	movs	r3, #2
 8007052:	e088      	b.n	8007166 <HAL_TIM_IC_ConfigChannel+0x130>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d11b      	bne.n	800709a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007072:	f000 fe37 	bl	8007ce4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	699a      	ldr	r2, [r3, #24]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 020c 	bic.w	r2, r2, #12
 8007084:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6999      	ldr	r1, [r3, #24]
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	430a      	orrs	r2, r1
 8007096:	619a      	str	r2, [r3, #24]
 8007098:	e060      	b.n	800715c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b04      	cmp	r3, #4
 800709e:	d11c      	bne.n	80070da <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80070b0:	f000 feb5 	bl	8007e1e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	699a      	ldr	r2, [r3, #24]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80070c2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6999      	ldr	r1, [r3, #24]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	021a      	lsls	r2, r3, #8
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	619a      	str	r2, [r3, #24]
 80070d8:	e040      	b.n	800715c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b08      	cmp	r3, #8
 80070de:	d11b      	bne.n	8007118 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80070f0:	f000 ff02 	bl	8007ef8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	69da      	ldr	r2, [r3, #28]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 020c 	bic.w	r2, r2, #12
 8007102:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	69d9      	ldr	r1, [r3, #28]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	689a      	ldr	r2, [r3, #8]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	430a      	orrs	r2, r1
 8007114:	61da      	str	r2, [r3, #28]
 8007116:	e021      	b.n	800715c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b0c      	cmp	r3, #12
 800711c:	d11c      	bne.n	8007158 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800712e:	f000 ff1f 	bl	8007f70 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69da      	ldr	r2, [r3, #28]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007140:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69d9      	ldr	r1, [r3, #28]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	021a      	lsls	r2, r3, #8
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	61da      	str	r2, [r3, #28]
 8007156:	e001      	b.n	800715c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007164:	7dfb      	ldrb	r3, [r7, #23]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3718      	adds	r7, #24
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007186:	2b01      	cmp	r3, #1
 8007188:	d101      	bne.n	800718e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800718a:	2302      	movs	r3, #2
 800718c:	e0ff      	b.n	800738e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b14      	cmp	r3, #20
 800719a:	f200 80f0 	bhi.w	800737e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800719e:	a201      	add	r2, pc, #4	@ (adr r2, 80071a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a4:	080071f9 	.word	0x080071f9
 80071a8:	0800737f 	.word	0x0800737f
 80071ac:	0800737f 	.word	0x0800737f
 80071b0:	0800737f 	.word	0x0800737f
 80071b4:	08007239 	.word	0x08007239
 80071b8:	0800737f 	.word	0x0800737f
 80071bc:	0800737f 	.word	0x0800737f
 80071c0:	0800737f 	.word	0x0800737f
 80071c4:	0800727b 	.word	0x0800727b
 80071c8:	0800737f 	.word	0x0800737f
 80071cc:	0800737f 	.word	0x0800737f
 80071d0:	0800737f 	.word	0x0800737f
 80071d4:	080072bb 	.word	0x080072bb
 80071d8:	0800737f 	.word	0x0800737f
 80071dc:	0800737f 	.word	0x0800737f
 80071e0:	0800737f 	.word	0x0800737f
 80071e4:	080072fd 	.word	0x080072fd
 80071e8:	0800737f 	.word	0x0800737f
 80071ec:	0800737f 	.word	0x0800737f
 80071f0:	0800737f 	.word	0x0800737f
 80071f4:	0800733d 	.word	0x0800733d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 fa9a 	bl	8007738 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699a      	ldr	r2, [r3, #24]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f042 0208 	orr.w	r2, r2, #8
 8007212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	699a      	ldr	r2, [r3, #24]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0204 	bic.w	r2, r2, #4
 8007222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6999      	ldr	r1, [r3, #24]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	691a      	ldr	r2, [r3, #16]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	619a      	str	r2, [r3, #24]
      break;
 8007236:	e0a5      	b.n	8007384 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68b9      	ldr	r1, [r7, #8]
 800723e:	4618      	mov	r0, r3
 8007240:	f000 fb0a 	bl	8007858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	699a      	ldr	r2, [r3, #24]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699a      	ldr	r2, [r3, #24]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6999      	ldr	r1, [r3, #24]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	021a      	lsls	r2, r3, #8
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	619a      	str	r2, [r3, #24]
      break;
 8007278:	e084      	b.n	8007384 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68b9      	ldr	r1, [r7, #8]
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fb73 	bl	800796c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69da      	ldr	r2, [r3, #28]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f042 0208 	orr.w	r2, r2, #8
 8007294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	69da      	ldr	r2, [r3, #28]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 0204 	bic.w	r2, r2, #4
 80072a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	69d9      	ldr	r1, [r3, #28]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	691a      	ldr	r2, [r3, #16]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	430a      	orrs	r2, r1
 80072b6:	61da      	str	r2, [r3, #28]
      break;
 80072b8:	e064      	b.n	8007384 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68b9      	ldr	r1, [r7, #8]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f000 fbdb 	bl	8007a7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69da      	ldr	r2, [r3, #28]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69da      	ldr	r2, [r3, #28]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69d9      	ldr	r1, [r3, #28]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	021a      	lsls	r2, r3, #8
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	61da      	str	r2, [r3, #28]
      break;
 80072fa:	e043      	b.n	8007384 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68b9      	ldr	r1, [r7, #8]
 8007302:	4618      	mov	r0, r3
 8007304:	f000 fc24 	bl	8007b50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f042 0208 	orr.w	r2, r2, #8
 8007316:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 0204 	bic.w	r2, r2, #4
 8007326:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	691a      	ldr	r2, [r3, #16]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800733a:	e023      	b.n	8007384 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68b9      	ldr	r1, [r7, #8]
 8007342:	4618      	mov	r0, r3
 8007344:	f000 fc68 	bl	8007c18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007356:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007366:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	021a      	lsls	r2, r3, #8
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	430a      	orrs	r2, r1
 800737a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800737c:	e002      	b.n	8007384 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	75fb      	strb	r3, [r7, #23]
      break;
 8007382:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800738c:	7dfb      	ldrb	r3, [r7, #23]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop

08007398 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d101      	bne.n	80073b4 <HAL_TIM_ConfigClockSource+0x1c>
 80073b0:	2302      	movs	r3, #2
 80073b2:	e0b6      	b.n	8007522 <HAL_TIM_ConfigClockSource+0x18a>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80073d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073f0:	d03e      	beq.n	8007470 <HAL_TIM_ConfigClockSource+0xd8>
 80073f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073f6:	f200 8087 	bhi.w	8007508 <HAL_TIM_ConfigClockSource+0x170>
 80073fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073fe:	f000 8086 	beq.w	800750e <HAL_TIM_ConfigClockSource+0x176>
 8007402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007406:	d87f      	bhi.n	8007508 <HAL_TIM_ConfigClockSource+0x170>
 8007408:	2b70      	cmp	r3, #112	@ 0x70
 800740a:	d01a      	beq.n	8007442 <HAL_TIM_ConfigClockSource+0xaa>
 800740c:	2b70      	cmp	r3, #112	@ 0x70
 800740e:	d87b      	bhi.n	8007508 <HAL_TIM_ConfigClockSource+0x170>
 8007410:	2b60      	cmp	r3, #96	@ 0x60
 8007412:	d050      	beq.n	80074b6 <HAL_TIM_ConfigClockSource+0x11e>
 8007414:	2b60      	cmp	r3, #96	@ 0x60
 8007416:	d877      	bhi.n	8007508 <HAL_TIM_ConfigClockSource+0x170>
 8007418:	2b50      	cmp	r3, #80	@ 0x50
 800741a:	d03c      	beq.n	8007496 <HAL_TIM_ConfigClockSource+0xfe>
 800741c:	2b50      	cmp	r3, #80	@ 0x50
 800741e:	d873      	bhi.n	8007508 <HAL_TIM_ConfigClockSource+0x170>
 8007420:	2b40      	cmp	r3, #64	@ 0x40
 8007422:	d058      	beq.n	80074d6 <HAL_TIM_ConfigClockSource+0x13e>
 8007424:	2b40      	cmp	r3, #64	@ 0x40
 8007426:	d86f      	bhi.n	8007508 <HAL_TIM_ConfigClockSource+0x170>
 8007428:	2b30      	cmp	r3, #48	@ 0x30
 800742a:	d064      	beq.n	80074f6 <HAL_TIM_ConfigClockSource+0x15e>
 800742c:	2b30      	cmp	r3, #48	@ 0x30
 800742e:	d86b      	bhi.n	8007508 <HAL_TIM_ConfigClockSource+0x170>
 8007430:	2b20      	cmp	r3, #32
 8007432:	d060      	beq.n	80074f6 <HAL_TIM_ConfigClockSource+0x15e>
 8007434:	2b20      	cmp	r3, #32
 8007436:	d867      	bhi.n	8007508 <HAL_TIM_ConfigClockSource+0x170>
 8007438:	2b00      	cmp	r3, #0
 800743a:	d05c      	beq.n	80074f6 <HAL_TIM_ConfigClockSource+0x15e>
 800743c:	2b10      	cmp	r3, #16
 800743e:	d05a      	beq.n	80074f6 <HAL_TIM_ConfigClockSource+0x15e>
 8007440:	e062      	b.n	8007508 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007452:	f000 fde5 	bl	8008020 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007464:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	609a      	str	r2, [r3, #8]
      break;
 800746e:	e04f      	b.n	8007510 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007480:	f000 fdce 	bl	8008020 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689a      	ldr	r2, [r3, #8]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007492:	609a      	str	r2, [r3, #8]
      break;
 8007494:	e03c      	b.n	8007510 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074a2:	461a      	mov	r2, r3
 80074a4:	f000 fc8c 	bl	8007dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2150      	movs	r1, #80	@ 0x50
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fd9b 	bl	8007fea <TIM_ITRx_SetConfig>
      break;
 80074b4:	e02c      	b.n	8007510 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074c2:	461a      	mov	r2, r3
 80074c4:	f000 fce8 	bl	8007e98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2160      	movs	r1, #96	@ 0x60
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 fd8b 	bl	8007fea <TIM_ITRx_SetConfig>
      break;
 80074d4:	e01c      	b.n	8007510 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074e2:	461a      	mov	r2, r3
 80074e4:	f000 fc6c 	bl	8007dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2140      	movs	r1, #64	@ 0x40
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 fd7b 	bl	8007fea <TIM_ITRx_SetConfig>
      break;
 80074f4:	e00c      	b.n	8007510 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4619      	mov	r1, r3
 8007500:	4610      	mov	r0, r2
 8007502:	f000 fd72 	bl	8007fea <TIM_ITRx_SetConfig>
      break;
 8007506:	e003      	b.n	8007510 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	73fb      	strb	r3, [r7, #15]
      break;
 800750c:	e000      	b.n	8007510 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800750e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007520:	7bfb      	ldrb	r3, [r7, #15]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
	...

0800752c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b0c      	cmp	r3, #12
 800753e:	d831      	bhi.n	80075a4 <HAL_TIM_ReadCapturedValue+0x78>
 8007540:	a201      	add	r2, pc, #4	@ (adr r2, 8007548 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007546:	bf00      	nop
 8007548:	0800757d 	.word	0x0800757d
 800754c:	080075a5 	.word	0x080075a5
 8007550:	080075a5 	.word	0x080075a5
 8007554:	080075a5 	.word	0x080075a5
 8007558:	08007587 	.word	0x08007587
 800755c:	080075a5 	.word	0x080075a5
 8007560:	080075a5 	.word	0x080075a5
 8007564:	080075a5 	.word	0x080075a5
 8007568:	08007591 	.word	0x08007591
 800756c:	080075a5 	.word	0x080075a5
 8007570:	080075a5 	.word	0x080075a5
 8007574:	080075a5 	.word	0x080075a5
 8007578:	0800759b 	.word	0x0800759b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007582:	60fb      	str	r3, [r7, #12]

      break;
 8007584:	e00f      	b.n	80075a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758c:	60fb      	str	r3, [r7, #12]

      break;
 800758e:	e00a      	b.n	80075a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007596:	60fb      	str	r3, [r7, #12]

      break;
 8007598:	e005      	b.n	80075a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a0:	60fb      	str	r3, [r7, #12]

      break;
 80075a2:	e000      	b.n	80075a6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80075a4:	bf00      	nop
  }

  return tmpreg;
 80075a6:	68fb      	ldr	r3, [r7, #12]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a40      	ldr	r2, [pc, #256]	@ (8007718 <TIM_Base_SetConfig+0x114>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d013      	beq.n	8007644 <TIM_Base_SetConfig+0x40>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007622:	d00f      	beq.n	8007644 <TIM_Base_SetConfig+0x40>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a3d      	ldr	r2, [pc, #244]	@ (800771c <TIM_Base_SetConfig+0x118>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d00b      	beq.n	8007644 <TIM_Base_SetConfig+0x40>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a3c      	ldr	r2, [pc, #240]	@ (8007720 <TIM_Base_SetConfig+0x11c>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d007      	beq.n	8007644 <TIM_Base_SetConfig+0x40>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a3b      	ldr	r2, [pc, #236]	@ (8007724 <TIM_Base_SetConfig+0x120>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d003      	beq.n	8007644 <TIM_Base_SetConfig+0x40>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a3a      	ldr	r2, [pc, #232]	@ (8007728 <TIM_Base_SetConfig+0x124>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d108      	bne.n	8007656 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800764a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	4313      	orrs	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a2f      	ldr	r2, [pc, #188]	@ (8007718 <TIM_Base_SetConfig+0x114>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d01f      	beq.n	800769e <TIM_Base_SetConfig+0x9a>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007664:	d01b      	beq.n	800769e <TIM_Base_SetConfig+0x9a>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a2c      	ldr	r2, [pc, #176]	@ (800771c <TIM_Base_SetConfig+0x118>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d017      	beq.n	800769e <TIM_Base_SetConfig+0x9a>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a2b      	ldr	r2, [pc, #172]	@ (8007720 <TIM_Base_SetConfig+0x11c>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d013      	beq.n	800769e <TIM_Base_SetConfig+0x9a>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a2a      	ldr	r2, [pc, #168]	@ (8007724 <TIM_Base_SetConfig+0x120>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d00f      	beq.n	800769e <TIM_Base_SetConfig+0x9a>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a29      	ldr	r2, [pc, #164]	@ (8007728 <TIM_Base_SetConfig+0x124>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d00b      	beq.n	800769e <TIM_Base_SetConfig+0x9a>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a28      	ldr	r2, [pc, #160]	@ (800772c <TIM_Base_SetConfig+0x128>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d007      	beq.n	800769e <TIM_Base_SetConfig+0x9a>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a27      	ldr	r2, [pc, #156]	@ (8007730 <TIM_Base_SetConfig+0x12c>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d003      	beq.n	800769e <TIM_Base_SetConfig+0x9a>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a26      	ldr	r2, [pc, #152]	@ (8007734 <TIM_Base_SetConfig+0x130>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d108      	bne.n	80076b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a10      	ldr	r2, [pc, #64]	@ (8007718 <TIM_Base_SetConfig+0x114>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d00f      	beq.n	80076fc <TIM_Base_SetConfig+0xf8>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a12      	ldr	r2, [pc, #72]	@ (8007728 <TIM_Base_SetConfig+0x124>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d00b      	beq.n	80076fc <TIM_Base_SetConfig+0xf8>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a11      	ldr	r2, [pc, #68]	@ (800772c <TIM_Base_SetConfig+0x128>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d007      	beq.n	80076fc <TIM_Base_SetConfig+0xf8>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a10      	ldr	r2, [pc, #64]	@ (8007730 <TIM_Base_SetConfig+0x12c>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d003      	beq.n	80076fc <TIM_Base_SetConfig+0xf8>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a0f      	ldr	r2, [pc, #60]	@ (8007734 <TIM_Base_SetConfig+0x130>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d103      	bne.n	8007704 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	691a      	ldr	r2, [r3, #16]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	615a      	str	r2, [r3, #20]
}
 800770a:	bf00      	nop
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	40012c00 	.word	0x40012c00
 800771c:	40000400 	.word	0x40000400
 8007720:	40000800 	.word	0x40000800
 8007724:	40000c00 	.word	0x40000c00
 8007728:	40013400 	.word	0x40013400
 800772c:	40014000 	.word	0x40014000
 8007730:	40014400 	.word	0x40014400
 8007734:	40014800 	.word	0x40014800

08007738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a1b      	ldr	r3, [r3, #32]
 800774c:	f023 0201 	bic.w	r2, r3, #1
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800776a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f023 0303 	bic.w	r3, r3, #3
 8007772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	4313      	orrs	r3, r2
 800777c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f023 0302 	bic.w	r3, r3, #2
 8007784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	4313      	orrs	r3, r2
 800778e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a2c      	ldr	r2, [pc, #176]	@ (8007844 <TIM_OC1_SetConfig+0x10c>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d00f      	beq.n	80077b8 <TIM_OC1_SetConfig+0x80>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a2b      	ldr	r2, [pc, #172]	@ (8007848 <TIM_OC1_SetConfig+0x110>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d00b      	beq.n	80077b8 <TIM_OC1_SetConfig+0x80>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a2a      	ldr	r2, [pc, #168]	@ (800784c <TIM_OC1_SetConfig+0x114>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d007      	beq.n	80077b8 <TIM_OC1_SetConfig+0x80>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a29      	ldr	r2, [pc, #164]	@ (8007850 <TIM_OC1_SetConfig+0x118>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d003      	beq.n	80077b8 <TIM_OC1_SetConfig+0x80>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a28      	ldr	r2, [pc, #160]	@ (8007854 <TIM_OC1_SetConfig+0x11c>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d10c      	bne.n	80077d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f023 0308 	bic.w	r3, r3, #8
 80077be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f023 0304 	bic.w	r3, r3, #4
 80077d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007844 <TIM_OC1_SetConfig+0x10c>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d00f      	beq.n	80077fa <TIM_OC1_SetConfig+0xc2>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a1a      	ldr	r2, [pc, #104]	@ (8007848 <TIM_OC1_SetConfig+0x110>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d00b      	beq.n	80077fa <TIM_OC1_SetConfig+0xc2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a19      	ldr	r2, [pc, #100]	@ (800784c <TIM_OC1_SetConfig+0x114>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d007      	beq.n	80077fa <TIM_OC1_SetConfig+0xc2>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a18      	ldr	r2, [pc, #96]	@ (8007850 <TIM_OC1_SetConfig+0x118>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d003      	beq.n	80077fa <TIM_OC1_SetConfig+0xc2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a17      	ldr	r2, [pc, #92]	@ (8007854 <TIM_OC1_SetConfig+0x11c>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d111      	bne.n	800781e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	4313      	orrs	r3, r2
 8007812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	4313      	orrs	r3, r2
 800781c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	621a      	str	r2, [r3, #32]
}
 8007838:	bf00      	nop
 800783a:	371c      	adds	r7, #28
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	40012c00 	.word	0x40012c00
 8007848:	40013400 	.word	0x40013400
 800784c:	40014000 	.word	0x40014000
 8007850:	40014400 	.word	0x40014400
 8007854:	40014800 	.word	0x40014800

08007858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007858:	b480      	push	{r7}
 800785a:	b087      	sub	sp, #28
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a1b      	ldr	r3, [r3, #32]
 800786c:	f023 0210 	bic.w	r2, r3, #16
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800788a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	021b      	lsls	r3, r3, #8
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	4313      	orrs	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f023 0320 	bic.w	r3, r3, #32
 80078a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	011b      	lsls	r3, r3, #4
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a28      	ldr	r2, [pc, #160]	@ (8007958 <TIM_OC2_SetConfig+0x100>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d003      	beq.n	80078c4 <TIM_OC2_SetConfig+0x6c>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a27      	ldr	r2, [pc, #156]	@ (800795c <TIM_OC2_SetConfig+0x104>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d10d      	bne.n	80078e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	011b      	lsls	r3, r3, #4
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a1d      	ldr	r2, [pc, #116]	@ (8007958 <TIM_OC2_SetConfig+0x100>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d00f      	beq.n	8007908 <TIM_OC2_SetConfig+0xb0>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a1c      	ldr	r2, [pc, #112]	@ (800795c <TIM_OC2_SetConfig+0x104>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d00b      	beq.n	8007908 <TIM_OC2_SetConfig+0xb0>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a1b      	ldr	r2, [pc, #108]	@ (8007960 <TIM_OC2_SetConfig+0x108>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d007      	beq.n	8007908 <TIM_OC2_SetConfig+0xb0>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007964 <TIM_OC2_SetConfig+0x10c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d003      	beq.n	8007908 <TIM_OC2_SetConfig+0xb0>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a19      	ldr	r2, [pc, #100]	@ (8007968 <TIM_OC2_SetConfig+0x110>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d113      	bne.n	8007930 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800790e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	4313      	orrs	r3, r2
 8007922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4313      	orrs	r3, r2
 800792e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	621a      	str	r2, [r3, #32]
}
 800794a:	bf00      	nop
 800794c:	371c      	adds	r7, #28
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	40012c00 	.word	0x40012c00
 800795c:	40013400 	.word	0x40013400
 8007960:	40014000 	.word	0x40014000
 8007964:	40014400 	.word	0x40014400
 8007968:	40014800 	.word	0x40014800

0800796c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800796c:	b480      	push	{r7}
 800796e:	b087      	sub	sp, #28
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800799a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800799e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f023 0303 	bic.w	r3, r3, #3
 80079a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80079b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	021b      	lsls	r3, r3, #8
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a27      	ldr	r2, [pc, #156]	@ (8007a68 <TIM_OC3_SetConfig+0xfc>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d003      	beq.n	80079d6 <TIM_OC3_SetConfig+0x6a>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a26      	ldr	r2, [pc, #152]	@ (8007a6c <TIM_OC3_SetConfig+0x100>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d10d      	bne.n	80079f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80079dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	021b      	lsls	r3, r3, #8
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80079f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a1c      	ldr	r2, [pc, #112]	@ (8007a68 <TIM_OC3_SetConfig+0xfc>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d00f      	beq.n	8007a1a <TIM_OC3_SetConfig+0xae>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a1b      	ldr	r2, [pc, #108]	@ (8007a6c <TIM_OC3_SetConfig+0x100>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d00b      	beq.n	8007a1a <TIM_OC3_SetConfig+0xae>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a1a      	ldr	r2, [pc, #104]	@ (8007a70 <TIM_OC3_SetConfig+0x104>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d007      	beq.n	8007a1a <TIM_OC3_SetConfig+0xae>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a19      	ldr	r2, [pc, #100]	@ (8007a74 <TIM_OC3_SetConfig+0x108>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d003      	beq.n	8007a1a <TIM_OC3_SetConfig+0xae>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a18      	ldr	r2, [pc, #96]	@ (8007a78 <TIM_OC3_SetConfig+0x10c>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d113      	bne.n	8007a42 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	011b      	lsls	r3, r3, #4
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	621a      	str	r2, [r3, #32]
}
 8007a5c:	bf00      	nop
 8007a5e:	371c      	adds	r7, #28
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	40012c00 	.word	0x40012c00
 8007a6c:	40013400 	.word	0x40013400
 8007a70:	40014000 	.word	0x40014000
 8007a74:	40014400 	.word	0x40014400
 8007a78:	40014800 	.word	0x40014800

08007a7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b087      	sub	sp, #28
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	021b      	lsls	r3, r3, #8
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	031b      	lsls	r3, r3, #12
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a18      	ldr	r2, [pc, #96]	@ (8007b3c <TIM_OC4_SetConfig+0xc0>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d00f      	beq.n	8007b00 <TIM_OC4_SetConfig+0x84>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a17      	ldr	r2, [pc, #92]	@ (8007b40 <TIM_OC4_SetConfig+0xc4>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d00b      	beq.n	8007b00 <TIM_OC4_SetConfig+0x84>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a16      	ldr	r2, [pc, #88]	@ (8007b44 <TIM_OC4_SetConfig+0xc8>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d007      	beq.n	8007b00 <TIM_OC4_SetConfig+0x84>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a15      	ldr	r2, [pc, #84]	@ (8007b48 <TIM_OC4_SetConfig+0xcc>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d003      	beq.n	8007b00 <TIM_OC4_SetConfig+0x84>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a14      	ldr	r2, [pc, #80]	@ (8007b4c <TIM_OC4_SetConfig+0xd0>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d109      	bne.n	8007b14 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	019b      	lsls	r3, r3, #6
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	621a      	str	r2, [r3, #32]
}
 8007b2e:	bf00      	nop
 8007b30:	371c      	adds	r7, #28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	40012c00 	.word	0x40012c00
 8007b40:	40013400 	.word	0x40013400
 8007b44:	40014000 	.word	0x40014000
 8007b48:	40014400 	.word	0x40014400
 8007b4c:	40014800 	.word	0x40014800

08007b50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007b94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	041b      	lsls	r3, r3, #16
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a17      	ldr	r2, [pc, #92]	@ (8007c04 <TIM_OC5_SetConfig+0xb4>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d00f      	beq.n	8007bca <TIM_OC5_SetConfig+0x7a>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a16      	ldr	r2, [pc, #88]	@ (8007c08 <TIM_OC5_SetConfig+0xb8>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d00b      	beq.n	8007bca <TIM_OC5_SetConfig+0x7a>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a15      	ldr	r2, [pc, #84]	@ (8007c0c <TIM_OC5_SetConfig+0xbc>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d007      	beq.n	8007bca <TIM_OC5_SetConfig+0x7a>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a14      	ldr	r2, [pc, #80]	@ (8007c10 <TIM_OC5_SetConfig+0xc0>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d003      	beq.n	8007bca <TIM_OC5_SetConfig+0x7a>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a13      	ldr	r2, [pc, #76]	@ (8007c14 <TIM_OC5_SetConfig+0xc4>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d109      	bne.n	8007bde <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	021b      	lsls	r3, r3, #8
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	621a      	str	r2, [r3, #32]
}
 8007bf8:	bf00      	nop
 8007bfa:	371c      	adds	r7, #28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	40012c00 	.word	0x40012c00
 8007c08:	40013400 	.word	0x40013400
 8007c0c:	40014000 	.word	0x40014000
 8007c10:	40014400 	.word	0x40014400
 8007c14:	40014800 	.word	0x40014800

08007c18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b087      	sub	sp, #28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	021b      	lsls	r3, r3, #8
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007c5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	051b      	lsls	r3, r3, #20
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a18      	ldr	r2, [pc, #96]	@ (8007cd0 <TIM_OC6_SetConfig+0xb8>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d00f      	beq.n	8007c94 <TIM_OC6_SetConfig+0x7c>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a17      	ldr	r2, [pc, #92]	@ (8007cd4 <TIM_OC6_SetConfig+0xbc>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d00b      	beq.n	8007c94 <TIM_OC6_SetConfig+0x7c>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a16      	ldr	r2, [pc, #88]	@ (8007cd8 <TIM_OC6_SetConfig+0xc0>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d007      	beq.n	8007c94 <TIM_OC6_SetConfig+0x7c>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a15      	ldr	r2, [pc, #84]	@ (8007cdc <TIM_OC6_SetConfig+0xc4>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d003      	beq.n	8007c94 <TIM_OC6_SetConfig+0x7c>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a14      	ldr	r2, [pc, #80]	@ (8007ce0 <TIM_OC6_SetConfig+0xc8>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d109      	bne.n	8007ca8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	029b      	lsls	r3, r3, #10
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	621a      	str	r2, [r3, #32]
}
 8007cc2:	bf00      	nop
 8007cc4:	371c      	adds	r7, #28
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	40012c00 	.word	0x40012c00
 8007cd4:	40013400 	.word	0x40013400
 8007cd8:	40014000 	.word	0x40014000
 8007cdc:	40014400 	.word	0x40014400
 8007ce0:	40014800 	.word	0x40014800

08007ce4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
 8007cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	f023 0201 	bic.w	r2, r3, #1
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	4a26      	ldr	r2, [pc, #152]	@ (8007da8 <TIM_TI1_SetConfig+0xc4>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d017      	beq.n	8007d42 <TIM_TI1_SetConfig+0x5e>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d18:	d013      	beq.n	8007d42 <TIM_TI1_SetConfig+0x5e>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	4a23      	ldr	r2, [pc, #140]	@ (8007dac <TIM_TI1_SetConfig+0xc8>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d00f      	beq.n	8007d42 <TIM_TI1_SetConfig+0x5e>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4a22      	ldr	r2, [pc, #136]	@ (8007db0 <TIM_TI1_SetConfig+0xcc>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d00b      	beq.n	8007d42 <TIM_TI1_SetConfig+0x5e>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	4a21      	ldr	r2, [pc, #132]	@ (8007db4 <TIM_TI1_SetConfig+0xd0>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d007      	beq.n	8007d42 <TIM_TI1_SetConfig+0x5e>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4a20      	ldr	r2, [pc, #128]	@ (8007db8 <TIM_TI1_SetConfig+0xd4>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d003      	beq.n	8007d42 <TIM_TI1_SetConfig+0x5e>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8007dbc <TIM_TI1_SetConfig+0xd8>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d101      	bne.n	8007d46 <TIM_TI1_SetConfig+0x62>
 8007d42:	2301      	movs	r3, #1
 8007d44:	e000      	b.n	8007d48 <TIM_TI1_SetConfig+0x64>
 8007d46:	2300      	movs	r3, #0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d008      	beq.n	8007d5e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f023 0303 	bic.w	r3, r3, #3
 8007d52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	617b      	str	r3, [r7, #20]
 8007d5c:	e003      	b.n	8007d66 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f043 0301 	orr.w	r3, r3, #1
 8007d64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	011b      	lsls	r3, r3, #4
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f023 030a 	bic.w	r3, r3, #10
 8007d80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f003 030a 	and.w	r3, r3, #10
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	621a      	str	r2, [r3, #32]
}
 8007d9a:	bf00      	nop
 8007d9c:	371c      	adds	r7, #28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	40012c00 	.word	0x40012c00
 8007dac:	40000400 	.word	0x40000400
 8007db0:	40000800 	.word	0x40000800
 8007db4:	40000c00 	.word	0x40000c00
 8007db8:	40013400 	.word	0x40013400
 8007dbc:	40014000 	.word	0x40014000

08007dc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6a1b      	ldr	r3, [r3, #32]
 8007dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	f023 0201 	bic.w	r2, r3, #1
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	011b      	lsls	r3, r3, #4
 8007df0:	693a      	ldr	r2, [r7, #16]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	f023 030a 	bic.w	r3, r3, #10
 8007dfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	621a      	str	r2, [r3, #32]
}
 8007e12:	bf00      	nop
 8007e14:	371c      	adds	r7, #28
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b087      	sub	sp, #28
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	60f8      	str	r0, [r7, #12]
 8007e26:	60b9      	str	r1, [r7, #8]
 8007e28:	607a      	str	r2, [r7, #4]
 8007e2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	f023 0210 	bic.w	r2, r3, #16
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	021b      	lsls	r3, r3, #8
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	031b      	lsls	r3, r3, #12
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007e70:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	011b      	lsls	r3, r3, #4
 8007e76:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	621a      	str	r2, [r3, #32]
}
 8007e8c:	bf00      	nop
 8007e8e:	371c      	adds	r7, #28
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6a1b      	ldr	r3, [r3, #32]
 8007ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	f023 0210 	bic.w	r2, r3, #16
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	031b      	lsls	r3, r3, #12
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	011b      	lsls	r3, r3, #4
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	621a      	str	r2, [r3, #32]
}
 8007eec:	bf00      	nop
 8007eee:	371c      	adds	r7, #28
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b087      	sub	sp, #28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
 8007f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	69db      	ldr	r3, [r3, #28]
 8007f1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f023 0303 	bic.w	r3, r3, #3
 8007f24:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f34:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	011b      	lsls	r3, r3, #4
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007f48:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	021b      	lsls	r3, r3, #8
 8007f4e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	621a      	str	r2, [r3, #32]
}
 8007f64:	bf00      	nop
 8007f66:	371c      	adds	r7, #28
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6a1b      	ldr	r3, [r3, #32]
 8007f88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	69db      	ldr	r3, [r3, #28]
 8007f94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f9c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	021b      	lsls	r3, r3, #8
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007fae:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	031b      	lsls	r3, r3, #12
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007fc2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	031b      	lsls	r3, r3, #12
 8007fc8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	621a      	str	r2, [r3, #32]
}
 8007fde:	bf00      	nop
 8007fe0:	371c      	adds	r7, #28
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b085      	sub	sp, #20
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4313      	orrs	r3, r2
 8008008:	f043 0307 	orr.w	r3, r3, #7
 800800c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	609a      	str	r2, [r3, #8]
}
 8008014:	bf00      	nop
 8008016:	3714      	adds	r7, #20
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800803a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	021a      	lsls	r2, r3, #8
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	431a      	orrs	r2, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	4313      	orrs	r3, r2
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	4313      	orrs	r3, r2
 800804c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	609a      	str	r2, [r3, #8]
}
 8008054:	bf00      	nop
 8008056:	371c      	adds	r7, #28
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	f003 031f 	and.w	r3, r3, #31
 8008072:	2201      	movs	r2, #1
 8008074:	fa02 f303 	lsl.w	r3, r2, r3
 8008078:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6a1a      	ldr	r2, [r3, #32]
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	43db      	mvns	r3, r3
 8008082:	401a      	ands	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a1a      	ldr	r2, [r3, #32]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	f003 031f 	and.w	r3, r3, #31
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	fa01 f303 	lsl.w	r3, r1, r3
 8008098:	431a      	orrs	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	621a      	str	r2, [r3, #32]
}
 800809e:	bf00      	nop
 80080a0:	371c      	adds	r7, #28
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
	...

080080ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d101      	bne.n	80080c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080c0:	2302      	movs	r3, #2
 80080c2:	e068      	b.n	8008196 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2202      	movs	r2, #2
 80080d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a2e      	ldr	r2, [pc, #184]	@ (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d004      	beq.n	80080f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a2d      	ldr	r2, [pc, #180]	@ (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d108      	bne.n	800810a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80080fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	4313      	orrs	r3, r2
 8008108:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008110:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	4313      	orrs	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a1e      	ldr	r2, [pc, #120]	@ (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d01d      	beq.n	800816a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008136:	d018      	beq.n	800816a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a1b      	ldr	r2, [pc, #108]	@ (80081ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d013      	beq.n	800816a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a1a      	ldr	r2, [pc, #104]	@ (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d00e      	beq.n	800816a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a18      	ldr	r2, [pc, #96]	@ (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d009      	beq.n	800816a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a13      	ldr	r2, [pc, #76]	@ (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d004      	beq.n	800816a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a14      	ldr	r2, [pc, #80]	@ (80081b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d10c      	bne.n	8008184 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008170:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	4313      	orrs	r3, r2
 800817a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	40012c00 	.word	0x40012c00
 80081a8:	40013400 	.word	0x40013400
 80081ac:	40000400 	.word	0x40000400
 80081b0:	40000800 	.word	0x40000800
 80081b4:	40000c00 	.word	0x40000c00
 80081b8:	40014000 	.word	0x40014000

080081bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d101      	bne.n	80081d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80081d4:	2302      	movs	r3, #2
 80081d6:	e065      	b.n	80082a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	4313      	orrs	r3, r2
 8008208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4313      	orrs	r3, r2
 8008216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	4313      	orrs	r3, r2
 8008224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	4313      	orrs	r3, r2
 8008232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800823e:	4313      	orrs	r3, r2
 8008240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	041b      	lsls	r3, r3, #16
 800824e:	4313      	orrs	r3, r2
 8008250:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a16      	ldr	r2, [pc, #88]	@ (80082b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d004      	beq.n	8008266 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a14      	ldr	r2, [pc, #80]	@ (80082b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d115      	bne.n	8008292 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008270:	051b      	lsls	r3, r3, #20
 8008272:	4313      	orrs	r3, r2
 8008274:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	69db      	ldr	r3, [r3, #28]
 8008280:	4313      	orrs	r3, r2
 8008282:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	4313      	orrs	r3, r2
 8008290:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	40012c00 	.word	0x40012c00
 80082b4:	40013400 	.word	0x40013400

080082b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e040      	b.n	8008388 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800830a:	2b00      	cmp	r3, #0
 800830c:	d106      	bne.n	800831c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f7fa f920 	bl	800255c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2224      	movs	r2, #36	@ 0x24
 8008320:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f022 0201 	bic.w	r2, r2, #1
 8008330:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008336:	2b00      	cmp	r3, #0
 8008338:	d002      	beq.n	8008340 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fe36 	bl	8008fac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fb7b 	bl	8008a3c <UART_SetConfig>
 8008346:	4603      	mov	r3, r0
 8008348:	2b01      	cmp	r3, #1
 800834a:	d101      	bne.n	8008350 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e01b      	b.n	8008388 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800835e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	689a      	ldr	r2, [r3, #8]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800836e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f042 0201 	orr.w	r2, r2, #1
 800837e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 feb5 	bl	80090f0 <UART_CheckIdleState>
 8008386:	4603      	mov	r3, r0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b08a      	sub	sp, #40	@ 0x28
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	4613      	mov	r3, r2
 800839c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083a4:	2b20      	cmp	r3, #32
 80083a6:	d137      	bne.n	8008418 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d002      	beq.n	80083b4 <HAL_UART_Receive_IT+0x24>
 80083ae:	88fb      	ldrh	r3, [r7, #6]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e030      	b.n	800841a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a18      	ldr	r2, [pc, #96]	@ (8008424 <HAL_UART_Receive_IT+0x94>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d01f      	beq.n	8008408 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d018      	beq.n	8008408 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	e853 3f00 	ldrex	r3, [r3]
 80083e2:	613b      	str	r3, [r7, #16]
   return(result);
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80083ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	461a      	mov	r2, r3
 80083f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f4:	623b      	str	r3, [r7, #32]
 80083f6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f8:	69f9      	ldr	r1, [r7, #28]
 80083fa:	6a3a      	ldr	r2, [r7, #32]
 80083fc:	e841 2300 	strex	r3, r2, [r1]
 8008400:	61bb      	str	r3, [r7, #24]
   return(result);
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1e6      	bne.n	80083d6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008408:	88fb      	ldrh	r3, [r7, #6]
 800840a:	461a      	mov	r2, r3
 800840c:	68b9      	ldr	r1, [r7, #8]
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 ff7e 	bl	8009310 <UART_Start_Receive_IT>
 8008414:	4603      	mov	r3, r0
 8008416:	e000      	b.n	800841a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008418:	2302      	movs	r3, #2
  }
}
 800841a:	4618      	mov	r0, r3
 800841c:	3728      	adds	r7, #40	@ 0x28
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	40008000 	.word	0x40008000

08008428 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b0ba      	sub	sp, #232	@ 0xe8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800844e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008452:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008456:	4013      	ands	r3, r2
 8008458:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800845c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008460:	2b00      	cmp	r3, #0
 8008462:	d115      	bne.n	8008490 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008468:	f003 0320 	and.w	r3, r3, #32
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00f      	beq.n	8008490 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008474:	f003 0320 	and.w	r3, r3, #32
 8008478:	2b00      	cmp	r3, #0
 800847a:	d009      	beq.n	8008490 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 82ae 	beq.w	80089e2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	4798      	blx	r3
      }
      return;
 800848e:	e2a8      	b.n	80089e2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008490:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 8117 	beq.w	80086c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800849a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d106      	bne.n	80084b4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80084a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80084aa:	4b85      	ldr	r3, [pc, #532]	@ (80086c0 <HAL_UART_IRQHandler+0x298>)
 80084ac:	4013      	ands	r3, r2
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f000 810a 	beq.w	80086c8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084b8:	f003 0301 	and.w	r3, r3, #1
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d011      	beq.n	80084e4 <HAL_UART_IRQHandler+0xbc>
 80084c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00b      	beq.n	80084e4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2201      	movs	r2, #1
 80084d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084da:	f043 0201 	orr.w	r2, r3, #1
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084e8:	f003 0302 	and.w	r3, r3, #2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d011      	beq.n	8008514 <HAL_UART_IRQHandler+0xec>
 80084f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00b      	beq.n	8008514 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2202      	movs	r2, #2
 8008502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800850a:	f043 0204 	orr.w	r2, r3, #4
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	2b00      	cmp	r3, #0
 800851e:	d011      	beq.n	8008544 <HAL_UART_IRQHandler+0x11c>
 8008520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00b      	beq.n	8008544 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2204      	movs	r2, #4
 8008532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800853a:	f043 0202 	orr.w	r2, r3, #2
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008548:	f003 0308 	and.w	r3, r3, #8
 800854c:	2b00      	cmp	r3, #0
 800854e:	d017      	beq.n	8008580 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008554:	f003 0320 	and.w	r3, r3, #32
 8008558:	2b00      	cmp	r3, #0
 800855a:	d105      	bne.n	8008568 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800855c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008560:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00b      	beq.n	8008580 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2208      	movs	r2, #8
 800856e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008576:	f043 0208 	orr.w	r2, r3, #8
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008584:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008588:	2b00      	cmp	r3, #0
 800858a:	d012      	beq.n	80085b2 <HAL_UART_IRQHandler+0x18a>
 800858c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008590:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00c      	beq.n	80085b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085a8:	f043 0220 	orr.w	r2, r3, #32
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 8214 	beq.w	80089e6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80085be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085c2:	f003 0320 	and.w	r3, r3, #32
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00d      	beq.n	80085e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80085ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085ce:	f003 0320 	and.w	r3, r3, #32
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d007      	beq.n	80085e6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085fa:	2b40      	cmp	r3, #64	@ 0x40
 80085fc:	d005      	beq.n	800860a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80085fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008602:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008606:	2b00      	cmp	r3, #0
 8008608:	d04f      	beq.n	80086aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 ff46 	bl	800949c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800861a:	2b40      	cmp	r3, #64	@ 0x40
 800861c:	d141      	bne.n	80086a2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	3308      	adds	r3, #8
 8008624:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008628:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800862c:	e853 3f00 	ldrex	r3, [r3]
 8008630:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008634:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800863c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3308      	adds	r3, #8
 8008646:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800864a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800864e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008652:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008656:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800865a:	e841 2300 	strex	r3, r2, [r1]
 800865e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008662:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1d9      	bne.n	800861e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800866e:	2b00      	cmp	r3, #0
 8008670:	d013      	beq.n	800869a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008676:	4a13      	ldr	r2, [pc, #76]	@ (80086c4 <HAL_UART_IRQHandler+0x29c>)
 8008678:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800867e:	4618      	mov	r0, r3
 8008680:	f7fc fa53 	bl	8004b2a <HAL_DMA_Abort_IT>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d017      	beq.n	80086ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800868e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008694:	4610      	mov	r0, r2
 8008696:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008698:	e00f      	b.n	80086ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f9b8 	bl	8008a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086a0:	e00b      	b.n	80086ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f9b4 	bl	8008a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086a8:	e007      	b.n	80086ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f9b0 	bl	8008a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80086b8:	e195      	b.n	80089e6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ba:	bf00      	nop
    return;
 80086bc:	e193      	b.n	80089e6 <HAL_UART_IRQHandler+0x5be>
 80086be:	bf00      	nop
 80086c0:	04000120 	.word	0x04000120
 80086c4:	08009565 	.word	0x08009565

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	f040 814e 	bne.w	800896e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80086d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086d6:	f003 0310 	and.w	r3, r3, #16
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f000 8147 	beq.w	800896e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80086e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086e4:	f003 0310 	and.w	r3, r3, #16
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f000 8140 	beq.w	800896e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2210      	movs	r2, #16
 80086f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008700:	2b40      	cmp	r3, #64	@ 0x40
 8008702:	f040 80b8 	bne.w	8008876 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008712:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 8167 	beq.w	80089ea <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008726:	429a      	cmp	r2, r3
 8008728:	f080 815f 	bcs.w	80089ea <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008732:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 0320 	and.w	r3, r3, #32
 8008742:	2b00      	cmp	r3, #0
 8008744:	f040 8086 	bne.w	8008854 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008750:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008754:	e853 3f00 	ldrex	r3, [r3]
 8008758:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800875c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008764:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	461a      	mov	r2, r3
 800876e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008772:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008776:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800877e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800878a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1da      	bne.n	8008748 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	3308      	adds	r3, #8
 8008798:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800879c:	e853 3f00 	ldrex	r3, [r3]
 80087a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80087a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087a4:	f023 0301 	bic.w	r3, r3, #1
 80087a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3308      	adds	r3, #8
 80087b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80087ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80087be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80087c2:	e841 2300 	strex	r3, r2, [r1]
 80087c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80087c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1e1      	bne.n	8008792 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3308      	adds	r3, #8
 80087d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80087de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3308      	adds	r3, #8
 80087ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80087f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80087f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80087f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80087fa:	e841 2300 	strex	r3, r2, [r1]
 80087fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1e3      	bne.n	80087ce <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2220      	movs	r2, #32
 800880a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800881c:	e853 3f00 	ldrex	r3, [r3]
 8008820:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008824:	f023 0310 	bic.w	r3, r3, #16
 8008828:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	461a      	mov	r2, r3
 8008832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008836:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008838:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800883c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800883e:	e841 2300 	strex	r3, r2, [r1]
 8008842:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1e4      	bne.n	8008814 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800884e:	4618      	mov	r0, r3
 8008850:	f7fc f92d 	bl	8004aae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2202      	movs	r2, #2
 8008858:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008866:	b29b      	uxth	r3, r3
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	b29b      	uxth	r3, r3
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f8d8 	bl	8008a24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008874:	e0b9      	b.n	80089ea <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008882:	b29b      	uxth	r3, r3
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008890:	b29b      	uxth	r3, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	f000 80ab 	beq.w	80089ee <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8008898:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 80a6 	beq.w	80089ee <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088aa:	e853 3f00 	ldrex	r3, [r3]
 80088ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80088c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80088c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088cc:	e841 2300 	strex	r3, r2, [r1]
 80088d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1e4      	bne.n	80088a2 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3308      	adds	r3, #8
 80088de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e2:	e853 3f00 	ldrex	r3, [r3]
 80088e6:	623b      	str	r3, [r7, #32]
   return(result);
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	f023 0301 	bic.w	r3, r3, #1
 80088ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	3308      	adds	r3, #8
 80088f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80088fc:	633a      	str	r2, [r7, #48]	@ 0x30
 80088fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008900:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008904:	e841 2300 	strex	r3, r2, [r1]
 8008908:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800890a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1e3      	bne.n	80088d8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2220      	movs	r2, #32
 8008914:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	60fb      	str	r3, [r7, #12]
   return(result);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f023 0310 	bic.w	r3, r3, #16
 8008938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	461a      	mov	r2, r3
 8008942:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008946:	61fb      	str	r3, [r7, #28]
 8008948:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894a:	69b9      	ldr	r1, [r7, #24]
 800894c:	69fa      	ldr	r2, [r7, #28]
 800894e:	e841 2300 	strex	r3, r2, [r1]
 8008952:	617b      	str	r3, [r7, #20]
   return(result);
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1e4      	bne.n	8008924 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2202      	movs	r2, #2
 800895e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008960:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f85c 	bl	8008a24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800896c:	e03f      	b.n	80089ee <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800896e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00e      	beq.n	8008998 <HAL_UART_IRQHandler+0x570>
 800897a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800897e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008982:	2b00      	cmp	r3, #0
 8008984:	d008      	beq.n	8008998 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800898e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 ffe3 	bl	800995c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008996:	e02d      	b.n	80089f4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800899c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00e      	beq.n	80089c2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80089a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d008      	beq.n	80089c2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d01c      	beq.n	80089f2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	4798      	blx	r3
    }
    return;
 80089c0:	e017      	b.n	80089f2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d012      	beq.n	80089f4 <HAL_UART_IRQHandler+0x5cc>
 80089ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00c      	beq.n	80089f4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fdd8 	bl	8009590 <UART_EndTransmit_IT>
    return;
 80089e0:	e008      	b.n	80089f4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80089e2:	bf00      	nop
 80089e4:	e006      	b.n	80089f4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80089e6:	bf00      	nop
 80089e8:	e004      	b.n	80089f4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80089ea:	bf00      	nop
 80089ec:	e002      	b.n	80089f4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80089ee:	bf00      	nop
 80089f0:	e000      	b.n	80089f4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80089f2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80089f4:	37e8      	adds	r7, #232	@ 0xe8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop

080089fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a40:	b08a      	sub	sp, #40	@ 0x28
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	689a      	ldr	r2, [r3, #8]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	431a      	orrs	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	69db      	ldr	r3, [r3, #28]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	4ba4      	ldr	r3, [pc, #656]	@ (8008cfc <UART_SetConfig+0x2c0>)
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	6812      	ldr	r2, [r2, #0]
 8008a72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a74:	430b      	orrs	r3, r1
 8008a76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	430a      	orrs	r2, r1
 8008a8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a99      	ldr	r2, [pc, #612]	@ (8008d00 <UART_SetConfig+0x2c4>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d004      	beq.n	8008aa8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ab8:	430a      	orrs	r2, r1
 8008aba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a90      	ldr	r2, [pc, #576]	@ (8008d04 <UART_SetConfig+0x2c8>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d126      	bne.n	8008b14 <UART_SetConfig+0xd8>
 8008ac6:	4b90      	ldr	r3, [pc, #576]	@ (8008d08 <UART_SetConfig+0x2cc>)
 8008ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008acc:	f003 0303 	and.w	r3, r3, #3
 8008ad0:	2b03      	cmp	r3, #3
 8008ad2:	d81b      	bhi.n	8008b0c <UART_SetConfig+0xd0>
 8008ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8008adc <UART_SetConfig+0xa0>)
 8008ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ada:	bf00      	nop
 8008adc:	08008aed 	.word	0x08008aed
 8008ae0:	08008afd 	.word	0x08008afd
 8008ae4:	08008af5 	.word	0x08008af5
 8008ae8:	08008b05 	.word	0x08008b05
 8008aec:	2301      	movs	r3, #1
 8008aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008af2:	e116      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008af4:	2302      	movs	r3, #2
 8008af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008afa:	e112      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008afc:	2304      	movs	r3, #4
 8008afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b02:	e10e      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008b04:	2308      	movs	r3, #8
 8008b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b0a:	e10a      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008b0c:	2310      	movs	r3, #16
 8008b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b12:	e106      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a7c      	ldr	r2, [pc, #496]	@ (8008d0c <UART_SetConfig+0x2d0>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d138      	bne.n	8008b90 <UART_SetConfig+0x154>
 8008b1e:	4b7a      	ldr	r3, [pc, #488]	@ (8008d08 <UART_SetConfig+0x2cc>)
 8008b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b24:	f003 030c 	and.w	r3, r3, #12
 8008b28:	2b0c      	cmp	r3, #12
 8008b2a:	d82d      	bhi.n	8008b88 <UART_SetConfig+0x14c>
 8008b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b34 <UART_SetConfig+0xf8>)
 8008b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b32:	bf00      	nop
 8008b34:	08008b69 	.word	0x08008b69
 8008b38:	08008b89 	.word	0x08008b89
 8008b3c:	08008b89 	.word	0x08008b89
 8008b40:	08008b89 	.word	0x08008b89
 8008b44:	08008b79 	.word	0x08008b79
 8008b48:	08008b89 	.word	0x08008b89
 8008b4c:	08008b89 	.word	0x08008b89
 8008b50:	08008b89 	.word	0x08008b89
 8008b54:	08008b71 	.word	0x08008b71
 8008b58:	08008b89 	.word	0x08008b89
 8008b5c:	08008b89 	.word	0x08008b89
 8008b60:	08008b89 	.word	0x08008b89
 8008b64:	08008b81 	.word	0x08008b81
 8008b68:	2300      	movs	r3, #0
 8008b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b6e:	e0d8      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008b70:	2302      	movs	r3, #2
 8008b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b76:	e0d4      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008b78:	2304      	movs	r3, #4
 8008b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b7e:	e0d0      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008b80:	2308      	movs	r3, #8
 8008b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b86:	e0cc      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008b88:	2310      	movs	r3, #16
 8008b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b8e:	e0c8      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a5e      	ldr	r2, [pc, #376]	@ (8008d10 <UART_SetConfig+0x2d4>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d125      	bne.n	8008be6 <UART_SetConfig+0x1aa>
 8008b9a:	4b5b      	ldr	r3, [pc, #364]	@ (8008d08 <UART_SetConfig+0x2cc>)
 8008b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ba0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008ba4:	2b30      	cmp	r3, #48	@ 0x30
 8008ba6:	d016      	beq.n	8008bd6 <UART_SetConfig+0x19a>
 8008ba8:	2b30      	cmp	r3, #48	@ 0x30
 8008baa:	d818      	bhi.n	8008bde <UART_SetConfig+0x1a2>
 8008bac:	2b20      	cmp	r3, #32
 8008bae:	d00a      	beq.n	8008bc6 <UART_SetConfig+0x18a>
 8008bb0:	2b20      	cmp	r3, #32
 8008bb2:	d814      	bhi.n	8008bde <UART_SetConfig+0x1a2>
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d002      	beq.n	8008bbe <UART_SetConfig+0x182>
 8008bb8:	2b10      	cmp	r3, #16
 8008bba:	d008      	beq.n	8008bce <UART_SetConfig+0x192>
 8008bbc:	e00f      	b.n	8008bde <UART_SetConfig+0x1a2>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bc4:	e0ad      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bcc:	e0a9      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008bce:	2304      	movs	r3, #4
 8008bd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bd4:	e0a5      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008bd6:	2308      	movs	r3, #8
 8008bd8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008bdc:	e0a1      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008bde:	2310      	movs	r3, #16
 8008be0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008be4:	e09d      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a4a      	ldr	r2, [pc, #296]	@ (8008d14 <UART_SetConfig+0x2d8>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d125      	bne.n	8008c3c <UART_SetConfig+0x200>
 8008bf0:	4b45      	ldr	r3, [pc, #276]	@ (8008d08 <UART_SetConfig+0x2cc>)
 8008bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bf6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008bfa:	2bc0      	cmp	r3, #192	@ 0xc0
 8008bfc:	d016      	beq.n	8008c2c <UART_SetConfig+0x1f0>
 8008bfe:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c00:	d818      	bhi.n	8008c34 <UART_SetConfig+0x1f8>
 8008c02:	2b80      	cmp	r3, #128	@ 0x80
 8008c04:	d00a      	beq.n	8008c1c <UART_SetConfig+0x1e0>
 8008c06:	2b80      	cmp	r3, #128	@ 0x80
 8008c08:	d814      	bhi.n	8008c34 <UART_SetConfig+0x1f8>
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d002      	beq.n	8008c14 <UART_SetConfig+0x1d8>
 8008c0e:	2b40      	cmp	r3, #64	@ 0x40
 8008c10:	d008      	beq.n	8008c24 <UART_SetConfig+0x1e8>
 8008c12:	e00f      	b.n	8008c34 <UART_SetConfig+0x1f8>
 8008c14:	2300      	movs	r3, #0
 8008c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c1a:	e082      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c22:	e07e      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008c24:	2304      	movs	r3, #4
 8008c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c2a:	e07a      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008c2c:	2308      	movs	r3, #8
 8008c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c32:	e076      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008c34:	2310      	movs	r3, #16
 8008c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c3a:	e072      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a35      	ldr	r2, [pc, #212]	@ (8008d18 <UART_SetConfig+0x2dc>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d12a      	bne.n	8008c9c <UART_SetConfig+0x260>
 8008c46:	4b30      	ldr	r3, [pc, #192]	@ (8008d08 <UART_SetConfig+0x2cc>)
 8008c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c54:	d01a      	beq.n	8008c8c <UART_SetConfig+0x250>
 8008c56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c5a:	d81b      	bhi.n	8008c94 <UART_SetConfig+0x258>
 8008c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c60:	d00c      	beq.n	8008c7c <UART_SetConfig+0x240>
 8008c62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c66:	d815      	bhi.n	8008c94 <UART_SetConfig+0x258>
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <UART_SetConfig+0x238>
 8008c6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c70:	d008      	beq.n	8008c84 <UART_SetConfig+0x248>
 8008c72:	e00f      	b.n	8008c94 <UART_SetConfig+0x258>
 8008c74:	2300      	movs	r3, #0
 8008c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c7a:	e052      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c82:	e04e      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008c84:	2304      	movs	r3, #4
 8008c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c8a:	e04a      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008c8c:	2308      	movs	r3, #8
 8008c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c92:	e046      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008c94:	2310      	movs	r3, #16
 8008c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c9a:	e042      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a17      	ldr	r2, [pc, #92]	@ (8008d00 <UART_SetConfig+0x2c4>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d13a      	bne.n	8008d1c <UART_SetConfig+0x2e0>
 8008ca6:	4b18      	ldr	r3, [pc, #96]	@ (8008d08 <UART_SetConfig+0x2cc>)
 8008ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008cb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008cb4:	d01a      	beq.n	8008cec <UART_SetConfig+0x2b0>
 8008cb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008cba:	d81b      	bhi.n	8008cf4 <UART_SetConfig+0x2b8>
 8008cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cc0:	d00c      	beq.n	8008cdc <UART_SetConfig+0x2a0>
 8008cc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cc6:	d815      	bhi.n	8008cf4 <UART_SetConfig+0x2b8>
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d003      	beq.n	8008cd4 <UART_SetConfig+0x298>
 8008ccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cd0:	d008      	beq.n	8008ce4 <UART_SetConfig+0x2a8>
 8008cd2:	e00f      	b.n	8008cf4 <UART_SetConfig+0x2b8>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cda:	e022      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008cdc:	2302      	movs	r3, #2
 8008cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ce2:	e01e      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008ce4:	2304      	movs	r3, #4
 8008ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cea:	e01a      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008cec:	2308      	movs	r3, #8
 8008cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cf2:	e016      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008cf4:	2310      	movs	r3, #16
 8008cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cfa:	e012      	b.n	8008d22 <UART_SetConfig+0x2e6>
 8008cfc:	efff69f3 	.word	0xefff69f3
 8008d00:	40008000 	.word	0x40008000
 8008d04:	40013800 	.word	0x40013800
 8008d08:	40021000 	.word	0x40021000
 8008d0c:	40004400 	.word	0x40004400
 8008d10:	40004800 	.word	0x40004800
 8008d14:	40004c00 	.word	0x40004c00
 8008d18:	40005000 	.word	0x40005000
 8008d1c:	2310      	movs	r3, #16
 8008d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a9f      	ldr	r2, [pc, #636]	@ (8008fa4 <UART_SetConfig+0x568>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d17a      	bne.n	8008e22 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008d30:	2b08      	cmp	r3, #8
 8008d32:	d824      	bhi.n	8008d7e <UART_SetConfig+0x342>
 8008d34:	a201      	add	r2, pc, #4	@ (adr r2, 8008d3c <UART_SetConfig+0x300>)
 8008d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3a:	bf00      	nop
 8008d3c:	08008d61 	.word	0x08008d61
 8008d40:	08008d7f 	.word	0x08008d7f
 8008d44:	08008d69 	.word	0x08008d69
 8008d48:	08008d7f 	.word	0x08008d7f
 8008d4c:	08008d6f 	.word	0x08008d6f
 8008d50:	08008d7f 	.word	0x08008d7f
 8008d54:	08008d7f 	.word	0x08008d7f
 8008d58:	08008d7f 	.word	0x08008d7f
 8008d5c:	08008d77 	.word	0x08008d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d60:	f7fc fff0 	bl	8005d44 <HAL_RCC_GetPCLK1Freq>
 8008d64:	61f8      	str	r0, [r7, #28]
        break;
 8008d66:	e010      	b.n	8008d8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d68:	4b8f      	ldr	r3, [pc, #572]	@ (8008fa8 <UART_SetConfig+0x56c>)
 8008d6a:	61fb      	str	r3, [r7, #28]
        break;
 8008d6c:	e00d      	b.n	8008d8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d6e:	f7fc ff51 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 8008d72:	61f8      	str	r0, [r7, #28]
        break;
 8008d74:	e009      	b.n	8008d8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d7a:	61fb      	str	r3, [r7, #28]
        break;
 8008d7c:	e005      	b.n	8008d8a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008d88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f000 80fb 	beq.w	8008f88 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	685a      	ldr	r2, [r3, #4]
 8008d96:	4613      	mov	r3, r2
 8008d98:	005b      	lsls	r3, r3, #1
 8008d9a:	4413      	add	r3, r2
 8008d9c:	69fa      	ldr	r2, [r7, #28]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d305      	bcc.n	8008dae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008da8:	69fa      	ldr	r2, [r7, #28]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d903      	bls.n	8008db6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008db4:	e0e8      	b.n	8008f88 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	2200      	movs	r2, #0
 8008dba:	461c      	mov	r4, r3
 8008dbc:	4615      	mov	r5, r2
 8008dbe:	f04f 0200 	mov.w	r2, #0
 8008dc2:	f04f 0300 	mov.w	r3, #0
 8008dc6:	022b      	lsls	r3, r5, #8
 8008dc8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008dcc:	0222      	lsls	r2, r4, #8
 8008dce:	68f9      	ldr	r1, [r7, #12]
 8008dd0:	6849      	ldr	r1, [r1, #4]
 8008dd2:	0849      	lsrs	r1, r1, #1
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	4688      	mov	r8, r1
 8008dd8:	4681      	mov	r9, r0
 8008dda:	eb12 0a08 	adds.w	sl, r2, r8
 8008dde:	eb43 0b09 	adc.w	fp, r3, r9
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	603b      	str	r3, [r7, #0]
 8008dea:	607a      	str	r2, [r7, #4]
 8008dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008df0:	4650      	mov	r0, sl
 8008df2:	4659      	mov	r1, fp
 8008df4:	f7f7 fd72 	bl	80008dc <__aeabi_uldivmod>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e06:	d308      	bcc.n	8008e1a <UART_SetConfig+0x3de>
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e0e:	d204      	bcs.n	8008e1a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	69ba      	ldr	r2, [r7, #24]
 8008e16:	60da      	str	r2, [r3, #12]
 8008e18:	e0b6      	b.n	8008f88 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008e20:	e0b2      	b.n	8008f88 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e2a:	d15e      	bne.n	8008eea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008e2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008e30:	2b08      	cmp	r3, #8
 8008e32:	d828      	bhi.n	8008e86 <UART_SetConfig+0x44a>
 8008e34:	a201      	add	r2, pc, #4	@ (adr r2, 8008e3c <UART_SetConfig+0x400>)
 8008e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3a:	bf00      	nop
 8008e3c:	08008e61 	.word	0x08008e61
 8008e40:	08008e69 	.word	0x08008e69
 8008e44:	08008e71 	.word	0x08008e71
 8008e48:	08008e87 	.word	0x08008e87
 8008e4c:	08008e77 	.word	0x08008e77
 8008e50:	08008e87 	.word	0x08008e87
 8008e54:	08008e87 	.word	0x08008e87
 8008e58:	08008e87 	.word	0x08008e87
 8008e5c:	08008e7f 	.word	0x08008e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e60:	f7fc ff70 	bl	8005d44 <HAL_RCC_GetPCLK1Freq>
 8008e64:	61f8      	str	r0, [r7, #28]
        break;
 8008e66:	e014      	b.n	8008e92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e68:	f7fc ff82 	bl	8005d70 <HAL_RCC_GetPCLK2Freq>
 8008e6c:	61f8      	str	r0, [r7, #28]
        break;
 8008e6e:	e010      	b.n	8008e92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e70:	4b4d      	ldr	r3, [pc, #308]	@ (8008fa8 <UART_SetConfig+0x56c>)
 8008e72:	61fb      	str	r3, [r7, #28]
        break;
 8008e74:	e00d      	b.n	8008e92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e76:	f7fc fecd 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 8008e7a:	61f8      	str	r0, [r7, #28]
        break;
 8008e7c:	e009      	b.n	8008e92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e82:	61fb      	str	r3, [r7, #28]
        break;
 8008e84:	e005      	b.n	8008e92 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008e90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d077      	beq.n	8008f88 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	005a      	lsls	r2, r3, #1
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	085b      	lsrs	r3, r3, #1
 8008ea2:	441a      	add	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	2b0f      	cmp	r3, #15
 8008eb2:	d916      	bls.n	8008ee2 <UART_SetConfig+0x4a6>
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008eba:	d212      	bcs.n	8008ee2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	f023 030f 	bic.w	r3, r3, #15
 8008ec4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	085b      	lsrs	r3, r3, #1
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	f003 0307 	and.w	r3, r3, #7
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	8afb      	ldrh	r3, [r7, #22]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	8afa      	ldrh	r2, [r7, #22]
 8008ede:	60da      	str	r2, [r3, #12]
 8008ee0:	e052      	b.n	8008f88 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008ee8:	e04e      	b.n	8008f88 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008eea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008eee:	2b08      	cmp	r3, #8
 8008ef0:	d827      	bhi.n	8008f42 <UART_SetConfig+0x506>
 8008ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef8 <UART_SetConfig+0x4bc>)
 8008ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef8:	08008f1d 	.word	0x08008f1d
 8008efc:	08008f25 	.word	0x08008f25
 8008f00:	08008f2d 	.word	0x08008f2d
 8008f04:	08008f43 	.word	0x08008f43
 8008f08:	08008f33 	.word	0x08008f33
 8008f0c:	08008f43 	.word	0x08008f43
 8008f10:	08008f43 	.word	0x08008f43
 8008f14:	08008f43 	.word	0x08008f43
 8008f18:	08008f3b 	.word	0x08008f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f1c:	f7fc ff12 	bl	8005d44 <HAL_RCC_GetPCLK1Freq>
 8008f20:	61f8      	str	r0, [r7, #28]
        break;
 8008f22:	e014      	b.n	8008f4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f24:	f7fc ff24 	bl	8005d70 <HAL_RCC_GetPCLK2Freq>
 8008f28:	61f8      	str	r0, [r7, #28]
        break;
 8008f2a:	e010      	b.n	8008f4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8008fa8 <UART_SetConfig+0x56c>)
 8008f2e:	61fb      	str	r3, [r7, #28]
        break;
 8008f30:	e00d      	b.n	8008f4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f32:	f7fc fe6f 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 8008f36:	61f8      	str	r0, [r7, #28]
        break;
 8008f38:	e009      	b.n	8008f4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f3e:	61fb      	str	r3, [r7, #28]
        break;
 8008f40:	e005      	b.n	8008f4e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008f42:	2300      	movs	r3, #0
 8008f44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008f4c:	bf00      	nop
    }

    if (pclk != 0U)
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d019      	beq.n	8008f88 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	085a      	lsrs	r2, r3, #1
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	441a      	add	r2, r3
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f66:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	2b0f      	cmp	r3, #15
 8008f6c:	d909      	bls.n	8008f82 <UART_SetConfig+0x546>
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f74:	d205      	bcs.n	8008f82 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	60da      	str	r2, [r3, #12]
 8008f80:	e002      	b.n	8008f88 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008f94:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3728      	adds	r7, #40	@ 0x28
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fa2:	bf00      	nop
 8008fa4:	40008000 	.word	0x40008000
 8008fa8:	00f42400 	.word	0x00f42400

08008fac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb8:	f003 0308 	and.w	r3, r3, #8
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00a      	beq.n	8008fd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	430a      	orrs	r2, r1
 8008fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00a      	beq.n	8008ff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ffc:	f003 0302 	and.w	r3, r3, #2
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00a      	beq.n	800901a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	430a      	orrs	r2, r1
 8009018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901e:	f003 0304 	and.w	r3, r3, #4
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00a      	beq.n	800903c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	430a      	orrs	r2, r1
 800903a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009040:	f003 0310 	and.w	r3, r3, #16
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00a      	beq.n	800905e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	430a      	orrs	r2, r1
 800905c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009062:	f003 0320 	and.w	r3, r3, #32
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00a      	beq.n	8009080 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	430a      	orrs	r2, r1
 800907e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009088:	2b00      	cmp	r3, #0
 800908a:	d01a      	beq.n	80090c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	430a      	orrs	r2, r1
 80090a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090aa:	d10a      	bne.n	80090c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	430a      	orrs	r2, r1
 80090c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00a      	beq.n	80090e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	605a      	str	r2, [r3, #4]
  }
}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b098      	sub	sp, #96	@ 0x60
 80090f4:	af02      	add	r7, sp, #8
 80090f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009100:	f7fa f996 	bl	8003430 <HAL_GetTick>
 8009104:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0308 	and.w	r3, r3, #8
 8009110:	2b08      	cmp	r3, #8
 8009112:	d12e      	bne.n	8009172 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009114:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800911c:	2200      	movs	r2, #0
 800911e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f88c 	bl	8009240 <UART_WaitOnFlagUntilTimeout>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d021      	beq.n	8009172 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009136:	e853 3f00 	ldrex	r3, [r3]
 800913a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800913c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800913e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009142:	653b      	str	r3, [r7, #80]	@ 0x50
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	461a      	mov	r2, r3
 800914a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800914c:	647b      	str	r3, [r7, #68]	@ 0x44
 800914e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009150:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009152:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009154:	e841 2300 	strex	r3, r2, [r1]
 8009158:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800915a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e6      	bne.n	800912e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2220      	movs	r2, #32
 8009164:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800916e:	2303      	movs	r3, #3
 8009170:	e062      	b.n	8009238 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b04      	cmp	r3, #4
 800917e:	d149      	bne.n	8009214 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009180:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009188:	2200      	movs	r2, #0
 800918a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f856 	bl	8009240 <UART_WaitOnFlagUntilTimeout>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d03c      	beq.n	8009214 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a2:	e853 3f00 	ldrex	r3, [r3]
 80091a6:	623b      	str	r3, [r7, #32]
   return(result);
 80091a8:	6a3b      	ldr	r3, [r7, #32]
 80091aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	461a      	mov	r2, r3
 80091b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80091ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091c0:	e841 2300 	strex	r3, r2, [r1]
 80091c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1e6      	bne.n	800919a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	3308      	adds	r3, #8
 80091d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	e853 3f00 	ldrex	r3, [r3]
 80091da:	60fb      	str	r3, [r7, #12]
   return(result);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f023 0301 	bic.w	r3, r3, #1
 80091e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	3308      	adds	r3, #8
 80091ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091ec:	61fa      	str	r2, [r7, #28]
 80091ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f0:	69b9      	ldr	r1, [r7, #24]
 80091f2:	69fa      	ldr	r2, [r7, #28]
 80091f4:	e841 2300 	strex	r3, r2, [r1]
 80091f8:	617b      	str	r3, [r7, #20]
   return(result);
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1e5      	bne.n	80091cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2220      	movs	r2, #32
 8009204:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e011      	b.n	8009238 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2220      	movs	r2, #32
 8009218:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2220      	movs	r2, #32
 800921e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3758      	adds	r7, #88	@ 0x58
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	603b      	str	r3, [r7, #0]
 800924c:	4613      	mov	r3, r2
 800924e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009250:	e049      	b.n	80092e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009258:	d045      	beq.n	80092e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800925a:	f7fa f8e9 	bl	8003430 <HAL_GetTick>
 800925e:	4602      	mov	r2, r0
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	69ba      	ldr	r2, [r7, #24]
 8009266:	429a      	cmp	r2, r3
 8009268:	d302      	bcc.n	8009270 <UART_WaitOnFlagUntilTimeout+0x30>
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009270:	2303      	movs	r3, #3
 8009272:	e048      	b.n	8009306 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 0304 	and.w	r3, r3, #4
 800927e:	2b00      	cmp	r3, #0
 8009280:	d031      	beq.n	80092e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	69db      	ldr	r3, [r3, #28]
 8009288:	f003 0308 	and.w	r3, r3, #8
 800928c:	2b08      	cmp	r3, #8
 800928e:	d110      	bne.n	80092b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2208      	movs	r2, #8
 8009296:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f000 f8ff 	bl	800949c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2208      	movs	r2, #8
 80092a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e029      	b.n	8009306 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	69db      	ldr	r3, [r3, #28]
 80092b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092c0:	d111      	bne.n	80092e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80092ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f000 f8e5 	bl	800949c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2220      	movs	r2, #32
 80092d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80092e2:	2303      	movs	r3, #3
 80092e4:	e00f      	b.n	8009306 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	69da      	ldr	r2, [r3, #28]
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	4013      	ands	r3, r2
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	bf0c      	ite	eq
 80092f6:	2301      	moveq	r3, #1
 80092f8:	2300      	movne	r3, #0
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	461a      	mov	r2, r3
 80092fe:	79fb      	ldrb	r3, [r7, #7]
 8009300:	429a      	cmp	r2, r3
 8009302:	d0a6      	beq.n	8009252 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
	...

08009310 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009310:	b480      	push	{r7}
 8009312:	b097      	sub	sp, #92	@ 0x5c
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	4613      	mov	r3, r2
 800931c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	88fa      	ldrh	r2, [r7, #6]
 8009328:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	88fa      	ldrh	r2, [r7, #6]
 8009330:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009342:	d10e      	bne.n	8009362 <UART_Start_Receive_IT+0x52>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d105      	bne.n	8009358 <UART_Start_Receive_IT+0x48>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009352:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009356:	e02d      	b.n	80093b4 <UART_Start_Receive_IT+0xa4>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	22ff      	movs	r2, #255	@ 0xff
 800935c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009360:	e028      	b.n	80093b4 <UART_Start_Receive_IT+0xa4>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10d      	bne.n	8009386 <UART_Start_Receive_IT+0x76>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d104      	bne.n	800937c <UART_Start_Receive_IT+0x6c>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	22ff      	movs	r2, #255	@ 0xff
 8009376:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800937a:	e01b      	b.n	80093b4 <UART_Start_Receive_IT+0xa4>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	227f      	movs	r2, #127	@ 0x7f
 8009380:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009384:	e016      	b.n	80093b4 <UART_Start_Receive_IT+0xa4>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800938e:	d10d      	bne.n	80093ac <UART_Start_Receive_IT+0x9c>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d104      	bne.n	80093a2 <UART_Start_Receive_IT+0x92>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	227f      	movs	r2, #127	@ 0x7f
 800939c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80093a0:	e008      	b.n	80093b4 <UART_Start_Receive_IT+0xa4>
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	223f      	movs	r2, #63	@ 0x3f
 80093a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80093aa:	e003      	b.n	80093b4 <UART_Start_Receive_IT+0xa4>
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2222      	movs	r2, #34	@ 0x22
 80093c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3308      	adds	r3, #8
 80093ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ce:	e853 3f00 	ldrex	r3, [r3]
 80093d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d6:	f043 0301 	orr.w	r3, r3, #1
 80093da:	657b      	str	r3, [r7, #84]	@ 0x54
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3308      	adds	r3, #8
 80093e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80093e4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80093e6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80093ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093ec:	e841 2300 	strex	r3, r2, [r1]
 80093f0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80093f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1e5      	bne.n	80093c4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009400:	d107      	bne.n	8009412 <UART_Start_Receive_IT+0x102>
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d103      	bne.n	8009412 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	4a21      	ldr	r2, [pc, #132]	@ (8009494 <UART_Start_Receive_IT+0x184>)
 800940e:	669a      	str	r2, [r3, #104]	@ 0x68
 8009410:	e002      	b.n	8009418 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	4a20      	ldr	r2, [pc, #128]	@ (8009498 <UART_Start_Receive_IT+0x188>)
 8009416:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d019      	beq.n	8009454 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009428:	e853 3f00 	ldrex	r3, [r3]
 800942c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800942e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009430:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009434:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	461a      	mov	r2, r3
 800943c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800943e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009440:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009442:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009444:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009446:	e841 2300 	strex	r3, r2, [r1]
 800944a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800944c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1e6      	bne.n	8009420 <UART_Start_Receive_IT+0x110>
 8009452:	e018      	b.n	8009486 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	e853 3f00 	ldrex	r3, [r3]
 8009460:	613b      	str	r3, [r7, #16]
   return(result);
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	f043 0320 	orr.w	r3, r3, #32
 8009468:	653b      	str	r3, [r7, #80]	@ 0x50
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	461a      	mov	r2, r3
 8009470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009472:	623b      	str	r3, [r7, #32]
 8009474:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009476:	69f9      	ldr	r1, [r7, #28]
 8009478:	6a3a      	ldr	r2, [r7, #32]
 800947a:	e841 2300 	strex	r3, r2, [r1]
 800947e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1e6      	bne.n	8009454 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	375c      	adds	r7, #92	@ 0x5c
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr
 8009494:	080097a1 	.word	0x080097a1
 8009498:	080095e5 	.word	0x080095e5

0800949c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800949c:	b480      	push	{r7}
 800949e:	b095      	sub	sp, #84	@ 0x54
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ac:	e853 3f00 	ldrex	r3, [r3]
 80094b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	461a      	mov	r2, r3
 80094c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80094c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094ca:	e841 2300 	strex	r3, r2, [r1]
 80094ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1e6      	bne.n	80094a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3308      	adds	r3, #8
 80094dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094de:	6a3b      	ldr	r3, [r7, #32]
 80094e0:	e853 3f00 	ldrex	r3, [r3]
 80094e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	f023 0301 	bic.w	r3, r3, #1
 80094ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	3308      	adds	r3, #8
 80094f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80094f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094fe:	e841 2300 	strex	r3, r2, [r1]
 8009502:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1e5      	bne.n	80094d6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800950e:	2b01      	cmp	r3, #1
 8009510:	d118      	bne.n	8009544 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	e853 3f00 	ldrex	r3, [r3]
 800951e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	f023 0310 	bic.w	r3, r3, #16
 8009526:	647b      	str	r3, [r7, #68]	@ 0x44
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	461a      	mov	r2, r3
 800952e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009530:	61bb      	str	r3, [r7, #24]
 8009532:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009534:	6979      	ldr	r1, [r7, #20]
 8009536:	69ba      	ldr	r2, [r7, #24]
 8009538:	e841 2300 	strex	r3, r2, [r1]
 800953c:	613b      	str	r3, [r7, #16]
   return(result);
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1e6      	bne.n	8009512 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2220      	movs	r2, #32
 8009548:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009558:	bf00      	nop
 800955a:	3754      	adds	r7, #84	@ 0x54
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009570:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f7ff fa44 	bl	8008a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009588:	bf00      	nop
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	e853 3f00 	ldrex	r3, [r3]
 80095a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095ac:	61fb      	str	r3, [r7, #28]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	461a      	mov	r2, r3
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	61bb      	str	r3, [r7, #24]
 80095b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ba:	6979      	ldr	r1, [r7, #20]
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	e841 2300 	strex	r3, r2, [r1]
 80095c2:	613b      	str	r3, [r7, #16]
   return(result);
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1e6      	bne.n	8009598 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2220      	movs	r2, #32
 80095ce:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f7ff fa10 	bl	80089fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095dc:	bf00      	nop
 80095de:	3720      	adds	r7, #32
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b09c      	sub	sp, #112	@ 0x70
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095f2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095fc:	2b22      	cmp	r3, #34	@ 0x22
 80095fe:	f040 80be 	bne.w	800977e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009608:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800960c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009610:	b2d9      	uxtb	r1, r3
 8009612:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009616:	b2da      	uxtb	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800961c:	400a      	ands	r2, r1
 800961e:	b2d2      	uxtb	r2, r2
 8009620:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009626:	1c5a      	adds	r2, r3, #1
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009632:	b29b      	uxth	r3, r3
 8009634:	3b01      	subs	r3, #1
 8009636:	b29a      	uxth	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009644:	b29b      	uxth	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	f040 80a3 	bne.w	8009792 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009654:	e853 3f00 	ldrex	r3, [r3]
 8009658:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800965a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800965c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009660:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800966a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800966c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009670:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009672:	e841 2300 	strex	r3, r2, [r1]
 8009676:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009678:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800967a:	2b00      	cmp	r3, #0
 800967c:	d1e6      	bne.n	800964c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3308      	adds	r3, #8
 8009684:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009688:	e853 3f00 	ldrex	r3, [r3]
 800968c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800968e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009690:	f023 0301 	bic.w	r3, r3, #1
 8009694:	667b      	str	r3, [r7, #100]	@ 0x64
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3308      	adds	r3, #8
 800969c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800969e:	647a      	str	r2, [r7, #68]	@ 0x44
 80096a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096a6:	e841 2300 	strex	r3, r2, [r1]
 80096aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1e5      	bne.n	800967e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2220      	movs	r2, #32
 80096b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a34      	ldr	r2, [pc, #208]	@ (800979c <UART_RxISR_8BIT+0x1b8>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d01f      	beq.n	8009710 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d018      	beq.n	8009710 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e6:	e853 3f00 	ldrex	r3, [r3]
 80096ea:	623b      	str	r3, [r7, #32]
   return(result);
 80096ec:	6a3b      	ldr	r3, [r7, #32]
 80096ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80096f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	461a      	mov	r2, r3
 80096fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80096fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80096fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009700:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009704:	e841 2300 	strex	r3, r2, [r1]
 8009708:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800970a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e6      	bne.n	80096de <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009714:	2b01      	cmp	r3, #1
 8009716:	d12e      	bne.n	8009776 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	e853 3f00 	ldrex	r3, [r3]
 800972a:	60fb      	str	r3, [r7, #12]
   return(result);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f023 0310 	bic.w	r3, r3, #16
 8009732:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	461a      	mov	r2, r3
 800973a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800973c:	61fb      	str	r3, [r7, #28]
 800973e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009740:	69b9      	ldr	r1, [r7, #24]
 8009742:	69fa      	ldr	r2, [r7, #28]
 8009744:	e841 2300 	strex	r3, r2, [r1]
 8009748:	617b      	str	r3, [r7, #20]
   return(result);
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1e6      	bne.n	800971e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	69db      	ldr	r3, [r3, #28]
 8009756:	f003 0310 	and.w	r3, r3, #16
 800975a:	2b10      	cmp	r3, #16
 800975c:	d103      	bne.n	8009766 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2210      	movs	r2, #16
 8009764:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7ff f958 	bl	8008a24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009774:	e00d      	b.n	8009792 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f7f8 fa6e 	bl	8001c58 <HAL_UART_RxCpltCallback>
}
 800977c:	e009      	b.n	8009792 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	8b1b      	ldrh	r3, [r3, #24]
 8009784:	b29a      	uxth	r2, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f042 0208 	orr.w	r2, r2, #8
 800978e:	b292      	uxth	r2, r2
 8009790:	831a      	strh	r2, [r3, #24]
}
 8009792:	bf00      	nop
 8009794:	3770      	adds	r7, #112	@ 0x70
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	40008000 	.word	0x40008000

080097a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b09c      	sub	sp, #112	@ 0x70
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097ae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097b8:	2b22      	cmp	r3, #34	@ 0x22
 80097ba:	f040 80be 	bne.w	800993a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80097c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80097ce:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80097d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80097d6:	4013      	ands	r3, r2
 80097d8:	b29a      	uxth	r2, r3
 80097da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80097dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097e2:	1c9a      	adds	r2, r3, #2
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	3b01      	subs	r3, #1
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009800:	b29b      	uxth	r3, r3
 8009802:	2b00      	cmp	r3, #0
 8009804:	f040 80a3 	bne.w	800994e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009810:	e853 3f00 	ldrex	r3, [r3]
 8009814:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009818:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800981c:	667b      	str	r3, [r7, #100]	@ 0x64
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	461a      	mov	r2, r3
 8009824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009826:	657b      	str	r3, [r7, #84]	@ 0x54
 8009828:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800982c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800982e:	e841 2300 	strex	r3, r2, [r1]
 8009832:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1e6      	bne.n	8009808 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	3308      	adds	r3, #8
 8009840:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009844:	e853 3f00 	ldrex	r3, [r3]
 8009848:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800984a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984c:	f023 0301 	bic.w	r3, r3, #1
 8009850:	663b      	str	r3, [r7, #96]	@ 0x60
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	3308      	adds	r3, #8
 8009858:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800985a:	643a      	str	r2, [r7, #64]	@ 0x40
 800985c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009860:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009862:	e841 2300 	strex	r3, r2, [r1]
 8009866:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1e5      	bne.n	800983a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2220      	movs	r2, #32
 8009872:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a34      	ldr	r2, [pc, #208]	@ (8009958 <UART_RxISR_16BIT+0x1b8>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d01f      	beq.n	80098cc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d018      	beq.n	80098cc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a0:	6a3b      	ldr	r3, [r7, #32]
 80098a2:	e853 3f00 	ldrex	r3, [r3]
 80098a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80098ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	461a      	mov	r2, r3
 80098b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098ba:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098c0:	e841 2300 	strex	r3, r2, [r1]
 80098c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1e6      	bne.n	800989a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d12e      	bne.n	8009932 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	e853 3f00 	ldrex	r3, [r3]
 80098e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	f023 0310 	bic.w	r3, r3, #16
 80098ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	461a      	mov	r2, r3
 80098f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80098f8:	61bb      	str	r3, [r7, #24]
 80098fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fc:	6979      	ldr	r1, [r7, #20]
 80098fe:	69ba      	ldr	r2, [r7, #24]
 8009900:	e841 2300 	strex	r3, r2, [r1]
 8009904:	613b      	str	r3, [r7, #16]
   return(result);
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1e6      	bne.n	80098da <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	f003 0310 	and.w	r3, r3, #16
 8009916:	2b10      	cmp	r3, #16
 8009918:	d103      	bne.n	8009922 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2210      	movs	r2, #16
 8009920:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009928:	4619      	mov	r1, r3
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7ff f87a 	bl	8008a24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009930:	e00d      	b.n	800994e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7f8 f990 	bl	8001c58 <HAL_UART_RxCpltCallback>
}
 8009938:	e009      	b.n	800994e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	8b1b      	ldrh	r3, [r3, #24]
 8009940:	b29a      	uxth	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f042 0208 	orr.w	r2, r2, #8
 800994a:	b292      	uxth	r2, r2
 800994c:	831a      	strh	r2, [r3, #24]
}
 800994e:	bf00      	nop
 8009950:	3770      	adds	r7, #112	@ 0x70
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	40008000 	.word	0x40008000

0800995c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <std>:
 8009970:	2300      	movs	r3, #0
 8009972:	b510      	push	{r4, lr}
 8009974:	4604      	mov	r4, r0
 8009976:	e9c0 3300 	strd	r3, r3, [r0]
 800997a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800997e:	6083      	str	r3, [r0, #8]
 8009980:	8181      	strh	r1, [r0, #12]
 8009982:	6643      	str	r3, [r0, #100]	@ 0x64
 8009984:	81c2      	strh	r2, [r0, #14]
 8009986:	6183      	str	r3, [r0, #24]
 8009988:	4619      	mov	r1, r3
 800998a:	2208      	movs	r2, #8
 800998c:	305c      	adds	r0, #92	@ 0x5c
 800998e:	f000 f906 	bl	8009b9e <memset>
 8009992:	4b0d      	ldr	r3, [pc, #52]	@ (80099c8 <std+0x58>)
 8009994:	6263      	str	r3, [r4, #36]	@ 0x24
 8009996:	4b0d      	ldr	r3, [pc, #52]	@ (80099cc <std+0x5c>)
 8009998:	62a3      	str	r3, [r4, #40]	@ 0x28
 800999a:	4b0d      	ldr	r3, [pc, #52]	@ (80099d0 <std+0x60>)
 800999c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800999e:	4b0d      	ldr	r3, [pc, #52]	@ (80099d4 <std+0x64>)
 80099a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80099a2:	4b0d      	ldr	r3, [pc, #52]	@ (80099d8 <std+0x68>)
 80099a4:	6224      	str	r4, [r4, #32]
 80099a6:	429c      	cmp	r4, r3
 80099a8:	d006      	beq.n	80099b8 <std+0x48>
 80099aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80099ae:	4294      	cmp	r4, r2
 80099b0:	d002      	beq.n	80099b8 <std+0x48>
 80099b2:	33d0      	adds	r3, #208	@ 0xd0
 80099b4:	429c      	cmp	r4, r3
 80099b6:	d105      	bne.n	80099c4 <std+0x54>
 80099b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80099bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099c0:	f000 b966 	b.w	8009c90 <__retarget_lock_init_recursive>
 80099c4:	bd10      	pop	{r4, pc}
 80099c6:	bf00      	nop
 80099c8:	08009b19 	.word	0x08009b19
 80099cc:	08009b3b 	.word	0x08009b3b
 80099d0:	08009b73 	.word	0x08009b73
 80099d4:	08009b97 	.word	0x08009b97
 80099d8:	20000570 	.word	0x20000570

080099dc <stdio_exit_handler>:
 80099dc:	4a02      	ldr	r2, [pc, #8]	@ (80099e8 <stdio_exit_handler+0xc>)
 80099de:	4903      	ldr	r1, [pc, #12]	@ (80099ec <stdio_exit_handler+0x10>)
 80099e0:	4803      	ldr	r0, [pc, #12]	@ (80099f0 <stdio_exit_handler+0x14>)
 80099e2:	f000 b869 	b.w	8009ab8 <_fwalk_sglue>
 80099e6:	bf00      	nop
 80099e8:	2000001c 	.word	0x2000001c
 80099ec:	0800a54d 	.word	0x0800a54d
 80099f0:	2000002c 	.word	0x2000002c

080099f4 <cleanup_stdio>:
 80099f4:	6841      	ldr	r1, [r0, #4]
 80099f6:	4b0c      	ldr	r3, [pc, #48]	@ (8009a28 <cleanup_stdio+0x34>)
 80099f8:	4299      	cmp	r1, r3
 80099fa:	b510      	push	{r4, lr}
 80099fc:	4604      	mov	r4, r0
 80099fe:	d001      	beq.n	8009a04 <cleanup_stdio+0x10>
 8009a00:	f000 fda4 	bl	800a54c <_fflush_r>
 8009a04:	68a1      	ldr	r1, [r4, #8]
 8009a06:	4b09      	ldr	r3, [pc, #36]	@ (8009a2c <cleanup_stdio+0x38>)
 8009a08:	4299      	cmp	r1, r3
 8009a0a:	d002      	beq.n	8009a12 <cleanup_stdio+0x1e>
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f000 fd9d 	bl	800a54c <_fflush_r>
 8009a12:	68e1      	ldr	r1, [r4, #12]
 8009a14:	4b06      	ldr	r3, [pc, #24]	@ (8009a30 <cleanup_stdio+0x3c>)
 8009a16:	4299      	cmp	r1, r3
 8009a18:	d004      	beq.n	8009a24 <cleanup_stdio+0x30>
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a20:	f000 bd94 	b.w	800a54c <_fflush_r>
 8009a24:	bd10      	pop	{r4, pc}
 8009a26:	bf00      	nop
 8009a28:	20000570 	.word	0x20000570
 8009a2c:	200005d8 	.word	0x200005d8
 8009a30:	20000640 	.word	0x20000640

08009a34 <global_stdio_init.part.0>:
 8009a34:	b510      	push	{r4, lr}
 8009a36:	4b0b      	ldr	r3, [pc, #44]	@ (8009a64 <global_stdio_init.part.0+0x30>)
 8009a38:	4c0b      	ldr	r4, [pc, #44]	@ (8009a68 <global_stdio_init.part.0+0x34>)
 8009a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8009a6c <global_stdio_init.part.0+0x38>)
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	4620      	mov	r0, r4
 8009a40:	2200      	movs	r2, #0
 8009a42:	2104      	movs	r1, #4
 8009a44:	f7ff ff94 	bl	8009970 <std>
 8009a48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	2109      	movs	r1, #9
 8009a50:	f7ff ff8e 	bl	8009970 <std>
 8009a54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009a58:	2202      	movs	r2, #2
 8009a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a5e:	2112      	movs	r1, #18
 8009a60:	f7ff bf86 	b.w	8009970 <std>
 8009a64:	200006a8 	.word	0x200006a8
 8009a68:	20000570 	.word	0x20000570
 8009a6c:	080099dd 	.word	0x080099dd

08009a70 <__sfp_lock_acquire>:
 8009a70:	4801      	ldr	r0, [pc, #4]	@ (8009a78 <__sfp_lock_acquire+0x8>)
 8009a72:	f000 b90e 	b.w	8009c92 <__retarget_lock_acquire_recursive>
 8009a76:	bf00      	nop
 8009a78:	200006b1 	.word	0x200006b1

08009a7c <__sfp_lock_release>:
 8009a7c:	4801      	ldr	r0, [pc, #4]	@ (8009a84 <__sfp_lock_release+0x8>)
 8009a7e:	f000 b909 	b.w	8009c94 <__retarget_lock_release_recursive>
 8009a82:	bf00      	nop
 8009a84:	200006b1 	.word	0x200006b1

08009a88 <__sinit>:
 8009a88:	b510      	push	{r4, lr}
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	f7ff fff0 	bl	8009a70 <__sfp_lock_acquire>
 8009a90:	6a23      	ldr	r3, [r4, #32]
 8009a92:	b11b      	cbz	r3, 8009a9c <__sinit+0x14>
 8009a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a98:	f7ff bff0 	b.w	8009a7c <__sfp_lock_release>
 8009a9c:	4b04      	ldr	r3, [pc, #16]	@ (8009ab0 <__sinit+0x28>)
 8009a9e:	6223      	str	r3, [r4, #32]
 8009aa0:	4b04      	ldr	r3, [pc, #16]	@ (8009ab4 <__sinit+0x2c>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1f5      	bne.n	8009a94 <__sinit+0xc>
 8009aa8:	f7ff ffc4 	bl	8009a34 <global_stdio_init.part.0>
 8009aac:	e7f2      	b.n	8009a94 <__sinit+0xc>
 8009aae:	bf00      	nop
 8009ab0:	080099f5 	.word	0x080099f5
 8009ab4:	200006a8 	.word	0x200006a8

08009ab8 <_fwalk_sglue>:
 8009ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009abc:	4607      	mov	r7, r0
 8009abe:	4688      	mov	r8, r1
 8009ac0:	4614      	mov	r4, r2
 8009ac2:	2600      	movs	r6, #0
 8009ac4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ac8:	f1b9 0901 	subs.w	r9, r9, #1
 8009acc:	d505      	bpl.n	8009ada <_fwalk_sglue+0x22>
 8009ace:	6824      	ldr	r4, [r4, #0]
 8009ad0:	2c00      	cmp	r4, #0
 8009ad2:	d1f7      	bne.n	8009ac4 <_fwalk_sglue+0xc>
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ada:	89ab      	ldrh	r3, [r5, #12]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d907      	bls.n	8009af0 <_fwalk_sglue+0x38>
 8009ae0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	d003      	beq.n	8009af0 <_fwalk_sglue+0x38>
 8009ae8:	4629      	mov	r1, r5
 8009aea:	4638      	mov	r0, r7
 8009aec:	47c0      	blx	r8
 8009aee:	4306      	orrs	r6, r0
 8009af0:	3568      	adds	r5, #104	@ 0x68
 8009af2:	e7e9      	b.n	8009ac8 <_fwalk_sglue+0x10>

08009af4 <iprintf>:
 8009af4:	b40f      	push	{r0, r1, r2, r3}
 8009af6:	b507      	push	{r0, r1, r2, lr}
 8009af8:	4906      	ldr	r1, [pc, #24]	@ (8009b14 <iprintf+0x20>)
 8009afa:	ab04      	add	r3, sp, #16
 8009afc:	6808      	ldr	r0, [r1, #0]
 8009afe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b02:	6881      	ldr	r1, [r0, #8]
 8009b04:	9301      	str	r3, [sp, #4]
 8009b06:	f000 f9f7 	bl	8009ef8 <_vfiprintf_r>
 8009b0a:	b003      	add	sp, #12
 8009b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b10:	b004      	add	sp, #16
 8009b12:	4770      	bx	lr
 8009b14:	20000028 	.word	0x20000028

08009b18 <__sread>:
 8009b18:	b510      	push	{r4, lr}
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b20:	f000 f868 	bl	8009bf4 <_read_r>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	bfab      	itete	ge
 8009b28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b2a:	89a3      	ldrhlt	r3, [r4, #12]
 8009b2c:	181b      	addge	r3, r3, r0
 8009b2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b32:	bfac      	ite	ge
 8009b34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b36:	81a3      	strhlt	r3, [r4, #12]
 8009b38:	bd10      	pop	{r4, pc}

08009b3a <__swrite>:
 8009b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b3e:	461f      	mov	r7, r3
 8009b40:	898b      	ldrh	r3, [r1, #12]
 8009b42:	05db      	lsls	r3, r3, #23
 8009b44:	4605      	mov	r5, r0
 8009b46:	460c      	mov	r4, r1
 8009b48:	4616      	mov	r6, r2
 8009b4a:	d505      	bpl.n	8009b58 <__swrite+0x1e>
 8009b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b50:	2302      	movs	r3, #2
 8009b52:	2200      	movs	r2, #0
 8009b54:	f000 f83c 	bl	8009bd0 <_lseek_r>
 8009b58:	89a3      	ldrh	r3, [r4, #12]
 8009b5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b62:	81a3      	strh	r3, [r4, #12]
 8009b64:	4632      	mov	r2, r6
 8009b66:	463b      	mov	r3, r7
 8009b68:	4628      	mov	r0, r5
 8009b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b6e:	f000 b853 	b.w	8009c18 <_write_r>

08009b72 <__sseek>:
 8009b72:	b510      	push	{r4, lr}
 8009b74:	460c      	mov	r4, r1
 8009b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b7a:	f000 f829 	bl	8009bd0 <_lseek_r>
 8009b7e:	1c43      	adds	r3, r0, #1
 8009b80:	89a3      	ldrh	r3, [r4, #12]
 8009b82:	bf15      	itete	ne
 8009b84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009b86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009b8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009b8e:	81a3      	strheq	r3, [r4, #12]
 8009b90:	bf18      	it	ne
 8009b92:	81a3      	strhne	r3, [r4, #12]
 8009b94:	bd10      	pop	{r4, pc}

08009b96 <__sclose>:
 8009b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b9a:	f000 b809 	b.w	8009bb0 <_close_r>

08009b9e <memset>:
 8009b9e:	4402      	add	r2, r0
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d100      	bne.n	8009ba8 <memset+0xa>
 8009ba6:	4770      	bx	lr
 8009ba8:	f803 1b01 	strb.w	r1, [r3], #1
 8009bac:	e7f9      	b.n	8009ba2 <memset+0x4>
	...

08009bb0 <_close_r>:
 8009bb0:	b538      	push	{r3, r4, r5, lr}
 8009bb2:	4d06      	ldr	r5, [pc, #24]	@ (8009bcc <_close_r+0x1c>)
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	4608      	mov	r0, r1
 8009bba:	602b      	str	r3, [r5, #0]
 8009bbc:	f7f8 fd9f 	bl	80026fe <_close>
 8009bc0:	1c43      	adds	r3, r0, #1
 8009bc2:	d102      	bne.n	8009bca <_close_r+0x1a>
 8009bc4:	682b      	ldr	r3, [r5, #0]
 8009bc6:	b103      	cbz	r3, 8009bca <_close_r+0x1a>
 8009bc8:	6023      	str	r3, [r4, #0]
 8009bca:	bd38      	pop	{r3, r4, r5, pc}
 8009bcc:	200006ac 	.word	0x200006ac

08009bd0 <_lseek_r>:
 8009bd0:	b538      	push	{r3, r4, r5, lr}
 8009bd2:	4d07      	ldr	r5, [pc, #28]	@ (8009bf0 <_lseek_r+0x20>)
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	4608      	mov	r0, r1
 8009bd8:	4611      	mov	r1, r2
 8009bda:	2200      	movs	r2, #0
 8009bdc:	602a      	str	r2, [r5, #0]
 8009bde:	461a      	mov	r2, r3
 8009be0:	f7f8 fdb4 	bl	800274c <_lseek>
 8009be4:	1c43      	adds	r3, r0, #1
 8009be6:	d102      	bne.n	8009bee <_lseek_r+0x1e>
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	b103      	cbz	r3, 8009bee <_lseek_r+0x1e>
 8009bec:	6023      	str	r3, [r4, #0]
 8009bee:	bd38      	pop	{r3, r4, r5, pc}
 8009bf0:	200006ac 	.word	0x200006ac

08009bf4 <_read_r>:
 8009bf4:	b538      	push	{r3, r4, r5, lr}
 8009bf6:	4d07      	ldr	r5, [pc, #28]	@ (8009c14 <_read_r+0x20>)
 8009bf8:	4604      	mov	r4, r0
 8009bfa:	4608      	mov	r0, r1
 8009bfc:	4611      	mov	r1, r2
 8009bfe:	2200      	movs	r2, #0
 8009c00:	602a      	str	r2, [r5, #0]
 8009c02:	461a      	mov	r2, r3
 8009c04:	f7f8 fd5e 	bl	80026c4 <_read>
 8009c08:	1c43      	adds	r3, r0, #1
 8009c0a:	d102      	bne.n	8009c12 <_read_r+0x1e>
 8009c0c:	682b      	ldr	r3, [r5, #0]
 8009c0e:	b103      	cbz	r3, 8009c12 <_read_r+0x1e>
 8009c10:	6023      	str	r3, [r4, #0]
 8009c12:	bd38      	pop	{r3, r4, r5, pc}
 8009c14:	200006ac 	.word	0x200006ac

08009c18 <_write_r>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	4d07      	ldr	r5, [pc, #28]	@ (8009c38 <_write_r+0x20>)
 8009c1c:	4604      	mov	r4, r0
 8009c1e:	4608      	mov	r0, r1
 8009c20:	4611      	mov	r1, r2
 8009c22:	2200      	movs	r2, #0
 8009c24:	602a      	str	r2, [r5, #0]
 8009c26:	461a      	mov	r2, r3
 8009c28:	f7f8 f89e 	bl	8001d68 <_write>
 8009c2c:	1c43      	adds	r3, r0, #1
 8009c2e:	d102      	bne.n	8009c36 <_write_r+0x1e>
 8009c30:	682b      	ldr	r3, [r5, #0]
 8009c32:	b103      	cbz	r3, 8009c36 <_write_r+0x1e>
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	bd38      	pop	{r3, r4, r5, pc}
 8009c38:	200006ac 	.word	0x200006ac

08009c3c <__errno>:
 8009c3c:	4b01      	ldr	r3, [pc, #4]	@ (8009c44 <__errno+0x8>)
 8009c3e:	6818      	ldr	r0, [r3, #0]
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	20000028 	.word	0x20000028

08009c48 <__libc_init_array>:
 8009c48:	b570      	push	{r4, r5, r6, lr}
 8009c4a:	4d0d      	ldr	r5, [pc, #52]	@ (8009c80 <__libc_init_array+0x38>)
 8009c4c:	4c0d      	ldr	r4, [pc, #52]	@ (8009c84 <__libc_init_array+0x3c>)
 8009c4e:	1b64      	subs	r4, r4, r5
 8009c50:	10a4      	asrs	r4, r4, #2
 8009c52:	2600      	movs	r6, #0
 8009c54:	42a6      	cmp	r6, r4
 8009c56:	d109      	bne.n	8009c6c <__libc_init_array+0x24>
 8009c58:	4d0b      	ldr	r5, [pc, #44]	@ (8009c88 <__libc_init_array+0x40>)
 8009c5a:	4c0c      	ldr	r4, [pc, #48]	@ (8009c8c <__libc_init_array+0x44>)
 8009c5c:	f000 fdc6 	bl	800a7ec <_init>
 8009c60:	1b64      	subs	r4, r4, r5
 8009c62:	10a4      	asrs	r4, r4, #2
 8009c64:	2600      	movs	r6, #0
 8009c66:	42a6      	cmp	r6, r4
 8009c68:	d105      	bne.n	8009c76 <__libc_init_array+0x2e>
 8009c6a:	bd70      	pop	{r4, r5, r6, pc}
 8009c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c70:	4798      	blx	r3
 8009c72:	3601      	adds	r6, #1
 8009c74:	e7ee      	b.n	8009c54 <__libc_init_array+0xc>
 8009c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c7a:	4798      	blx	r3
 8009c7c:	3601      	adds	r6, #1
 8009c7e:	e7f2      	b.n	8009c66 <__libc_init_array+0x1e>
 8009c80:	0800a8c0 	.word	0x0800a8c0
 8009c84:	0800a8c0 	.word	0x0800a8c0
 8009c88:	0800a8c0 	.word	0x0800a8c0
 8009c8c:	0800a8c4 	.word	0x0800a8c4

08009c90 <__retarget_lock_init_recursive>:
 8009c90:	4770      	bx	lr

08009c92 <__retarget_lock_acquire_recursive>:
 8009c92:	4770      	bx	lr

08009c94 <__retarget_lock_release_recursive>:
 8009c94:	4770      	bx	lr

08009c96 <memcpy>:
 8009c96:	440a      	add	r2, r1
 8009c98:	4291      	cmp	r1, r2
 8009c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c9e:	d100      	bne.n	8009ca2 <memcpy+0xc>
 8009ca0:	4770      	bx	lr
 8009ca2:	b510      	push	{r4, lr}
 8009ca4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ca8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cac:	4291      	cmp	r1, r2
 8009cae:	d1f9      	bne.n	8009ca4 <memcpy+0xe>
 8009cb0:	bd10      	pop	{r4, pc}
	...

08009cb4 <_free_r>:
 8009cb4:	b538      	push	{r3, r4, r5, lr}
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	2900      	cmp	r1, #0
 8009cba:	d041      	beq.n	8009d40 <_free_r+0x8c>
 8009cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cc0:	1f0c      	subs	r4, r1, #4
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	bfb8      	it	lt
 8009cc6:	18e4      	addlt	r4, r4, r3
 8009cc8:	f000 f8e0 	bl	8009e8c <__malloc_lock>
 8009ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8009d44 <_free_r+0x90>)
 8009cce:	6813      	ldr	r3, [r2, #0]
 8009cd0:	b933      	cbnz	r3, 8009ce0 <_free_r+0x2c>
 8009cd2:	6063      	str	r3, [r4, #4]
 8009cd4:	6014      	str	r4, [r2, #0]
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cdc:	f000 b8dc 	b.w	8009e98 <__malloc_unlock>
 8009ce0:	42a3      	cmp	r3, r4
 8009ce2:	d908      	bls.n	8009cf6 <_free_r+0x42>
 8009ce4:	6820      	ldr	r0, [r4, #0]
 8009ce6:	1821      	adds	r1, r4, r0
 8009ce8:	428b      	cmp	r3, r1
 8009cea:	bf01      	itttt	eq
 8009cec:	6819      	ldreq	r1, [r3, #0]
 8009cee:	685b      	ldreq	r3, [r3, #4]
 8009cf0:	1809      	addeq	r1, r1, r0
 8009cf2:	6021      	streq	r1, [r4, #0]
 8009cf4:	e7ed      	b.n	8009cd2 <_free_r+0x1e>
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	b10b      	cbz	r3, 8009d00 <_free_r+0x4c>
 8009cfc:	42a3      	cmp	r3, r4
 8009cfe:	d9fa      	bls.n	8009cf6 <_free_r+0x42>
 8009d00:	6811      	ldr	r1, [r2, #0]
 8009d02:	1850      	adds	r0, r2, r1
 8009d04:	42a0      	cmp	r0, r4
 8009d06:	d10b      	bne.n	8009d20 <_free_r+0x6c>
 8009d08:	6820      	ldr	r0, [r4, #0]
 8009d0a:	4401      	add	r1, r0
 8009d0c:	1850      	adds	r0, r2, r1
 8009d0e:	4283      	cmp	r3, r0
 8009d10:	6011      	str	r1, [r2, #0]
 8009d12:	d1e0      	bne.n	8009cd6 <_free_r+0x22>
 8009d14:	6818      	ldr	r0, [r3, #0]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	6053      	str	r3, [r2, #4]
 8009d1a:	4408      	add	r0, r1
 8009d1c:	6010      	str	r0, [r2, #0]
 8009d1e:	e7da      	b.n	8009cd6 <_free_r+0x22>
 8009d20:	d902      	bls.n	8009d28 <_free_r+0x74>
 8009d22:	230c      	movs	r3, #12
 8009d24:	602b      	str	r3, [r5, #0]
 8009d26:	e7d6      	b.n	8009cd6 <_free_r+0x22>
 8009d28:	6820      	ldr	r0, [r4, #0]
 8009d2a:	1821      	adds	r1, r4, r0
 8009d2c:	428b      	cmp	r3, r1
 8009d2e:	bf04      	itt	eq
 8009d30:	6819      	ldreq	r1, [r3, #0]
 8009d32:	685b      	ldreq	r3, [r3, #4]
 8009d34:	6063      	str	r3, [r4, #4]
 8009d36:	bf04      	itt	eq
 8009d38:	1809      	addeq	r1, r1, r0
 8009d3a:	6021      	streq	r1, [r4, #0]
 8009d3c:	6054      	str	r4, [r2, #4]
 8009d3e:	e7ca      	b.n	8009cd6 <_free_r+0x22>
 8009d40:	bd38      	pop	{r3, r4, r5, pc}
 8009d42:	bf00      	nop
 8009d44:	200006b8 	.word	0x200006b8

08009d48 <sbrk_aligned>:
 8009d48:	b570      	push	{r4, r5, r6, lr}
 8009d4a:	4e0f      	ldr	r6, [pc, #60]	@ (8009d88 <sbrk_aligned+0x40>)
 8009d4c:	460c      	mov	r4, r1
 8009d4e:	6831      	ldr	r1, [r6, #0]
 8009d50:	4605      	mov	r5, r0
 8009d52:	b911      	cbnz	r1, 8009d5a <sbrk_aligned+0x12>
 8009d54:	f000 fcb6 	bl	800a6c4 <_sbrk_r>
 8009d58:	6030      	str	r0, [r6, #0]
 8009d5a:	4621      	mov	r1, r4
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	f000 fcb1 	bl	800a6c4 <_sbrk_r>
 8009d62:	1c43      	adds	r3, r0, #1
 8009d64:	d103      	bne.n	8009d6e <sbrk_aligned+0x26>
 8009d66:	f04f 34ff 	mov.w	r4, #4294967295
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	bd70      	pop	{r4, r5, r6, pc}
 8009d6e:	1cc4      	adds	r4, r0, #3
 8009d70:	f024 0403 	bic.w	r4, r4, #3
 8009d74:	42a0      	cmp	r0, r4
 8009d76:	d0f8      	beq.n	8009d6a <sbrk_aligned+0x22>
 8009d78:	1a21      	subs	r1, r4, r0
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	f000 fca2 	bl	800a6c4 <_sbrk_r>
 8009d80:	3001      	adds	r0, #1
 8009d82:	d1f2      	bne.n	8009d6a <sbrk_aligned+0x22>
 8009d84:	e7ef      	b.n	8009d66 <sbrk_aligned+0x1e>
 8009d86:	bf00      	nop
 8009d88:	200006b4 	.word	0x200006b4

08009d8c <_malloc_r>:
 8009d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d90:	1ccd      	adds	r5, r1, #3
 8009d92:	f025 0503 	bic.w	r5, r5, #3
 8009d96:	3508      	adds	r5, #8
 8009d98:	2d0c      	cmp	r5, #12
 8009d9a:	bf38      	it	cc
 8009d9c:	250c      	movcc	r5, #12
 8009d9e:	2d00      	cmp	r5, #0
 8009da0:	4606      	mov	r6, r0
 8009da2:	db01      	blt.n	8009da8 <_malloc_r+0x1c>
 8009da4:	42a9      	cmp	r1, r5
 8009da6:	d904      	bls.n	8009db2 <_malloc_r+0x26>
 8009da8:	230c      	movs	r3, #12
 8009daa:	6033      	str	r3, [r6, #0]
 8009dac:	2000      	movs	r0, #0
 8009dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009db2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e88 <_malloc_r+0xfc>
 8009db6:	f000 f869 	bl	8009e8c <__malloc_lock>
 8009dba:	f8d8 3000 	ldr.w	r3, [r8]
 8009dbe:	461c      	mov	r4, r3
 8009dc0:	bb44      	cbnz	r4, 8009e14 <_malloc_r+0x88>
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	f7ff ffbf 	bl	8009d48 <sbrk_aligned>
 8009dca:	1c43      	adds	r3, r0, #1
 8009dcc:	4604      	mov	r4, r0
 8009dce:	d158      	bne.n	8009e82 <_malloc_r+0xf6>
 8009dd0:	f8d8 4000 	ldr.w	r4, [r8]
 8009dd4:	4627      	mov	r7, r4
 8009dd6:	2f00      	cmp	r7, #0
 8009dd8:	d143      	bne.n	8009e62 <_malloc_r+0xd6>
 8009dda:	2c00      	cmp	r4, #0
 8009ddc:	d04b      	beq.n	8009e76 <_malloc_r+0xea>
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	4639      	mov	r1, r7
 8009de2:	4630      	mov	r0, r6
 8009de4:	eb04 0903 	add.w	r9, r4, r3
 8009de8:	f000 fc6c 	bl	800a6c4 <_sbrk_r>
 8009dec:	4581      	cmp	r9, r0
 8009dee:	d142      	bne.n	8009e76 <_malloc_r+0xea>
 8009df0:	6821      	ldr	r1, [r4, #0]
 8009df2:	1a6d      	subs	r5, r5, r1
 8009df4:	4629      	mov	r1, r5
 8009df6:	4630      	mov	r0, r6
 8009df8:	f7ff ffa6 	bl	8009d48 <sbrk_aligned>
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d03a      	beq.n	8009e76 <_malloc_r+0xea>
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	442b      	add	r3, r5
 8009e04:	6023      	str	r3, [r4, #0]
 8009e06:	f8d8 3000 	ldr.w	r3, [r8]
 8009e0a:	685a      	ldr	r2, [r3, #4]
 8009e0c:	bb62      	cbnz	r2, 8009e68 <_malloc_r+0xdc>
 8009e0e:	f8c8 7000 	str.w	r7, [r8]
 8009e12:	e00f      	b.n	8009e34 <_malloc_r+0xa8>
 8009e14:	6822      	ldr	r2, [r4, #0]
 8009e16:	1b52      	subs	r2, r2, r5
 8009e18:	d420      	bmi.n	8009e5c <_malloc_r+0xd0>
 8009e1a:	2a0b      	cmp	r2, #11
 8009e1c:	d917      	bls.n	8009e4e <_malloc_r+0xc2>
 8009e1e:	1961      	adds	r1, r4, r5
 8009e20:	42a3      	cmp	r3, r4
 8009e22:	6025      	str	r5, [r4, #0]
 8009e24:	bf18      	it	ne
 8009e26:	6059      	strne	r1, [r3, #4]
 8009e28:	6863      	ldr	r3, [r4, #4]
 8009e2a:	bf08      	it	eq
 8009e2c:	f8c8 1000 	streq.w	r1, [r8]
 8009e30:	5162      	str	r2, [r4, r5]
 8009e32:	604b      	str	r3, [r1, #4]
 8009e34:	4630      	mov	r0, r6
 8009e36:	f000 f82f 	bl	8009e98 <__malloc_unlock>
 8009e3a:	f104 000b 	add.w	r0, r4, #11
 8009e3e:	1d23      	adds	r3, r4, #4
 8009e40:	f020 0007 	bic.w	r0, r0, #7
 8009e44:	1ac2      	subs	r2, r0, r3
 8009e46:	bf1c      	itt	ne
 8009e48:	1a1b      	subne	r3, r3, r0
 8009e4a:	50a3      	strne	r3, [r4, r2]
 8009e4c:	e7af      	b.n	8009dae <_malloc_r+0x22>
 8009e4e:	6862      	ldr	r2, [r4, #4]
 8009e50:	42a3      	cmp	r3, r4
 8009e52:	bf0c      	ite	eq
 8009e54:	f8c8 2000 	streq.w	r2, [r8]
 8009e58:	605a      	strne	r2, [r3, #4]
 8009e5a:	e7eb      	b.n	8009e34 <_malloc_r+0xa8>
 8009e5c:	4623      	mov	r3, r4
 8009e5e:	6864      	ldr	r4, [r4, #4]
 8009e60:	e7ae      	b.n	8009dc0 <_malloc_r+0x34>
 8009e62:	463c      	mov	r4, r7
 8009e64:	687f      	ldr	r7, [r7, #4]
 8009e66:	e7b6      	b.n	8009dd6 <_malloc_r+0x4a>
 8009e68:	461a      	mov	r2, r3
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	42a3      	cmp	r3, r4
 8009e6e:	d1fb      	bne.n	8009e68 <_malloc_r+0xdc>
 8009e70:	2300      	movs	r3, #0
 8009e72:	6053      	str	r3, [r2, #4]
 8009e74:	e7de      	b.n	8009e34 <_malloc_r+0xa8>
 8009e76:	230c      	movs	r3, #12
 8009e78:	6033      	str	r3, [r6, #0]
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	f000 f80c 	bl	8009e98 <__malloc_unlock>
 8009e80:	e794      	b.n	8009dac <_malloc_r+0x20>
 8009e82:	6005      	str	r5, [r0, #0]
 8009e84:	e7d6      	b.n	8009e34 <_malloc_r+0xa8>
 8009e86:	bf00      	nop
 8009e88:	200006b8 	.word	0x200006b8

08009e8c <__malloc_lock>:
 8009e8c:	4801      	ldr	r0, [pc, #4]	@ (8009e94 <__malloc_lock+0x8>)
 8009e8e:	f7ff bf00 	b.w	8009c92 <__retarget_lock_acquire_recursive>
 8009e92:	bf00      	nop
 8009e94:	200006b0 	.word	0x200006b0

08009e98 <__malloc_unlock>:
 8009e98:	4801      	ldr	r0, [pc, #4]	@ (8009ea0 <__malloc_unlock+0x8>)
 8009e9a:	f7ff befb 	b.w	8009c94 <__retarget_lock_release_recursive>
 8009e9e:	bf00      	nop
 8009ea0:	200006b0 	.word	0x200006b0

08009ea4 <__sfputc_r>:
 8009ea4:	6893      	ldr	r3, [r2, #8]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	b410      	push	{r4}
 8009eac:	6093      	str	r3, [r2, #8]
 8009eae:	da08      	bge.n	8009ec2 <__sfputc_r+0x1e>
 8009eb0:	6994      	ldr	r4, [r2, #24]
 8009eb2:	42a3      	cmp	r3, r4
 8009eb4:	db01      	blt.n	8009eba <__sfputc_r+0x16>
 8009eb6:	290a      	cmp	r1, #10
 8009eb8:	d103      	bne.n	8009ec2 <__sfputc_r+0x1e>
 8009eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ebe:	f000 bb6d 	b.w	800a59c <__swbuf_r>
 8009ec2:	6813      	ldr	r3, [r2, #0]
 8009ec4:	1c58      	adds	r0, r3, #1
 8009ec6:	6010      	str	r0, [r2, #0]
 8009ec8:	7019      	strb	r1, [r3, #0]
 8009eca:	4608      	mov	r0, r1
 8009ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <__sfputs_r>:
 8009ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed4:	4606      	mov	r6, r0
 8009ed6:	460f      	mov	r7, r1
 8009ed8:	4614      	mov	r4, r2
 8009eda:	18d5      	adds	r5, r2, r3
 8009edc:	42ac      	cmp	r4, r5
 8009ede:	d101      	bne.n	8009ee4 <__sfputs_r+0x12>
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	e007      	b.n	8009ef4 <__sfputs_r+0x22>
 8009ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ee8:	463a      	mov	r2, r7
 8009eea:	4630      	mov	r0, r6
 8009eec:	f7ff ffda 	bl	8009ea4 <__sfputc_r>
 8009ef0:	1c43      	adds	r3, r0, #1
 8009ef2:	d1f3      	bne.n	8009edc <__sfputs_r+0xa>
 8009ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ef8 <_vfiprintf_r>:
 8009ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efc:	460d      	mov	r5, r1
 8009efe:	b09d      	sub	sp, #116	@ 0x74
 8009f00:	4614      	mov	r4, r2
 8009f02:	4698      	mov	r8, r3
 8009f04:	4606      	mov	r6, r0
 8009f06:	b118      	cbz	r0, 8009f10 <_vfiprintf_r+0x18>
 8009f08:	6a03      	ldr	r3, [r0, #32]
 8009f0a:	b90b      	cbnz	r3, 8009f10 <_vfiprintf_r+0x18>
 8009f0c:	f7ff fdbc 	bl	8009a88 <__sinit>
 8009f10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f12:	07d9      	lsls	r1, r3, #31
 8009f14:	d405      	bmi.n	8009f22 <_vfiprintf_r+0x2a>
 8009f16:	89ab      	ldrh	r3, [r5, #12]
 8009f18:	059a      	lsls	r2, r3, #22
 8009f1a:	d402      	bmi.n	8009f22 <_vfiprintf_r+0x2a>
 8009f1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f1e:	f7ff feb8 	bl	8009c92 <__retarget_lock_acquire_recursive>
 8009f22:	89ab      	ldrh	r3, [r5, #12]
 8009f24:	071b      	lsls	r3, r3, #28
 8009f26:	d501      	bpl.n	8009f2c <_vfiprintf_r+0x34>
 8009f28:	692b      	ldr	r3, [r5, #16]
 8009f2a:	b99b      	cbnz	r3, 8009f54 <_vfiprintf_r+0x5c>
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	4630      	mov	r0, r6
 8009f30:	f000 fb72 	bl	800a618 <__swsetup_r>
 8009f34:	b170      	cbz	r0, 8009f54 <_vfiprintf_r+0x5c>
 8009f36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f38:	07dc      	lsls	r4, r3, #31
 8009f3a:	d504      	bpl.n	8009f46 <_vfiprintf_r+0x4e>
 8009f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f40:	b01d      	add	sp, #116	@ 0x74
 8009f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f46:	89ab      	ldrh	r3, [r5, #12]
 8009f48:	0598      	lsls	r0, r3, #22
 8009f4a:	d4f7      	bmi.n	8009f3c <_vfiprintf_r+0x44>
 8009f4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f4e:	f7ff fea1 	bl	8009c94 <__retarget_lock_release_recursive>
 8009f52:	e7f3      	b.n	8009f3c <_vfiprintf_r+0x44>
 8009f54:	2300      	movs	r3, #0
 8009f56:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f58:	2320      	movs	r3, #32
 8009f5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f62:	2330      	movs	r3, #48	@ 0x30
 8009f64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a114 <_vfiprintf_r+0x21c>
 8009f68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f6c:	f04f 0901 	mov.w	r9, #1
 8009f70:	4623      	mov	r3, r4
 8009f72:	469a      	mov	sl, r3
 8009f74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f78:	b10a      	cbz	r2, 8009f7e <_vfiprintf_r+0x86>
 8009f7a:	2a25      	cmp	r2, #37	@ 0x25
 8009f7c:	d1f9      	bne.n	8009f72 <_vfiprintf_r+0x7a>
 8009f7e:	ebba 0b04 	subs.w	fp, sl, r4
 8009f82:	d00b      	beq.n	8009f9c <_vfiprintf_r+0xa4>
 8009f84:	465b      	mov	r3, fp
 8009f86:	4622      	mov	r2, r4
 8009f88:	4629      	mov	r1, r5
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f7ff ffa1 	bl	8009ed2 <__sfputs_r>
 8009f90:	3001      	adds	r0, #1
 8009f92:	f000 80a7 	beq.w	800a0e4 <_vfiprintf_r+0x1ec>
 8009f96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f98:	445a      	add	r2, fp
 8009f9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f000 809f 	beq.w	800a0e4 <_vfiprintf_r+0x1ec>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fb0:	f10a 0a01 	add.w	sl, sl, #1
 8009fb4:	9304      	str	r3, [sp, #16]
 8009fb6:	9307      	str	r3, [sp, #28]
 8009fb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fbe:	4654      	mov	r4, sl
 8009fc0:	2205      	movs	r2, #5
 8009fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fc6:	4853      	ldr	r0, [pc, #332]	@ (800a114 <_vfiprintf_r+0x21c>)
 8009fc8:	f7f6 f902 	bl	80001d0 <memchr>
 8009fcc:	9a04      	ldr	r2, [sp, #16]
 8009fce:	b9d8      	cbnz	r0, 800a008 <_vfiprintf_r+0x110>
 8009fd0:	06d1      	lsls	r1, r2, #27
 8009fd2:	bf44      	itt	mi
 8009fd4:	2320      	movmi	r3, #32
 8009fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fda:	0713      	lsls	r3, r2, #28
 8009fdc:	bf44      	itt	mi
 8009fde:	232b      	movmi	r3, #43	@ 0x2b
 8009fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fea:	d015      	beq.n	800a018 <_vfiprintf_r+0x120>
 8009fec:	9a07      	ldr	r2, [sp, #28]
 8009fee:	4654      	mov	r4, sl
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	f04f 0c0a 	mov.w	ip, #10
 8009ff6:	4621      	mov	r1, r4
 8009ff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ffc:	3b30      	subs	r3, #48	@ 0x30
 8009ffe:	2b09      	cmp	r3, #9
 800a000:	d94b      	bls.n	800a09a <_vfiprintf_r+0x1a2>
 800a002:	b1b0      	cbz	r0, 800a032 <_vfiprintf_r+0x13a>
 800a004:	9207      	str	r2, [sp, #28]
 800a006:	e014      	b.n	800a032 <_vfiprintf_r+0x13a>
 800a008:	eba0 0308 	sub.w	r3, r0, r8
 800a00c:	fa09 f303 	lsl.w	r3, r9, r3
 800a010:	4313      	orrs	r3, r2
 800a012:	9304      	str	r3, [sp, #16]
 800a014:	46a2      	mov	sl, r4
 800a016:	e7d2      	b.n	8009fbe <_vfiprintf_r+0xc6>
 800a018:	9b03      	ldr	r3, [sp, #12]
 800a01a:	1d19      	adds	r1, r3, #4
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	9103      	str	r1, [sp, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	bfbb      	ittet	lt
 800a024:	425b      	neglt	r3, r3
 800a026:	f042 0202 	orrlt.w	r2, r2, #2
 800a02a:	9307      	strge	r3, [sp, #28]
 800a02c:	9307      	strlt	r3, [sp, #28]
 800a02e:	bfb8      	it	lt
 800a030:	9204      	strlt	r2, [sp, #16]
 800a032:	7823      	ldrb	r3, [r4, #0]
 800a034:	2b2e      	cmp	r3, #46	@ 0x2e
 800a036:	d10a      	bne.n	800a04e <_vfiprintf_r+0x156>
 800a038:	7863      	ldrb	r3, [r4, #1]
 800a03a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a03c:	d132      	bne.n	800a0a4 <_vfiprintf_r+0x1ac>
 800a03e:	9b03      	ldr	r3, [sp, #12]
 800a040:	1d1a      	adds	r2, r3, #4
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	9203      	str	r2, [sp, #12]
 800a046:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a04a:	3402      	adds	r4, #2
 800a04c:	9305      	str	r3, [sp, #20]
 800a04e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a124 <_vfiprintf_r+0x22c>
 800a052:	7821      	ldrb	r1, [r4, #0]
 800a054:	2203      	movs	r2, #3
 800a056:	4650      	mov	r0, sl
 800a058:	f7f6 f8ba 	bl	80001d0 <memchr>
 800a05c:	b138      	cbz	r0, 800a06e <_vfiprintf_r+0x176>
 800a05e:	9b04      	ldr	r3, [sp, #16]
 800a060:	eba0 000a 	sub.w	r0, r0, sl
 800a064:	2240      	movs	r2, #64	@ 0x40
 800a066:	4082      	lsls	r2, r0
 800a068:	4313      	orrs	r3, r2
 800a06a:	3401      	adds	r4, #1
 800a06c:	9304      	str	r3, [sp, #16]
 800a06e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a072:	4829      	ldr	r0, [pc, #164]	@ (800a118 <_vfiprintf_r+0x220>)
 800a074:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a078:	2206      	movs	r2, #6
 800a07a:	f7f6 f8a9 	bl	80001d0 <memchr>
 800a07e:	2800      	cmp	r0, #0
 800a080:	d03f      	beq.n	800a102 <_vfiprintf_r+0x20a>
 800a082:	4b26      	ldr	r3, [pc, #152]	@ (800a11c <_vfiprintf_r+0x224>)
 800a084:	bb1b      	cbnz	r3, 800a0ce <_vfiprintf_r+0x1d6>
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	3307      	adds	r3, #7
 800a08a:	f023 0307 	bic.w	r3, r3, #7
 800a08e:	3308      	adds	r3, #8
 800a090:	9303      	str	r3, [sp, #12]
 800a092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a094:	443b      	add	r3, r7
 800a096:	9309      	str	r3, [sp, #36]	@ 0x24
 800a098:	e76a      	b.n	8009f70 <_vfiprintf_r+0x78>
 800a09a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a09e:	460c      	mov	r4, r1
 800a0a0:	2001      	movs	r0, #1
 800a0a2:	e7a8      	b.n	8009ff6 <_vfiprintf_r+0xfe>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	3401      	adds	r4, #1
 800a0a8:	9305      	str	r3, [sp, #20]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	f04f 0c0a 	mov.w	ip, #10
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0b6:	3a30      	subs	r2, #48	@ 0x30
 800a0b8:	2a09      	cmp	r2, #9
 800a0ba:	d903      	bls.n	800a0c4 <_vfiprintf_r+0x1cc>
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d0c6      	beq.n	800a04e <_vfiprintf_r+0x156>
 800a0c0:	9105      	str	r1, [sp, #20]
 800a0c2:	e7c4      	b.n	800a04e <_vfiprintf_r+0x156>
 800a0c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e7f0      	b.n	800a0b0 <_vfiprintf_r+0x1b8>
 800a0ce:	ab03      	add	r3, sp, #12
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	462a      	mov	r2, r5
 800a0d4:	4b12      	ldr	r3, [pc, #72]	@ (800a120 <_vfiprintf_r+0x228>)
 800a0d6:	a904      	add	r1, sp, #16
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f3af 8000 	nop.w
 800a0de:	4607      	mov	r7, r0
 800a0e0:	1c78      	adds	r0, r7, #1
 800a0e2:	d1d6      	bne.n	800a092 <_vfiprintf_r+0x19a>
 800a0e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0e6:	07d9      	lsls	r1, r3, #31
 800a0e8:	d405      	bmi.n	800a0f6 <_vfiprintf_r+0x1fe>
 800a0ea:	89ab      	ldrh	r3, [r5, #12]
 800a0ec:	059a      	lsls	r2, r3, #22
 800a0ee:	d402      	bmi.n	800a0f6 <_vfiprintf_r+0x1fe>
 800a0f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0f2:	f7ff fdcf 	bl	8009c94 <__retarget_lock_release_recursive>
 800a0f6:	89ab      	ldrh	r3, [r5, #12]
 800a0f8:	065b      	lsls	r3, r3, #25
 800a0fa:	f53f af1f 	bmi.w	8009f3c <_vfiprintf_r+0x44>
 800a0fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a100:	e71e      	b.n	8009f40 <_vfiprintf_r+0x48>
 800a102:	ab03      	add	r3, sp, #12
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	462a      	mov	r2, r5
 800a108:	4b05      	ldr	r3, [pc, #20]	@ (800a120 <_vfiprintf_r+0x228>)
 800a10a:	a904      	add	r1, sp, #16
 800a10c:	4630      	mov	r0, r6
 800a10e:	f000 f879 	bl	800a204 <_printf_i>
 800a112:	e7e4      	b.n	800a0de <_vfiprintf_r+0x1e6>
 800a114:	0800a884 	.word	0x0800a884
 800a118:	0800a88e 	.word	0x0800a88e
 800a11c:	00000000 	.word	0x00000000
 800a120:	08009ed3 	.word	0x08009ed3
 800a124:	0800a88a 	.word	0x0800a88a

0800a128 <_printf_common>:
 800a128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a12c:	4616      	mov	r6, r2
 800a12e:	4698      	mov	r8, r3
 800a130:	688a      	ldr	r2, [r1, #8]
 800a132:	690b      	ldr	r3, [r1, #16]
 800a134:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a138:	4293      	cmp	r3, r2
 800a13a:	bfb8      	it	lt
 800a13c:	4613      	movlt	r3, r2
 800a13e:	6033      	str	r3, [r6, #0]
 800a140:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a144:	4607      	mov	r7, r0
 800a146:	460c      	mov	r4, r1
 800a148:	b10a      	cbz	r2, 800a14e <_printf_common+0x26>
 800a14a:	3301      	adds	r3, #1
 800a14c:	6033      	str	r3, [r6, #0]
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	0699      	lsls	r1, r3, #26
 800a152:	bf42      	ittt	mi
 800a154:	6833      	ldrmi	r3, [r6, #0]
 800a156:	3302      	addmi	r3, #2
 800a158:	6033      	strmi	r3, [r6, #0]
 800a15a:	6825      	ldr	r5, [r4, #0]
 800a15c:	f015 0506 	ands.w	r5, r5, #6
 800a160:	d106      	bne.n	800a170 <_printf_common+0x48>
 800a162:	f104 0a19 	add.w	sl, r4, #25
 800a166:	68e3      	ldr	r3, [r4, #12]
 800a168:	6832      	ldr	r2, [r6, #0]
 800a16a:	1a9b      	subs	r3, r3, r2
 800a16c:	42ab      	cmp	r3, r5
 800a16e:	dc26      	bgt.n	800a1be <_printf_common+0x96>
 800a170:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a174:	6822      	ldr	r2, [r4, #0]
 800a176:	3b00      	subs	r3, #0
 800a178:	bf18      	it	ne
 800a17a:	2301      	movne	r3, #1
 800a17c:	0692      	lsls	r2, r2, #26
 800a17e:	d42b      	bmi.n	800a1d8 <_printf_common+0xb0>
 800a180:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a184:	4641      	mov	r1, r8
 800a186:	4638      	mov	r0, r7
 800a188:	47c8      	blx	r9
 800a18a:	3001      	adds	r0, #1
 800a18c:	d01e      	beq.n	800a1cc <_printf_common+0xa4>
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	6922      	ldr	r2, [r4, #16]
 800a192:	f003 0306 	and.w	r3, r3, #6
 800a196:	2b04      	cmp	r3, #4
 800a198:	bf02      	ittt	eq
 800a19a:	68e5      	ldreq	r5, [r4, #12]
 800a19c:	6833      	ldreq	r3, [r6, #0]
 800a19e:	1aed      	subeq	r5, r5, r3
 800a1a0:	68a3      	ldr	r3, [r4, #8]
 800a1a2:	bf0c      	ite	eq
 800a1a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1a8:	2500      	movne	r5, #0
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	bfc4      	itt	gt
 800a1ae:	1a9b      	subgt	r3, r3, r2
 800a1b0:	18ed      	addgt	r5, r5, r3
 800a1b2:	2600      	movs	r6, #0
 800a1b4:	341a      	adds	r4, #26
 800a1b6:	42b5      	cmp	r5, r6
 800a1b8:	d11a      	bne.n	800a1f0 <_printf_common+0xc8>
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	e008      	b.n	800a1d0 <_printf_common+0xa8>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	4652      	mov	r2, sl
 800a1c2:	4641      	mov	r1, r8
 800a1c4:	4638      	mov	r0, r7
 800a1c6:	47c8      	blx	r9
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d103      	bne.n	800a1d4 <_printf_common+0xac>
 800a1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1d4:	3501      	adds	r5, #1
 800a1d6:	e7c6      	b.n	800a166 <_printf_common+0x3e>
 800a1d8:	18e1      	adds	r1, r4, r3
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	2030      	movs	r0, #48	@ 0x30
 800a1de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a1e2:	4422      	add	r2, r4
 800a1e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a1e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a1ec:	3302      	adds	r3, #2
 800a1ee:	e7c7      	b.n	800a180 <_printf_common+0x58>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	4622      	mov	r2, r4
 800a1f4:	4641      	mov	r1, r8
 800a1f6:	4638      	mov	r0, r7
 800a1f8:	47c8      	blx	r9
 800a1fa:	3001      	adds	r0, #1
 800a1fc:	d0e6      	beq.n	800a1cc <_printf_common+0xa4>
 800a1fe:	3601      	adds	r6, #1
 800a200:	e7d9      	b.n	800a1b6 <_printf_common+0x8e>
	...

0800a204 <_printf_i>:
 800a204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a208:	7e0f      	ldrb	r7, [r1, #24]
 800a20a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a20c:	2f78      	cmp	r7, #120	@ 0x78
 800a20e:	4691      	mov	r9, r2
 800a210:	4680      	mov	r8, r0
 800a212:	460c      	mov	r4, r1
 800a214:	469a      	mov	sl, r3
 800a216:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a21a:	d807      	bhi.n	800a22c <_printf_i+0x28>
 800a21c:	2f62      	cmp	r7, #98	@ 0x62
 800a21e:	d80a      	bhi.n	800a236 <_printf_i+0x32>
 800a220:	2f00      	cmp	r7, #0
 800a222:	f000 80d2 	beq.w	800a3ca <_printf_i+0x1c6>
 800a226:	2f58      	cmp	r7, #88	@ 0x58
 800a228:	f000 80b9 	beq.w	800a39e <_printf_i+0x19a>
 800a22c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a230:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a234:	e03a      	b.n	800a2ac <_printf_i+0xa8>
 800a236:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a23a:	2b15      	cmp	r3, #21
 800a23c:	d8f6      	bhi.n	800a22c <_printf_i+0x28>
 800a23e:	a101      	add	r1, pc, #4	@ (adr r1, 800a244 <_printf_i+0x40>)
 800a240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a244:	0800a29d 	.word	0x0800a29d
 800a248:	0800a2b1 	.word	0x0800a2b1
 800a24c:	0800a22d 	.word	0x0800a22d
 800a250:	0800a22d 	.word	0x0800a22d
 800a254:	0800a22d 	.word	0x0800a22d
 800a258:	0800a22d 	.word	0x0800a22d
 800a25c:	0800a2b1 	.word	0x0800a2b1
 800a260:	0800a22d 	.word	0x0800a22d
 800a264:	0800a22d 	.word	0x0800a22d
 800a268:	0800a22d 	.word	0x0800a22d
 800a26c:	0800a22d 	.word	0x0800a22d
 800a270:	0800a3b1 	.word	0x0800a3b1
 800a274:	0800a2db 	.word	0x0800a2db
 800a278:	0800a36b 	.word	0x0800a36b
 800a27c:	0800a22d 	.word	0x0800a22d
 800a280:	0800a22d 	.word	0x0800a22d
 800a284:	0800a3d3 	.word	0x0800a3d3
 800a288:	0800a22d 	.word	0x0800a22d
 800a28c:	0800a2db 	.word	0x0800a2db
 800a290:	0800a22d 	.word	0x0800a22d
 800a294:	0800a22d 	.word	0x0800a22d
 800a298:	0800a373 	.word	0x0800a373
 800a29c:	6833      	ldr	r3, [r6, #0]
 800a29e:	1d1a      	adds	r2, r3, #4
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	6032      	str	r2, [r6, #0]
 800a2a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e09d      	b.n	800a3ec <_printf_i+0x1e8>
 800a2b0:	6833      	ldr	r3, [r6, #0]
 800a2b2:	6820      	ldr	r0, [r4, #0]
 800a2b4:	1d19      	adds	r1, r3, #4
 800a2b6:	6031      	str	r1, [r6, #0]
 800a2b8:	0606      	lsls	r6, r0, #24
 800a2ba:	d501      	bpl.n	800a2c0 <_printf_i+0xbc>
 800a2bc:	681d      	ldr	r5, [r3, #0]
 800a2be:	e003      	b.n	800a2c8 <_printf_i+0xc4>
 800a2c0:	0645      	lsls	r5, r0, #25
 800a2c2:	d5fb      	bpl.n	800a2bc <_printf_i+0xb8>
 800a2c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2c8:	2d00      	cmp	r5, #0
 800a2ca:	da03      	bge.n	800a2d4 <_printf_i+0xd0>
 800a2cc:	232d      	movs	r3, #45	@ 0x2d
 800a2ce:	426d      	negs	r5, r5
 800a2d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2d4:	4859      	ldr	r0, [pc, #356]	@ (800a43c <_printf_i+0x238>)
 800a2d6:	230a      	movs	r3, #10
 800a2d8:	e011      	b.n	800a2fe <_printf_i+0xfa>
 800a2da:	6821      	ldr	r1, [r4, #0]
 800a2dc:	6833      	ldr	r3, [r6, #0]
 800a2de:	0608      	lsls	r0, r1, #24
 800a2e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a2e4:	d402      	bmi.n	800a2ec <_printf_i+0xe8>
 800a2e6:	0649      	lsls	r1, r1, #25
 800a2e8:	bf48      	it	mi
 800a2ea:	b2ad      	uxthmi	r5, r5
 800a2ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800a2ee:	4853      	ldr	r0, [pc, #332]	@ (800a43c <_printf_i+0x238>)
 800a2f0:	6033      	str	r3, [r6, #0]
 800a2f2:	bf14      	ite	ne
 800a2f4:	230a      	movne	r3, #10
 800a2f6:	2308      	moveq	r3, #8
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a2fe:	6866      	ldr	r6, [r4, #4]
 800a300:	60a6      	str	r6, [r4, #8]
 800a302:	2e00      	cmp	r6, #0
 800a304:	bfa2      	ittt	ge
 800a306:	6821      	ldrge	r1, [r4, #0]
 800a308:	f021 0104 	bicge.w	r1, r1, #4
 800a30c:	6021      	strge	r1, [r4, #0]
 800a30e:	b90d      	cbnz	r5, 800a314 <_printf_i+0x110>
 800a310:	2e00      	cmp	r6, #0
 800a312:	d04b      	beq.n	800a3ac <_printf_i+0x1a8>
 800a314:	4616      	mov	r6, r2
 800a316:	fbb5 f1f3 	udiv	r1, r5, r3
 800a31a:	fb03 5711 	mls	r7, r3, r1, r5
 800a31e:	5dc7      	ldrb	r7, [r0, r7]
 800a320:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a324:	462f      	mov	r7, r5
 800a326:	42bb      	cmp	r3, r7
 800a328:	460d      	mov	r5, r1
 800a32a:	d9f4      	bls.n	800a316 <_printf_i+0x112>
 800a32c:	2b08      	cmp	r3, #8
 800a32e:	d10b      	bne.n	800a348 <_printf_i+0x144>
 800a330:	6823      	ldr	r3, [r4, #0]
 800a332:	07df      	lsls	r7, r3, #31
 800a334:	d508      	bpl.n	800a348 <_printf_i+0x144>
 800a336:	6923      	ldr	r3, [r4, #16]
 800a338:	6861      	ldr	r1, [r4, #4]
 800a33a:	4299      	cmp	r1, r3
 800a33c:	bfde      	ittt	le
 800a33e:	2330      	movle	r3, #48	@ 0x30
 800a340:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a344:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a348:	1b92      	subs	r2, r2, r6
 800a34a:	6122      	str	r2, [r4, #16]
 800a34c:	f8cd a000 	str.w	sl, [sp]
 800a350:	464b      	mov	r3, r9
 800a352:	aa03      	add	r2, sp, #12
 800a354:	4621      	mov	r1, r4
 800a356:	4640      	mov	r0, r8
 800a358:	f7ff fee6 	bl	800a128 <_printf_common>
 800a35c:	3001      	adds	r0, #1
 800a35e:	d14a      	bne.n	800a3f6 <_printf_i+0x1f2>
 800a360:	f04f 30ff 	mov.w	r0, #4294967295
 800a364:	b004      	add	sp, #16
 800a366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	f043 0320 	orr.w	r3, r3, #32
 800a370:	6023      	str	r3, [r4, #0]
 800a372:	4833      	ldr	r0, [pc, #204]	@ (800a440 <_printf_i+0x23c>)
 800a374:	2778      	movs	r7, #120	@ 0x78
 800a376:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a37a:	6823      	ldr	r3, [r4, #0]
 800a37c:	6831      	ldr	r1, [r6, #0]
 800a37e:	061f      	lsls	r7, r3, #24
 800a380:	f851 5b04 	ldr.w	r5, [r1], #4
 800a384:	d402      	bmi.n	800a38c <_printf_i+0x188>
 800a386:	065f      	lsls	r7, r3, #25
 800a388:	bf48      	it	mi
 800a38a:	b2ad      	uxthmi	r5, r5
 800a38c:	6031      	str	r1, [r6, #0]
 800a38e:	07d9      	lsls	r1, r3, #31
 800a390:	bf44      	itt	mi
 800a392:	f043 0320 	orrmi.w	r3, r3, #32
 800a396:	6023      	strmi	r3, [r4, #0]
 800a398:	b11d      	cbz	r5, 800a3a2 <_printf_i+0x19e>
 800a39a:	2310      	movs	r3, #16
 800a39c:	e7ac      	b.n	800a2f8 <_printf_i+0xf4>
 800a39e:	4827      	ldr	r0, [pc, #156]	@ (800a43c <_printf_i+0x238>)
 800a3a0:	e7e9      	b.n	800a376 <_printf_i+0x172>
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	f023 0320 	bic.w	r3, r3, #32
 800a3a8:	6023      	str	r3, [r4, #0]
 800a3aa:	e7f6      	b.n	800a39a <_printf_i+0x196>
 800a3ac:	4616      	mov	r6, r2
 800a3ae:	e7bd      	b.n	800a32c <_printf_i+0x128>
 800a3b0:	6833      	ldr	r3, [r6, #0]
 800a3b2:	6825      	ldr	r5, [r4, #0]
 800a3b4:	6961      	ldr	r1, [r4, #20]
 800a3b6:	1d18      	adds	r0, r3, #4
 800a3b8:	6030      	str	r0, [r6, #0]
 800a3ba:	062e      	lsls	r6, r5, #24
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	d501      	bpl.n	800a3c4 <_printf_i+0x1c0>
 800a3c0:	6019      	str	r1, [r3, #0]
 800a3c2:	e002      	b.n	800a3ca <_printf_i+0x1c6>
 800a3c4:	0668      	lsls	r0, r5, #25
 800a3c6:	d5fb      	bpl.n	800a3c0 <_printf_i+0x1bc>
 800a3c8:	8019      	strh	r1, [r3, #0]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	6123      	str	r3, [r4, #16]
 800a3ce:	4616      	mov	r6, r2
 800a3d0:	e7bc      	b.n	800a34c <_printf_i+0x148>
 800a3d2:	6833      	ldr	r3, [r6, #0]
 800a3d4:	1d1a      	adds	r2, r3, #4
 800a3d6:	6032      	str	r2, [r6, #0]
 800a3d8:	681e      	ldr	r6, [r3, #0]
 800a3da:	6862      	ldr	r2, [r4, #4]
 800a3dc:	2100      	movs	r1, #0
 800a3de:	4630      	mov	r0, r6
 800a3e0:	f7f5 fef6 	bl	80001d0 <memchr>
 800a3e4:	b108      	cbz	r0, 800a3ea <_printf_i+0x1e6>
 800a3e6:	1b80      	subs	r0, r0, r6
 800a3e8:	6060      	str	r0, [r4, #4]
 800a3ea:	6863      	ldr	r3, [r4, #4]
 800a3ec:	6123      	str	r3, [r4, #16]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3f4:	e7aa      	b.n	800a34c <_printf_i+0x148>
 800a3f6:	6923      	ldr	r3, [r4, #16]
 800a3f8:	4632      	mov	r2, r6
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	4640      	mov	r0, r8
 800a3fe:	47d0      	blx	sl
 800a400:	3001      	adds	r0, #1
 800a402:	d0ad      	beq.n	800a360 <_printf_i+0x15c>
 800a404:	6823      	ldr	r3, [r4, #0]
 800a406:	079b      	lsls	r3, r3, #30
 800a408:	d413      	bmi.n	800a432 <_printf_i+0x22e>
 800a40a:	68e0      	ldr	r0, [r4, #12]
 800a40c:	9b03      	ldr	r3, [sp, #12]
 800a40e:	4298      	cmp	r0, r3
 800a410:	bfb8      	it	lt
 800a412:	4618      	movlt	r0, r3
 800a414:	e7a6      	b.n	800a364 <_printf_i+0x160>
 800a416:	2301      	movs	r3, #1
 800a418:	4632      	mov	r2, r6
 800a41a:	4649      	mov	r1, r9
 800a41c:	4640      	mov	r0, r8
 800a41e:	47d0      	blx	sl
 800a420:	3001      	adds	r0, #1
 800a422:	d09d      	beq.n	800a360 <_printf_i+0x15c>
 800a424:	3501      	adds	r5, #1
 800a426:	68e3      	ldr	r3, [r4, #12]
 800a428:	9903      	ldr	r1, [sp, #12]
 800a42a:	1a5b      	subs	r3, r3, r1
 800a42c:	42ab      	cmp	r3, r5
 800a42e:	dcf2      	bgt.n	800a416 <_printf_i+0x212>
 800a430:	e7eb      	b.n	800a40a <_printf_i+0x206>
 800a432:	2500      	movs	r5, #0
 800a434:	f104 0619 	add.w	r6, r4, #25
 800a438:	e7f5      	b.n	800a426 <_printf_i+0x222>
 800a43a:	bf00      	nop
 800a43c:	0800a895 	.word	0x0800a895
 800a440:	0800a8a6 	.word	0x0800a8a6

0800a444 <__sflush_r>:
 800a444:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44c:	0716      	lsls	r6, r2, #28
 800a44e:	4605      	mov	r5, r0
 800a450:	460c      	mov	r4, r1
 800a452:	d454      	bmi.n	800a4fe <__sflush_r+0xba>
 800a454:	684b      	ldr	r3, [r1, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	dc02      	bgt.n	800a460 <__sflush_r+0x1c>
 800a45a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	dd48      	ble.n	800a4f2 <__sflush_r+0xae>
 800a460:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a462:	2e00      	cmp	r6, #0
 800a464:	d045      	beq.n	800a4f2 <__sflush_r+0xae>
 800a466:	2300      	movs	r3, #0
 800a468:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a46c:	682f      	ldr	r7, [r5, #0]
 800a46e:	6a21      	ldr	r1, [r4, #32]
 800a470:	602b      	str	r3, [r5, #0]
 800a472:	d030      	beq.n	800a4d6 <__sflush_r+0x92>
 800a474:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a476:	89a3      	ldrh	r3, [r4, #12]
 800a478:	0759      	lsls	r1, r3, #29
 800a47a:	d505      	bpl.n	800a488 <__sflush_r+0x44>
 800a47c:	6863      	ldr	r3, [r4, #4]
 800a47e:	1ad2      	subs	r2, r2, r3
 800a480:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a482:	b10b      	cbz	r3, 800a488 <__sflush_r+0x44>
 800a484:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a486:	1ad2      	subs	r2, r2, r3
 800a488:	2300      	movs	r3, #0
 800a48a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a48c:	6a21      	ldr	r1, [r4, #32]
 800a48e:	4628      	mov	r0, r5
 800a490:	47b0      	blx	r6
 800a492:	1c43      	adds	r3, r0, #1
 800a494:	89a3      	ldrh	r3, [r4, #12]
 800a496:	d106      	bne.n	800a4a6 <__sflush_r+0x62>
 800a498:	6829      	ldr	r1, [r5, #0]
 800a49a:	291d      	cmp	r1, #29
 800a49c:	d82b      	bhi.n	800a4f6 <__sflush_r+0xb2>
 800a49e:	4a2a      	ldr	r2, [pc, #168]	@ (800a548 <__sflush_r+0x104>)
 800a4a0:	410a      	asrs	r2, r1
 800a4a2:	07d6      	lsls	r6, r2, #31
 800a4a4:	d427      	bmi.n	800a4f6 <__sflush_r+0xb2>
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	6062      	str	r2, [r4, #4]
 800a4aa:	04d9      	lsls	r1, r3, #19
 800a4ac:	6922      	ldr	r2, [r4, #16]
 800a4ae:	6022      	str	r2, [r4, #0]
 800a4b0:	d504      	bpl.n	800a4bc <__sflush_r+0x78>
 800a4b2:	1c42      	adds	r2, r0, #1
 800a4b4:	d101      	bne.n	800a4ba <__sflush_r+0x76>
 800a4b6:	682b      	ldr	r3, [r5, #0]
 800a4b8:	b903      	cbnz	r3, 800a4bc <__sflush_r+0x78>
 800a4ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4be:	602f      	str	r7, [r5, #0]
 800a4c0:	b1b9      	cbz	r1, 800a4f2 <__sflush_r+0xae>
 800a4c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4c6:	4299      	cmp	r1, r3
 800a4c8:	d002      	beq.n	800a4d0 <__sflush_r+0x8c>
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	f7ff fbf2 	bl	8009cb4 <_free_r>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4d4:	e00d      	b.n	800a4f2 <__sflush_r+0xae>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	4628      	mov	r0, r5
 800a4da:	47b0      	blx	r6
 800a4dc:	4602      	mov	r2, r0
 800a4de:	1c50      	adds	r0, r2, #1
 800a4e0:	d1c9      	bne.n	800a476 <__sflush_r+0x32>
 800a4e2:	682b      	ldr	r3, [r5, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d0c6      	beq.n	800a476 <__sflush_r+0x32>
 800a4e8:	2b1d      	cmp	r3, #29
 800a4ea:	d001      	beq.n	800a4f0 <__sflush_r+0xac>
 800a4ec:	2b16      	cmp	r3, #22
 800a4ee:	d11e      	bne.n	800a52e <__sflush_r+0xea>
 800a4f0:	602f      	str	r7, [r5, #0]
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	e022      	b.n	800a53c <__sflush_r+0xf8>
 800a4f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4fa:	b21b      	sxth	r3, r3
 800a4fc:	e01b      	b.n	800a536 <__sflush_r+0xf2>
 800a4fe:	690f      	ldr	r7, [r1, #16]
 800a500:	2f00      	cmp	r7, #0
 800a502:	d0f6      	beq.n	800a4f2 <__sflush_r+0xae>
 800a504:	0793      	lsls	r3, r2, #30
 800a506:	680e      	ldr	r6, [r1, #0]
 800a508:	bf08      	it	eq
 800a50a:	694b      	ldreq	r3, [r1, #20]
 800a50c:	600f      	str	r7, [r1, #0]
 800a50e:	bf18      	it	ne
 800a510:	2300      	movne	r3, #0
 800a512:	eba6 0807 	sub.w	r8, r6, r7
 800a516:	608b      	str	r3, [r1, #8]
 800a518:	f1b8 0f00 	cmp.w	r8, #0
 800a51c:	dde9      	ble.n	800a4f2 <__sflush_r+0xae>
 800a51e:	6a21      	ldr	r1, [r4, #32]
 800a520:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a522:	4643      	mov	r3, r8
 800a524:	463a      	mov	r2, r7
 800a526:	4628      	mov	r0, r5
 800a528:	47b0      	blx	r6
 800a52a:	2800      	cmp	r0, #0
 800a52c:	dc08      	bgt.n	800a540 <__sflush_r+0xfc>
 800a52e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a536:	81a3      	strh	r3, [r4, #12]
 800a538:	f04f 30ff 	mov.w	r0, #4294967295
 800a53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a540:	4407      	add	r7, r0
 800a542:	eba8 0800 	sub.w	r8, r8, r0
 800a546:	e7e7      	b.n	800a518 <__sflush_r+0xd4>
 800a548:	dfbffffe 	.word	0xdfbffffe

0800a54c <_fflush_r>:
 800a54c:	b538      	push	{r3, r4, r5, lr}
 800a54e:	690b      	ldr	r3, [r1, #16]
 800a550:	4605      	mov	r5, r0
 800a552:	460c      	mov	r4, r1
 800a554:	b913      	cbnz	r3, 800a55c <_fflush_r+0x10>
 800a556:	2500      	movs	r5, #0
 800a558:	4628      	mov	r0, r5
 800a55a:	bd38      	pop	{r3, r4, r5, pc}
 800a55c:	b118      	cbz	r0, 800a566 <_fflush_r+0x1a>
 800a55e:	6a03      	ldr	r3, [r0, #32]
 800a560:	b90b      	cbnz	r3, 800a566 <_fflush_r+0x1a>
 800a562:	f7ff fa91 	bl	8009a88 <__sinit>
 800a566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d0f3      	beq.n	800a556 <_fflush_r+0xa>
 800a56e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a570:	07d0      	lsls	r0, r2, #31
 800a572:	d404      	bmi.n	800a57e <_fflush_r+0x32>
 800a574:	0599      	lsls	r1, r3, #22
 800a576:	d402      	bmi.n	800a57e <_fflush_r+0x32>
 800a578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a57a:	f7ff fb8a 	bl	8009c92 <__retarget_lock_acquire_recursive>
 800a57e:	4628      	mov	r0, r5
 800a580:	4621      	mov	r1, r4
 800a582:	f7ff ff5f 	bl	800a444 <__sflush_r>
 800a586:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a588:	07da      	lsls	r2, r3, #31
 800a58a:	4605      	mov	r5, r0
 800a58c:	d4e4      	bmi.n	800a558 <_fflush_r+0xc>
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	059b      	lsls	r3, r3, #22
 800a592:	d4e1      	bmi.n	800a558 <_fflush_r+0xc>
 800a594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a596:	f7ff fb7d 	bl	8009c94 <__retarget_lock_release_recursive>
 800a59a:	e7dd      	b.n	800a558 <_fflush_r+0xc>

0800a59c <__swbuf_r>:
 800a59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59e:	460e      	mov	r6, r1
 800a5a0:	4614      	mov	r4, r2
 800a5a2:	4605      	mov	r5, r0
 800a5a4:	b118      	cbz	r0, 800a5ae <__swbuf_r+0x12>
 800a5a6:	6a03      	ldr	r3, [r0, #32]
 800a5a8:	b90b      	cbnz	r3, 800a5ae <__swbuf_r+0x12>
 800a5aa:	f7ff fa6d 	bl	8009a88 <__sinit>
 800a5ae:	69a3      	ldr	r3, [r4, #24]
 800a5b0:	60a3      	str	r3, [r4, #8]
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	071a      	lsls	r2, r3, #28
 800a5b6:	d501      	bpl.n	800a5bc <__swbuf_r+0x20>
 800a5b8:	6923      	ldr	r3, [r4, #16]
 800a5ba:	b943      	cbnz	r3, 800a5ce <__swbuf_r+0x32>
 800a5bc:	4621      	mov	r1, r4
 800a5be:	4628      	mov	r0, r5
 800a5c0:	f000 f82a 	bl	800a618 <__swsetup_r>
 800a5c4:	b118      	cbz	r0, 800a5ce <__swbuf_r+0x32>
 800a5c6:	f04f 37ff 	mov.w	r7, #4294967295
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	6922      	ldr	r2, [r4, #16]
 800a5d2:	1a98      	subs	r0, r3, r2
 800a5d4:	6963      	ldr	r3, [r4, #20]
 800a5d6:	b2f6      	uxtb	r6, r6
 800a5d8:	4283      	cmp	r3, r0
 800a5da:	4637      	mov	r7, r6
 800a5dc:	dc05      	bgt.n	800a5ea <__swbuf_r+0x4e>
 800a5de:	4621      	mov	r1, r4
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	f7ff ffb3 	bl	800a54c <_fflush_r>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d1ed      	bne.n	800a5c6 <__swbuf_r+0x2a>
 800a5ea:	68a3      	ldr	r3, [r4, #8]
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	60a3      	str	r3, [r4, #8]
 800a5f0:	6823      	ldr	r3, [r4, #0]
 800a5f2:	1c5a      	adds	r2, r3, #1
 800a5f4:	6022      	str	r2, [r4, #0]
 800a5f6:	701e      	strb	r6, [r3, #0]
 800a5f8:	6962      	ldr	r2, [r4, #20]
 800a5fa:	1c43      	adds	r3, r0, #1
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d004      	beq.n	800a60a <__swbuf_r+0x6e>
 800a600:	89a3      	ldrh	r3, [r4, #12]
 800a602:	07db      	lsls	r3, r3, #31
 800a604:	d5e1      	bpl.n	800a5ca <__swbuf_r+0x2e>
 800a606:	2e0a      	cmp	r6, #10
 800a608:	d1df      	bne.n	800a5ca <__swbuf_r+0x2e>
 800a60a:	4621      	mov	r1, r4
 800a60c:	4628      	mov	r0, r5
 800a60e:	f7ff ff9d 	bl	800a54c <_fflush_r>
 800a612:	2800      	cmp	r0, #0
 800a614:	d0d9      	beq.n	800a5ca <__swbuf_r+0x2e>
 800a616:	e7d6      	b.n	800a5c6 <__swbuf_r+0x2a>

0800a618 <__swsetup_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4b29      	ldr	r3, [pc, #164]	@ (800a6c0 <__swsetup_r+0xa8>)
 800a61c:	4605      	mov	r5, r0
 800a61e:	6818      	ldr	r0, [r3, #0]
 800a620:	460c      	mov	r4, r1
 800a622:	b118      	cbz	r0, 800a62c <__swsetup_r+0x14>
 800a624:	6a03      	ldr	r3, [r0, #32]
 800a626:	b90b      	cbnz	r3, 800a62c <__swsetup_r+0x14>
 800a628:	f7ff fa2e 	bl	8009a88 <__sinit>
 800a62c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a630:	0719      	lsls	r1, r3, #28
 800a632:	d422      	bmi.n	800a67a <__swsetup_r+0x62>
 800a634:	06da      	lsls	r2, r3, #27
 800a636:	d407      	bmi.n	800a648 <__swsetup_r+0x30>
 800a638:	2209      	movs	r2, #9
 800a63a:	602a      	str	r2, [r5, #0]
 800a63c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a640:	81a3      	strh	r3, [r4, #12]
 800a642:	f04f 30ff 	mov.w	r0, #4294967295
 800a646:	e033      	b.n	800a6b0 <__swsetup_r+0x98>
 800a648:	0758      	lsls	r0, r3, #29
 800a64a:	d512      	bpl.n	800a672 <__swsetup_r+0x5a>
 800a64c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a64e:	b141      	cbz	r1, 800a662 <__swsetup_r+0x4a>
 800a650:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a654:	4299      	cmp	r1, r3
 800a656:	d002      	beq.n	800a65e <__swsetup_r+0x46>
 800a658:	4628      	mov	r0, r5
 800a65a:	f7ff fb2b 	bl	8009cb4 <_free_r>
 800a65e:	2300      	movs	r3, #0
 800a660:	6363      	str	r3, [r4, #52]	@ 0x34
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a668:	81a3      	strh	r3, [r4, #12]
 800a66a:	2300      	movs	r3, #0
 800a66c:	6063      	str	r3, [r4, #4]
 800a66e:	6923      	ldr	r3, [r4, #16]
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	89a3      	ldrh	r3, [r4, #12]
 800a674:	f043 0308 	orr.w	r3, r3, #8
 800a678:	81a3      	strh	r3, [r4, #12]
 800a67a:	6923      	ldr	r3, [r4, #16]
 800a67c:	b94b      	cbnz	r3, 800a692 <__swsetup_r+0x7a>
 800a67e:	89a3      	ldrh	r3, [r4, #12]
 800a680:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a688:	d003      	beq.n	800a692 <__swsetup_r+0x7a>
 800a68a:	4621      	mov	r1, r4
 800a68c:	4628      	mov	r0, r5
 800a68e:	f000 f84f 	bl	800a730 <__smakebuf_r>
 800a692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a696:	f013 0201 	ands.w	r2, r3, #1
 800a69a:	d00a      	beq.n	800a6b2 <__swsetup_r+0x9a>
 800a69c:	2200      	movs	r2, #0
 800a69e:	60a2      	str	r2, [r4, #8]
 800a6a0:	6962      	ldr	r2, [r4, #20]
 800a6a2:	4252      	negs	r2, r2
 800a6a4:	61a2      	str	r2, [r4, #24]
 800a6a6:	6922      	ldr	r2, [r4, #16]
 800a6a8:	b942      	cbnz	r2, 800a6bc <__swsetup_r+0xa4>
 800a6aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a6ae:	d1c5      	bne.n	800a63c <__swsetup_r+0x24>
 800a6b0:	bd38      	pop	{r3, r4, r5, pc}
 800a6b2:	0799      	lsls	r1, r3, #30
 800a6b4:	bf58      	it	pl
 800a6b6:	6962      	ldrpl	r2, [r4, #20]
 800a6b8:	60a2      	str	r2, [r4, #8]
 800a6ba:	e7f4      	b.n	800a6a6 <__swsetup_r+0x8e>
 800a6bc:	2000      	movs	r0, #0
 800a6be:	e7f7      	b.n	800a6b0 <__swsetup_r+0x98>
 800a6c0:	20000028 	.word	0x20000028

0800a6c4 <_sbrk_r>:
 800a6c4:	b538      	push	{r3, r4, r5, lr}
 800a6c6:	4d06      	ldr	r5, [pc, #24]	@ (800a6e0 <_sbrk_r+0x1c>)
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	4608      	mov	r0, r1
 800a6ce:	602b      	str	r3, [r5, #0]
 800a6d0:	f7f8 f84a 	bl	8002768 <_sbrk>
 800a6d4:	1c43      	adds	r3, r0, #1
 800a6d6:	d102      	bne.n	800a6de <_sbrk_r+0x1a>
 800a6d8:	682b      	ldr	r3, [r5, #0]
 800a6da:	b103      	cbz	r3, 800a6de <_sbrk_r+0x1a>
 800a6dc:	6023      	str	r3, [r4, #0]
 800a6de:	bd38      	pop	{r3, r4, r5, pc}
 800a6e0:	200006ac 	.word	0x200006ac

0800a6e4 <__swhatbuf_r>:
 800a6e4:	b570      	push	{r4, r5, r6, lr}
 800a6e6:	460c      	mov	r4, r1
 800a6e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ec:	2900      	cmp	r1, #0
 800a6ee:	b096      	sub	sp, #88	@ 0x58
 800a6f0:	4615      	mov	r5, r2
 800a6f2:	461e      	mov	r6, r3
 800a6f4:	da0d      	bge.n	800a712 <__swhatbuf_r+0x2e>
 800a6f6:	89a3      	ldrh	r3, [r4, #12]
 800a6f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a6fc:	f04f 0100 	mov.w	r1, #0
 800a700:	bf14      	ite	ne
 800a702:	2340      	movne	r3, #64	@ 0x40
 800a704:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a708:	2000      	movs	r0, #0
 800a70a:	6031      	str	r1, [r6, #0]
 800a70c:	602b      	str	r3, [r5, #0]
 800a70e:	b016      	add	sp, #88	@ 0x58
 800a710:	bd70      	pop	{r4, r5, r6, pc}
 800a712:	466a      	mov	r2, sp
 800a714:	f000 f848 	bl	800a7a8 <_fstat_r>
 800a718:	2800      	cmp	r0, #0
 800a71a:	dbec      	blt.n	800a6f6 <__swhatbuf_r+0x12>
 800a71c:	9901      	ldr	r1, [sp, #4]
 800a71e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a722:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a726:	4259      	negs	r1, r3
 800a728:	4159      	adcs	r1, r3
 800a72a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a72e:	e7eb      	b.n	800a708 <__swhatbuf_r+0x24>

0800a730 <__smakebuf_r>:
 800a730:	898b      	ldrh	r3, [r1, #12]
 800a732:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a734:	079d      	lsls	r5, r3, #30
 800a736:	4606      	mov	r6, r0
 800a738:	460c      	mov	r4, r1
 800a73a:	d507      	bpl.n	800a74c <__smakebuf_r+0x1c>
 800a73c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	6123      	str	r3, [r4, #16]
 800a744:	2301      	movs	r3, #1
 800a746:	6163      	str	r3, [r4, #20]
 800a748:	b003      	add	sp, #12
 800a74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a74c:	ab01      	add	r3, sp, #4
 800a74e:	466a      	mov	r2, sp
 800a750:	f7ff ffc8 	bl	800a6e4 <__swhatbuf_r>
 800a754:	9f00      	ldr	r7, [sp, #0]
 800a756:	4605      	mov	r5, r0
 800a758:	4639      	mov	r1, r7
 800a75a:	4630      	mov	r0, r6
 800a75c:	f7ff fb16 	bl	8009d8c <_malloc_r>
 800a760:	b948      	cbnz	r0, 800a776 <__smakebuf_r+0x46>
 800a762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a766:	059a      	lsls	r2, r3, #22
 800a768:	d4ee      	bmi.n	800a748 <__smakebuf_r+0x18>
 800a76a:	f023 0303 	bic.w	r3, r3, #3
 800a76e:	f043 0302 	orr.w	r3, r3, #2
 800a772:	81a3      	strh	r3, [r4, #12]
 800a774:	e7e2      	b.n	800a73c <__smakebuf_r+0xc>
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	6020      	str	r0, [r4, #0]
 800a77a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a77e:	81a3      	strh	r3, [r4, #12]
 800a780:	9b01      	ldr	r3, [sp, #4]
 800a782:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a786:	b15b      	cbz	r3, 800a7a0 <__smakebuf_r+0x70>
 800a788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a78c:	4630      	mov	r0, r6
 800a78e:	f000 f81d 	bl	800a7cc <_isatty_r>
 800a792:	b128      	cbz	r0, 800a7a0 <__smakebuf_r+0x70>
 800a794:	89a3      	ldrh	r3, [r4, #12]
 800a796:	f023 0303 	bic.w	r3, r3, #3
 800a79a:	f043 0301 	orr.w	r3, r3, #1
 800a79e:	81a3      	strh	r3, [r4, #12]
 800a7a0:	89a3      	ldrh	r3, [r4, #12]
 800a7a2:	431d      	orrs	r5, r3
 800a7a4:	81a5      	strh	r5, [r4, #12]
 800a7a6:	e7cf      	b.n	800a748 <__smakebuf_r+0x18>

0800a7a8 <_fstat_r>:
 800a7a8:	b538      	push	{r3, r4, r5, lr}
 800a7aa:	4d07      	ldr	r5, [pc, #28]	@ (800a7c8 <_fstat_r+0x20>)
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	4608      	mov	r0, r1
 800a7b2:	4611      	mov	r1, r2
 800a7b4:	602b      	str	r3, [r5, #0]
 800a7b6:	f7f7 ffae 	bl	8002716 <_fstat>
 800a7ba:	1c43      	adds	r3, r0, #1
 800a7bc:	d102      	bne.n	800a7c4 <_fstat_r+0x1c>
 800a7be:	682b      	ldr	r3, [r5, #0]
 800a7c0:	b103      	cbz	r3, 800a7c4 <_fstat_r+0x1c>
 800a7c2:	6023      	str	r3, [r4, #0]
 800a7c4:	bd38      	pop	{r3, r4, r5, pc}
 800a7c6:	bf00      	nop
 800a7c8:	200006ac 	.word	0x200006ac

0800a7cc <_isatty_r>:
 800a7cc:	b538      	push	{r3, r4, r5, lr}
 800a7ce:	4d06      	ldr	r5, [pc, #24]	@ (800a7e8 <_isatty_r+0x1c>)
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	4604      	mov	r4, r0
 800a7d4:	4608      	mov	r0, r1
 800a7d6:	602b      	str	r3, [r5, #0]
 800a7d8:	f7f7 ffad 	bl	8002736 <_isatty>
 800a7dc:	1c43      	adds	r3, r0, #1
 800a7de:	d102      	bne.n	800a7e6 <_isatty_r+0x1a>
 800a7e0:	682b      	ldr	r3, [r5, #0]
 800a7e2:	b103      	cbz	r3, 800a7e6 <_isatty_r+0x1a>
 800a7e4:	6023      	str	r3, [r4, #0]
 800a7e6:	bd38      	pop	{r3, r4, r5, pc}
 800a7e8:	200006ac 	.word	0x200006ac

0800a7ec <_init>:
 800a7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ee:	bf00      	nop
 800a7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7f2:	bc08      	pop	{r3}
 800a7f4:	469e      	mov	lr, r3
 800a7f6:	4770      	bx	lr

0800a7f8 <_fini>:
 800a7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7fa:	bf00      	nop
 800a7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7fe:	bc08      	pop	{r3}
 800a800:	469e      	mov	lr, r3
 800a802:	4770      	bx	lr
