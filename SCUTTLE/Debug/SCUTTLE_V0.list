
SCUTTLE_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08008de4  08008de4  00009de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ea0  08008ea0  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008ea0  08008ea0  00009ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ea8  08008ea8  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ea8  08008ea8  00009ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008eac  08008eac  00009eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008eb0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000658  20000068  08008f18  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  08008f18  0000a6c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b3d1  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003366  00000000  00000000  00025469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  000287d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000135d  00000000  00000000  0002a078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004471  00000000  00000000  0002b3d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e880  00000000  00000000  0002f846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb96c  00000000  00000000  0004e0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149a32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071b8  00000000  00000000  00149a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00150c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008dcc 	.word	0x08008dcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08008dcc 	.word	0x08008dcc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <read_encoder>:
 * @brief Read encoder value
 * @param[in] encoder A pointer to a structure (encoder_t) containing encoder-related data such as position, velocity, and the last counter value.
 * @param[in] htim A pointer to the timer handle used to read the counter value.
 * @details This function reads a timer setup in encoder mode and finds position and velocity, accounting for overflow and direction change.
 */
void read_encoder(encoder_t *encoder) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

	//initialize internal variables
    uint32_t current_counter = __HAL_TIM_GET_COUNTER(encoder->htim); //Inverted due to wiring
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000570:	613b      	str	r3, [r7, #16]
    int32_t velocity_change;
    float delta_t;
    float current_tick = HAL_GetTick();
 8000572:	f002 f807 	bl	8002584 <HAL_GetTick>
 8000576:	ee07 0a90 	vmov	s15, r0
 800057a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800057e:	edc7 7a03 	vstr	s15, [r7, #12]

	// Calculate velocity change
	if (current_counter >= encoder->last_counter_value) {
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	693a      	ldr	r2, [r7, #16]
 8000588:	429a      	cmp	r2, r3
 800058a:	d305      	bcc.n	8000598 <read_encoder+0x38>
		velocity_change = current_counter - encoder->last_counter_value; //Velocity has units of counts per timer tick
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	693a      	ldr	r2, [r7, #16]
 8000592:	1ad3      	subs	r3, r2, r3
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	e014      	b.n	80005c2 <read_encoder+0x62>
	} else {
		velocity_change = __HAL_TIM_GET_AUTORELOAD(encoder->htim) - encoder->last_counter_value + current_counter;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	1ad2      	subs	r2, r2, r3
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	4413      	add	r3, r2
 80005aa:	617b      	str	r3, [r7, #20]
		if (!__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) { //If encoder is rotating in other direction
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f003 0310 	and.w	r3, r3, #16
 80005b8:	2b10      	cmp	r3, #16
 80005ba:	d002      	beq.n	80005c2 <read_encoder+0x62>
			velocity_change *= -1; // Invert for counting down mode
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	425b      	negs	r3, r3
 80005c0:	617b      	str	r3, [r7, #20]
		}
	}
	// Update position and store last counter value
	encoder->position += velocity_change;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	689a      	ldr	r2, [r3, #8]
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	441a      	add	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	609a      	str	r2, [r3, #8]
	encoder->last_counter_value = current_counter;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	693a      	ldr	r2, [r7, #16]
 80005d2:	60da      	str	r2, [r3, #12]

	delta_t = (current_tick > encoder->last_tick) ? ((current_tick - encoder->last_tick)/1000) : 1; //how much time(ms) elapsed since last run
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	691b      	ldr	r3, [r3, #16]
 80005d8:	ee07 3a90 	vmov	s15, r3
 80005dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80005e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ec:	dd0e      	ble.n	800060c <read_encoder+0xac>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	691b      	ldr	r3, [r3, #16]
 80005f2:	ee07 3a90 	vmov	s15, r3
 80005f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80005fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000602:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800064c <read_encoder+0xec>
 8000606:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800060a:	e001      	b.n	8000610 <read_encoder+0xb0>
 800060c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8000610:	edc7 7a02 	vstr	s15, [r7, #8]
    encoder->velocity = (int16_t)(velocity_change / delta_t); //units of encoder counts / s
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	ee07 3a90 	vmov	s15, r3
 800061a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800061e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800062a:	ee17 3a90 	vmov	r3, s15
 800062e:	b21a      	sxth	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	809a      	strh	r2, [r3, #4]
    encoder->last_tick = current_tick;
 8000634:	edd7 7a03 	vldr	s15, [r7, #12]
 8000638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800063c:	ee17 2a90 	vmov	r2, s15
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	611a      	str	r2, [r3, #16]


}
 8000644:	bf00      	nop
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	447a0000 	.word	0x447a0000

08000650 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000658:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800065c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d013      	beq.n	8000690 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000668:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800066c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000670:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000674:	2b00      	cmp	r3, #0
 8000676:	d00b      	beq.n	8000690 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000678:	e000      	b.n	800067c <ITM_SendChar+0x2c>
    {
      __NOP();
 800067a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800067c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d0f9      	beq.n	800067a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000686:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000690:	687b      	ldr	r3, [r7, #4]
}
 8000692:	4618      	mov	r0, r3
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
	...

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006a2:	b0c3      	sub	sp, #268	@ 0x10c
 80006a4:	af3c      	add	r7, sp, #240	@ 0xf0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a6:	f001 ff04 	bl	80024b2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006aa:	f000 f8d5 	bl	8000858 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006ae:	f000 f922 	bl	80008f6 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b2:	f000 fecf 	bl	8001454 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006b6:	f000 fb15 	bl	8000ce4 <MX_TIM1_Init>
  MX_ADC1_Init();
 80006ba:	f000 f947 	bl	800094c <MX_ADC1_Init>
  MX_ADC2_Init();
 80006be:	f000 f9bb 	bl	8000a38 <MX_ADC2_Init>
  MX_ADC3_Init();
 80006c2:	f000 fa2d 	bl	8000b20 <MX_ADC3_Init>
  MX_TIM2_Init();
 80006c6:	f000 fc03 	bl	8000ed0 <MX_TIM2_Init>
  MX_SPI3_Init();
 80006ca:	f000 facd 	bl	8000c68 <MX_SPI3_Init>
  MX_TIM3_Init();
 80006ce:	f000 fc53 	bl	8000f78 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80006d2:	f000 fe8f 	bl	80013f4 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80006d6:	f000 fca5 	bl	8001024 <MX_TIM4_Init>
  MX_TIM5_Init();
 80006da:	f000 fcf9 	bl	80010d0 <MX_TIM5_Init>
  MX_I2C2_Init();
 80006de:	f000 fa83 	bl	8000be8 <MX_I2C2_Init>
  MX_TIM8_Init();
 80006e2:	f000 fd55 	bl	8001190 <MX_TIM8_Init>
  MX_TIM15_Init();
 80006e6:	f000 fe07 	bl	80012f8 <MX_TIM15_Init>
  MX_TIM17_Init();
 80006ea:	f000 fe5d 	bl	80013a8 <MX_TIM17_Init>

  //Put timers in correct mode
  ;


  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 80006ee:	2100      	movs	r1, #0
 80006f0:	4850      	ldr	r0, [pc, #320]	@ (8000834 <main+0x194>)
 80006f2:	f005 fa13 	bl	8005b1c <HAL_TIM_IC_Start_IT>
  //Set ADC in correct mode
  HAL_ADC_Start(&hadc1);
 80006f6:	4850      	ldr	r0, [pc, #320]	@ (8000838 <main+0x198>)
 80006f8:	f002 fa62 	bl	8002bc0 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 80006fc:	484f      	ldr	r0, [pc, #316]	@ (800083c <main+0x19c>)
 80006fe:	f002 fa5f 	bl	8002bc0 <HAL_ADC_Start>
  //hadc1.Init.EOCSelection = DISABLE; //Apparently important
  //hadc2.Init.EOCSelection = DISABLE; //Apparently important
  HAL_ADC_Start(&hadc3);
 8000702:	484f      	ldr	r0, [pc, #316]	@ (8000840 <main+0x1a0>)
 8000704:	f002 fa5c 	bl	8002bc0 <HAL_ADC_Start>
  //hadc3.Init.EOCSelection = DISABLE; //Apparently important


	// Start PWM for motor 1 and motor 2 channels
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000708:	2100      	movs	r1, #0
 800070a:	484e      	ldr	r0, [pc, #312]	@ (8000844 <main+0x1a4>)
 800070c:	f005 f8a8 	bl	8005860 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000710:	2104      	movs	r1, #4
 8000712:	484c      	ldr	r0, [pc, #304]	@ (8000844 <main+0x1a4>)
 8000714:	f005 f8a4 	bl	8005860 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000718:	2108      	movs	r1, #8
 800071a:	484a      	ldr	r0, [pc, #296]	@ (8000844 <main+0x1a4>)
 800071c:	f005 f8a0 	bl	8005860 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000720:	210c      	movs	r1, #12
 8000722:	4848      	ldr	r0, [pc, #288]	@ (8000844 <main+0x1a4>)
 8000724:	f005 f89c 	bl	8005860 <HAL_TIM_PWM_Start>

  	// Enable motors 1 (PB1) and 2 (PB2)
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	f243 0106 	movw	r1, #12294	@ 0x3006
 800072e:	4846      	ldr	r0, [pc, #280]	@ (8000848 <main+0x1a8>)
 8000730:	f003 fb0a 	bl	8003d48 <HAL_GPIO_WritePin>

	// Start the encoders and enable interrupts
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000734:	213c      	movs	r1, #60	@ 0x3c
 8000736:	4845      	ldr	r0, [pc, #276]	@ (800084c <main+0x1ac>)
 8000738:	f005 fbe0 	bl	8005efc <HAL_TIM_Encoder_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim3,0);
 800073c:	4b43      	ldr	r3, [pc, #268]	@ (800084c <main+0x1ac>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000744:	213c      	movs	r1, #60	@ 0x3c
 8000746:	4842      	ldr	r0, [pc, #264]	@ (8000850 <main+0x1b0>)
 8000748:	f005 fbd8 	bl	8005efc <HAL_TIM_Encoder_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim4,0);
 800074c:	4b40      	ldr	r3, [pc, #256]	@ (8000850 <main+0x1b0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	@ 0x24




  uint8_t task = 0; //State variable for main loop
 8000754:	2300      	movs	r3, #0
 8000756:	75fb      	strb	r3, [r7, #23]
  uint8_t T1State = 0; //Task 1 State
 8000758:	2300      	movs	r3, #0
 800075a:	75bb      	strb	r3, [r7, #22]
  uint8_t T2State = 0; //Task 2 State
 800075c:	2300      	movs	r3, #0
 800075e:	757b      	strb	r3, [r7, #21]
  uint8_t T3State = 0; //Task 3 State
 8000760:	2300      	movs	r3, #0
 8000762:	753b      	strb	r3, [r7, #20]
  uint8_t T4State = 0; //Task 4 State
 8000764:	2300      	movs	r3, #0
 8000766:	74fb      	strb	r3, [r7, #19]
  uint8_t T5State = 0; //Task 5 State
 8000768:	2300      	movs	r3, #0
 800076a:	74bb      	strb	r3, [r7, #18]
  uint8_t T6State = 0; //Task 6 State
 800076c:	2300      	movs	r3, #0
 800076e:	737b      	strb	r3, [r7, #13]

  //Set motors, metal detector, and camera to ON by default. Will turn off if battery too low or killswitch active
   uint8_t DriveON_Rad = 1; //Radio Drive ON
 8000770:	2301      	movs	r3, #1
 8000772:	733b      	strb	r3, [r7, #12]
   uint8_t ArmON = 1;
 8000774:	2301      	movs	r3, #1
 8000776:	747b      	strb	r3, [r7, #17]

   uint8_t OpenMV = 1; //Camera Update On
 8000778:	2301      	movs	r3, #1
 800077a:	743b      	strb	r3, [r7, #16]


   uint8_t Follow = 0; //Follow mode
 800077c:	2300      	movs	r3, #0
 800077e:	72fb      	strb	r3, [r7, #11]



   //Set Kill switch to be off by default
   uint8_t BatKill = 0; //If Kill is 1 then turn everything off
 8000780:	2300      	movs	r3, #0
 8000782:	73fb      	strb	r3, [r7, #15]
   uint8_t RadKill = 0; //Radio Kill switch
 8000784:	2300      	movs	r3, #0
 8000786:	73bb      	strb	r3, [r7, #14]

   //Initialize a distance and angle setpoint
   float Distance_Target = 0;
 8000788:	f04f 0300 	mov.w	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
   float Angle_Target = 0;
 800078e:	f04f 0300 	mov.w	r3, #0
 8000792:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  //Run FSM
	  switch(task){
 8000794:	7dfb      	ldrb	r3, [r7, #23]
 8000796:	2b06      	cmp	r3, #6
 8000798:	d8fc      	bhi.n	8000794 <main+0xf4>
 800079a:	a201      	add	r2, pc, #4	@ (adr r2, 80007a0 <main+0x100>)
 800079c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a0:	080007bd 	.word	0x080007bd
 80007a4:	080007c3 	.word	0x080007c3
 80007a8:	080007c9 	.word	0x080007c9
 80007ac:	080007cf 	.word	0x080007cf
 80007b0:	080007d5 	.word	0x080007d5
 80007b4:	080007db 	.word	0x080007db
 80007b8:	080007e1 	.word	0x080007e1

	  case 0: //State 0
		  //State 0: INIT
		  //Do not make file for this, just Initialize as necessary
		  task = 1;
 80007bc:	2301      	movs	r3, #1
 80007be:	75fb      	strb	r3, [r7, #23]
		  break;
 80007c0:	e037      	b.n	8000832 <main+0x192>

	  case 1: //State 1
		  //State 1: Diagnostics
		  //Check battery and shut off if necessary
		  //task1_run(&T1State, hadc2,&BatKill);
		  task = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	75fb      	strb	r3, [r7, #23]
		  break;
 80007c6:	e034      	b.n	8000832 <main+0x192>

	  case 2: //State 2
		  //State 2: Radio
		  //Check killswitches and radio, act accordingly
		  //task2_run(&T2State,&BatKill,&RadKill,&usWidth,&DriveON_Rad,&ArmON,&MDON,&OpenMV);
	  	  task = 3;
 80007c8:	2303      	movs	r3, #3
 80007ca:	75fb      	strb	r3, [r7, #23]
	  	  break;
 80007cc:	e031      	b.n	8000832 <main+0x192>

	  case 3: //State 3
		  //State 3: OpenMV Camera
	  	  //task3_run(&T3State,&Distance_Target,&Angle_Target,&SPI_Rec,&Follow,&OpenMV, hspi3);
		  task = 4;
 80007ce:	2304      	movs	r3, #4
 80007d0:	75fb      	strb	r3, [r7, #23]
	  	  break;
 80007d2:	e02e      	b.n	8000832 <main+0x192>

	  case 4: //State 4
		  //State 4: Metal Detector
	  	  //task4_run(&T4State,&MDON,&sumval,htim17,&Metal_Found, hadc1, hadc2, hadc3);
	  	  task = 5;
 80007d4:	2305      	movs	r3, #5
 80007d6:	75fb      	strb	r3, [r7, #23]
	  	  break;
 80007d8:	e02b      	b.n	8000832 <main+0x192>

	  case 5: //State 5
		  //State 5: Arm Motor
	  	  //task5_run(&T5State,&ArmON,&Metal_Found,htim17,&sumval);
	  	  task = 6;
 80007da:	2306      	movs	r3, #6
 80007dc:	75fb      	strb	r3, [r7, #23]
	  	  break;
 80007de:	e028      	b.n	8000832 <main+0x192>

	  case 6: //State 6
		  //State 6:
	  	  //Insert State 6 class here
		  task6_run(&T6State, &Metal_Found, &DriveON_Rad, &Follow,&Distance_Target,&Angle_Target,htim1,htim3,htim4);
 80007e0:	f107 060b 	add.w	r6, r7, #11
 80007e4:	f107 050c 	add.w	r5, r7, #12
 80007e8:	f107 040d 	add.w	r4, r7, #13
 80007ec:	4a18      	ldr	r2, [pc, #96]	@ (8000850 <main+0x1b0>)
 80007ee:	ab28      	add	r3, sp, #160	@ 0xa0
 80007f0:	4611      	mov	r1, r2
 80007f2:	224c      	movs	r2, #76	@ 0x4c
 80007f4:	4618      	mov	r0, r3
 80007f6:	f007 fd3e 	bl	8008276 <memcpy>
 80007fa:	4a14      	ldr	r2, [pc, #80]	@ (800084c <main+0x1ac>)
 80007fc:	ab15      	add	r3, sp, #84	@ 0x54
 80007fe:	4611      	mov	r1, r2
 8000800:	224c      	movs	r2, #76	@ 0x4c
 8000802:	4618      	mov	r0, r3
 8000804:	f007 fd37 	bl	8008276 <memcpy>
 8000808:	4a0e      	ldr	r2, [pc, #56]	@ (8000844 <main+0x1a4>)
 800080a:	ab02      	add	r3, sp, #8
 800080c:	4611      	mov	r1, r2
 800080e:	224c      	movs	r2, #76	@ 0x4c
 8000810:	4618      	mov	r0, r3
 8000812:	f007 fd30 	bl	8008276 <memcpy>
 8000816:	463b      	mov	r3, r7
 8000818:	9301      	str	r3, [sp, #4]
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	4633      	mov	r3, r6
 8000820:	462a      	mov	r2, r5
 8000822:	490c      	ldr	r1, [pc, #48]	@ (8000854 <main+0x1b4>)
 8000824:	4620      	mov	r0, r4
 8000826:	f001 fcaf 	bl	8002188 <task6_run>
	  	  task = 1; //Do not go back to init
 800082a:	2301      	movs	r3, #1
 800082c:	75fb      	strb	r3, [r7, #23]
	  	  break;
 800082e:	bf00      	nop
 8000830:	e7b0      	b.n	8000794 <main+0xf4>
	  switch(task){
 8000832:	e7af      	b.n	8000794 <main+0xf4>
 8000834:	20000430 	.word	0x20000430
 8000838:	20000084 	.word	0x20000084
 800083c:	200000e8 	.word	0x200000e8
 8000840:	2000014c 	.word	0x2000014c
 8000844:	20000268 	.word	0x20000268
 8000848:	48000400 	.word	0x48000400
 800084c:	20000300 	.word	0x20000300
 8000850:	2000034c 	.word	0x2000034c
 8000854:	20000564 	.word	0x20000564

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b096      	sub	sp, #88	@ 0x58
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2244      	movs	r2, #68	@ 0x44
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f007 fc89 	bl	800817e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	463b      	mov	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800087a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800087e:	f003 fbbb 	bl	8003ff8 <HAL_PWREx_ControlVoltageScaling>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000888:	f000 fef6 	bl	8001678 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800088c:	2301      	movs	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000890:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000894:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089a:	2303      	movs	r3, #3
 800089c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 800089e:	2305      	movs	r3, #5
 80008a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 80008a2:	2320      	movs	r3, #32
 80008a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008a6:	2307      	movs	r3, #7
 80008a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4618      	mov	r0, r3
 80008b8:	f003 fbf4 	bl	80040a4 <HAL_RCC_OscConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008c2:	f000 fed9 	bl	8001678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c6:	230f      	movs	r3, #15
 80008c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ca:	2303      	movs	r3, #3
 80008cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008da:	463b      	mov	r3, r7
 80008dc:	2104      	movs	r1, #4
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 ffbc 	bl	800485c <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008ea:	f000 fec5 	bl	8001678 <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	3758      	adds	r7, #88	@ 0x58
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b0a2      	sub	sp, #136	@ 0x88
 80008fa:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2284      	movs	r2, #132	@ 0x84
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f007 fc3b 	bl	800817e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000908:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800090c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800090e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000912:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000914:	2303      	movs	r3, #3
 8000916:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000918:	2305      	movs	r3, #5
 800091a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800091c:	2318      	movs	r3, #24
 800091e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000920:	2307      	movs	r3, #7
 8000922:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000924:	2302      	movs	r3, #2
 8000926:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000928:	2302      	movs	r3, #2
 800092a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800092c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000930:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	4618      	mov	r0, r3
 8000936:	f004 f9b5 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000940:	f000 fe9a 	bl	8001678 <Error_Handler>
  }
}
 8000944:	bf00      	nop
 8000946:	3788      	adds	r7, #136	@ 0x88
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	@ 0x28
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800096e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a2c <MX_ADC1_Init+0xe0>)
 8000970:	4a2f      	ldr	r2, [pc, #188]	@ (8000a30 <MX_ADC1_Init+0xe4>)
 8000972:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000974:	4b2d      	ldr	r3, [pc, #180]	@ (8000a2c <MX_ADC1_Init+0xe0>)
 8000976:	2200      	movs	r2, #0
 8000978:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800097a:	4b2c      	ldr	r3, [pc, #176]	@ (8000a2c <MX_ADC1_Init+0xe0>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000980:	4b2a      	ldr	r3, [pc, #168]	@ (8000a2c <MX_ADC1_Init+0xe0>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000986:	4b29      	ldr	r3, [pc, #164]	@ (8000a2c <MX_ADC1_Init+0xe0>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800098c:	4b27      	ldr	r3, [pc, #156]	@ (8000a2c <MX_ADC1_Init+0xe0>)
 800098e:	2204      	movs	r2, #4
 8000990:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000992:	4b26      	ldr	r3, [pc, #152]	@ (8000a2c <MX_ADC1_Init+0xe0>)
 8000994:	2200      	movs	r2, #0
 8000996:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000998:	4b24      	ldr	r3, [pc, #144]	@ (8000a2c <MX_ADC1_Init+0xe0>)
 800099a:	2200      	movs	r2, #0
 800099c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800099e:	4b23      	ldr	r3, [pc, #140]	@ (8000a2c <MX_ADC1_Init+0xe0>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009a4:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <MX_ADC1_Init+0xe0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ac:	4b1f      	ldr	r3, [pc, #124]	@ (8000a2c <MX_ADC1_Init+0xe0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <MX_ADC1_Init+0xe0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009b8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a2c <MX_ADC1_Init+0xe0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <MX_ADC1_Init+0xe0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009c6:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <MX_ADC1_Init+0xe0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ce:	4817      	ldr	r0, [pc, #92]	@ (8000a2c <MX_ADC1_Init+0xe0>)
 80009d0:	f001 ffa6 	bl	8002920 <HAL_ADC_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80009da:	f000 fe4d 	bl	8001678 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4810      	ldr	r0, [pc, #64]	@ (8000a2c <MX_ADC1_Init+0xe0>)
 80009ea:	f002 fe41 	bl	8003670 <HAL_ADCEx_MultiModeConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009f4:	f000 fe40 	bl	8001678 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_ADC1_Init+0xe8>)
 80009fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009fc:	2306      	movs	r3, #6
 80009fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a04:	237f      	movs	r3, #127	@ 0x7f
 8000a06:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_ADC1_Init+0xe0>)
 8000a16:	f002 f98d 	bl	8002d34 <HAL_ADC_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000a20:	f000 fe2a 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	@ 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000084 	.word	0x20000084
 8000a30:	50040000 	.word	0x50040000
 8000a34:	04300002 	.word	0x04300002

08000a38 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a3e:	463b      	mov	r3, r7
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
 8000a4c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a4e:	4b30      	ldr	r3, [pc, #192]	@ (8000b10 <MX_ADC2_Init+0xd8>)
 8000a50:	4a30      	ldr	r2, [pc, #192]	@ (8000b14 <MX_ADC2_Init+0xdc>)
 8000a52:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a54:	4b2e      	ldr	r3, [pc, #184]	@ (8000b10 <MX_ADC2_Init+0xd8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b10 <MX_ADC2_Init+0xd8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a60:	4b2b      	ldr	r3, [pc, #172]	@ (8000b10 <MX_ADC2_Init+0xd8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a66:	4b2a      	ldr	r3, [pc, #168]	@ (8000b10 <MX_ADC2_Init+0xd8>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a6c:	4b28      	ldr	r3, [pc, #160]	@ (8000b10 <MX_ADC2_Init+0xd8>)
 8000a6e:	2204      	movs	r2, #4
 8000a70:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a72:	4b27      	ldr	r3, [pc, #156]	@ (8000b10 <MX_ADC2_Init+0xd8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a78:	4b25      	ldr	r3, [pc, #148]	@ (8000b10 <MX_ADC2_Init+0xd8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 2;
 8000a7e:	4b24      	ldr	r3, [pc, #144]	@ (8000b10 <MX_ADC2_Init+0xd8>)
 8000a80:	2202      	movs	r2, #2
 8000a82:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a84:	4b22      	ldr	r3, [pc, #136]	@ (8000b10 <MX_ADC2_Init+0xd8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a8c:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <MX_ADC2_Init+0xd8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <MX_ADC2_Init+0xd8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <MX_ADC2_Init+0xd8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b10 <MX_ADC2_Init+0xd8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b10 <MX_ADC2_Init+0xd8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000aae:	4818      	ldr	r0, [pc, #96]	@ (8000b10 <MX_ADC2_Init+0xd8>)
 8000ab0:	f001 ff36 	bl	8002920 <HAL_ADC_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000aba:	f000 fddd 	bl	8001678 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000abe:	4b16      	ldr	r3, [pc, #88]	@ (8000b18 <MX_ADC2_Init+0xe0>)
 8000ac0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ac2:	2306      	movs	r3, #6
 8000ac4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aca:	237f      	movs	r3, #127	@ 0x7f
 8000acc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480d      	ldr	r0, [pc, #52]	@ (8000b10 <MX_ADC2_Init+0xd8>)
 8000adc:	f002 f92a 	bl	8002d34 <HAL_ADC_ConfigChannel>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000ae6:	f000 fdc7 	bl	8001678 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000aea:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <MX_ADC2_Init+0xe4>)
 8000aec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000aee:	230c      	movs	r3, #12
 8000af0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000af2:	463b      	mov	r3, r7
 8000af4:	4619      	mov	r1, r3
 8000af6:	4806      	ldr	r0, [pc, #24]	@ (8000b10 <MX_ADC2_Init+0xd8>)
 8000af8:	f002 f91c 	bl	8002d34 <HAL_ADC_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8000b02:	f000 fdb9 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200000e8 	.word	0x200000e8
 8000b14:	50040100 	.word	0x50040100
 8000b18:	08600004 	.word	0x08600004
 8000b1c:	3ef08000 	.word	0x3ef08000

08000b20 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b26:	463b      	mov	r3, r7
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
 8000b34:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b36:	4b29      	ldr	r3, [pc, #164]	@ (8000bdc <MX_ADC3_Init+0xbc>)
 8000b38:	4a29      	ldr	r2, [pc, #164]	@ (8000be0 <MX_ADC3_Init+0xc0>)
 8000b3a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b3c:	4b27      	ldr	r3, [pc, #156]	@ (8000bdc <MX_ADC3_Init+0xbc>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b42:	4b26      	ldr	r3, [pc, #152]	@ (8000bdc <MX_ADC3_Init+0xbc>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b48:	4b24      	ldr	r3, [pc, #144]	@ (8000bdc <MX_ADC3_Init+0xbc>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b4e:	4b23      	ldr	r3, [pc, #140]	@ (8000bdc <MX_ADC3_Init+0xbc>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b54:	4b21      	ldr	r3, [pc, #132]	@ (8000bdc <MX_ADC3_Init+0xbc>)
 8000b56:	2204      	movs	r2, #4
 8000b58:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b5a:	4b20      	ldr	r3, [pc, #128]	@ (8000bdc <MX_ADC3_Init+0xbc>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b60:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <MX_ADC3_Init+0xbc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000b66:	4b1d      	ldr	r3, [pc, #116]	@ (8000bdc <MX_ADC3_Init+0xbc>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <MX_ADC3_Init+0xbc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b74:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <MX_ADC3_Init+0xbc>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b7a:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <MX_ADC3_Init+0xbc>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b80:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <MX_ADC3_Init+0xbc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <MX_ADC3_Init+0xbc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <MX_ADC3_Init+0xbc>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b96:	4811      	ldr	r0, [pc, #68]	@ (8000bdc <MX_ADC3_Init+0xbc>)
 8000b98:	f001 fec2 	bl	8002920 <HAL_ADC_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000ba2:	f000 fd69 	bl	8001678 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <MX_ADC3_Init+0xc4>)
 8000ba8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000baa:	2306      	movs	r3, #6
 8000bac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bb2:	237f      	movs	r3, #127	@ 0x7f
 8000bb4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	@ (8000bdc <MX_ADC3_Init+0xbc>)
 8000bc4:	f002 f8b6 	bl	8002d34 <HAL_ADC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000bce:	f000 fd53 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000014c 	.word	0x2000014c
 8000be0:	50040200 	.word	0x50040200
 8000be4:	0c900008 	.word	0x0c900008

08000be8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	@ (8000c5c <MX_I2C2_Init+0x74>)
 8000bee:	4a1c      	ldr	r2, [pc, #112]	@ (8000c60 <MX_I2C2_Init+0x78>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <MX_I2C2_Init+0x74>)
 8000bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c64 <MX_I2C2_Init+0x7c>)
 8000bf6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <MX_I2C2_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <MX_I2C2_Init+0x74>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c04:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <MX_I2C2_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_I2C2_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <MX_I2C2_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <MX_I2C2_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <MX_I2C2_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c22:	480e      	ldr	r0, [pc, #56]	@ (8000c5c <MX_I2C2_Init+0x74>)
 8000c24:	f003 f8a8 	bl	8003d78 <HAL_I2C_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c2e:	f000 fd23 	bl	8001678 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4809      	ldr	r0, [pc, #36]	@ (8000c5c <MX_I2C2_Init+0x74>)
 8000c36:	f003 f93a 	bl	8003eae <HAL_I2CEx_ConfigAnalogFilter>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c40:	f000 fd1a 	bl	8001678 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c44:	2100      	movs	r1, #0
 8000c46:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <MX_I2C2_Init+0x74>)
 8000c48:	f003 f97c 	bl	8003f44 <HAL_I2CEx_ConfigDigitalFilter>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c52:	f000 fd11 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200001b0 	.word	0x200001b0
 8000c60:	40005800 	.word	0x40005800
 8000c64:	10909cec 	.word	0x10909cec

08000c68 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <MX_SPI3_Init+0x74>)
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce0 <MX_SPI3_Init+0x78>)
 8000c70:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c72:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <MX_SPI3_Init+0x74>)
 8000c74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c78:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <MX_SPI3_Init+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c80:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <MX_SPI3_Init+0x74>)
 8000c82:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c86:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <MX_SPI3_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <MX_SPI3_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <MX_SPI3_Init+0x74>)
 8000c96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c9a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <MX_SPI3_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <MX_SPI3_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <MX_SPI3_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <MX_SPI3_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <MX_SPI3_Init+0x74>)
 8000cb6:	2207      	movs	r2, #7
 8000cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <MX_SPI3_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <MX_SPI3_Init+0x74>)
 8000cc2:	2208      	movs	r2, #8
 8000cc4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <MX_SPI3_Init+0x74>)
 8000cc8:	f004 fc78 	bl	80055bc <HAL_SPI_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000cd2:	f000 fcd1 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000204 	.word	0x20000204
 8000ce0:	40003c00 	.word	0x40003c00

08000ce4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b09a      	sub	sp, #104	@ 0x68
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]
 8000d16:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	222c      	movs	r2, #44	@ 0x2c
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f007 fa2d 	bl	800817e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d24:	4b68      	ldr	r3, [pc, #416]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000d26:	4a69      	ldr	r2, [pc, #420]	@ (8000ecc <MX_TIM1_Init+0x1e8>)
 8000d28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d2a:	4b67      	ldr	r3, [pc, #412]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d30:	4b65      	ldr	r3, [pc, #404]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8000d36:	4b64      	ldr	r3, [pc, #400]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000d38:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000d3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3e:	4b62      	ldr	r3, [pc, #392]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d44:	4b60      	ldr	r3, [pc, #384]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4a:	4b5f      	ldr	r3, [pc, #380]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d50:	485d      	ldr	r0, [pc, #372]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000d52:	f004 fcd6 	bl	8005702 <HAL_TIM_Base_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d5c:	f000 fc8c 	bl	8001678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d64:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d66:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4856      	ldr	r0, [pc, #344]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000d6e:	f005 fc25 	bl	80065bc <HAL_TIM_ConfigClockSource>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d78:	f000 fc7e 	bl	8001678 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d7c:	4852      	ldr	r0, [pc, #328]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000d7e:	f004 fd17 	bl	80057b0 <HAL_TIM_PWM_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000d88:	f000 fc76 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d90:	2300      	movs	r3, #0
 8000d92:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d98:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	484a      	ldr	r0, [pc, #296]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000da0:	f006 fa96 	bl	80072d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000daa:	f000 fc65 	bl	8001678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dae:	2360      	movs	r3, #96	@ 0x60
 8000db0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db6:	2300      	movs	r3, #0
 8000db8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dce:	2200      	movs	r2, #0
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	483d      	ldr	r0, [pc, #244]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000dd4:	f005 fade 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000dde:	f000 fc4b 	bl	8001678 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8000de2:	4b39      	ldr	r3, [pc, #228]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	699a      	ldr	r2, [r3, #24]
 8000de8:	4b37      	ldr	r3, [pc, #220]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f022 0208 	bic.w	r2, r2, #8
 8000df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000df2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000df6:	2204      	movs	r2, #4
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4833      	ldr	r0, [pc, #204]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000dfc:	f005 faca 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000e06:	f000 fc37 	bl	8001678 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8000e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	699a      	ldr	r2, [r3, #24]
 8000e10:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e18:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 29999;
 8000e1a:	f247 532f 	movw	r3, #29999	@ 0x752f
 8000e1e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e20:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e24:	2208      	movs	r2, #8
 8000e26:	4619      	mov	r1, r3
 8000e28:	4827      	ldr	r0, [pc, #156]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000e2a:	f005 fab3 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 8000e34:	f000 fc20 	bl	8001678 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 8000e38:	4b23      	ldr	r3, [pc, #140]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	69da      	ldr	r2, [r3, #28]
 8000e3e:	4b22      	ldr	r3, [pc, #136]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 0208 	bic.w	r2, r2, #8
 8000e46:	61da      	str	r2, [r3, #28]
  sConfigOC.Pulse = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e50:	220c      	movs	r2, #12
 8000e52:	4619      	mov	r1, r3
 8000e54:	481c      	ldr	r0, [pc, #112]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000e56:	f005 fa9d 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM1_Init+0x180>
  {
    Error_Handler();
 8000e60:	f000 fc0a 	bl	8001678 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8000e64:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	69da      	ldr	r2, [r3, #28]
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e72:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4807      	ldr	r0, [pc, #28]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000eaa:	f006 fa99 	bl	80073e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM1_Init+0x1d4>
  {
    Error_Handler();
 8000eb4:	f000 fbe0 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000eb8:	4803      	ldr	r0, [pc, #12]	@ (8000ec8 <MX_TIM1_Init+0x1e4>)
 8000eba:	f000 ffcb 	bl	8001e54 <HAL_TIM_MspPostInit>

}
 8000ebe:	bf00      	nop
 8000ec0:	3768      	adds	r7, #104	@ 0x68
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000268 	.word	0x20000268
 8000ecc:	40012c00 	.word	0x40012c00

08000ed0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08c      	sub	sp, #48	@ 0x30
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	2224      	movs	r2, #36	@ 0x24
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f007 f94d 	bl	800817e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eee:	4b21      	ldr	r3, [pc, #132]	@ (8000f74 <MX_TIM2_Init+0xa4>)
 8000ef0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ef4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f74 <MX_TIM2_Init+0xa4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <MX_TIM2_Init+0xa4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <MX_TIM2_Init+0xa4>)
 8000f04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <MX_TIM2_Init+0xa4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <MX_TIM2_Init+0xa4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f16:	2301      	movs	r3, #1
 8000f18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480c      	ldr	r0, [pc, #48]	@ (8000f74 <MX_TIM2_Init+0xa4>)
 8000f42:	f004 ff35 	bl	8005db0 <HAL_TIM_Encoder_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000f4c:	f000 fb94 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f50:	2300      	movs	r3, #0
 8000f52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_TIM2_Init+0xa4>)
 8000f5e:	f006 f9b7 	bl	80072d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000f68:	f000 fb86 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	3730      	adds	r7, #48	@ 0x30
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200002b4 	.word	0x200002b4

08000f78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08c      	sub	sp, #48	@ 0x30
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f7e:	f107 030c 	add.w	r3, r7, #12
 8000f82:	2224      	movs	r2, #36	@ 0x24
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f007 f8f9 	bl	800817e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f96:	4b21      	ldr	r3, [pc, #132]	@ (800101c <MX_TIM3_Init+0xa4>)
 8000f98:	4a21      	ldr	r2, [pc, #132]	@ (8001020 <MX_TIM3_Init+0xa8>)
 8000f9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800101c <MX_TIM3_Init+0xa4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <MX_TIM3_Init+0xa4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <MX_TIM3_Init+0xa4>)
 8000faa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <MX_TIM3_Init+0xa4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <MX_TIM3_Init+0xa4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480d      	ldr	r0, [pc, #52]	@ (800101c <MX_TIM3_Init+0xa4>)
 8000fe8:	f004 fee2 	bl	8005db0 <HAL_TIM_Encoder_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000ff2:	f000 fb41 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	4619      	mov	r1, r3
 8001002:	4806      	ldr	r0, [pc, #24]	@ (800101c <MX_TIM3_Init+0xa4>)
 8001004:	f006 f964 	bl	80072d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800100e:	f000 fb33 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	3730      	adds	r7, #48	@ 0x30
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000300 	.word	0x20000300
 8001020:	40000400 	.word	0x40000400

08001024 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	@ 0x30
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2224      	movs	r2, #36	@ 0x24
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f007 f8a3 	bl	800817e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	463b      	mov	r3, r7
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001042:	4b21      	ldr	r3, [pc, #132]	@ (80010c8 <MX_TIM4_Init+0xa4>)
 8001044:	4a21      	ldr	r2, [pc, #132]	@ (80010cc <MX_TIM4_Init+0xa8>)
 8001046:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001048:	4b1f      	ldr	r3, [pc, #124]	@ (80010c8 <MX_TIM4_Init+0xa4>)
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104e:	4b1e      	ldr	r3, [pc, #120]	@ (80010c8 <MX_TIM4_Init+0xa4>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001054:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <MX_TIM4_Init+0xa4>)
 8001056:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800105a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105c:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <MX_TIM4_Init+0xa4>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001062:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <MX_TIM4_Init+0xa4>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001068:	2301      	movs	r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001070:	2301      	movs	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001080:	2301      	movs	r3, #1
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4619      	mov	r1, r3
 8001092:	480d      	ldr	r0, [pc, #52]	@ (80010c8 <MX_TIM4_Init+0xa4>)
 8001094:	f004 fe8c 	bl	8005db0 <HAL_TIM_Encoder_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800109e:	f000 faeb 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	4619      	mov	r1, r3
 80010ae:	4806      	ldr	r0, [pc, #24]	@ (80010c8 <MX_TIM4_Init+0xa4>)
 80010b0:	f006 f90e 	bl	80072d0 <HAL_TIMEx_MasterConfigSynchronization>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80010ba:	f000 fadd 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	3730      	adds	r7, #48	@ 0x30
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000034c 	.word	0x2000034c
 80010cc:	40000800 	.word	0x40000800

080010d0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010ee:	4b26      	ldr	r3, [pc, #152]	@ (8001188 <MX_TIM5_Init+0xb8>)
 80010f0:	4a26      	ldr	r2, [pc, #152]	@ (800118c <MX_TIM5_Init+0xbc>)
 80010f2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80010f4:	4b24      	ldr	r3, [pc, #144]	@ (8001188 <MX_TIM5_Init+0xb8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fa:	4b23      	ldr	r3, [pc, #140]	@ (8001188 <MX_TIM5_Init+0xb8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001100:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <MX_TIM5_Init+0xb8>)
 8001102:	f04f 32ff 	mov.w	r2, #4294967295
 8001106:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001108:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <MX_TIM5_Init+0xb8>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110e:	4b1e      	ldr	r3, [pc, #120]	@ (8001188 <MX_TIM5_Init+0xb8>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001114:	481c      	ldr	r0, [pc, #112]	@ (8001188 <MX_TIM5_Init+0xb8>)
 8001116:	f004 fca9 	bl	8005a6c <HAL_TIM_IC_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001120:	f000 faaa 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4815      	ldr	r0, [pc, #84]	@ (8001188 <MX_TIM5_Init+0xb8>)
 8001134:	f006 f8cc 	bl	80072d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800113e:	f000 fa9b 	bl	8001678 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001146:	2301      	movs	r3, #1
 8001148:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2208      	movs	r2, #8
 8001156:	4619      	mov	r1, r3
 8001158:	480b      	ldr	r0, [pc, #44]	@ (8001188 <MX_TIM5_Init+0xb8>)
 800115a:	f005 f87f 	bl	800625c <HAL_TIM_IC_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001164:	f000 fa88 	bl	8001678 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	220c      	movs	r2, #12
 800116c:	4619      	mov	r1, r3
 800116e:	4806      	ldr	r0, [pc, #24]	@ (8001188 <MX_TIM5_Init+0xb8>)
 8001170:	f005 f874 	bl	800625c <HAL_TIM_IC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 800117a:	f000 fa7d 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000398 	.word	0x20000398
 800118c:	40000c00 	.word	0x40000c00

08001190 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b096      	sub	sp, #88	@ 0x58
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001196:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]
 80011b2:	615a      	str	r2, [r3, #20]
 80011b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	222c      	movs	r2, #44	@ 0x2c
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f006 ffde 	bl	800817e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011c2:	4b4b      	ldr	r3, [pc, #300]	@ (80012f0 <MX_TIM8_Init+0x160>)
 80011c4:	4a4b      	ldr	r2, [pc, #300]	@ (80012f4 <MX_TIM8_Init+0x164>)
 80011c6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80011c8:	4b49      	ldr	r3, [pc, #292]	@ (80012f0 <MX_TIM8_Init+0x160>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ce:	4b48      	ldr	r3, [pc, #288]	@ (80012f0 <MX_TIM8_Init+0x160>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 59999;
 80011d4:	4b46      	ldr	r3, [pc, #280]	@ (80012f0 <MX_TIM8_Init+0x160>)
 80011d6:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80011da:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011dc:	4b44      	ldr	r3, [pc, #272]	@ (80012f0 <MX_TIM8_Init+0x160>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011e2:	4b43      	ldr	r3, [pc, #268]	@ (80012f0 <MX_TIM8_Init+0x160>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e8:	4b41      	ldr	r3, [pc, #260]	@ (80012f0 <MX_TIM8_Init+0x160>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80011ee:	4840      	ldr	r0, [pc, #256]	@ (80012f0 <MX_TIM8_Init+0x160>)
 80011f0:	f004 fade 	bl	80057b0 <HAL_TIM_PWM_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80011fa:	f000 fa3d 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001202:	2300      	movs	r3, #0
 8001204:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800120a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800120e:	4619      	mov	r1, r3
 8001210:	4837      	ldr	r0, [pc, #220]	@ (80012f0 <MX_TIM8_Init+0x160>)
 8001212:	f006 f85d 	bl	80072d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800121c:	f000 fa2c 	bl	8001678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001220:	2360      	movs	r3, #96	@ 0x60
 8001222:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001228:	2300      	movs	r3, #0
 800122a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800122c:	2300      	movs	r3, #0
 800122e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800123c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001240:	2200      	movs	r2, #0
 8001242:	4619      	mov	r1, r3
 8001244:	482a      	ldr	r0, [pc, #168]	@ (80012f0 <MX_TIM8_Init+0x160>)
 8001246:	f005 f8a5 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001250:	f000 fa12 	bl	8001678 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001254:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001258:	2204      	movs	r2, #4
 800125a:	4619      	mov	r1, r3
 800125c:	4824      	ldr	r0, [pc, #144]	@ (80012f0 <MX_TIM8_Init+0x160>)
 800125e:	f005 f899 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8001268:	f000 fa06 	bl	8001678 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800126c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001270:	2208      	movs	r2, #8
 8001272:	4619      	mov	r1, r3
 8001274:	481e      	ldr	r0, [pc, #120]	@ (80012f0 <MX_TIM8_Init+0x160>)
 8001276:	f005 f88d 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8001280:	f000 f9fa 	bl	8001678 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001284:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001288:	220c      	movs	r2, #12
 800128a:	4619      	mov	r1, r3
 800128c:	4818      	ldr	r0, [pc, #96]	@ (80012f0 <MX_TIM8_Init+0x160>)
 800128e:	f005 f881 	bl	8006394 <HAL_TIM_PWM_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8001298:	f000 f9ee 	bl	8001678 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4807      	ldr	r0, [pc, #28]	@ (80012f0 <MX_TIM8_Init+0x160>)
 80012d2:	f006 f885 	bl	80073e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM8_Init+0x150>
  {
    Error_Handler();
 80012dc:	f000 f9cc 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80012e0:	4803      	ldr	r0, [pc, #12]	@ (80012f0 <MX_TIM8_Init+0x160>)
 80012e2:	f000 fdb7 	bl	8001e54 <HAL_TIM_MspPostInit>

}
 80012e6:	bf00      	nop
 80012e8:	3758      	adds	r7, #88	@ 0x58
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200003e4 	.word	0x200003e4
 80012f4:	40013400 	.word	0x40013400

080012f8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001316:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <MX_TIM15_Init+0xa8>)
 8001318:	4a22      	ldr	r2, [pc, #136]	@ (80013a4 <MX_TIM15_Init+0xac>)
 800131a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 79;
 800131c:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <MX_TIM15_Init+0xa8>)
 800131e:	224f      	movs	r2, #79	@ 0x4f
 8001320:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <MX_TIM15_Init+0xa8>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001328:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <MX_TIM15_Init+0xa8>)
 800132a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800132e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <MX_TIM15_Init+0xa8>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001336:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <MX_TIM15_Init+0xa8>)
 8001338:	2200      	movs	r2, #0
 800133a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800133c:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <MX_TIM15_Init+0xa8>)
 800133e:	2280      	movs	r2, #128	@ 0x80
 8001340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001342:	4817      	ldr	r0, [pc, #92]	@ (80013a0 <MX_TIM15_Init+0xa8>)
 8001344:	f004 fb92 	bl	8005a6c <HAL_TIM_IC_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800134e:	f000 f993 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	480f      	ldr	r0, [pc, #60]	@ (80013a0 <MX_TIM15_Init+0xa8>)
 8001362:	f005 ffb5 	bl	80072d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800136c:	f000 f984 	bl	8001678 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001370:	230a      	movs	r3, #10
 8001372:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001374:	2301      	movs	r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	2200      	movs	r2, #0
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	@ (80013a0 <MX_TIM15_Init+0xa8>)
 8001388:	f004 ff68 	bl	800625c <HAL_TIM_IC_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 8001392:	f000 f971 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	3720      	adds	r7, #32
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000430 	.word	0x20000430
 80013a4:	40014000 	.word	0x40014000

080013a8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_TIM17_Init+0x44>)
 80013ae:	4a10      	ldr	r2, [pc, #64]	@ (80013f0 <MX_TIM17_Init+0x48>)
 80013b0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 79;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_TIM17_Init+0x44>)
 80013b4:	224f      	movs	r2, #79	@ 0x4f
 80013b6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_TIM17_Init+0x44>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <MX_TIM17_Init+0x44>)
 80013c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013c4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c6:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_TIM17_Init+0x44>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80013cc:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <MX_TIM17_Init+0x44>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d2:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_TIM17_Init+0x44>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	@ (80013ec <MX_TIM17_Init+0x44>)
 80013da:	f004 f992 	bl	8005702 <HAL_TIM_Base_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80013e4:	f000 f948 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000047c 	.word	0x2000047c
 80013f0:	40014800 	.word	0x40014800

080013f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013f8:	4b14      	ldr	r3, [pc, #80]	@ (800144c <MX_USART3_UART_Init+0x58>)
 80013fa:	4a15      	ldr	r2, [pc, #84]	@ (8001450 <MX_USART3_UART_Init+0x5c>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013fe:	4b13      	ldr	r3, [pc, #76]	@ (800144c <MX_USART3_UART_Init+0x58>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b11      	ldr	r3, [pc, #68]	@ (800144c <MX_USART3_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <MX_USART3_UART_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001412:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <MX_USART3_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <MX_USART3_UART_Init+0x58>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <MX_USART3_UART_Init+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b09      	ldr	r3, [pc, #36]	@ (800144c <MX_USART3_UART_Init+0x58>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800142a:	4b08      	ldr	r3, [pc, #32]	@ (800144c <MX_USART3_UART_Init+0x58>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <MX_USART3_UART_Init+0x58>)
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	@ (800144c <MX_USART3_UART_Init+0x58>)
 8001438:	f006 f86e 	bl	8007518 <HAL_UART_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001442:	f000 f919 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200004c8 	.word	0x200004c8
 8001450:	40004800 	.word	0x40004800

08001454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	@ 0x28
 8001458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	4b39      	ldr	r3, [pc, #228]	@ (8001550 <MX_GPIO_Init+0xfc>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	4a38      	ldr	r2, [pc, #224]	@ (8001550 <MX_GPIO_Init+0xfc>)
 8001470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001476:	4b36      	ldr	r3, [pc, #216]	@ (8001550 <MX_GPIO_Init+0xfc>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001482:	4b33      	ldr	r3, [pc, #204]	@ (8001550 <MX_GPIO_Init+0xfc>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	4a32      	ldr	r2, [pc, #200]	@ (8001550 <MX_GPIO_Init+0xfc>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148e:	4b30      	ldr	r3, [pc, #192]	@ (8001550 <MX_GPIO_Init+0xfc>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b2d      	ldr	r3, [pc, #180]	@ (8001550 <MX_GPIO_Init+0xfc>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	4a2c      	ldr	r2, [pc, #176]	@ (8001550 <MX_GPIO_Init+0xfc>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001550 <MX_GPIO_Init+0xfc>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	4b27      	ldr	r3, [pc, #156]	@ (8001550 <MX_GPIO_Init+0xfc>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	4a26      	ldr	r2, [pc, #152]	@ (8001550 <MX_GPIO_Init+0xfc>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014be:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <MX_GPIO_Init+0xfc>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2108      	movs	r1, #8
 80014ce:	4821      	ldr	r0, [pc, #132]	@ (8001554 <MX_GPIO_Init+0x100>)
 80014d0:	f002 fc3a 	bl	8003d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 80014da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014de:	f002 fc33 	bl	8003d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f243 0106 	movw	r1, #12294	@ 0x3006
 80014e8:	481b      	ldr	r0, [pc, #108]	@ (8001558 <MX_GPIO_Init+0x104>)
 80014ea:	f002 fc2d 	bl	8003d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014ee:	2308      	movs	r3, #8
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	4813      	ldr	r0, [pc, #76]	@ (8001554 <MX_GPIO_Init+0x100>)
 8001506:	f002 fa75 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 800150a:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 800150e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001526:	f002 fa65 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13;
 800152a:	f243 0306 	movw	r3, #12294	@ 0x3006
 800152e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4805      	ldr	r0, [pc, #20]	@ (8001558 <MX_GPIO_Init+0x104>)
 8001544:	f002 fa56 	bl	80039f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	@ 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40021000 	.word	0x40021000
 8001554:	48000800 	.word	0x48000800
 8001558:	48000400 	.word	0x48000400

0800155c <HAL_TIM_IC_CaptureCallback>:
}



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) //Function from https://controllerstech.com/input-capture-in-stm32/
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7f1b      	ldrb	r3, [r3, #28]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d156      	bne.n	800161a <HAL_TIM_IC_CaptureCallback+0xbe>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 800156c:	4b2d      	ldr	r3, [pc, #180]	@ (8001624 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10b      	bne.n	800158c <HAL_TIM_IC_CaptureCallback+0x30>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001574:	2100      	movs	r1, #0
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f005 f8ea 	bl	8006750 <HAL_TIM_ReadCapturedValue>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	4b29      	ldr	r3, [pc, #164]	@ (8001628 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001582:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001584:	4b27      	ldr	r3, [pc, #156]	@ (8001624 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
 800158a:	e046      	b.n	800161a <HAL_TIM_IC_CaptureCallback+0xbe>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 800158c:	2100      	movs	r1, #0
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f005 f8de 	bl	8006750 <HAL_TIM_ReadCapturedValue>
 8001594:	4603      	mov	r3, r0
 8001596:	461a      	mov	r2, r3
 8001598:	4b24      	ldr	r3, [pc, #144]	@ (800162c <HAL_TIM_IC_CaptureCallback+0xd0>)
 800159a:	601a      	str	r2, [r3, #0]
			if (IC_Val2 > IC_Val1)
 800159c:	4b23      	ldr	r3, [pc, #140]	@ (800162c <HAL_TIM_IC_CaptureCallback+0xd0>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b21      	ldr	r3, [pc, #132]	@ (8001628 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dd07      	ble.n	80015b8 <HAL_TIM_IC_CaptureCallback+0x5c>
				Difference = IC_Val2-IC_Val1;
 80015a8:	4b20      	ldr	r3, [pc, #128]	@ (800162c <HAL_TIM_IC_CaptureCallback+0xd0>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001628 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001630 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e00f      	b.n	80015d8 <HAL_TIM_IC_CaptureCallback+0x7c>
			else if (IC_Val1 > IC_Val2)
 80015b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <HAL_TIM_IC_CaptureCallback+0xd0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dd09      	ble.n	80015d8 <HAL_TIM_IC_CaptureCallback+0x7c>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80015c4:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 80015cc:	33ff      	adds	r3, #255	@ 0xff
 80015ce:	4a17      	ldr	r2, [pc, #92]	@ (800162c <HAL_TIM_IC_CaptureCallback+0xd0>)
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a16      	ldr	r2, [pc, #88]	@ (8001630 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80015d6:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 80015d8:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80015da:	60fb      	str	r3, [r7, #12]
			float mFactor = 1000000/refClock;
 80015dc:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001638 <HAL_TIM_IC_CaptureCallback+0xdc>
 80015e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80015e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015e8:	edc7 7a02 	vstr	s15, [r7, #8]
			usWidth = Difference*mFactor;
 80015ec:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80015fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001600:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001604:	ee17 2a90 	vmov	r2, s15
 8001608:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <HAL_TIM_IC_CaptureCallback+0xe0>)
 800160a:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2200      	movs	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	@ 0x24
			Is_First_Captured = 0; // set it back to false
 8001614:	4b03      	ldr	r3, [pc, #12]	@ (8001624 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000560 	.word	0x20000560
 8001628:	20000554 	.word	0x20000554
 800162c:	20000558 	.word	0x20000558
 8001630:	2000055c 	.word	0x2000055c
 8001634:	49742400 	.word	0x49742400
 8001638:	49742400 	.word	0x49742400
 800163c:	20000550 	.word	0x20000550

08001640 <_write>:

int _write(int file, char *ptr, int len)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
    for (int DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	e009      	b.n	8001666 <_write+0x26>
        ITM_SendChar(*ptr++);
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	60ba      	str	r2, [r7, #8]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe fff8 	bl	8000650 <ITM_SendChar>
    for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	3301      	adds	r3, #1
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	429a      	cmp	r2, r3
 800166c:	dbf1      	blt.n	8001652 <_write+0x12>

    return len;
 800166e:	687b      	ldr	r3, [r7, #4]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <set_duty>:
 * @param[in] p_mot Pointer to the motor object structure.
 * @param[in] level Desired duty cycle percentage (-100 to 100).
 * @details This function constrains the level to the valid range and sets the
 * 			PWM duty cycle by updating the compare register pointer directly.
 */
void set_duty(motor_t* p_mot, float level) {
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	ed87 0a00 	vstr	s0, [r7]
	/// Constrain level to valid range
	if (level > 100) level = 100;
 8001694:	edd7 7a00 	vldr	s15, [r7]
 8001698:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001754 <set_duty+0xcc>
 800169c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a4:	dd01      	ble.n	80016aa <set_duty+0x22>
 80016a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001758 <set_duty+0xd0>)
 80016a8:	603b      	str	r3, [r7, #0]
    if (level < -100) level = -100;
 80016aa:	edd7 7a00 	vldr	s15, [r7]
 80016ae:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800175c <set_duty+0xd4>
 80016b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ba:	d501      	bpl.n	80016c0 <set_duty+0x38>
 80016bc:	4b28      	ldr	r3, [pc, #160]	@ (8001760 <set_duty+0xd8>)
 80016be:	603b      	str	r3, [r7, #0]
	/// Initialize pulse width variables
    uint32_t pulse1 = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
    uint32_t pulse2 = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
    if(level > 0 ){
 80016c8:	edd7 7a00 	vldr	s15, [r7]
 80016cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d4:	dd13      	ble.n	80016fe <set_duty+0x76>
    	pulse2 = (uint32_t)((level * p_mot->Period) / 100);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016e2:	edd7 7a00 	vldr	s15, [r7]
 80016e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ea:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8001754 <set_duty+0xcc>
 80016ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016f6:	ee17 3a90 	vmov	r3, s15
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	e01b      	b.n	8001736 <set_duty+0xae>
    }
    else if(level < 0){
 80016fe:	edd7 7a00 	vldr	s15, [r7]
 8001702:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170a:	d514      	bpl.n	8001736 <set_duty+0xae>
    	pulse1 = (uint32_t)((-level * p_mot->Period) / 100);
 800170c:	edd7 7a00 	vldr	s15, [r7]
 8001710:	eeb1 7a67 	vneg.f32	s14, s15
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001720:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001724:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001754 <set_duty+0xcc>
 8001728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001730:	ee17 3a90 	vmov	r3, s15
 8001734:	60fb      	str	r3, [r7, #12]
    }
    /// Set the PWM duty cycle by updating the compare register
    *(p_mot->chA) = pulse1;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	601a      	str	r2, [r3, #0]
    *(p_mot->chB) = pulse2;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	601a      	str	r2, [r3, #0]

}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	42c80000 	.word	0x42c80000
 8001758:	42c80000 	.word	0x42c80000
 800175c:	c2c80000 	.word	0xc2c80000
 8001760:	c2c80000 	.word	0xc2c80000

08001764 <run_control>:
 * @param[in] controller A pointer to a structure (controller_t) containing controller gains and relevant information
 * @param[in] motor A pointer to a structure (motor_t) containing motor data
 * @param[in] encoder A pointer to a structure (encoder_t) containing encoder-related data such as position, velocity, and the last counter value.
 * @details This function runs the motor controller loop that alters motor duty cycle to reach a position or velocity setpoint
 */
void run_control(controller_t *controller, motor_t *motor, encoder_t *encoder) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
	// Read the current position and velocity from the encoder
	read_encoder(encoder);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7fe fef5 	bl	8000560 <read_encoder>

	// Calculate the error
	int32_t error = controller->velocity_setpoint - encoder->velocity;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001780:	1a9b      	subs	r3, r3, r2
 8001782:	617b      	str	r3, [r7, #20]

	// Integral term calculation
	controller->esum += error;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	441a      	add	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	60da      	str	r2, [r3, #12]

	// Calculate the duty cycle
	float duty = controller->Pgain_velocity * error + controller->Igain_velocity * controller->esum;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	ed93 7a00 	vldr	s14, [r3]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	ee07 3a90 	vmov	s15, r3
 800179c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	ee07 3a90 	vmov	s15, r3
 80017b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017be:	edc7 7a04 	vstr	s15, [r7, #16]
	printf("Duty sent: %ld\n", (long)duty); // For debug
 80017c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80017c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ca:	ee17 1a90 	vmov	r1, s15
 80017ce:	4806      	ldr	r0, [pc, #24]	@ (80017e8 <run_control+0x84>)
 80017d0:	f006 fc80 	bl	80080d4 <iprintf>

	// Apply to the motor
	set_duty(motor, duty);
 80017d4:	ed97 0a04 	vldr	s0, [r7, #16]
 80017d8:	68b8      	ldr	r0, [r7, #8]
 80017da:	f7ff ff55 	bl	8001688 <set_duty>


}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	08008de4 	.word	0x08008de4

080017ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <HAL_MspInit+0x50>)
 80017f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017f6:	4a11      	ldr	r2, [pc, #68]	@ (800183c <HAL_MspInit+0x50>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80017fe:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <HAL_MspInit+0x50>)
 8001800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <HAL_MspInit+0x50>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180e:	4a0b      	ldr	r2, [pc, #44]	@ (800183c <HAL_MspInit+0x50>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001814:	6593      	str	r3, [r2, #88]	@ 0x58
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <HAL_MspInit+0x50>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	2005      	movs	r0, #5
 8001828:	f002 f8ad 	bl	8003986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800182c:	2005      	movs	r0, #5
 800182e:	f002 f8c6 	bl	80039be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000

08001840 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08e      	sub	sp, #56	@ 0x38
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a58      	ldr	r2, [pc, #352]	@ (80019c0 <HAL_ADC_MspInit+0x180>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d12d      	bne.n	80018be <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001862:	4b58      	ldr	r3, [pc, #352]	@ (80019c4 <HAL_ADC_MspInit+0x184>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	4a56      	ldr	r2, [pc, #344]	@ (80019c4 <HAL_ADC_MspInit+0x184>)
 800186a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800186c:	4b55      	ldr	r3, [pc, #340]	@ (80019c4 <HAL_ADC_MspInit+0x184>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d10b      	bne.n	800188c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001874:	4b54      	ldr	r3, [pc, #336]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001878:	4a53      	ldr	r2, [pc, #332]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 800187a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800187e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001880:	4b51      	ldr	r3, [pc, #324]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 8001882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001884:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001888:	623b      	str	r3, [r7, #32]
 800188a:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800188c:	4b4e      	ldr	r3, [pc, #312]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 800188e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001890:	4a4d      	ldr	r2, [pc, #308]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001898:	4b4b      	ldr	r3, [pc, #300]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 800189a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018a4:	2303      	movs	r3, #3
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a8:	2303      	movs	r3, #3
 80018aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b4:	4619      	mov	r1, r3
 80018b6:	4845      	ldr	r0, [pc, #276]	@ (80019cc <HAL_ADC_MspInit+0x18c>)
 80018b8:	f002 f89c 	bl	80039f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80018bc:	e07c      	b.n	80019b8 <HAL_ADC_MspInit+0x178>
  else if(hadc->Instance==ADC2)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a43      	ldr	r2, [pc, #268]	@ (80019d0 <HAL_ADC_MspInit+0x190>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d145      	bne.n	8001954 <HAL_ADC_MspInit+0x114>
    HAL_RCC_ADC_CLK_ENABLED++;
 80018c8:	4b3e      	ldr	r3, [pc, #248]	@ (80019c4 <HAL_ADC_MspInit+0x184>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	3301      	adds	r3, #1
 80018ce:	4a3d      	ldr	r2, [pc, #244]	@ (80019c4 <HAL_ADC_MspInit+0x184>)
 80018d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80018d2:	4b3c      	ldr	r3, [pc, #240]	@ (80019c4 <HAL_ADC_MspInit+0x184>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d10b      	bne.n	80018f2 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80018da:	4b3b      	ldr	r3, [pc, #236]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018de:	4a3a      	ldr	r2, [pc, #232]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 80018e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e6:	4b38      	ldr	r3, [pc, #224]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f2:	4b35      	ldr	r3, [pc, #212]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f6:	4a34      	ldr	r2, [pc, #208]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018fe:	4b32      	ldr	r3, [pc, #200]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	4b2f      	ldr	r3, [pc, #188]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190e:	4a2e      	ldr	r2, [pc, #184]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001916:	4b2c      	ldr	r3, [pc, #176]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001922:	2306      	movs	r3, #6
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001926:	2303      	movs	r3, #3
 8001928:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001932:	4619      	mov	r1, r3
 8001934:	4825      	ldr	r0, [pc, #148]	@ (80019cc <HAL_ADC_MspInit+0x18c>)
 8001936:	f002 f85d 	bl	80039f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800193a:	2301      	movs	r3, #1
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800193e:	230b      	movs	r3, #11
 8001940:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800194a:	4619      	mov	r1, r3
 800194c:	4821      	ldr	r0, [pc, #132]	@ (80019d4 <HAL_ADC_MspInit+0x194>)
 800194e:	f002 f851 	bl	80039f4 <HAL_GPIO_Init>
}
 8001952:	e031      	b.n	80019b8 <HAL_ADC_MspInit+0x178>
  else if(hadc->Instance==ADC3)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a1f      	ldr	r2, [pc, #124]	@ (80019d8 <HAL_ADC_MspInit+0x198>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d12c      	bne.n	80019b8 <HAL_ADC_MspInit+0x178>
    HAL_RCC_ADC_CLK_ENABLED++;
 800195e:	4b19      	ldr	r3, [pc, #100]	@ (80019c4 <HAL_ADC_MspInit+0x184>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3301      	adds	r3, #1
 8001964:	4a17      	ldr	r2, [pc, #92]	@ (80019c4 <HAL_ADC_MspInit+0x184>)
 8001966:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001968:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <HAL_ADC_MspInit+0x184>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d10b      	bne.n	8001988 <HAL_ADC_MspInit+0x148>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001970:	4b15      	ldr	r3, [pc, #84]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 8001972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001974:	4a14      	ldr	r2, [pc, #80]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 8001976:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800197a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800197c:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 800197e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001980:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001988:	4b0f      	ldr	r3, [pc, #60]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 800198a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198c:	4a0e      	ldr	r2, [pc, #56]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001994:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <HAL_ADC_MspInit+0x188>)
 8001996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019a0:	2304      	movs	r3, #4
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a4:	2303      	movs	r3, #3
 80019a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019b0:	4619      	mov	r1, r3
 80019b2:	4806      	ldr	r0, [pc, #24]	@ (80019cc <HAL_ADC_MspInit+0x18c>)
 80019b4:	f002 f81e 	bl	80039f4 <HAL_GPIO_Init>
}
 80019b8:	bf00      	nop
 80019ba:	3738      	adds	r7, #56	@ 0x38
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	50040000 	.word	0x50040000
 80019c4:	20000568 	.word	0x20000568
 80019c8:	40021000 	.word	0x40021000
 80019cc:	48000800 	.word	0x48000800
 80019d0:	50040100 	.word	0x50040100
 80019d4:	48000400 	.word	0x48000400
 80019d8:	50040200 	.word	0x50040200

080019dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b0aa      	sub	sp, #168	@ 0xa8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	2284      	movs	r2, #132	@ 0x84
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f006 fbbe 	bl	800817e <memset>
  if(hi2c->Instance==I2C2)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a21      	ldr	r2, [pc, #132]	@ (8001a8c <HAL_I2C_MspInit+0xb0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d13b      	bne.n	8001a84 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a0c:	2380      	movs	r3, #128	@ 0x80
 8001a0e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 f943 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a24:	f7ff fe28 	bl	8001678 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a28:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <HAL_I2C_MspInit+0xb4>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2c:	4a18      	ldr	r2, [pc, #96]	@ (8001a90 <HAL_I2C_MspInit+0xb4>)
 8001a2e:	f043 0302 	orr.w	r3, r3, #2
 8001a32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a34:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <HAL_I2C_MspInit+0xb4>)
 8001a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a40:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a44:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a48:	2312      	movs	r3, #18
 8001a4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a60:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a64:	4619      	mov	r1, r3
 8001a66:	480b      	ldr	r0, [pc, #44]	@ (8001a94 <HAL_I2C_MspInit+0xb8>)
 8001a68:	f001 ffc4 	bl	80039f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a6c:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <HAL_I2C_MspInit+0xb4>)
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a70:	4a07      	ldr	r2, [pc, #28]	@ (8001a90 <HAL_I2C_MspInit+0xb4>)
 8001a72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a76:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a78:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <HAL_I2C_MspInit+0xb4>)
 8001a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a84:	bf00      	nop
 8001a86:	37a8      	adds	r7, #168	@ 0xa8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40005800 	.word	0x40005800
 8001a90:	40021000 	.word	0x40021000
 8001a94:	48000400 	.word	0x48000400

08001a98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	@ 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a26      	ldr	r2, [pc, #152]	@ (8001b50 <HAL_SPI_MspInit+0xb8>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d145      	bne.n	8001b46 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001aba:	4b26      	ldr	r3, [pc, #152]	@ (8001b54 <HAL_SPI_MspInit+0xbc>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abe:	4a25      	ldr	r2, [pc, #148]	@ (8001b54 <HAL_SPI_MspInit+0xbc>)
 8001ac0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ac6:	4b23      	ldr	r3, [pc, #140]	@ (8001b54 <HAL_SPI_MspInit+0xbc>)
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	4b20      	ldr	r3, [pc, #128]	@ (8001b54 <HAL_SPI_MspInit+0xbc>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b54 <HAL_SPI_MspInit+0xbc>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ade:	4b1d      	ldr	r3, [pc, #116]	@ (8001b54 <HAL_SPI_MspInit+0xbc>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aea:	4b1a      	ldr	r3, [pc, #104]	@ (8001b54 <HAL_SPI_MspInit+0xbc>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	4a19      	ldr	r2, [pc, #100]	@ (8001b54 <HAL_SPI_MspInit+0xbc>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af6:	4b17      	ldr	r3, [pc, #92]	@ (8001b54 <HAL_SPI_MspInit+0xbc>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b02:	2310      	movs	r3, #16
 8001b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b12:	2306      	movs	r3, #6
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b20:	f001 ff68 	bl	80039f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b24:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b36:	2306      	movs	r3, #6
 8001b38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4805      	ldr	r0, [pc, #20]	@ (8001b58 <HAL_SPI_MspInit+0xc0>)
 8001b42:	f001 ff57 	bl	80039f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	@ 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40003c00 	.word	0x40003c00
 8001b54:	40021000 	.word	0x40021000
 8001b58:	48000800 	.word	0x48000800

08001b5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a16      	ldr	r2, [pc, #88]	@ (8001bc4 <HAL_TIM_Base_MspInit+0x68>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d114      	bne.n	8001b98 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b6e:	4b16      	ldr	r3, [pc, #88]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x6c>)
 8001b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b72:	4a15      	ldr	r2, [pc, #84]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x6c>)
 8001b74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b78:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b7a:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x6c>)
 8001b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2018      	movs	r0, #24
 8001b8c:	f001 fefb 	bl	8003986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001b90:	2018      	movs	r0, #24
 8001b92:	f001 ff14 	bl	80039be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001b96:	e010      	b.n	8001bba <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bcc <HAL_TIM_Base_MspInit+0x70>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d10b      	bne.n	8001bba <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001ba2:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x6c>)
 8001ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba6:	4a08      	ldr	r2, [pc, #32]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x6c>)
 8001ba8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x6c>)
 8001bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40012c00 	.word	0x40012c00
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40014800 	.word	0x40014800

08001bd0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08e      	sub	sp, #56	@ 0x38
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bf0:	d129      	bne.n	8001c46 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf2:	4b45      	ldr	r3, [pc, #276]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x138>)
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf6:	4a44      	ldr	r2, [pc, #272]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x138>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bfe:	4b42      	ldr	r3, [pc, #264]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x138>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	623b      	str	r3, [r7, #32]
 8001c08:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x138>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0e:	4a3e      	ldr	r2, [pc, #248]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x138>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c16:	4b3c      	ldr	r3, [pc, #240]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x138>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	61fb      	str	r3, [r7, #28]
 8001c20:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c22:	2303      	movs	r3, #3
 8001c24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c32:	2301      	movs	r3, #1
 8001c34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c40:	f001 fed8 	bl	80039f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c44:	e05b      	b.n	8001cfe <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a30      	ldr	r2, [pc, #192]	@ (8001d0c <HAL_TIM_Encoder_MspInit+0x13c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d129      	bne.n	8001ca4 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c50:	4b2d      	ldr	r3, [pc, #180]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x138>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c54:	4a2c      	ldr	r2, [pc, #176]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x138>)
 8001c56:	f043 0302 	orr.w	r3, r3, #2
 8001c5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x138>)
 8001c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c68:	4b27      	ldr	r3, [pc, #156]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x138>)
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6c:	4a26      	ldr	r2, [pc, #152]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x138>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c74:	4b24      	ldr	r3, [pc, #144]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x138>)
 8001c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c80:	23c0      	movs	r3, #192	@ 0xc0
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c90:	2302      	movs	r3, #2
 8001c92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c9e:	f001 fea9 	bl	80039f4 <HAL_GPIO_Init>
}
 8001ca2:	e02c      	b.n	8001cfe <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a19      	ldr	r2, [pc, #100]	@ (8001d10 <HAL_TIM_Encoder_MspInit+0x140>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d127      	bne.n	8001cfe <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cae:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x138>)
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb2:	4a15      	ldr	r2, [pc, #84]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x138>)
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cba:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x138>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x138>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cca:	4a0f      	ldr	r2, [pc, #60]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x138>)
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x138>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cde:	23c0      	movs	r3, #192	@ 0xc0
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4806      	ldr	r0, [pc, #24]	@ (8001d14 <HAL_TIM_Encoder_MspInit+0x144>)
 8001cfa:	f001 fe7b 	bl	80039f4 <HAL_GPIO_Init>
}
 8001cfe:	bf00      	nop
 8001d00:	3738      	adds	r7, #56	@ 0x38
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40000800 	.word	0x40000800
 8001d14:	48000400 	.word	0x48000400

08001d18 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08c      	sub	sp, #48	@ 0x30
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 031c 	add.w	r3, r7, #28
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a33      	ldr	r2, [pc, #204]	@ (8001e04 <HAL_TIM_IC_MspInit+0xec>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d129      	bne.n	8001d8e <HAL_TIM_IC_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d3a:	4b33      	ldr	r3, [pc, #204]	@ (8001e08 <HAL_TIM_IC_MspInit+0xf0>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3e:	4a32      	ldr	r2, [pc, #200]	@ (8001e08 <HAL_TIM_IC_MspInit+0xf0>)
 8001d40:	f043 0308 	orr.w	r3, r3, #8
 8001d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d46:	4b30      	ldr	r3, [pc, #192]	@ (8001e08 <HAL_TIM_IC_MspInit+0xf0>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	4b2d      	ldr	r3, [pc, #180]	@ (8001e08 <HAL_TIM_IC_MspInit+0xf0>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d56:	4a2c      	ldr	r2, [pc, #176]	@ (8001e08 <HAL_TIM_IC_MspInit+0xf0>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e08 <HAL_TIM_IC_MspInit+0xf0>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d6a:	230c      	movs	r3, #12
 8001d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	4619      	mov	r1, r3
 8001d84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d88:	f001 fe34 	bl	80039f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001d8c:	e035      	b.n	8001dfa <HAL_TIM_IC_MspInit+0xe2>
  else if(htim_ic->Instance==TIM15)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1e      	ldr	r2, [pc, #120]	@ (8001e0c <HAL_TIM_IC_MspInit+0xf4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d130      	bne.n	8001dfa <HAL_TIM_IC_MspInit+0xe2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001d98:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <HAL_TIM_IC_MspInit+0xf0>)
 8001d9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001e08 <HAL_TIM_IC_MspInit+0xf0>)
 8001d9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001da4:	4b18      	ldr	r3, [pc, #96]	@ (8001e08 <HAL_TIM_IC_MspInit+0xf0>)
 8001da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db0:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <HAL_TIM_IC_MspInit+0xf0>)
 8001db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db4:	4a14      	ldr	r2, [pc, #80]	@ (8001e08 <HAL_TIM_IC_MspInit+0xf0>)
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <HAL_TIM_IC_MspInit+0xf0>)
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001dc8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001dda:	230e      	movs	r3, #14
 8001ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dde:	f107 031c 	add.w	r3, r7, #28
 8001de2:	4619      	mov	r1, r3
 8001de4:	480a      	ldr	r0, [pc, #40]	@ (8001e10 <HAL_TIM_IC_MspInit+0xf8>)
 8001de6:	f001 fe05 	bl	80039f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	2018      	movs	r0, #24
 8001df0:	f001 fdc9 	bl	8003986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001df4:	2018      	movs	r0, #24
 8001df6:	f001 fde2 	bl	80039be <HAL_NVIC_EnableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3730      	adds	r7, #48	@ 0x30
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40000c00 	.word	0x40000c00
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40014000 	.word	0x40014000
 8001e10:	48000400 	.word	0x48000400

08001e14 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0a      	ldr	r2, [pc, #40]	@ (8001e4c <HAL_TIM_PWM_MspInit+0x38>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d10b      	bne.n	8001e3e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001e26:	4b0a      	ldr	r3, [pc, #40]	@ (8001e50 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2a:	4a09      	ldr	r2, [pc, #36]	@ (8001e50 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e2c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e30:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e32:	4b07      	ldr	r3, [pc, #28]	@ (8001e50 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001e3e:	bf00      	nop
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40013400 	.word	0x40013400
 8001e50:	40021000 	.word	0x40021000

08001e54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	@ 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a23      	ldr	r2, [pc, #140]	@ (8001f00 <HAL_TIM_MspPostInit+0xac>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d11e      	bne.n	8001eb4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	4b23      	ldr	r3, [pc, #140]	@ (8001f04 <HAL_TIM_MspPostInit+0xb0>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7a:	4a22      	ldr	r2, [pc, #136]	@ (8001f04 <HAL_TIM_MspPostInit+0xb0>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e82:	4b20      	ldr	r3, [pc, #128]	@ (8001f04 <HAL_TIM_MspPostInit+0xb0>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001e8e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eae:	f001 fda1 	bl	80039f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001eb2:	e021      	b.n	8001ef8 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM8)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a13      	ldr	r2, [pc, #76]	@ (8001f08 <HAL_TIM_MspPostInit+0xb4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d11c      	bne.n	8001ef8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ebe:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <HAL_TIM_MspPostInit+0xb0>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec2:	4a10      	ldr	r2, [pc, #64]	@ (8001f04 <HAL_TIM_MspPostInit+0xb0>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <HAL_TIM_MspPostInit+0xb0>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001ed6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4806      	ldr	r0, [pc, #24]	@ (8001f0c <HAL_TIM_MspPostInit+0xb8>)
 8001ef4:	f001 fd7e 	bl	80039f4 <HAL_GPIO_Init>
}
 8001ef8:	bf00      	nop
 8001efa:	3728      	adds	r7, #40	@ 0x28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40012c00 	.word	0x40012c00
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40013400 	.word	0x40013400
 8001f0c:	48000800 	.word	0x48000800

08001f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b0aa      	sub	sp, #168	@ 0xa8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f28:	f107 0310 	add.w	r3, r7, #16
 8001f2c:	2284      	movs	r2, #132	@ 0x84
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f006 f924 	bl	800817e <memset>
  if(huart->Instance==USART3)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a21      	ldr	r2, [pc, #132]	@ (8001fc0 <HAL_UART_MspInit+0xb0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d13a      	bne.n	8001fb6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f40:	2304      	movs	r3, #4
 8001f42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f44:	2300      	movs	r3, #0
 8001f46:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 fea9 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f58:	f7ff fb8e 	bl	8001678 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f5c:	4b19      	ldr	r3, [pc, #100]	@ (8001fc4 <HAL_UART_MspInit+0xb4>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f60:	4a18      	ldr	r2, [pc, #96]	@ (8001fc4 <HAL_UART_MspInit+0xb4>)
 8001f62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f66:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f68:	4b16      	ldr	r3, [pc, #88]	@ (8001fc4 <HAL_UART_MspInit+0xb4>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f74:	4b13      	ldr	r3, [pc, #76]	@ (8001fc4 <HAL_UART_MspInit+0xb4>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f78:	4a12      	ldr	r2, [pc, #72]	@ (8001fc4 <HAL_UART_MspInit+0xb4>)
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f80:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <HAL_UART_MspInit+0xb4>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f8c:	2330      	movs	r3, #48	@ 0x30
 8001f8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fa4:	2307      	movs	r3, #7
 8001fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001faa:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4805      	ldr	r0, [pc, #20]	@ (8001fc8 <HAL_UART_MspInit+0xb8>)
 8001fb2:	f001 fd1f 	bl	80039f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fb6:	bf00      	nop
 8001fb8:	37a8      	adds	r7, #168	@ 0xa8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40004800 	.word	0x40004800
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	48000800 	.word	0x48000800

08001fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fd0:	bf00      	nop
 8001fd2:	e7fd      	b.n	8001fd0 <NMI_Handler+0x4>

08001fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd8:	bf00      	nop
 8001fda:	e7fd      	b.n	8001fd8 <HardFault_Handler+0x4>

08001fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <MemManage_Handler+0x4>

08001fe4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <BusFault_Handler+0x4>

08001fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <UsageFault_Handler+0x4>

08001ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002022:	f000 fa9b 	bl	800255c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}

0800202a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800203c:	4803      	ldr	r0, [pc, #12]	@ (800204c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800203e:	f004 f80b 	bl	8006058 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002042:	4803      	ldr	r0, [pc, #12]	@ (8002050 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002044:	f004 f808 	bl	8006058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000268 	.word	0x20000268
 8002050:	20000430 	.word	0x20000430

08002054 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	e00a      	b.n	800207c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002066:	f3af 8000 	nop.w
 800206a:	4601      	mov	r1, r0
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	60ba      	str	r2, [r7, #8]
 8002072:	b2ca      	uxtb	r2, r1
 8002074:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3301      	adds	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	429a      	cmp	r2, r3
 8002082:	dbf0      	blt.n	8002066 <_read+0x12>
  }

  return len;
 8002084:	687b      	ldr	r3, [r7, #4]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <_close>:
  }
  return len;
}

int _close(int file)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020b6:	605a      	str	r2, [r3, #4]
  return 0;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <_isatty>:

int _isatty(int file)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020ce:	2301      	movs	r3, #1
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002100:	4a14      	ldr	r2, [pc, #80]	@ (8002154 <_sbrk+0x5c>)
 8002102:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <_sbrk+0x60>)
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800210c:	4b13      	ldr	r3, [pc, #76]	@ (800215c <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002114:	4b11      	ldr	r3, [pc, #68]	@ (800215c <_sbrk+0x64>)
 8002116:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <_sbrk+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211a:	4b10      	ldr	r3, [pc, #64]	@ (800215c <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d207      	bcs.n	8002138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002128:	f006 f878 	bl	800821c <__errno>
 800212c:	4603      	mov	r3, r0
 800212e:	220c      	movs	r2, #12
 8002130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	e009      	b.n	800214c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002138:	4b08      	ldr	r3, [pc, #32]	@ (800215c <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213e:	4b07      	ldr	r3, [pc, #28]	@ (800215c <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	4a05      	ldr	r2, [pc, #20]	@ (800215c <_sbrk+0x64>)
 8002148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20018000 	.word	0x20018000
 8002158:	00000400 	.word	0x00000400
 800215c:	2000056c 	.word	0x2000056c
 8002160:	200006c0 	.word	0x200006c0

08002164 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002168:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <SystemInit+0x20>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216e:	4a05      	ldr	r2, [pc, #20]	@ (8002184 <SystemInit+0x20>)
 8002170:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002174:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <task6_run>:
#include <stdlib.h>
#include "motorcontrol.h"
#include "encoder.h"

//Task 6 state machine: Drive Motors
void task6_run(uint8_t* State, uint8_t* DriveON_MD,uint8_t* DriveON_Rad,uint8_t* Follow, float* Distance_Target, float* Angle_Target, TIM_HandleTypeDef htim1,TIM_HandleTypeDef htim3,TIM_HandleTypeDef htim4){
 8002188:	b580      	push	{r7, lr}
 800218a:	b0be      	sub	sp, #248	@ 0xf8
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	603b      	str	r3, [r7, #0]

	while(1){
			switch(*State){
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b04      	cmp	r3, #4
 800219c:	d8fb      	bhi.n	8002196 <task6_run+0xe>
 800219e:	a201      	add	r2, pc, #4	@ (adr r2, 80021a4 <task6_run+0x1c>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	080021b9 	.word	0x080021b9
 80021a8:	080022f1 	.word	0x080022f1
 80021ac:	08002329 	.word	0x08002329
 80021b0:	080023f9 	.word	0x080023f9
 80021b4:	08002401 	.word	0x08002401

			case 0:
				//State 0: INIT

				uint32_t previousMillis = 0;//for debug
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
				encoder_t encoder2;
				controller_t controller1;
				controller_t controller2;

				// Assign motor 1 to Timer 1 channels 1 and 3
				motor1.chA = &(htim1.Instance->CCR2);
 80021be:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80021c2:	3338      	adds	r3, #56	@ 0x38
 80021c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
				motor1.chB = &(htim1.Instance->CCR4);
 80021c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80021cc:	3340      	adds	r3, #64	@ 0x40
 80021ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
				motor1.Period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 80021d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80021d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

				// Assign motor 2 to Timer 1 channels 2 and 4
				motor2.chA = &(htim1.Instance->CCR1);
 80021dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80021e0:	3334      	adds	r3, #52	@ 0x34
 80021e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				motor2.chB = &(htim1.Instance->CCR3);
 80021e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80021ea:	333c      	adds	r3, #60	@ 0x3c
 80021ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				motor2.Period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 80021f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80021f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

				//Set initial duty cycles
				set_duty(&motor1, 0);
 80021fa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021fe:	ed9f 0a93 	vldr	s0, [pc, #588]	@ 800244c <task6_run+0x2c4>
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fa40 	bl	8001688 <set_duty>
				set_duty(&motor2, 0);
 8002208:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800220c:	ed9f 0a8f 	vldr	s0, [pc, #572]	@ 800244c <task6_run+0x2c4>
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fa39 	bl	8001688 <set_duty>

				// Initialize encoders
				int16_t mot1_velocity = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
				int32_t mot1_position = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
				uint32_t enc1_lastval = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				uint32_t last_tick1 = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
				encoder1 = (encoder_t){&htim3, mot1_velocity, mot1_position, enc1_lastval, last_tick1};
 800222e:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002232:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002234:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8002238:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
 800223c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002248:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800224c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002250:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

				int16_t mot2_velocity = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
				int32_t mot2_position = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
				uint32_t enc2_lastval = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
				uint32_t last_tick2 = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
				encoder2 = (encoder_t){&htim4, mot2_velocity, mot2_position, enc2_lastval, last_tick2};
 800226c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002270:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002272:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 8002276:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800227a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800227e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002280:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002284:	677b      	str	r3, [r7, #116]	@ 0x74
 8002286:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800228a:	67bb      	str	r3, [r7, #120]	@ 0x78

				//Set test duty cycles
				set_duty(&motor1, 0);
 800228c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002290:	ed9f 0a6e 	vldr	s0, [pc, #440]	@ 800244c <task6_run+0x2c4>
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff f9f7 	bl	8001688 <set_duty>
				set_duty(&motor2, 0);
 800229a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800229e:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 800244c <task6_run+0x2c4>
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff f9f0 	bl	8001688 <set_duty>

				// Initialize controllers
				float Pgain_velocity2 = 0.04;
 80022a8:	4b69      	ldr	r3, [pc, #420]	@ (8002450 <task6_run+0x2c8>)
 80022aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
				float Igain_velocity2 = 0.01;
 80022ae:	4b69      	ldr	r3, [pc, #420]	@ (8002454 <task6_run+0x2cc>)
 80022b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
				int32_t velocity_setpoint2 = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
				int32_t esum2 = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				controller2 = (controller_t){Pgain_velocity2, Igain_velocity2, velocity_setpoint2, esum2};
 80022c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80022c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80022ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80022d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022d6:	657b      	str	r3, [r7, #84]	@ 0x54

				float Pgain_distance = 0.5; //how much to scale velocity based on distance away
 80022d8:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80022dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
				//float angle_error; // updated by open mv H7 camera
				float Pgain_angle = 0.5; //how much to scale skid steering based on angle error
 80022e0:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80022e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
				float distance_error;
				float velocity_setpoint;
				float optimal_distance; // desired follow distance


				*State = 1;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]

				break;
 80022ee:	e0ac      	b.n	800244a <task6_run+0x2c2>


			case 1:
				//State 1: Flag check
				if (*DriveON_Rad == 1){
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d113      	bne.n	8002320 <task6_run+0x198>
					//If radio triggered, run rest of code
					if (*DriveON_MD == 1){
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d103      	bne.n	8002308 <task6_run+0x180>
						//If Metal Detected, Go to state 3
						*State = 3;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2203      	movs	r2, #3
 8002304:	701a      	strb	r2, [r3, #0]
					*State = 1; //Else, return to state 1

					//SET DRIVE MOTORS TO 0;
				}

				break;
 8002306:	e0a0      	b.n	800244a <task6_run+0x2c2>
						if (*Follow == 1){
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d103      	bne.n	8002318 <task6_run+0x190>
							*State = 2;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2202      	movs	r2, #2
 8002314:	701a      	strb	r2, [r3, #0]
				break;
 8002316:	e098      	b.n	800244a <task6_run+0x2c2>
							*State = 4;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2204      	movs	r2, #4
 800231c:	701a      	strb	r2, [r3, #0]
				break;
 800231e:	e094      	b.n	800244a <task6_run+0x2c2>
					*State = 1; //Else, return to state 1
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
				break;
 8002326:	e090      	b.n	800244a <task6_run+0x2c2>
			case 2:
				//State 2: Follow mode



				distance_error = *Distance_Target - optimal_distance;
 8002328:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800232c:	ed93 7a00 	vldr	s14, [r3]
 8002330:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8002334:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002338:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
				velocity_setpoint = distance_error*Pgain_distance;
 800233c:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8002340:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 8002344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002348:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc

				skid_modifier = Pgain_angle*(*Angle_Target);
 800234c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002350:	edd3 7a00 	vldr	s15, [r3]
 8002354:	ed97 7a3b 	vldr	s14, [r7, #236]	@ 0xec
 8002358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235c:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8


				// Cap the skid modifier to avoid useless values
				float max_skid_modifier = 1.0; // Adjust this value as needed
 8002360:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002364:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

				if (skid_modifier > max_skid_modifier) {
 8002368:	ed97 7a3a 	vldr	s14, [r7, #232]	@ 0xe8
 800236c:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 8002370:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002378:	dd04      	ble.n	8002384 <task6_run+0x1fc>
				    skid_modifier = max_skid_modifier;
 800237a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800237e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002382:	e010      	b.n	80023a6 <task6_run+0x21e>
				    } else if (skid_modifier < -max_skid_modifier) {
 8002384:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 8002388:	eef1 7a67 	vneg.f32	s15, s15
 800238c:	ed97 7a3a 	vldr	s14, [r7, #232]	@ 0xe8
 8002390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002398:	d505      	bpl.n	80023a6 <task6_run+0x21e>
				        skid_modifier = -max_skid_modifier;
 800239a:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 800239e:	eef1 7a67 	vneg.f32	s15, s15
 80023a2:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8
				    }


				if (*Angle_Target < 0) {
 80023a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b6:	d50f      	bpl.n	80023d8 <task6_run+0x250>
					// Turn left
//					motorcontrol1->velocity_setpoint = velocity_setpoint * (1 + skid_modifier);
					controller2.velocity_setpoint = velocity_setpoint * (1 - skid_modifier);
 80023b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023bc:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 80023c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023c4:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 80023c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d0:	ee17 3a90 	vmov	r3, s15
 80023d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80023d6:	e6de      	b.n	8002196 <task6_run+0xe>
			        }
				else {
					// Turn right
//					motorcontrol1->velocity_setpoint = velocity_setpoint * (1 - skid_modifier);
					controller2.velocity_setpoint = velocity_setpoint * (1 + skid_modifier);
 80023d8:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 80023dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80023e4:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 80023e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023f0:	ee17 3a90 	vmov	r3, s15
 80023f4:	653b      	str	r3, [r7, #80]	@ 0x50


				break;
 80023f6:	e028      	b.n	800244a <task6_run+0x2c2>
				//SET ALL MOTORS TO BRAKE MODE

				//Could add additional drive forward and backward functionality here
				//But for demo, we have simplified the design

				*State = 1; //Always return to State 1
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]

				break;
 80023fe:	e024      	b.n	800244a <task6_run+0x2c2>



			case 4:
				//State 4: DEBUG Testing, should be empty on final code
				*State = 1; //Always return to State 1
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
				if (HAL_GetTick() - previousMillis >= 100) {
 8002406:	f000 f8bd 	bl	8002584 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b63      	cmp	r3, #99	@ 0x63
 8002414:	d917      	bls.n	8002446 <task6_run+0x2be>
						  previousMillis = HAL_GetTick();
 8002416:	f000 f8b5 	bl	8002584 <HAL_GetTick>
 800241a:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
						  run_control(&controller2, &motor2, &encoder2);
 800241e:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002422:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002426:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff f99a 	bl	8001764 <run_control>
	//		  	          read_encoder(&encoder1);
	//		  	          read_encoder(&encoder2);
	//		  	    	  printf("Encoder1 position: %ld\n", encoder1.position);
	//		  	    	  printf("Encoder1 Velocity: %d\n", encoder1.velocity);
						  printf("Encoder2 position: %ld\n", encoder2.position);
 8002430:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002432:	4619      	mov	r1, r3
 8002434:	4808      	ldr	r0, [pc, #32]	@ (8002458 <task6_run+0x2d0>)
 8002436:	f005 fe4d 	bl	80080d4 <iprintf>
						  printf("Encoder2 Velocity: %d\n", encoder2.velocity);
 800243a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800243e:	4619      	mov	r1, r3
 8002440:	4806      	ldr	r0, [pc, #24]	@ (800245c <task6_run+0x2d4>)
 8002442:	f005 fe47 	bl	80080d4 <iprintf>
				}
				break;
 8002446:	bf00      	nop
 8002448:	e6a5      	b.n	8002196 <task6_run+0xe>
			switch(*State){
 800244a:	e6a4      	b.n	8002196 <task6_run+0xe>
 800244c:	00000000 	.word	0x00000000
 8002450:	3d23d70a 	.word	0x3d23d70a
 8002454:	3c23d70a 	.word	0x3c23d70a
 8002458:	08008df4 	.word	0x08008df4
 800245c:	08008e0c 	.word	0x08008e0c

08002460 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002460:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002498 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002464:	f7ff fe7e 	bl	8002164 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002468:	480c      	ldr	r0, [pc, #48]	@ (800249c <LoopForever+0x6>)
  ldr r1, =_edata
 800246a:	490d      	ldr	r1, [pc, #52]	@ (80024a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800246c:	4a0d      	ldr	r2, [pc, #52]	@ (80024a4 <LoopForever+0xe>)
  movs r3, #0
 800246e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002470:	e002      	b.n	8002478 <LoopCopyDataInit>

08002472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002476:	3304      	adds	r3, #4

08002478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800247a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800247c:	d3f9      	bcc.n	8002472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800247e:	4a0a      	ldr	r2, [pc, #40]	@ (80024a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002480:	4c0a      	ldr	r4, [pc, #40]	@ (80024ac <LoopForever+0x16>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002484:	e001      	b.n	800248a <LoopFillZerobss>

08002486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002488:	3204      	adds	r2, #4

0800248a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800248a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800248c:	d3fb      	bcc.n	8002486 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800248e:	f005 fecb 	bl	8008228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002492:	f7fe f905 	bl	80006a0 <main>

08002496 <LoopForever>:

LoopForever:
    b LoopForever
 8002496:	e7fe      	b.n	8002496 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002498:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800249c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80024a4:	08008eb0 	.word	0x08008eb0
  ldr r2, =_sbss
 80024a8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80024ac:	200006c0 	.word	0x200006c0

080024b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024b0:	e7fe      	b.n	80024b0 <ADC1_2_IRQHandler>

080024b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024bc:	2003      	movs	r0, #3
 80024be:	f001 fa57 	bl	8003970 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024c2:	200f      	movs	r0, #15
 80024c4:	f000 f80e 	bl	80024e4 <HAL_InitTick>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	71fb      	strb	r3, [r7, #7]
 80024d2:	e001      	b.n	80024d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024d4:	f7ff f98a 	bl	80017ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024d8:	79fb      	ldrb	r3, [r7, #7]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024f0:	4b17      	ldr	r3, [pc, #92]	@ (8002550 <HAL_InitTick+0x6c>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d023      	beq.n	8002540 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024f8:	4b16      	ldr	r3, [pc, #88]	@ (8002554 <HAL_InitTick+0x70>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b14      	ldr	r3, [pc, #80]	@ (8002550 <HAL_InitTick+0x6c>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	4619      	mov	r1, r3
 8002502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002506:	fbb3 f3f1 	udiv	r3, r3, r1
 800250a:	fbb2 f3f3 	udiv	r3, r2, r3
 800250e:	4618      	mov	r0, r3
 8002510:	f001 fa63 	bl	80039da <HAL_SYSTICK_Config>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10f      	bne.n	800253a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b0f      	cmp	r3, #15
 800251e:	d809      	bhi.n	8002534 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002520:	2200      	movs	r2, #0
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	f001 fa2d 	bl	8003986 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800252c:	4a0a      	ldr	r2, [pc, #40]	@ (8002558 <HAL_InitTick+0x74>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e007      	b.n	8002544 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
 8002538:	e004      	b.n	8002544 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	e001      	b.n	8002544 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000008 	.word	0x20000008
 8002554:	20000000 	.word	0x20000000
 8002558:	20000004 	.word	0x20000004

0800255c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_IncTick+0x20>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <HAL_IncTick+0x24>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4413      	add	r3, r2
 800256c:	4a04      	ldr	r2, [pc, #16]	@ (8002580 <HAL_IncTick+0x24>)
 800256e:	6013      	str	r3, [r2, #0]
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000008 	.word	0x20000008
 8002580:	20000570 	.word	0x20000570

08002584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return uwTick;
 8002588:	4b03      	ldr	r3, [pc, #12]	@ (8002598 <HAL_GetTick+0x14>)
 800258a:	681b      	ldr	r3, [r3, #0]
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20000570 	.word	0x20000570

0800259c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	609a      	str	r2, [r3, #8]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	609a      	str	r2, [r3, #8]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3360      	adds	r3, #96	@ 0x60
 8002616:	461a      	mov	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b08      	ldr	r3, [pc, #32]	@ (8002648 <LL_ADC_SetOffset+0x44>)
 8002626:	4013      	ands	r3, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	4313      	orrs	r3, r2
 8002634:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800263c:	bf00      	nop
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	03fff000 	.word	0x03fff000

0800264c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3360      	adds	r3, #96	@ 0x60
 800265a:	461a      	mov	r2, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3360      	adds	r3, #96	@ 0x60
 8002688:	461a      	mov	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	431a      	orrs	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026a2:	bf00      	nop
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b087      	sub	sp, #28
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3330      	adds	r3, #48	@ 0x30
 80026be:	461a      	mov	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	4413      	add	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	211f      	movs	r1, #31
 80026da:	fa01 f303 	lsl.w	r3, r1, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	401a      	ands	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	0e9b      	lsrs	r3, r3, #26
 80026e6:	f003 011f 	and.w	r1, r3, #31
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	f003 031f 	and.w	r3, r3, #31
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	431a      	orrs	r2, r3
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026fa:	bf00      	nop
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002706:	b480      	push	{r7}
 8002708:	b087      	sub	sp, #28
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3314      	adds	r3, #20
 8002716:	461a      	mov	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	0e5b      	lsrs	r3, r3, #25
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	4413      	add	r3, r2
 8002724:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	0d1b      	lsrs	r3, r3, #20
 800272e:	f003 031f 	and.w	r3, r3, #31
 8002732:	2107      	movs	r1, #7
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	401a      	ands	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	0d1b      	lsrs	r3, r3, #20
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	431a      	orrs	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002750:	bf00      	nop
 8002752:	371c      	adds	r7, #28
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002774:	43db      	mvns	r3, r3
 8002776:	401a      	ands	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f003 0318 	and.w	r3, r3, #24
 800277e:	4908      	ldr	r1, [pc, #32]	@ (80027a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002780:	40d9      	lsrs	r1, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	400b      	ands	r3, r1
 8002786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278a:	431a      	orrs	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002792:	bf00      	nop
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	0007ffff 	.word	0x0007ffff

080027a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 031f 	and.w	r3, r3, #31
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80027d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6093      	str	r3, [r2, #8]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027f8:	d101      	bne.n	80027fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800281c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002820:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002844:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002848:	d101      	bne.n	800284e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800286c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002870:	f043 0201 	orr.w	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <LL_ADC_IsEnabled+0x18>
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <LL_ADC_IsEnabled+0x1a>
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028ba:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028be:	f043 0204 	orr.w	r2, r3, #4
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d101      	bne.n	80028ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b08      	cmp	r3, #8
 800290a:	d101      	bne.n	8002910 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b089      	sub	sp, #36	@ 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e130      	b.n	8002b9c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002944:	2b00      	cmp	r3, #0
 8002946:	d109      	bne.n	800295c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7fe ff79 	bl	8001840 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff3f 	bl	80027e4 <LL_ADC_IsDeepPowerDownEnabled>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d004      	beq.n	8002976 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff25 	bl	80027c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff5a 	bl	8002834 <LL_ADC_IsInternalRegulatorEnabled>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d115      	bne.n	80029b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ff3e 	bl	800280c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002990:	4b84      	ldr	r3, [pc, #528]	@ (8002ba4 <HAL_ADC_Init+0x284>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	099b      	lsrs	r3, r3, #6
 8002996:	4a84      	ldr	r2, [pc, #528]	@ (8002ba8 <HAL_ADC_Init+0x288>)
 8002998:	fba2 2303 	umull	r2, r3, r2, r3
 800299c:	099b      	lsrs	r3, r3, #6
 800299e:	3301      	adds	r3, #1
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029a4:	e002      	b.n	80029ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	3b01      	subs	r3, #1
 80029aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f9      	bne.n	80029a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff ff3c 	bl	8002834 <LL_ADC_IsInternalRegulatorEnabled>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10d      	bne.n	80029de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c6:	f043 0210 	orr.w	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d2:	f043 0201 	orr.w	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ff75 	bl	80028d2 <LL_ADC_REG_IsConversionOngoing>
 80029e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ee:	f003 0310 	and.w	r3, r3, #16
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f040 80c9 	bne.w	8002b8a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f040 80c5 	bne.w	8002b8a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a04:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a08:	f043 0202 	orr.w	r2, r3, #2
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff35 	bl	8002884 <LL_ADC_IsEnabled>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d115      	bne.n	8002a4c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a20:	4862      	ldr	r0, [pc, #392]	@ (8002bac <HAL_ADC_Init+0x28c>)
 8002a22:	f7ff ff2f 	bl	8002884 <LL_ADC_IsEnabled>
 8002a26:	4604      	mov	r4, r0
 8002a28:	4861      	ldr	r0, [pc, #388]	@ (8002bb0 <HAL_ADC_Init+0x290>)
 8002a2a:	f7ff ff2b 	bl	8002884 <LL_ADC_IsEnabled>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	431c      	orrs	r4, r3
 8002a32:	4860      	ldr	r0, [pc, #384]	@ (8002bb4 <HAL_ADC_Init+0x294>)
 8002a34:	f7ff ff26 	bl	8002884 <LL_ADC_IsEnabled>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4323      	orrs	r3, r4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4619      	mov	r1, r3
 8002a46:	485c      	ldr	r0, [pc, #368]	@ (8002bb8 <HAL_ADC_Init+0x298>)
 8002a48:	f7ff fda8 	bl	800259c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7e5b      	ldrb	r3, [r3, #25]
 8002a50:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a56:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002a5c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002a62:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a6a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d106      	bne.n	8002a88 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	045b      	lsls	r3, r3, #17
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d009      	beq.n	8002aa4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a94:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	4b44      	ldr	r3, [pc, #272]	@ (8002bbc <HAL_ADC_Init+0x29c>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	69b9      	ldr	r1, [r7, #24]
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff1b 	bl	80028f8 <LL_ADC_INJ_IsConversionOngoing>
 8002ac2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d13d      	bne.n	8002b46 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d13a      	bne.n	8002b46 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ad4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002adc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002aec:	f023 0302 	bic.w	r3, r3, #2
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	69b9      	ldr	r1, [r7, #24]
 8002af6:	430b      	orrs	r3, r1
 8002af8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d118      	bne.n	8002b36 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b0e:	f023 0304 	bic.w	r3, r3, #4
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b1a:	4311      	orrs	r1, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b20:	4311      	orrs	r1, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b26:	430a      	orrs	r2, r1
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	611a      	str	r2, [r3, #16]
 8002b34:	e007      	b.n	8002b46 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d10c      	bne.n	8002b68 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b54:	f023 010f 	bic.w	r1, r3, #15
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	1e5a      	subs	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b66:	e007      	b.n	8002b78 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 020f 	bic.w	r2, r2, #15
 8002b76:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7c:	f023 0303 	bic.w	r3, r3, #3
 8002b80:	f043 0201 	orr.w	r2, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b88:	e007      	b.n	8002b9a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8e:	f043 0210 	orr.w	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3724      	adds	r7, #36	@ 0x24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd90      	pop	{r4, r7, pc}
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	053e2d63 	.word	0x053e2d63
 8002bac:	50040000 	.word	0x50040000
 8002bb0:	50040100 	.word	0x50040100
 8002bb4:	50040200 	.word	0x50040200
 8002bb8:	50040300 	.word	0x50040300
 8002bbc:	fff0c007 	.word	0xfff0c007

08002bc0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bc8:	4857      	ldr	r0, [pc, #348]	@ (8002d28 <HAL_ADC_Start+0x168>)
 8002bca:	f7ff fdeb 	bl	80027a4 <LL_ADC_GetMultimode>
 8002bce:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fe7c 	bl	80028d2 <LL_ADC_REG_IsConversionOngoing>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f040 809c 	bne.w	8002d1a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADC_Start+0x30>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e097      	b.n	8002d20 <HAL_ADC_Start+0x160>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fc8d 	bl	8003518 <ADC_Enable>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f040 8083 	bne.w	8002d10 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c12:	f023 0301 	bic.w	r3, r3, #1
 8002c16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a42      	ldr	r2, [pc, #264]	@ (8002d2c <HAL_ADC_Start+0x16c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d002      	beq.n	8002c2e <HAL_ADC_Start+0x6e>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	e000      	b.n	8002c30 <HAL_ADC_Start+0x70>
 8002c2e:	4b40      	ldr	r3, [pc, #256]	@ (8002d30 <HAL_ADC_Start+0x170>)
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d002      	beq.n	8002c3e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d105      	bne.n	8002c4a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c42:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c56:	d106      	bne.n	8002c66 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5c:	f023 0206 	bic.w	r2, r3, #6
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c64:	e002      	b.n	8002c6c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	221c      	movs	r2, #28
 8002c72:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a2a      	ldr	r2, [pc, #168]	@ (8002d2c <HAL_ADC_Start+0x16c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d002      	beq.n	8002c8c <HAL_ADC_Start+0xcc>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	e000      	b.n	8002c8e <HAL_ADC_Start+0xce>
 8002c8c:	4b28      	ldr	r3, [pc, #160]	@ (8002d30 <HAL_ADC_Start+0x170>)
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d008      	beq.n	8002ca8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	2b05      	cmp	r3, #5
 8002ca0:	d002      	beq.n	8002ca8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	2b09      	cmp	r3, #9
 8002ca6:	d114      	bne.n	8002cd2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002cbe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fded 	bl	80028aa <LL_ADC_REG_StartConversion>
 8002cd0:	e025      	b.n	8002d1e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a12      	ldr	r2, [pc, #72]	@ (8002d2c <HAL_ADC_Start+0x16c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d002      	beq.n	8002cee <HAL_ADC_Start+0x12e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	e000      	b.n	8002cf0 <HAL_ADC_Start+0x130>
 8002cee:	4b10      	ldr	r3, [pc, #64]	@ (8002d30 <HAL_ADC_Start+0x170>)
 8002cf0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00f      	beq.n	8002d1e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d02:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d06:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d0e:	e006      	b.n	8002d1e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002d18:	e001      	b.n	8002d1e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	50040300 	.word	0x50040300
 8002d2c:	50040100 	.word	0x50040100
 8002d30:	50040000 	.word	0x50040000

08002d34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b0b6      	sub	sp, #216	@ 0xd8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x22>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e3c9      	b.n	80034ea <HAL_ADC_ConfigChannel+0x7b6>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fdb5 	bl	80028d2 <LL_ADC_REG_IsConversionOngoing>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 83aa 	bne.w	80034c4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	d824      	bhi.n	8002dca <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	3b02      	subs	r3, #2
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d81b      	bhi.n	8002dc2 <HAL_ADC_ConfigChannel+0x8e>
 8002d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d90 <HAL_ADC_ConfigChannel+0x5c>)
 8002d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d90:	08002da1 	.word	0x08002da1
 8002d94:	08002da9 	.word	0x08002da9
 8002d98:	08002db1 	.word	0x08002db1
 8002d9c:	08002db9 	.word	0x08002db9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002da0:	230c      	movs	r3, #12
 8002da2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002da6:	e010      	b.n	8002dca <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002da8:	2312      	movs	r3, #18
 8002daa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dae:	e00c      	b.n	8002dca <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002db0:	2318      	movs	r3, #24
 8002db2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002db6:	e008      	b.n	8002dca <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002db8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dc0:	e003      	b.n	8002dca <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002dc2:	2306      	movs	r3, #6
 8002dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002dc8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002dd8:	f7ff fc69 	bl	80026ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fd76 	bl	80028d2 <LL_ADC_REG_IsConversionOngoing>
 8002de6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fd82 	bl	80028f8 <LL_ADC_INJ_IsConversionOngoing>
 8002df4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002df8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f040 81a4 	bne.w	800314a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f040 819f 	bne.w	800314a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	6819      	ldr	r1, [r3, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	f7ff fc74 	bl	8002706 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	08db      	lsrs	r3, r3, #3
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d00a      	beq.n	8002e56 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6818      	ldr	r0, [r3, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6919      	ldr	r1, [r3, #16]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e50:	f7ff fbd8 	bl	8002604 <LL_ADC_SetOffset>
 8002e54:	e179      	b.n	800314a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fbf5 	bl	800264c <LL_ADC_GetOffsetChannel>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10a      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x14e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2100      	movs	r1, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fbea 	bl	800264c <LL_ADC_GetOffsetChannel>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	0e9b      	lsrs	r3, r3, #26
 8002e7c:	f003 021f 	and.w	r2, r3, #31
 8002e80:	e01e      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x18c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fbdf 	bl	800264c <LL_ADC_GetOffsetChannel>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ea0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ea4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ea8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002eb0:	2320      	movs	r3, #32
 8002eb2:	e004      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002eb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002eb8:	fab3 f383 	clz	r3, r3
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d105      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x1a4>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	0e9b      	lsrs	r3, r3, #26
 8002ed2:	f003 031f 	and.w	r3, r3, #31
 8002ed6:	e018      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x1d6>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002eec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002ef4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002efc:	2320      	movs	r3, #32
 8002efe:	e004      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002f00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f04:	fab3 f383 	clz	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d106      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2200      	movs	r2, #0
 8002f14:	2100      	movs	r1, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fbae 	bl	8002678 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2101      	movs	r1, #1
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fb92 	bl	800264c <LL_ADC_GetOffsetChannel>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10a      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x214>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2101      	movs	r1, #1
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fb87 	bl	800264c <LL_ADC_GetOffsetChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	0e9b      	lsrs	r3, r3, #26
 8002f42:	f003 021f 	and.w	r2, r3, #31
 8002f46:	e01e      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x252>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fb7c 	bl	800264c <LL_ADC_GetOffsetChannel>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f5e:	fa93 f3a3 	rbit	r3, r3
 8002f62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002f66:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002f6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002f76:	2320      	movs	r3, #32
 8002f78:	e004      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002f7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d105      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x26a>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	0e9b      	lsrs	r3, r3, #26
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	e018      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x29c>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002fb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fb6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002fba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002fc2:	2320      	movs	r3, #32
 8002fc4:	e004      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002fc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d106      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2101      	movs	r1, #1
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff fb4b 	bl	8002678 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2102      	movs	r1, #2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fb2f 	bl	800264c <LL_ADC_GetOffsetChannel>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10a      	bne.n	800300e <HAL_ADC_ConfigChannel+0x2da>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2102      	movs	r1, #2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fb24 	bl	800264c <LL_ADC_GetOffsetChannel>
 8003004:	4603      	mov	r3, r0
 8003006:	0e9b      	lsrs	r3, r3, #26
 8003008:	f003 021f 	and.w	r2, r3, #31
 800300c:	e01e      	b.n	800304c <HAL_ADC_ConfigChannel+0x318>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2102      	movs	r1, #2
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fb19 	bl	800264c <LL_ADC_GetOffsetChannel>
 800301a:	4603      	mov	r3, r0
 800301c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003024:	fa93 f3a3 	rbit	r3, r3
 8003028:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800302c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003030:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003034:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800303c:	2320      	movs	r3, #32
 800303e:	e004      	b.n	800304a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003040:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003054:	2b00      	cmp	r3, #0
 8003056:	d105      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x330>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0e9b      	lsrs	r3, r3, #26
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	e014      	b.n	800308e <HAL_ADC_ConfigChannel+0x35a>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003072:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003074:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003078:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003080:	2320      	movs	r3, #32
 8003082:	e004      	b.n	800308e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003084:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003088:	fab3 f383 	clz	r3, r3
 800308c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800308e:	429a      	cmp	r2, r3
 8003090:	d106      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2200      	movs	r2, #0
 8003098:	2102      	movs	r1, #2
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff faec 	bl	8002678 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2103      	movs	r1, #3
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fad0 	bl	800264c <LL_ADC_GetOffsetChannel>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x398>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2103      	movs	r1, #3
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fac5 	bl	800264c <LL_ADC_GetOffsetChannel>
 80030c2:	4603      	mov	r3, r0
 80030c4:	0e9b      	lsrs	r3, r3, #26
 80030c6:	f003 021f 	and.w	r2, r3, #31
 80030ca:	e017      	b.n	80030fc <HAL_ADC_ConfigChannel+0x3c8>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2103      	movs	r1, #3
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff faba 	bl	800264c <LL_ADC_GetOffsetChannel>
 80030d8:	4603      	mov	r3, r0
 80030da:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80030e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030e6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80030e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80030ee:	2320      	movs	r3, #32
 80030f0:	e003      	b.n	80030fa <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80030f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003104:	2b00      	cmp	r3, #0
 8003106:	d105      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x3e0>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	0e9b      	lsrs	r3, r3, #26
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	e011      	b.n	8003138 <HAL_ADC_ConfigChannel+0x404>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800311c:	fa93 f3a3 	rbit	r3, r3
 8003120:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003122:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003124:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003126:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800312c:	2320      	movs	r3, #32
 800312e:	e003      	b.n	8003138 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003130:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003138:	429a      	cmp	r2, r3
 800313a:	d106      	bne.n	800314a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2200      	movs	r2, #0
 8003142:	2103      	movs	r1, #3
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fa97 	bl	8002678 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fb98 	bl	8002884 <LL_ADC_IsEnabled>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	f040 8140 	bne.w	80033dc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	6819      	ldr	r1, [r3, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	461a      	mov	r2, r3
 800316a:	f7ff faf7 	bl	800275c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	4a8f      	ldr	r2, [pc, #572]	@ (80033b0 <HAL_ADC_ConfigChannel+0x67c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	f040 8131 	bne.w	80033dc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10b      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x46e>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	0e9b      	lsrs	r3, r3, #26
 8003190:	3301      	adds	r3, #1
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	2b09      	cmp	r3, #9
 8003198:	bf94      	ite	ls
 800319a:	2301      	movls	r3, #1
 800319c:	2300      	movhi	r3, #0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	e019      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x4a2>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80031b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80031b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80031ba:	2320      	movs	r3, #32
 80031bc:	e003      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80031be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	3301      	adds	r3, #1
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	2b09      	cmp	r3, #9
 80031ce:	bf94      	ite	ls
 80031d0:	2301      	movls	r3, #1
 80031d2:	2300      	movhi	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d079      	beq.n	80032ce <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d107      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x4c2>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	0e9b      	lsrs	r3, r3, #26
 80031ec:	3301      	adds	r3, #1
 80031ee:	069b      	lsls	r3, r3, #26
 80031f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031f4:	e015      	b.n	8003222 <HAL_ADC_ConfigChannel+0x4ee>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003204:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003206:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003208:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800320e:	2320      	movs	r3, #32
 8003210:	e003      	b.n	800321a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003214:	fab3 f383 	clz	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	3301      	adds	r3, #1
 800321c:	069b      	lsls	r3, r3, #26
 800321e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x50e>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	0e9b      	lsrs	r3, r3, #26
 8003234:	3301      	adds	r3, #1
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	2101      	movs	r1, #1
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	e017      	b.n	8003272 <HAL_ADC_ConfigChannel+0x53e>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003252:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800325a:	2320      	movs	r3, #32
 800325c:	e003      	b.n	8003266 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800325e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003260:	fab3 f383 	clz	r3, r3
 8003264:	b2db      	uxtb	r3, r3
 8003266:	3301      	adds	r3, #1
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	2101      	movs	r1, #1
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	ea42 0103 	orr.w	r1, r2, r3
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10a      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x564>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	0e9b      	lsrs	r3, r3, #26
 8003288:	3301      	adds	r3, #1
 800328a:	f003 021f 	and.w	r2, r3, #31
 800328e:	4613      	mov	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4413      	add	r3, r2
 8003294:	051b      	lsls	r3, r3, #20
 8003296:	e018      	b.n	80032ca <HAL_ADC_ConfigChannel+0x596>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a0:	fa93 f3a3 	rbit	r3, r3
 80032a4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80032a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80032aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80032b0:	2320      	movs	r3, #32
 80032b2:	e003      	b.n	80032bc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80032b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	3301      	adds	r3, #1
 80032be:	f003 021f 	and.w	r2, r3, #31
 80032c2:	4613      	mov	r3, r2
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	4413      	add	r3, r2
 80032c8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ca:	430b      	orrs	r3, r1
 80032cc:	e081      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d107      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x5b6>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	0e9b      	lsrs	r3, r3, #26
 80032e0:	3301      	adds	r3, #1
 80032e2:	069b      	lsls	r3, r3, #26
 80032e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032e8:	e015      	b.n	8003316 <HAL_ADC_ConfigChannel+0x5e2>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80032fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003302:	2320      	movs	r3, #32
 8003304:	e003      	b.n	800330e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003308:	fab3 f383 	clz	r3, r3
 800330c:	b2db      	uxtb	r3, r3
 800330e:	3301      	adds	r3, #1
 8003310:	069b      	lsls	r3, r3, #26
 8003312:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x602>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	0e9b      	lsrs	r3, r3, #26
 8003328:	3301      	adds	r3, #1
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	2101      	movs	r1, #1
 8003330:	fa01 f303 	lsl.w	r3, r1, r3
 8003334:	e017      	b.n	8003366 <HAL_ADC_ConfigChannel+0x632>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	fa93 f3a3 	rbit	r3, r3
 8003342:	61bb      	str	r3, [r7, #24]
  return result;
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800334e:	2320      	movs	r3, #32
 8003350:	e003      	b.n	800335a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	fab3 f383 	clz	r3, r3
 8003358:	b2db      	uxtb	r3, r3
 800335a:	3301      	adds	r3, #1
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	2101      	movs	r1, #1
 8003362:	fa01 f303 	lsl.w	r3, r1, r3
 8003366:	ea42 0103 	orr.w	r1, r2, r3
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10d      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x65e>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	0e9b      	lsrs	r3, r3, #26
 800337c:	3301      	adds	r3, #1
 800337e:	f003 021f 	and.w	r2, r3, #31
 8003382:	4613      	mov	r3, r2
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4413      	add	r3, r2
 8003388:	3b1e      	subs	r3, #30
 800338a:	051b      	lsls	r3, r3, #20
 800338c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003390:	e01e      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x69c>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	60fb      	str	r3, [r7, #12]
  return result;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d104      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80033aa:	2320      	movs	r3, #32
 80033ac:	e006      	b.n	80033bc <HAL_ADC_ConfigChannel+0x688>
 80033ae:	bf00      	nop
 80033b0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	f003 021f 	and.w	r2, r3, #31
 80033c2:	4613      	mov	r3, r2
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	4413      	add	r3, r2
 80033c8:	3b1e      	subs	r3, #30
 80033ca:	051b      	lsls	r3, r3, #20
 80033cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033d0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033d6:	4619      	mov	r1, r3
 80033d8:	f7ff f995 	bl	8002706 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b44      	ldr	r3, [pc, #272]	@ (80034f4 <HAL_ADC_ConfigChannel+0x7c0>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d07a      	beq.n	80034de <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033e8:	4843      	ldr	r0, [pc, #268]	@ (80034f8 <HAL_ADC_ConfigChannel+0x7c4>)
 80033ea:	f7ff f8fd 	bl	80025e8 <LL_ADC_GetCommonPathInternalCh>
 80033ee:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a41      	ldr	r2, [pc, #260]	@ (80034fc <HAL_ADC_ConfigChannel+0x7c8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d12c      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003400:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d126      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a3c      	ldr	r2, [pc, #240]	@ (8003500 <HAL_ADC_ConfigChannel+0x7cc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d004      	beq.n	800341c <HAL_ADC_ConfigChannel+0x6e8>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a3b      	ldr	r2, [pc, #236]	@ (8003504 <HAL_ADC_ConfigChannel+0x7d0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d15d      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800341c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003420:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003424:	4619      	mov	r1, r3
 8003426:	4834      	ldr	r0, [pc, #208]	@ (80034f8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003428:	f7ff f8cb 	bl	80025c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800342c:	4b36      	ldr	r3, [pc, #216]	@ (8003508 <HAL_ADC_ConfigChannel+0x7d4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	099b      	lsrs	r3, r3, #6
 8003432:	4a36      	ldr	r2, [pc, #216]	@ (800350c <HAL_ADC_ConfigChannel+0x7d8>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	099b      	lsrs	r3, r3, #6
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	4613      	mov	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003446:	e002      	b.n	800344e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	3b01      	subs	r3, #1
 800344c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f9      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003454:	e040      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a2d      	ldr	r2, [pc, #180]	@ (8003510 <HAL_ADC_ConfigChannel+0x7dc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d118      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003460:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003464:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d112      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a23      	ldr	r2, [pc, #140]	@ (8003500 <HAL_ADC_ConfigChannel+0x7cc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d004      	beq.n	8003480 <HAL_ADC_ConfigChannel+0x74c>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a22      	ldr	r2, [pc, #136]	@ (8003504 <HAL_ADC_ConfigChannel+0x7d0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d12d      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003480:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003484:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003488:	4619      	mov	r1, r3
 800348a:	481b      	ldr	r0, [pc, #108]	@ (80034f8 <HAL_ADC_ConfigChannel+0x7c4>)
 800348c:	f7ff f899 	bl	80025c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003490:	e024      	b.n	80034dc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1f      	ldr	r2, [pc, #124]	@ (8003514 <HAL_ADC_ConfigChannel+0x7e0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d120      	bne.n	80034de <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800349c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d11a      	bne.n	80034de <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a14      	ldr	r2, [pc, #80]	@ (8003500 <HAL_ADC_ConfigChannel+0x7cc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d115      	bne.n	80034de <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034ba:	4619      	mov	r1, r3
 80034bc:	480e      	ldr	r0, [pc, #56]	@ (80034f8 <HAL_ADC_ConfigChannel+0x7c4>)
 80034be:	f7ff f880 	bl	80025c2 <LL_ADC_SetCommonPathInternalCh>
 80034c2:	e00c      	b.n	80034de <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c8:	f043 0220 	orr.w	r2, r3, #32
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80034d6:	e002      	b.n	80034de <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034d8:	bf00      	nop
 80034da:	e000      	b.n	80034de <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80034e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	37d8      	adds	r7, #216	@ 0xd8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	80080000 	.word	0x80080000
 80034f8:	50040300 	.word	0x50040300
 80034fc:	c7520000 	.word	0xc7520000
 8003500:	50040000 	.word	0x50040000
 8003504:	50040200 	.word	0x50040200
 8003508:	20000000 	.word	0x20000000
 800350c:	053e2d63 	.word	0x053e2d63
 8003510:	cb840000 	.word	0xcb840000
 8003514:	80000001 	.word	0x80000001

08003518 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff f9ab 	bl	8002884 <LL_ADC_IsEnabled>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d169      	bne.n	8003608 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	4b36      	ldr	r3, [pc, #216]	@ (8003614 <ADC_Enable+0xfc>)
 800353c:	4013      	ands	r3, r2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00d      	beq.n	800355e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003546:	f043 0210 	orr.w	r2, r3, #16
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003552:	f043 0201 	orr.w	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e055      	b.n	800360a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff f97a 	bl	800285c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003568:	482b      	ldr	r0, [pc, #172]	@ (8003618 <ADC_Enable+0x100>)
 800356a:	f7ff f83d 	bl	80025e8 <LL_ADC_GetCommonPathInternalCh>
 800356e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003570:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003574:	2b00      	cmp	r3, #0
 8003576:	d013      	beq.n	80035a0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003578:	4b28      	ldr	r3, [pc, #160]	@ (800361c <ADC_Enable+0x104>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	099b      	lsrs	r3, r3, #6
 800357e:	4a28      	ldr	r2, [pc, #160]	@ (8003620 <ADC_Enable+0x108>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	4613      	mov	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003592:	e002      	b.n	800359a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	3b01      	subs	r3, #1
 8003598:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f9      	bne.n	8003594 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035a0:	f7fe fff0 	bl	8002584 <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035a6:	e028      	b.n	80035fa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff f969 	bl	8002884 <LL_ADC_IsEnabled>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d104      	bne.n	80035c2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff f94d 	bl	800285c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035c2:	f7fe ffdf 	bl	8002584 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d914      	bls.n	80035fa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d00d      	beq.n	80035fa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e2:	f043 0210 	orr.w	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ee:	f043 0201 	orr.w	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e007      	b.n	800360a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b01      	cmp	r3, #1
 8003606:	d1cf      	bne.n	80035a8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	8000003f 	.word	0x8000003f
 8003618:	50040300 	.word	0x50040300
 800361c:	20000000 	.word	0x20000000
 8003620:	053e2d63 	.word	0x053e2d63

08003624 <LL_ADC_IsEnabled>:
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <LL_ADC_IsEnabled+0x18>
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <LL_ADC_IsEnabled+0x1a>
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <LL_ADC_REG_IsConversionOngoing>:
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b04      	cmp	r3, #4
 800365c:	d101      	bne.n	8003662 <LL_ADC_REG_IsConversionOngoing+0x18>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b09f      	sub	sp, #124	@ 0x7c
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800368a:	2302      	movs	r3, #2
 800368c:	e093      	b.n	80037b6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003696:	2300      	movs	r3, #0
 8003698:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800369a:	2300      	movs	r3, #0
 800369c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a47      	ldr	r2, [pc, #284]	@ (80037c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d102      	bne.n	80036ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80036a8:	4b46      	ldr	r3, [pc, #280]	@ (80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80036aa:	60bb      	str	r3, [r7, #8]
 80036ac:	e001      	b.n	80036b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80036ae:	2300      	movs	r3, #0
 80036b0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10b      	bne.n	80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036bc:	f043 0220 	orr.w	r2, r3, #32
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e072      	b.n	80037b6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff ffb9 	bl	800364a <LL_ADC_REG_IsConversionOngoing>
 80036d8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff ffb3 	bl	800364a <LL_ADC_REG_IsConversionOngoing>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d154      	bne.n	8003794 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80036ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d151      	bne.n	8003794 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036f0:	4b35      	ldr	r3, [pc, #212]	@ (80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80036f2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d02c      	beq.n	8003756 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80036fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	6859      	ldr	r1, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800370e:	035b      	lsls	r3, r3, #13
 8003710:	430b      	orrs	r3, r1
 8003712:	431a      	orrs	r2, r3
 8003714:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003716:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003718:	4829      	ldr	r0, [pc, #164]	@ (80037c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800371a:	f7ff ff83 	bl	8003624 <LL_ADC_IsEnabled>
 800371e:	4604      	mov	r4, r0
 8003720:	4828      	ldr	r0, [pc, #160]	@ (80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003722:	f7ff ff7f 	bl	8003624 <LL_ADC_IsEnabled>
 8003726:	4603      	mov	r3, r0
 8003728:	431c      	orrs	r4, r3
 800372a:	4828      	ldr	r0, [pc, #160]	@ (80037cc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800372c:	f7ff ff7a 	bl	8003624 <LL_ADC_IsEnabled>
 8003730:	4603      	mov	r3, r0
 8003732:	4323      	orrs	r3, r4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d137      	bne.n	80037a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003738:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003740:	f023 030f 	bic.w	r3, r3, #15
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	6811      	ldr	r1, [r2, #0]
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	6892      	ldr	r2, [r2, #8]
 800374c:	430a      	orrs	r2, r1
 800374e:	431a      	orrs	r2, r3
 8003750:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003752:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003754:	e028      	b.n	80037a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800375e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003760:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003762:	4817      	ldr	r0, [pc, #92]	@ (80037c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003764:	f7ff ff5e 	bl	8003624 <LL_ADC_IsEnabled>
 8003768:	4604      	mov	r4, r0
 800376a:	4816      	ldr	r0, [pc, #88]	@ (80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800376c:	f7ff ff5a 	bl	8003624 <LL_ADC_IsEnabled>
 8003770:	4603      	mov	r3, r0
 8003772:	431c      	orrs	r4, r3
 8003774:	4815      	ldr	r0, [pc, #84]	@ (80037cc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003776:	f7ff ff55 	bl	8003624 <LL_ADC_IsEnabled>
 800377a:	4603      	mov	r3, r0
 800377c:	4323      	orrs	r3, r4
 800377e:	2b00      	cmp	r3, #0
 8003780:	d112      	bne.n	80037a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003782:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800378a:	f023 030f 	bic.w	r3, r3, #15
 800378e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003790:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003792:	e009      	b.n	80037a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003798:	f043 0220 	orr.w	r2, r3, #32
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80037a6:	e000      	b.n	80037aa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80037b2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	377c      	adds	r7, #124	@ 0x7c
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd90      	pop	{r4, r7, pc}
 80037be:	bf00      	nop
 80037c0:	50040000 	.word	0x50040000
 80037c4:	50040100 	.word	0x50040100
 80037c8:	50040300 	.word	0x50040300
 80037cc:	50040200 	.word	0x50040200

080037d0 <__NVIC_SetPriorityGrouping>:
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003814 <__NVIC_SetPriorityGrouping+0x44>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037ec:	4013      	ands	r3, r2
 80037ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003802:	4a04      	ldr	r2, [pc, #16]	@ (8003814 <__NVIC_SetPriorityGrouping+0x44>)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	60d3      	str	r3, [r2, #12]
}
 8003808:	bf00      	nop
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <__NVIC_GetPriorityGrouping>:
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800381c:	4b04      	ldr	r3, [pc, #16]	@ (8003830 <__NVIC_GetPriorityGrouping+0x18>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	0a1b      	lsrs	r3, r3, #8
 8003822:	f003 0307 	and.w	r3, r3, #7
}
 8003826:	4618      	mov	r0, r3
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <__NVIC_EnableIRQ>:
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	2b00      	cmp	r3, #0
 8003844:	db0b      	blt.n	800385e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	f003 021f 	and.w	r2, r3, #31
 800384c:	4907      	ldr	r1, [pc, #28]	@ (800386c <__NVIC_EnableIRQ+0x38>)
 800384e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	2001      	movs	r0, #1
 8003856:	fa00 f202 	lsl.w	r2, r0, r2
 800385a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	e000e100 	.word	0xe000e100

08003870 <__NVIC_SetPriority>:
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800387c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003880:	2b00      	cmp	r3, #0
 8003882:	db0a      	blt.n	800389a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	490c      	ldr	r1, [pc, #48]	@ (80038bc <__NVIC_SetPriority+0x4c>)
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	0112      	lsls	r2, r2, #4
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	440b      	add	r3, r1
 8003894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003898:	e00a      	b.n	80038b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	b2da      	uxtb	r2, r3
 800389e:	4908      	ldr	r1, [pc, #32]	@ (80038c0 <__NVIC_SetPriority+0x50>)
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	3b04      	subs	r3, #4
 80038a8:	0112      	lsls	r2, r2, #4
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	440b      	add	r3, r1
 80038ae:	761a      	strb	r2, [r3, #24]
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	e000e100 	.word	0xe000e100
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <NVIC_EncodePriority>:
{
 80038c4:	b480      	push	{r7}
 80038c6:	b089      	sub	sp, #36	@ 0x24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f1c3 0307 	rsb	r3, r3, #7
 80038de:	2b04      	cmp	r3, #4
 80038e0:	bf28      	it	cs
 80038e2:	2304      	movcs	r3, #4
 80038e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	3304      	adds	r3, #4
 80038ea:	2b06      	cmp	r3, #6
 80038ec:	d902      	bls.n	80038f4 <NVIC_EncodePriority+0x30>
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	3b03      	subs	r3, #3
 80038f2:	e000      	b.n	80038f6 <NVIC_EncodePriority+0x32>
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f8:	f04f 32ff 	mov.w	r2, #4294967295
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43da      	mvns	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	401a      	ands	r2, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800390c:	f04f 31ff 	mov.w	r1, #4294967295
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	fa01 f303 	lsl.w	r3, r1, r3
 8003916:	43d9      	mvns	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800391c:	4313      	orrs	r3, r2
}
 800391e:	4618      	mov	r0, r3
 8003920:	3724      	adds	r7, #36	@ 0x24
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <SysTick_Config>:
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3b01      	subs	r3, #1
 8003938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800393c:	d301      	bcc.n	8003942 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800393e:	2301      	movs	r3, #1
 8003940:	e00f      	b.n	8003962 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003942:	4a0a      	ldr	r2, [pc, #40]	@ (800396c <SysTick_Config+0x40>)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800394a:	210f      	movs	r1, #15
 800394c:	f04f 30ff 	mov.w	r0, #4294967295
 8003950:	f7ff ff8e 	bl	8003870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003954:	4b05      	ldr	r3, [pc, #20]	@ (800396c <SysTick_Config+0x40>)
 8003956:	2200      	movs	r2, #0
 8003958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800395a:	4b04      	ldr	r3, [pc, #16]	@ (800396c <SysTick_Config+0x40>)
 800395c:	2207      	movs	r2, #7
 800395e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	e000e010 	.word	0xe000e010

08003970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff ff29 	bl	80037d0 <__NVIC_SetPriorityGrouping>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b086      	sub	sp, #24
 800398a:	af00      	add	r7, sp, #0
 800398c:	4603      	mov	r3, r0
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003998:	f7ff ff3e 	bl	8003818 <__NVIC_GetPriorityGrouping>
 800399c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	6978      	ldr	r0, [r7, #20]
 80039a4:	f7ff ff8e 	bl	80038c4 <NVIC_EncodePriority>
 80039a8:	4602      	mov	r2, r0
 80039aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff5d 	bl	8003870 <__NVIC_SetPriority>
}
 80039b6:	bf00      	nop
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	4603      	mov	r3, r0
 80039c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff ff31 	bl	8003834 <__NVIC_EnableIRQ>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff ffa2 	bl	800392c <SysTick_Config>
 80039e8:	4603      	mov	r3, r0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a02:	e17f      	b.n	8003d04 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2101      	movs	r1, #1
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a10:	4013      	ands	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 8171 	beq.w	8003cfe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d005      	beq.n	8003a34 <HAL_GPIO_Init+0x40>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d130      	bne.n	8003a96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	2203      	movs	r2, #3
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f003 0201 	and.w	r2, r3, #1
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d118      	bne.n	8003ad4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	08db      	lsrs	r3, r3, #3
 8003abe:	f003 0201 	and.w	r2, r3, #1
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d017      	beq.n	8003b10 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	2203      	movs	r2, #3
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d123      	bne.n	8003b64 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	08da      	lsrs	r2, r3, #3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3208      	adds	r2, #8
 8003b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	220f      	movs	r2, #15
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	08da      	lsrs	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3208      	adds	r2, #8
 8003b5e:	6939      	ldr	r1, [r7, #16]
 8003b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	2203      	movs	r2, #3
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0203 	and.w	r2, r3, #3
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80ac 	beq.w	8003cfe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba6:	4b5f      	ldr	r3, [pc, #380]	@ (8003d24 <HAL_GPIO_Init+0x330>)
 8003ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003baa:	4a5e      	ldr	r2, [pc, #376]	@ (8003d24 <HAL_GPIO_Init+0x330>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8003d24 <HAL_GPIO_Init+0x330>)
 8003bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bbe:	4a5a      	ldr	r2, [pc, #360]	@ (8003d28 <HAL_GPIO_Init+0x334>)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	089b      	lsrs	r3, r3, #2
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	220f      	movs	r2, #15
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4013      	ands	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003be8:	d025      	beq.n	8003c36 <HAL_GPIO_Init+0x242>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a4f      	ldr	r2, [pc, #316]	@ (8003d2c <HAL_GPIO_Init+0x338>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01f      	beq.n	8003c32 <HAL_GPIO_Init+0x23e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a4e      	ldr	r2, [pc, #312]	@ (8003d30 <HAL_GPIO_Init+0x33c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d019      	beq.n	8003c2e <HAL_GPIO_Init+0x23a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a4d      	ldr	r2, [pc, #308]	@ (8003d34 <HAL_GPIO_Init+0x340>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d013      	beq.n	8003c2a <HAL_GPIO_Init+0x236>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a4c      	ldr	r2, [pc, #304]	@ (8003d38 <HAL_GPIO_Init+0x344>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00d      	beq.n	8003c26 <HAL_GPIO_Init+0x232>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a4b      	ldr	r2, [pc, #300]	@ (8003d3c <HAL_GPIO_Init+0x348>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d007      	beq.n	8003c22 <HAL_GPIO_Init+0x22e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a4a      	ldr	r2, [pc, #296]	@ (8003d40 <HAL_GPIO_Init+0x34c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d101      	bne.n	8003c1e <HAL_GPIO_Init+0x22a>
 8003c1a:	2306      	movs	r3, #6
 8003c1c:	e00c      	b.n	8003c38 <HAL_GPIO_Init+0x244>
 8003c1e:	2307      	movs	r3, #7
 8003c20:	e00a      	b.n	8003c38 <HAL_GPIO_Init+0x244>
 8003c22:	2305      	movs	r3, #5
 8003c24:	e008      	b.n	8003c38 <HAL_GPIO_Init+0x244>
 8003c26:	2304      	movs	r3, #4
 8003c28:	e006      	b.n	8003c38 <HAL_GPIO_Init+0x244>
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e004      	b.n	8003c38 <HAL_GPIO_Init+0x244>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e002      	b.n	8003c38 <HAL_GPIO_Init+0x244>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <HAL_GPIO_Init+0x244>
 8003c36:	2300      	movs	r3, #0
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	f002 0203 	and.w	r2, r2, #3
 8003c3e:	0092      	lsls	r2, r2, #2
 8003c40:	4093      	lsls	r3, r2
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c48:	4937      	ldr	r1, [pc, #220]	@ (8003d28 <HAL_GPIO_Init+0x334>)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	089b      	lsrs	r3, r3, #2
 8003c4e:	3302      	adds	r3, #2
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c56:	4b3b      	ldr	r3, [pc, #236]	@ (8003d44 <HAL_GPIO_Init+0x350>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4013      	ands	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c7a:	4a32      	ldr	r2, [pc, #200]	@ (8003d44 <HAL_GPIO_Init+0x350>)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c80:	4b30      	ldr	r3, [pc, #192]	@ (8003d44 <HAL_GPIO_Init+0x350>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ca4:	4a27      	ldr	r2, [pc, #156]	@ (8003d44 <HAL_GPIO_Init+0x350>)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003caa:	4b26      	ldr	r3, [pc, #152]	@ (8003d44 <HAL_GPIO_Init+0x350>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cce:	4a1d      	ldr	r2, [pc, #116]	@ (8003d44 <HAL_GPIO_Init+0x350>)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d44 <HAL_GPIO_Init+0x350>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cf8:	4a12      	ldr	r2, [pc, #72]	@ (8003d44 <HAL_GPIO_Init+0x350>)
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	3301      	adds	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f47f ae78 	bne.w	8003a04 <HAL_GPIO_Init+0x10>
  }
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
 8003d18:	371c      	adds	r7, #28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40010000 	.word	0x40010000
 8003d2c:	48000400 	.word	0x48000400
 8003d30:	48000800 	.word	0x48000800
 8003d34:	48000c00 	.word	0x48000c00
 8003d38:	48001000 	.word	0x48001000
 8003d3c:	48001400 	.word	0x48001400
 8003d40:	48001800 	.word	0x48001800
 8003d44:	40010400 	.word	0x40010400

08003d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	807b      	strh	r3, [r7, #2]
 8003d54:	4613      	mov	r3, r2
 8003d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d58:	787b      	ldrb	r3, [r7, #1]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d5e:	887a      	ldrh	r2, [r7, #2]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d64:	e002      	b.n	8003d6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d66:	887a      	ldrh	r2, [r7, #2]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e08d      	b.n	8003ea6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fd fe1c 	bl	80019dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2224      	movs	r2, #36	@ 0x24
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0201 	bic.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003dc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d107      	bne.n	8003df2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	e006      	b.n	8003e00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003dfe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d108      	bne.n	8003e1a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e16:	605a      	str	r2, [r3, #4]
 8003e18:	e007      	b.n	8003e2a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69d9      	ldr	r1, [r3, #28]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1a      	ldr	r2, [r3, #32]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d138      	bne.n	8003f36 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e032      	b.n	8003f38 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2224      	movs	r2, #36	@ 0x24
 8003ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0201 	bic.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f00:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6819      	ldr	r1, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e000      	b.n	8003f38 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f36:	2302      	movs	r3, #2
  }
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d139      	bne.n	8003fce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e033      	b.n	8003fd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2224      	movs	r2, #36	@ 0x24
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0201 	bic.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f96:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	021b      	lsls	r3, r3, #8
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0201 	orr.w	r2, r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	e000      	b.n	8003fd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fce:	2302      	movs	r3, #2
  }
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003fe0:	4b04      	ldr	r3, [pc, #16]	@ (8003ff4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40007000 	.word	0x40007000

08003ff8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004006:	d130      	bne.n	800406a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004008:	4b23      	ldr	r3, [pc, #140]	@ (8004098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004014:	d038      	beq.n	8004088 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004016:	4b20      	ldr	r3, [pc, #128]	@ (8004098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800401e:	4a1e      	ldr	r2, [pc, #120]	@ (8004098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004020:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004024:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004026:	4b1d      	ldr	r3, [pc, #116]	@ (800409c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2232      	movs	r2, #50	@ 0x32
 800402c:	fb02 f303 	mul.w	r3, r2, r3
 8004030:	4a1b      	ldr	r2, [pc, #108]	@ (80040a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	0c9b      	lsrs	r3, r3, #18
 8004038:	3301      	adds	r3, #1
 800403a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800403c:	e002      	b.n	8004044 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3b01      	subs	r3, #1
 8004042:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004044:	4b14      	ldr	r3, [pc, #80]	@ (8004098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800404c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004050:	d102      	bne.n	8004058 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f2      	bne.n	800403e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004058:	4b0f      	ldr	r3, [pc, #60]	@ (8004098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004060:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004064:	d110      	bne.n	8004088 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e00f      	b.n	800408a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800406a:	4b0b      	ldr	r3, [pc, #44]	@ (8004098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004076:	d007      	beq.n	8004088 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004078:	4b07      	ldr	r3, [pc, #28]	@ (8004098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004080:	4a05      	ldr	r2, [pc, #20]	@ (8004098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004082:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004086:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40007000 	.word	0x40007000
 800409c:	20000000 	.word	0x20000000
 80040a0:	431bde83 	.word	0x431bde83

080040a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e3ca      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040b6:	4b97      	ldr	r3, [pc, #604]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
 80040be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040c0:	4b94      	ldr	r3, [pc, #592]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0303 	and.w	r3, r3, #3
 80040c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0310 	and.w	r3, r3, #16
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 80e4 	beq.w	80042a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d007      	beq.n	80040ee <HAL_RCC_OscConfig+0x4a>
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2b0c      	cmp	r3, #12
 80040e2:	f040 808b 	bne.w	80041fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	f040 8087 	bne.w	80041fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040ee:	4b89      	ldr	r3, [pc, #548]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <HAL_RCC_OscConfig+0x62>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e3a2      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1a      	ldr	r2, [r3, #32]
 800410a:	4b82      	ldr	r3, [pc, #520]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d004      	beq.n	8004120 <HAL_RCC_OscConfig+0x7c>
 8004116:	4b7f      	ldr	r3, [pc, #508]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800411e:	e005      	b.n	800412c <HAL_RCC_OscConfig+0x88>
 8004120:	4b7c      	ldr	r3, [pc, #496]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 8004122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004126:	091b      	lsrs	r3, r3, #4
 8004128:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800412c:	4293      	cmp	r3, r2
 800412e:	d223      	bcs.n	8004178 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	4618      	mov	r0, r3
 8004136:	f000 fd55 	bl	8004be4 <RCC_SetFlashLatencyFromMSIRange>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e383      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004144:	4b73      	ldr	r3, [pc, #460]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a72      	ldr	r2, [pc, #456]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 800414a:	f043 0308 	orr.w	r3, r3, #8
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	4b70      	ldr	r3, [pc, #448]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	496d      	ldr	r1, [pc, #436]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004162:	4b6c      	ldr	r3, [pc, #432]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	4968      	ldr	r1, [pc, #416]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 8004172:	4313      	orrs	r3, r2
 8004174:	604b      	str	r3, [r1, #4]
 8004176:	e025      	b.n	80041c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004178:	4b66      	ldr	r3, [pc, #408]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a65      	ldr	r2, [pc, #404]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 800417e:	f043 0308 	orr.w	r3, r3, #8
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	4b63      	ldr	r3, [pc, #396]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	4960      	ldr	r1, [pc, #384]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 8004192:	4313      	orrs	r3, r2
 8004194:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004196:	4b5f      	ldr	r3, [pc, #380]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	495b      	ldr	r1, [pc, #364]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d109      	bne.n	80041c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fd15 	bl	8004be4 <RCC_SetFlashLatencyFromMSIRange>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e343      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041c4:	f000 fc4a 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 80041c8:	4602      	mov	r2, r0
 80041ca:	4b52      	ldr	r3, [pc, #328]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	4950      	ldr	r1, [pc, #320]	@ (8004318 <HAL_RCC_OscConfig+0x274>)
 80041d6:	5ccb      	ldrb	r3, [r1, r3]
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
 80041e0:	4a4e      	ldr	r2, [pc, #312]	@ (800431c <HAL_RCC_OscConfig+0x278>)
 80041e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041e4:	4b4e      	ldr	r3, [pc, #312]	@ (8004320 <HAL_RCC_OscConfig+0x27c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fe f97b 	bl	80024e4 <HAL_InitTick>
 80041ee:	4603      	mov	r3, r0
 80041f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d052      	beq.n	800429e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	e327      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d032      	beq.n	800426a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004204:	4b43      	ldr	r3, [pc, #268]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a42      	ldr	r2, [pc, #264]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004210:	f7fe f9b8 	bl	8002584 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004218:	f7fe f9b4 	bl	8002584 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e310      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800422a:	4b3a      	ldr	r3, [pc, #232]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004236:	4b37      	ldr	r3, [pc, #220]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a36      	ldr	r2, [pc, #216]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 800423c:	f043 0308 	orr.w	r3, r3, #8
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	4b34      	ldr	r3, [pc, #208]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	4931      	ldr	r1, [pc, #196]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 8004250:	4313      	orrs	r3, r2
 8004252:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004254:	4b2f      	ldr	r3, [pc, #188]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	021b      	lsls	r3, r3, #8
 8004262:	492c      	ldr	r1, [pc, #176]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 8004264:	4313      	orrs	r3, r2
 8004266:	604b      	str	r3, [r1, #4]
 8004268:	e01a      	b.n	80042a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800426a:	4b2a      	ldr	r3, [pc, #168]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a29      	ldr	r2, [pc, #164]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004276:	f7fe f985 	bl	8002584 <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800427e:	f7fe f981 	bl	8002584 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e2dd      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004290:	4b20      	ldr	r3, [pc, #128]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1f0      	bne.n	800427e <HAL_RCC_OscConfig+0x1da>
 800429c:	e000      	b.n	80042a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800429e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d074      	beq.n	8004396 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d005      	beq.n	80042be <HAL_RCC_OscConfig+0x21a>
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	2b0c      	cmp	r3, #12
 80042b6:	d10e      	bne.n	80042d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d10b      	bne.n	80042d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042be:	4b15      	ldr	r3, [pc, #84]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d064      	beq.n	8004394 <HAL_RCC_OscConfig+0x2f0>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d160      	bne.n	8004394 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e2ba      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042de:	d106      	bne.n	80042ee <HAL_RCC_OscConfig+0x24a>
 80042e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 80042e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	e026      	b.n	800433c <HAL_RCC_OscConfig+0x298>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042f6:	d115      	bne.n	8004324 <HAL_RCC_OscConfig+0x280>
 80042f8:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a05      	ldr	r2, [pc, #20]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 80042fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	4b03      	ldr	r3, [pc, #12]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a02      	ldr	r2, [pc, #8]	@ (8004314 <HAL_RCC_OscConfig+0x270>)
 800430a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	e014      	b.n	800433c <HAL_RCC_OscConfig+0x298>
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000
 8004318:	08008e24 	.word	0x08008e24
 800431c:	20000000 	.word	0x20000000
 8004320:	20000004 	.word	0x20000004
 8004324:	4ba0      	ldr	r3, [pc, #640]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a9f      	ldr	r2, [pc, #636]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 800432a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	4b9d      	ldr	r3, [pc, #628]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a9c      	ldr	r2, [pc, #624]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 8004336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800433a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d013      	beq.n	800436c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7fe f91e 	bl	8002584 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800434c:	f7fe f91a 	bl	8002584 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b64      	cmp	r3, #100	@ 0x64
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e276      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800435e:	4b92      	ldr	r3, [pc, #584]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0x2a8>
 800436a:	e014      	b.n	8004396 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436c:	f7fe f90a 	bl	8002584 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004374:	f7fe f906 	bl	8002584 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b64      	cmp	r3, #100	@ 0x64
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e262      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004386:	4b88      	ldr	r3, [pc, #544]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x2d0>
 8004392:	e000      	b.n	8004396 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d060      	beq.n	8004464 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d005      	beq.n	80043b4 <HAL_RCC_OscConfig+0x310>
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b0c      	cmp	r3, #12
 80043ac:	d119      	bne.n	80043e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d116      	bne.n	80043e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043b4:	4b7c      	ldr	r3, [pc, #496]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <HAL_RCC_OscConfig+0x328>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e23f      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043cc:	4b76      	ldr	r3, [pc, #472]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	061b      	lsls	r3, r3, #24
 80043da:	4973      	ldr	r1, [pc, #460]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043e0:	e040      	b.n	8004464 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d023      	beq.n	8004432 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ea:	4b6f      	ldr	r3, [pc, #444]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a6e      	ldr	r2, [pc, #440]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 80043f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f6:	f7fe f8c5 	bl	8002584 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043fe:	f7fe f8c1 	bl	8002584 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e21d      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004410:	4b65      	ldr	r3, [pc, #404]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0f0      	beq.n	80043fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441c:	4b62      	ldr	r3, [pc, #392]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	061b      	lsls	r3, r3, #24
 800442a:	495f      	ldr	r1, [pc, #380]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 800442c:	4313      	orrs	r3, r2
 800442e:	604b      	str	r3, [r1, #4]
 8004430:	e018      	b.n	8004464 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004432:	4b5d      	ldr	r3, [pc, #372]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a5c      	ldr	r2, [pc, #368]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 8004438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800443c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443e:	f7fe f8a1 	bl	8002584 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004446:	f7fe f89d 	bl	8002584 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e1f9      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004458:	4b53      	ldr	r3, [pc, #332]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1f0      	bne.n	8004446 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d03c      	beq.n	80044ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01c      	beq.n	80044b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004478:	4b4b      	ldr	r3, [pc, #300]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 800447a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800447e:	4a4a      	ldr	r2, [pc, #296]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004488:	f7fe f87c 	bl	8002584 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004490:	f7fe f878 	bl	8002584 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e1d4      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044a2:	4b41      	ldr	r3, [pc, #260]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 80044a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0ef      	beq.n	8004490 <HAL_RCC_OscConfig+0x3ec>
 80044b0:	e01b      	b.n	80044ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b2:	4b3d      	ldr	r3, [pc, #244]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 80044b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044b8:	4a3b      	ldr	r2, [pc, #236]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 80044ba:	f023 0301 	bic.w	r3, r3, #1
 80044be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c2:	f7fe f85f 	bl	8002584 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ca:	f7fe f85b 	bl	8002584 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e1b7      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044dc:	4b32      	ldr	r3, [pc, #200]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 80044de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1ef      	bne.n	80044ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80a6 	beq.w	8004644 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f8:	2300      	movs	r3, #0
 80044fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80044fc:	4b2a      	ldr	r3, [pc, #168]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 80044fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10d      	bne.n	8004524 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004508:	4b27      	ldr	r3, [pc, #156]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 800450a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800450c:	4a26      	ldr	r2, [pc, #152]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 800450e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004512:	6593      	str	r3, [r2, #88]	@ 0x58
 8004514:	4b24      	ldr	r3, [pc, #144]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 8004516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004520:	2301      	movs	r3, #1
 8004522:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004524:	4b21      	ldr	r3, [pc, #132]	@ (80045ac <HAL_RCC_OscConfig+0x508>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d118      	bne.n	8004562 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004530:	4b1e      	ldr	r3, [pc, #120]	@ (80045ac <HAL_RCC_OscConfig+0x508>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1d      	ldr	r2, [pc, #116]	@ (80045ac <HAL_RCC_OscConfig+0x508>)
 8004536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800453a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453c:	f7fe f822 	bl	8002584 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004544:	f7fe f81e 	bl	8002584 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e17a      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004556:	4b15      	ldr	r3, [pc, #84]	@ (80045ac <HAL_RCC_OscConfig+0x508>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d108      	bne.n	800457c <HAL_RCC_OscConfig+0x4d8>
 800456a:	4b0f      	ldr	r3, [pc, #60]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004570:	4a0d      	ldr	r2, [pc, #52]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800457a:	e029      	b.n	80045d0 <HAL_RCC_OscConfig+0x52c>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b05      	cmp	r3, #5
 8004582:	d115      	bne.n	80045b0 <HAL_RCC_OscConfig+0x50c>
 8004584:	4b08      	ldr	r3, [pc, #32]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800458a:	4a07      	ldr	r2, [pc, #28]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 800458c:	f043 0304 	orr.w	r3, r3, #4
 8004590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004594:	4b04      	ldr	r3, [pc, #16]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459a:	4a03      	ldr	r2, [pc, #12]	@ (80045a8 <HAL_RCC_OscConfig+0x504>)
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045a4:	e014      	b.n	80045d0 <HAL_RCC_OscConfig+0x52c>
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40007000 	.word	0x40007000
 80045b0:	4b9c      	ldr	r3, [pc, #624]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b6:	4a9b      	ldr	r2, [pc, #620]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 80045b8:	f023 0301 	bic.w	r3, r3, #1
 80045bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045c0:	4b98      	ldr	r3, [pc, #608]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c6:	4a97      	ldr	r2, [pc, #604]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 80045c8:	f023 0304 	bic.w	r3, r3, #4
 80045cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d016      	beq.n	8004606 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d8:	f7fd ffd4 	bl	8002584 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045de:	e00a      	b.n	80045f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e0:	f7fd ffd0 	bl	8002584 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e12a      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045f6:	4b8b      	ldr	r3, [pc, #556]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 80045f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0ed      	beq.n	80045e0 <HAL_RCC_OscConfig+0x53c>
 8004604:	e015      	b.n	8004632 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004606:	f7fd ffbd 	bl	8002584 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800460c:	e00a      	b.n	8004624 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800460e:	f7fd ffb9 	bl	8002584 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800461c:	4293      	cmp	r3, r2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e113      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004624:	4b7f      	ldr	r3, [pc, #508]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 8004626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1ed      	bne.n	800460e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004632:	7ffb      	ldrb	r3, [r7, #31]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d105      	bne.n	8004644 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004638:	4b7a      	ldr	r3, [pc, #488]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 800463a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463c:	4a79      	ldr	r2, [pc, #484]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 800463e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004642:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80fe 	beq.w	800484a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004652:	2b02      	cmp	r3, #2
 8004654:	f040 80d0 	bne.w	80047f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004658:	4b72      	ldr	r3, [pc, #456]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f003 0203 	and.w	r2, r3, #3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004668:	429a      	cmp	r2, r3
 800466a:	d130      	bne.n	80046ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004676:	3b01      	subs	r3, #1
 8004678:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d127      	bne.n	80046ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004688:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d11f      	bne.n	80046ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004698:	2a07      	cmp	r2, #7
 800469a:	bf14      	ite	ne
 800469c:	2201      	movne	r2, #1
 800469e:	2200      	moveq	r2, #0
 80046a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d113      	bne.n	80046ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b0:	085b      	lsrs	r3, r3, #1
 80046b2:	3b01      	subs	r3, #1
 80046b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d109      	bne.n	80046ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	085b      	lsrs	r3, r3, #1
 80046c6:	3b01      	subs	r3, #1
 80046c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d06e      	beq.n	80047ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b0c      	cmp	r3, #12
 80046d2:	d069      	beq.n	80047a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046d4:	4b53      	ldr	r3, [pc, #332]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d105      	bne.n	80046ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80046e0:	4b50      	ldr	r3, [pc, #320]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0ad      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046f0:	4b4c      	ldr	r3, [pc, #304]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 80046f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046fc:	f7fd ff42 	bl	8002584 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004704:	f7fd ff3e 	bl	8002584 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e09a      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004716:	4b43      	ldr	r3, [pc, #268]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004722:	4b40      	ldr	r3, [pc, #256]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	4b40      	ldr	r3, [pc, #256]	@ (8004828 <HAL_RCC_OscConfig+0x784>)
 8004728:	4013      	ands	r3, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004732:	3a01      	subs	r2, #1
 8004734:	0112      	lsls	r2, r2, #4
 8004736:	4311      	orrs	r1, r2
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800473c:	0212      	lsls	r2, r2, #8
 800473e:	4311      	orrs	r1, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004744:	0852      	lsrs	r2, r2, #1
 8004746:	3a01      	subs	r2, #1
 8004748:	0552      	lsls	r2, r2, #21
 800474a:	4311      	orrs	r1, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004750:	0852      	lsrs	r2, r2, #1
 8004752:	3a01      	subs	r2, #1
 8004754:	0652      	lsls	r2, r2, #25
 8004756:	4311      	orrs	r1, r2
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800475c:	0912      	lsrs	r2, r2, #4
 800475e:	0452      	lsls	r2, r2, #17
 8004760:	430a      	orrs	r2, r1
 8004762:	4930      	ldr	r1, [pc, #192]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 8004764:	4313      	orrs	r3, r2
 8004766:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004768:	4b2e      	ldr	r3, [pc, #184]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a2d      	ldr	r2, [pc, #180]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 800476e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004772:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004774:	4b2b      	ldr	r3, [pc, #172]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4a2a      	ldr	r2, [pc, #168]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 800477a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800477e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004780:	f7fd ff00 	bl	8002584 <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004788:	f7fd fefc 	bl	8002584 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e058      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800479a:	4b22      	ldr	r3, [pc, #136]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0f0      	beq.n	8004788 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047a6:	e050      	b.n	800484a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e04f      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d148      	bne.n	800484a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a19      	ldr	r2, [pc, #100]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 80047be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047c4:	4b17      	ldr	r3, [pc, #92]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	4a16      	ldr	r2, [pc, #88]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 80047ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047d0:	f7fd fed8 	bl	8002584 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d8:	f7fd fed4 	bl	8002584 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e030      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f0      	beq.n	80047d8 <HAL_RCC_OscConfig+0x734>
 80047f6:	e028      	b.n	800484a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	2b0c      	cmp	r3, #12
 80047fc:	d023      	beq.n	8004846 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fe:	4b09      	ldr	r3, [pc, #36]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a08      	ldr	r2, [pc, #32]	@ (8004824 <HAL_RCC_OscConfig+0x780>)
 8004804:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480a:	f7fd febb 	bl	8002584 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004810:	e00c      	b.n	800482c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004812:	f7fd feb7 	bl	8002584 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d905      	bls.n	800482c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e013      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
 8004824:	40021000 	.word	0x40021000
 8004828:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800482c:	4b09      	ldr	r3, [pc, #36]	@ (8004854 <HAL_RCC_OscConfig+0x7b0>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1ec      	bne.n	8004812 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004838:	4b06      	ldr	r3, [pc, #24]	@ (8004854 <HAL_RCC_OscConfig+0x7b0>)
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	4905      	ldr	r1, [pc, #20]	@ (8004854 <HAL_RCC_OscConfig+0x7b0>)
 800483e:	4b06      	ldr	r3, [pc, #24]	@ (8004858 <HAL_RCC_OscConfig+0x7b4>)
 8004840:	4013      	ands	r3, r2
 8004842:	60cb      	str	r3, [r1, #12]
 8004844:	e001      	b.n	800484a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3720      	adds	r7, #32
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40021000 	.word	0x40021000
 8004858:	feeefffc 	.word	0xfeeefffc

0800485c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0e7      	b.n	8004a40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004870:	4b75      	ldr	r3, [pc, #468]	@ (8004a48 <HAL_RCC_ClockConfig+0x1ec>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d910      	bls.n	80048a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487e:	4b72      	ldr	r3, [pc, #456]	@ (8004a48 <HAL_RCC_ClockConfig+0x1ec>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 0207 	bic.w	r2, r3, #7
 8004886:	4970      	ldr	r1, [pc, #448]	@ (8004a48 <HAL_RCC_ClockConfig+0x1ec>)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	4313      	orrs	r3, r2
 800488c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800488e:	4b6e      	ldr	r3, [pc, #440]	@ (8004a48 <HAL_RCC_ClockConfig+0x1ec>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0cf      	b.n	8004a40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d010      	beq.n	80048ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	4b66      	ldr	r3, [pc, #408]	@ (8004a4c <HAL_RCC_ClockConfig+0x1f0>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d908      	bls.n	80048ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048bc:	4b63      	ldr	r3, [pc, #396]	@ (8004a4c <HAL_RCC_ClockConfig+0x1f0>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	4960      	ldr	r1, [pc, #384]	@ (8004a4c <HAL_RCC_ClockConfig+0x1f0>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d04c      	beq.n	8004974 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d107      	bne.n	80048f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e2:	4b5a      	ldr	r3, [pc, #360]	@ (8004a4c <HAL_RCC_ClockConfig+0x1f0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d121      	bne.n	8004932 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e0a6      	b.n	8004a40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d107      	bne.n	800490a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048fa:	4b54      	ldr	r3, [pc, #336]	@ (8004a4c <HAL_RCC_ClockConfig+0x1f0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d115      	bne.n	8004932 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e09a      	b.n	8004a40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d107      	bne.n	8004922 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004912:	4b4e      	ldr	r3, [pc, #312]	@ (8004a4c <HAL_RCC_ClockConfig+0x1f0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d109      	bne.n	8004932 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e08e      	b.n	8004a40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004922:	4b4a      	ldr	r3, [pc, #296]	@ (8004a4c <HAL_RCC_ClockConfig+0x1f0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e086      	b.n	8004a40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004932:	4b46      	ldr	r3, [pc, #280]	@ (8004a4c <HAL_RCC_ClockConfig+0x1f0>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f023 0203 	bic.w	r2, r3, #3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	4943      	ldr	r1, [pc, #268]	@ (8004a4c <HAL_RCC_ClockConfig+0x1f0>)
 8004940:	4313      	orrs	r3, r2
 8004942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004944:	f7fd fe1e 	bl	8002584 <HAL_GetTick>
 8004948:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494a:	e00a      	b.n	8004962 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800494c:	f7fd fe1a 	bl	8002584 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e06e      	b.n	8004a40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004962:	4b3a      	ldr	r3, [pc, #232]	@ (8004a4c <HAL_RCC_ClockConfig+0x1f0>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 020c 	and.w	r2, r3, #12
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	429a      	cmp	r2, r3
 8004972:	d1eb      	bne.n	800494c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d010      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	4b31      	ldr	r3, [pc, #196]	@ (8004a4c <HAL_RCC_ClockConfig+0x1f0>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800498c:	429a      	cmp	r2, r3
 800498e:	d208      	bcs.n	80049a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004990:	4b2e      	ldr	r3, [pc, #184]	@ (8004a4c <HAL_RCC_ClockConfig+0x1f0>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	492b      	ldr	r1, [pc, #172]	@ (8004a4c <HAL_RCC_ClockConfig+0x1f0>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049a2:	4b29      	ldr	r3, [pc, #164]	@ (8004a48 <HAL_RCC_ClockConfig+0x1ec>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d210      	bcs.n	80049d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b0:	4b25      	ldr	r3, [pc, #148]	@ (8004a48 <HAL_RCC_ClockConfig+0x1ec>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f023 0207 	bic.w	r2, r3, #7
 80049b8:	4923      	ldr	r1, [pc, #140]	@ (8004a48 <HAL_RCC_ClockConfig+0x1ec>)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	4313      	orrs	r3, r2
 80049be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c0:	4b21      	ldr	r3, [pc, #132]	@ (8004a48 <HAL_RCC_ClockConfig+0x1ec>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d001      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e036      	b.n	8004a40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049de:	4b1b      	ldr	r3, [pc, #108]	@ (8004a4c <HAL_RCC_ClockConfig+0x1f0>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	4918      	ldr	r1, [pc, #96]	@ (8004a4c <HAL_RCC_ClockConfig+0x1f0>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d009      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049fc:	4b13      	ldr	r3, [pc, #76]	@ (8004a4c <HAL_RCC_ClockConfig+0x1f0>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	4910      	ldr	r1, [pc, #64]	@ (8004a4c <HAL_RCC_ClockConfig+0x1f0>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a10:	f000 f824 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 8004a14:	4602      	mov	r2, r0
 8004a16:	4b0d      	ldr	r3, [pc, #52]	@ (8004a4c <HAL_RCC_ClockConfig+0x1f0>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	091b      	lsrs	r3, r3, #4
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	490b      	ldr	r1, [pc, #44]	@ (8004a50 <HAL_RCC_ClockConfig+0x1f4>)
 8004a22:	5ccb      	ldrb	r3, [r1, r3]
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2c:	4a09      	ldr	r2, [pc, #36]	@ (8004a54 <HAL_RCC_ClockConfig+0x1f8>)
 8004a2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a30:	4b09      	ldr	r3, [pc, #36]	@ (8004a58 <HAL_RCC_ClockConfig+0x1fc>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fd fd55 	bl	80024e4 <HAL_InitTick>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a3e:	7afb      	ldrb	r3, [r7, #11]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40022000 	.word	0x40022000
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	08008e24 	.word	0x08008e24
 8004a54:	20000000 	.word	0x20000000
 8004a58:	20000004 	.word	0x20000004

08004a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b089      	sub	sp, #36	@ 0x24
 8004a60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	2300      	movs	r3, #0
 8004a68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
 8004a72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a74:	4b3b      	ldr	r3, [pc, #236]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d005      	beq.n	8004a90 <HAL_RCC_GetSysClockFreq+0x34>
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b0c      	cmp	r3, #12
 8004a88:	d121      	bne.n	8004ace <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d11e      	bne.n	8004ace <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a90:	4b34      	ldr	r3, [pc, #208]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d107      	bne.n	8004aac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a9c:	4b31      	ldr	r3, [pc, #196]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004aa2:	0a1b      	lsrs	r3, r3, #8
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	61fb      	str	r3, [r7, #28]
 8004aaa:	e005      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004aac:	4b2d      	ldr	r3, [pc, #180]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	091b      	lsrs	r3, r3, #4
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ab8:	4a2b      	ldr	r2, [pc, #172]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10d      	bne.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004acc:	e00a      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d102      	bne.n	8004ada <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ad4:	4b25      	ldr	r3, [pc, #148]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	e004      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d101      	bne.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ae0:	4b23      	ldr	r3, [pc, #140]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ae2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	2b0c      	cmp	r3, #12
 8004ae8:	d134      	bne.n	8004b54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aea:	4b1e      	ldr	r3, [pc, #120]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d003      	beq.n	8004b02 <HAL_RCC_GetSysClockFreq+0xa6>
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d003      	beq.n	8004b08 <HAL_RCC_GetSysClockFreq+0xac>
 8004b00:	e005      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b02:	4b1a      	ldr	r3, [pc, #104]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x110>)
 8004b04:	617b      	str	r3, [r7, #20]
      break;
 8004b06:	e005      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b08:	4b19      	ldr	r3, [pc, #100]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b0a:	617b      	str	r3, [r7, #20]
      break;
 8004b0c:	e002      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	617b      	str	r3, [r7, #20]
      break;
 8004b12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b14:	4b13      	ldr	r3, [pc, #76]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	091b      	lsrs	r3, r3, #4
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	3301      	adds	r3, #1
 8004b20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b22:	4b10      	ldr	r3, [pc, #64]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	0a1b      	lsrs	r3, r3, #8
 8004b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	fb03 f202 	mul.w	r2, r3, r2
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	0e5b      	lsrs	r3, r3, #25
 8004b40:	f003 0303 	and.w	r3, r3, #3
 8004b44:	3301      	adds	r3, #1
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b54:	69bb      	ldr	r3, [r7, #24]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3724      	adds	r7, #36	@ 0x24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000
 8004b68:	08008e3c 	.word	0x08008e3c
 8004b6c:	00f42400 	.word	0x00f42400
 8004b70:	017d7840 	.word	0x017d7840

08004b74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b78:	4b03      	ldr	r3, [pc, #12]	@ (8004b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	20000000 	.word	0x20000000

08004b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b90:	f7ff fff0 	bl	8004b74 <HAL_RCC_GetHCLKFreq>
 8004b94:	4602      	mov	r2, r0
 8004b96:	4b06      	ldr	r3, [pc, #24]	@ (8004bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	0a1b      	lsrs	r3, r3, #8
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	4904      	ldr	r1, [pc, #16]	@ (8004bb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ba2:	5ccb      	ldrb	r3, [r1, r3]
 8004ba4:	f003 031f 	and.w	r3, r3, #31
 8004ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	08008e34 	.word	0x08008e34

08004bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bbc:	f7ff ffda 	bl	8004b74 <HAL_RCC_GetHCLKFreq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4b06      	ldr	r3, [pc, #24]	@ (8004bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	0adb      	lsrs	r3, r3, #11
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	4904      	ldr	r1, [pc, #16]	@ (8004be0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bce:	5ccb      	ldrb	r3, [r1, r3]
 8004bd0:	f003 031f 	and.w	r3, r3, #31
 8004bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	08008e34 	.word	0x08008e34

08004be4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004bec:	2300      	movs	r3, #0
 8004bee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004bfc:	f7ff f9ee 	bl	8003fdc <HAL_PWREx_GetVoltageRange>
 8004c00:	6178      	str	r0, [r7, #20]
 8004c02:	e014      	b.n	8004c2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c04:	4b25      	ldr	r3, [pc, #148]	@ (8004c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c08:	4a24      	ldr	r2, [pc, #144]	@ (8004c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c10:	4b22      	ldr	r3, [pc, #136]	@ (8004c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c1c:	f7ff f9de 	bl	8003fdc <HAL_PWREx_GetVoltageRange>
 8004c20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c22:	4b1e      	ldr	r3, [pc, #120]	@ (8004c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c26:	4a1d      	ldr	r2, [pc, #116]	@ (8004c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c34:	d10b      	bne.n	8004c4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b80      	cmp	r3, #128	@ 0x80
 8004c3a:	d919      	bls.n	8004c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004c40:	d902      	bls.n	8004c48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c42:	2302      	movs	r3, #2
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	e013      	b.n	8004c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c48:	2301      	movs	r3, #1
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	e010      	b.n	8004c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b80      	cmp	r3, #128	@ 0x80
 8004c52:	d902      	bls.n	8004c5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c54:	2303      	movs	r3, #3
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	e00a      	b.n	8004c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b80      	cmp	r3, #128	@ 0x80
 8004c5e:	d102      	bne.n	8004c66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c60:	2302      	movs	r3, #2
 8004c62:	613b      	str	r3, [r7, #16]
 8004c64:	e004      	b.n	8004c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b70      	cmp	r3, #112	@ 0x70
 8004c6a:	d101      	bne.n	8004c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c70:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f023 0207 	bic.w	r2, r3, #7
 8004c78:	4909      	ldr	r1, [pc, #36]	@ (8004ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c80:	4b07      	ldr	r3, [pc, #28]	@ (8004ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d001      	beq.n	8004c92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e000      	b.n	8004c94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	40022000 	.word	0x40022000

08004ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cac:	2300      	movs	r3, #0
 8004cae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d041      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cc4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004cc8:	d02a      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004cca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004cce:	d824      	bhi.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004cd0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004cd4:	d008      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004cd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004cda:	d81e      	bhi.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ce0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ce4:	d010      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ce6:	e018      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ce8:	4b86      	ldr	r3, [pc, #536]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4a85      	ldr	r2, [pc, #532]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cf4:	e015      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fa8b 	bl	8005218 <RCCEx_PLLSAI1_Config>
 8004d02:	4603      	mov	r3, r0
 8004d04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d06:	e00c      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3320      	adds	r3, #32
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fb76 	bl	8005400 <RCCEx_PLLSAI2_Config>
 8004d14:	4603      	mov	r3, r0
 8004d16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d18:	e003      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	74fb      	strb	r3, [r7, #19]
      break;
 8004d1e:	e000      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d22:	7cfb      	ldrb	r3, [r7, #19]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10b      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d28:	4b76      	ldr	r3, [pc, #472]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d36:	4973      	ldr	r1, [pc, #460]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d3e:	e001      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d40:	7cfb      	ldrb	r3, [r7, #19]
 8004d42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d041      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d58:	d02a      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004d5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d5e:	d824      	bhi.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d64:	d008      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d6a:	d81e      	bhi.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d74:	d010      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d76:	e018      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d78:	4b62      	ldr	r3, [pc, #392]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4a61      	ldr	r2, [pc, #388]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d84:	e015      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fa43 	bl	8005218 <RCCEx_PLLSAI1_Config>
 8004d92:	4603      	mov	r3, r0
 8004d94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d96:	e00c      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3320      	adds	r3, #32
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fb2e 	bl	8005400 <RCCEx_PLLSAI2_Config>
 8004da4:	4603      	mov	r3, r0
 8004da6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004da8:	e003      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	74fb      	strb	r3, [r7, #19]
      break;
 8004dae:	e000      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004db2:	7cfb      	ldrb	r3, [r7, #19]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10b      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004db8:	4b52      	ldr	r3, [pc, #328]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dbe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dc6:	494f      	ldr	r1, [pc, #316]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004dce:	e001      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd0:	7cfb      	ldrb	r3, [r7, #19]
 8004dd2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 80a0 	beq.w	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004de2:	2300      	movs	r3, #0
 8004de4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004de6:	4b47      	ldr	r3, [pc, #284]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004df6:	2300      	movs	r3, #0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00d      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dfc:	4b41      	ldr	r3, [pc, #260]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e00:	4a40      	ldr	r2, [pc, #256]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e08:	4b3e      	ldr	r3, [pc, #248]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e14:	2301      	movs	r3, #1
 8004e16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e18:	4b3b      	ldr	r3, [pc, #236]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a3a      	ldr	r2, [pc, #232]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e24:	f7fd fbae 	bl	8002584 <HAL_GetTick>
 8004e28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e2a:	e009      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e2c:	f7fd fbaa 	bl	8002584 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d902      	bls.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	74fb      	strb	r3, [r7, #19]
        break;
 8004e3e:	e005      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e40:	4b31      	ldr	r3, [pc, #196]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0ef      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004e4c:	7cfb      	ldrb	r3, [r7, #19]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d15c      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e52:	4b2c      	ldr	r3, [pc, #176]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d01f      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d019      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e70:	4b24      	ldr	r3, [pc, #144]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e7c:	4b21      	ldr	r3, [pc, #132]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e82:	4a20      	ldr	r2, [pc, #128]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e92:	4a1c      	ldr	r2, [pc, #112]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e9c:	4a19      	ldr	r2, [pc, #100]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d016      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eae:	f7fd fb69 	bl	8002584 <HAL_GetTick>
 8004eb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eb4:	e00b      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb6:	f7fd fb65 	bl	8002584 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d902      	bls.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	74fb      	strb	r3, [r7, #19]
            break;
 8004ecc:	e006      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ece:	4b0d      	ldr	r3, [pc, #52]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0ec      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004edc:	7cfb      	ldrb	r3, [r7, #19]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10c      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ee2:	4b08      	ldr	r3, [pc, #32]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ef2:	4904      	ldr	r1, [pc, #16]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004efa:	e009      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004efc:	7cfb      	ldrb	r3, [r7, #19]
 8004efe:	74bb      	strb	r3, [r7, #18]
 8004f00:	e006      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f02:	bf00      	nop
 8004f04:	40021000 	.word	0x40021000
 8004f08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0c:	7cfb      	ldrb	r3, [r7, #19]
 8004f0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f10:	7c7b      	ldrb	r3, [r7, #17]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d105      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f16:	4ba1      	ldr	r3, [pc, #644]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f1a:	4aa0      	ldr	r2, [pc, #640]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004f1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f2e:	4b9b      	ldr	r3, [pc, #620]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f34:	f023 0203 	bic.w	r2, r3, #3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3c:	4997      	ldr	r1, [pc, #604]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00a      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f50:	4b92      	ldr	r3, [pc, #584]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f56:	f023 020c 	bic.w	r2, r3, #12
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5e:	498f      	ldr	r1, [pc, #572]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f72:	4b8a      	ldr	r3, [pc, #552]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f80:	4986      	ldr	r1, [pc, #536]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f94:	4b81      	ldr	r3, [pc, #516]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa2:	497e      	ldr	r1, [pc, #504]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fb6:	4b79      	ldr	r3, [pc, #484]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc4:	4975      	ldr	r1, [pc, #468]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0320 	and.w	r3, r3, #32
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00a      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fd8:	4b70      	ldr	r3, [pc, #448]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fe6:	496d      	ldr	r1, [pc, #436]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ffa:	4b68      	ldr	r3, [pc, #416]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005000:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005008:	4964      	ldr	r1, [pc, #400]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800501c:	4b5f      	ldr	r3, [pc, #380]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005022:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800502a:	495c      	ldr	r1, [pc, #368]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800503e:	4b57      	ldr	r3, [pc, #348]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005044:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800504c:	4953      	ldr	r1, [pc, #332]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800504e:	4313      	orrs	r3, r2
 8005050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005060:	4b4e      	ldr	r3, [pc, #312]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005066:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800506e:	494b      	ldr	r1, [pc, #300]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005082:	4b46      	ldr	r3, [pc, #280]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005088:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005090:	4942      	ldr	r1, [pc, #264]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d028      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050a4:	4b3d      	ldr	r3, [pc, #244]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050b2:	493a      	ldr	r1, [pc, #232]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050c2:	d106      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050c4:	4b35      	ldr	r3, [pc, #212]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	4a34      	ldr	r2, [pc, #208]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80050ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050ce:	60d3      	str	r3, [r2, #12]
 80050d0:	e011      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050da:	d10c      	bne.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3304      	adds	r3, #4
 80050e0:	2101      	movs	r1, #1
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 f898 	bl	8005218 <RCCEx_PLLSAI1_Config>
 80050e8:	4603      	mov	r3, r0
 80050ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050ec:	7cfb      	ldrb	r3, [r7, #19]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 80050f2:	7cfb      	ldrb	r3, [r7, #19]
 80050f4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d028      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005102:	4b26      	ldr	r3, [pc, #152]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005108:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005110:	4922      	ldr	r1, [pc, #136]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800511c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005120:	d106      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005122:	4b1e      	ldr	r3, [pc, #120]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	4a1d      	ldr	r2, [pc, #116]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005128:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800512c:	60d3      	str	r3, [r2, #12]
 800512e:	e011      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005134:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005138:	d10c      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3304      	adds	r3, #4
 800513e:	2101      	movs	r1, #1
 8005140:	4618      	mov	r0, r3
 8005142:	f000 f869 	bl	8005218 <RCCEx_PLLSAI1_Config>
 8005146:	4603      	mov	r3, r0
 8005148:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800514a:	7cfb      	ldrb	r3, [r7, #19]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005150:	7cfb      	ldrb	r3, [r7, #19]
 8005152:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d031      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005160:	4b0e      	ldr	r3, [pc, #56]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005166:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800516e:	490b      	ldr	r1, [pc, #44]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800517a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800517e:	d10f      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3304      	adds	r3, #4
 8005184:	2102      	movs	r1, #2
 8005186:	4618      	mov	r0, r3
 8005188:	f000 f846 	bl	8005218 <RCCEx_PLLSAI1_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005190:	7cfb      	ldrb	r3, [r7, #19]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d016      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8005196:	7cfb      	ldrb	r3, [r7, #19]
 8005198:	74bb      	strb	r3, [r7, #18]
 800519a:	e013      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800519c:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051a8:	d10c      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3320      	adds	r3, #32
 80051ae:	2102      	movs	r1, #2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 f925 	bl	8005400 <RCCEx_PLLSAI2_Config>
 80051b6:	4603      	mov	r3, r0
 80051b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051ba:	7cfb      	ldrb	r3, [r7, #19]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 80051c0:	7cfb      	ldrb	r3, [r7, #19]
 80051c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051d0:	4b10      	ldr	r3, [pc, #64]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80051d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051de:	490d      	ldr	r1, [pc, #52]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051f2:	4b08      	ldr	r3, [pc, #32]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80051f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005200:	4904      	ldr	r1, [pc, #16]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005208:	7cbb      	ldrb	r3, [r7, #18]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40021000 	.word	0x40021000

08005218 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005226:	4b75      	ldr	r3, [pc, #468]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d018      	beq.n	8005264 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005232:	4b72      	ldr	r3, [pc, #456]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f003 0203 	and.w	r2, r3, #3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d10d      	bne.n	800525e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
       ||
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800524a:	4b6c      	ldr	r3, [pc, #432]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	091b      	lsrs	r3, r3, #4
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
       ||
 800525a:	429a      	cmp	r2, r3
 800525c:	d047      	beq.n	80052ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	73fb      	strb	r3, [r7, #15]
 8005262:	e044      	b.n	80052ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b03      	cmp	r3, #3
 800526a:	d018      	beq.n	800529e <RCCEx_PLLSAI1_Config+0x86>
 800526c:	2b03      	cmp	r3, #3
 800526e:	d825      	bhi.n	80052bc <RCCEx_PLLSAI1_Config+0xa4>
 8005270:	2b01      	cmp	r3, #1
 8005272:	d002      	beq.n	800527a <RCCEx_PLLSAI1_Config+0x62>
 8005274:	2b02      	cmp	r3, #2
 8005276:	d009      	beq.n	800528c <RCCEx_PLLSAI1_Config+0x74>
 8005278:	e020      	b.n	80052bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800527a:	4b60      	ldr	r3, [pc, #384]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d11d      	bne.n	80052c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800528a:	e01a      	b.n	80052c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800528c:	4b5b      	ldr	r3, [pc, #364]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005294:	2b00      	cmp	r3, #0
 8005296:	d116      	bne.n	80052c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800529c:	e013      	b.n	80052c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800529e:	4b57      	ldr	r3, [pc, #348]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10f      	bne.n	80052ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052aa:	4b54      	ldr	r3, [pc, #336]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052ba:	e006      	b.n	80052ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	73fb      	strb	r3, [r7, #15]
      break;
 80052c0:	e004      	b.n	80052cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052c2:	bf00      	nop
 80052c4:	e002      	b.n	80052cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052c6:	bf00      	nop
 80052c8:	e000      	b.n	80052cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10d      	bne.n	80052ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052d2:	4b4a      	ldr	r3, [pc, #296]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6819      	ldr	r1, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	430b      	orrs	r3, r1
 80052e8:	4944      	ldr	r1, [pc, #272]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d17d      	bne.n	80053f0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80052f4:	4b41      	ldr	r3, [pc, #260]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a40      	ldr	r2, [pc, #256]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005300:	f7fd f940 	bl	8002584 <HAL_GetTick>
 8005304:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005306:	e009      	b.n	800531c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005308:	f7fd f93c 	bl	8002584 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d902      	bls.n	800531c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	73fb      	strb	r3, [r7, #15]
        break;
 800531a:	e005      	b.n	8005328 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800531c:	4b37      	ldr	r3, [pc, #220]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1ef      	bne.n	8005308 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005328:	7bfb      	ldrb	r3, [r7, #15]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d160      	bne.n	80053f0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d111      	bne.n	8005358 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005334:	4b31      	ldr	r3, [pc, #196]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800533c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6892      	ldr	r2, [r2, #8]
 8005344:	0211      	lsls	r1, r2, #8
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	68d2      	ldr	r2, [r2, #12]
 800534a:	0912      	lsrs	r2, r2, #4
 800534c:	0452      	lsls	r2, r2, #17
 800534e:	430a      	orrs	r2, r1
 8005350:	492a      	ldr	r1, [pc, #168]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005352:	4313      	orrs	r3, r2
 8005354:	610b      	str	r3, [r1, #16]
 8005356:	e027      	b.n	80053a8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d112      	bne.n	8005384 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800535e:	4b27      	ldr	r3, [pc, #156]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005366:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6892      	ldr	r2, [r2, #8]
 800536e:	0211      	lsls	r1, r2, #8
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6912      	ldr	r2, [r2, #16]
 8005374:	0852      	lsrs	r2, r2, #1
 8005376:	3a01      	subs	r2, #1
 8005378:	0552      	lsls	r2, r2, #21
 800537a:	430a      	orrs	r2, r1
 800537c:	491f      	ldr	r1, [pc, #124]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800537e:	4313      	orrs	r3, r2
 8005380:	610b      	str	r3, [r1, #16]
 8005382:	e011      	b.n	80053a8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005384:	4b1d      	ldr	r3, [pc, #116]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800538c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6892      	ldr	r2, [r2, #8]
 8005394:	0211      	lsls	r1, r2, #8
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6952      	ldr	r2, [r2, #20]
 800539a:	0852      	lsrs	r2, r2, #1
 800539c:	3a01      	subs	r2, #1
 800539e:	0652      	lsls	r2, r2, #25
 80053a0:	430a      	orrs	r2, r1
 80053a2:	4916      	ldr	r1, [pc, #88]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053a8:	4b14      	ldr	r3, [pc, #80]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a13      	ldr	r2, [pc, #76]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b4:	f7fd f8e6 	bl	8002584 <HAL_GetTick>
 80053b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053ba:	e009      	b.n	80053d0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053bc:	f7fd f8e2 	bl	8002584 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d902      	bls.n	80053d0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	73fb      	strb	r3, [r7, #15]
          break;
 80053ce:	e005      	b.n	80053dc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053d0:	4b0a      	ldr	r3, [pc, #40]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0ef      	beq.n	80053bc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d106      	bne.n	80053f0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053e2:	4b06      	ldr	r3, [pc, #24]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	4904      	ldr	r1, [pc, #16]	@ (80053fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40021000 	.word	0x40021000

08005400 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800540e:	4b6a      	ldr	r3, [pc, #424]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f003 0303 	and.w	r3, r3, #3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d018      	beq.n	800544c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800541a:	4b67      	ldr	r3, [pc, #412]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f003 0203 	and.w	r2, r3, #3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d10d      	bne.n	8005446 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
       ||
 800542e:	2b00      	cmp	r3, #0
 8005430:	d009      	beq.n	8005446 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005432:	4b61      	ldr	r3, [pc, #388]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	091b      	lsrs	r3, r3, #4
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
       ||
 8005442:	429a      	cmp	r2, r3
 8005444:	d047      	beq.n	80054d6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	73fb      	strb	r3, [r7, #15]
 800544a:	e044      	b.n	80054d6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b03      	cmp	r3, #3
 8005452:	d018      	beq.n	8005486 <RCCEx_PLLSAI2_Config+0x86>
 8005454:	2b03      	cmp	r3, #3
 8005456:	d825      	bhi.n	80054a4 <RCCEx_PLLSAI2_Config+0xa4>
 8005458:	2b01      	cmp	r3, #1
 800545a:	d002      	beq.n	8005462 <RCCEx_PLLSAI2_Config+0x62>
 800545c:	2b02      	cmp	r3, #2
 800545e:	d009      	beq.n	8005474 <RCCEx_PLLSAI2_Config+0x74>
 8005460:	e020      	b.n	80054a4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005462:	4b55      	ldr	r3, [pc, #340]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d11d      	bne.n	80054aa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005472:	e01a      	b.n	80054aa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005474:	4b50      	ldr	r3, [pc, #320]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800547c:	2b00      	cmp	r3, #0
 800547e:	d116      	bne.n	80054ae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005484:	e013      	b.n	80054ae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005486:	4b4c      	ldr	r3, [pc, #304]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10f      	bne.n	80054b2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005492:	4b49      	ldr	r3, [pc, #292]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d109      	bne.n	80054b2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054a2:	e006      	b.n	80054b2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	73fb      	strb	r3, [r7, #15]
      break;
 80054a8:	e004      	b.n	80054b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054aa:	bf00      	nop
 80054ac:	e002      	b.n	80054b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054ae:	bf00      	nop
 80054b0:	e000      	b.n	80054b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10d      	bne.n	80054d6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054ba:	4b3f      	ldr	r3, [pc, #252]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6819      	ldr	r1, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	430b      	orrs	r3, r1
 80054d0:	4939      	ldr	r1, [pc, #228]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d167      	bne.n	80055ac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80054dc:	4b36      	ldr	r3, [pc, #216]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a35      	ldr	r2, [pc, #212]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054e8:	f7fd f84c 	bl	8002584 <HAL_GetTick>
 80054ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054ee:	e009      	b.n	8005504 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054f0:	f7fd f848 	bl	8002584 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d902      	bls.n	8005504 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	73fb      	strb	r3, [r7, #15]
        break;
 8005502:	e005      	b.n	8005510 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005504:	4b2c      	ldr	r3, [pc, #176]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1ef      	bne.n	80054f0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005510:	7bfb      	ldrb	r3, [r7, #15]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d14a      	bne.n	80055ac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d111      	bne.n	8005540 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800551c:	4b26      	ldr	r3, [pc, #152]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005524:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6892      	ldr	r2, [r2, #8]
 800552c:	0211      	lsls	r1, r2, #8
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	68d2      	ldr	r2, [r2, #12]
 8005532:	0912      	lsrs	r2, r2, #4
 8005534:	0452      	lsls	r2, r2, #17
 8005536:	430a      	orrs	r2, r1
 8005538:	491f      	ldr	r1, [pc, #124]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800553a:	4313      	orrs	r3, r2
 800553c:	614b      	str	r3, [r1, #20]
 800553e:	e011      	b.n	8005564 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005540:	4b1d      	ldr	r3, [pc, #116]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005548:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6892      	ldr	r2, [r2, #8]
 8005550:	0211      	lsls	r1, r2, #8
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6912      	ldr	r2, [r2, #16]
 8005556:	0852      	lsrs	r2, r2, #1
 8005558:	3a01      	subs	r2, #1
 800555a:	0652      	lsls	r2, r2, #25
 800555c:	430a      	orrs	r2, r1
 800555e:	4916      	ldr	r1, [pc, #88]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005560:	4313      	orrs	r3, r2
 8005562:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005564:	4b14      	ldr	r3, [pc, #80]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a13      	ldr	r2, [pc, #76]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800556a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800556e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005570:	f7fd f808 	bl	8002584 <HAL_GetTick>
 8005574:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005576:	e009      	b.n	800558c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005578:	f7fd f804 	bl	8002584 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d902      	bls.n	800558c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	73fb      	strb	r3, [r7, #15]
          break;
 800558a:	e005      	b.n	8005598 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800558c:	4b0a      	ldr	r3, [pc, #40]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0ef      	beq.n	8005578 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800559e:	4b06      	ldr	r3, [pc, #24]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055a0:	695a      	ldr	r2, [r3, #20]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	4904      	ldr	r1, [pc, #16]	@ (80055b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40021000 	.word	0x40021000

080055bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e095      	b.n	80056fa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d108      	bne.n	80055e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055de:	d009      	beq.n	80055f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	61da      	str	r2, [r3, #28]
 80055e6:	e005      	b.n	80055f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fc fa42 	bl	8001a98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800562a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005634:	d902      	bls.n	800563c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	e002      	b.n	8005642 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800563c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005640:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800564a:	d007      	beq.n	800565c <HAL_SPI_Init+0xa0>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005654:	d002      	beq.n	800565c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800569e:	ea42 0103 	orr.w	r1, r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	0c1b      	lsrs	r3, r3, #16
 80056b8:	f003 0204 	and.w	r2, r3, #4
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c0:	f003 0310 	and.w	r3, r3, #16
 80056c4:	431a      	orrs	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80056d8:	ea42 0103 	orr.w	r1, r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b082      	sub	sp, #8
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e049      	b.n	80057a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d106      	bne.n	800572e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7fc fa17 	bl	8001b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2202      	movs	r2, #2
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	3304      	adds	r3, #4
 800573e:	4619      	mov	r1, r3
 8005740:	4610      	mov	r0, r2
 8005742:	f001 f871 	bl	8006828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e049      	b.n	8005856 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d106      	bne.n	80057dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fc fb1c 	bl	8001e14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3304      	adds	r3, #4
 80057ec:	4619      	mov	r1, r3
 80057ee:	4610      	mov	r0, r2
 80057f0:	f001 f81a 	bl	8006828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d109      	bne.n	8005884 <HAL_TIM_PWM_Start+0x24>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b01      	cmp	r3, #1
 800587a:	bf14      	ite	ne
 800587c:	2301      	movne	r3, #1
 800587e:	2300      	moveq	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	e03c      	b.n	80058fe <HAL_TIM_PWM_Start+0x9e>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b04      	cmp	r3, #4
 8005888:	d109      	bne.n	800589e <HAL_TIM_PWM_Start+0x3e>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b01      	cmp	r3, #1
 8005894:	bf14      	ite	ne
 8005896:	2301      	movne	r3, #1
 8005898:	2300      	moveq	r3, #0
 800589a:	b2db      	uxtb	r3, r3
 800589c:	e02f      	b.n	80058fe <HAL_TIM_PWM_Start+0x9e>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d109      	bne.n	80058b8 <HAL_TIM_PWM_Start+0x58>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	bf14      	ite	ne
 80058b0:	2301      	movne	r3, #1
 80058b2:	2300      	moveq	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	e022      	b.n	80058fe <HAL_TIM_PWM_Start+0x9e>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b0c      	cmp	r3, #12
 80058bc:	d109      	bne.n	80058d2 <HAL_TIM_PWM_Start+0x72>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	bf14      	ite	ne
 80058ca:	2301      	movne	r3, #1
 80058cc:	2300      	moveq	r3, #0
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	e015      	b.n	80058fe <HAL_TIM_PWM_Start+0x9e>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b10      	cmp	r3, #16
 80058d6:	d109      	bne.n	80058ec <HAL_TIM_PWM_Start+0x8c>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	bf14      	ite	ne
 80058e4:	2301      	movne	r3, #1
 80058e6:	2300      	moveq	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	e008      	b.n	80058fe <HAL_TIM_PWM_Start+0x9e>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	bf14      	ite	ne
 80058f8:	2301      	movne	r3, #1
 80058fa:	2300      	moveq	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e09c      	b.n	8005a40 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d104      	bne.n	8005916 <HAL_TIM_PWM_Start+0xb6>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005914:	e023      	b.n	800595e <HAL_TIM_PWM_Start+0xfe>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b04      	cmp	r3, #4
 800591a:	d104      	bne.n	8005926 <HAL_TIM_PWM_Start+0xc6>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005924:	e01b      	b.n	800595e <HAL_TIM_PWM_Start+0xfe>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b08      	cmp	r3, #8
 800592a:	d104      	bne.n	8005936 <HAL_TIM_PWM_Start+0xd6>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005934:	e013      	b.n	800595e <HAL_TIM_PWM_Start+0xfe>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b0c      	cmp	r3, #12
 800593a:	d104      	bne.n	8005946 <HAL_TIM_PWM_Start+0xe6>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005944:	e00b      	b.n	800595e <HAL_TIM_PWM_Start+0xfe>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b10      	cmp	r3, #16
 800594a:	d104      	bne.n	8005956 <HAL_TIM_PWM_Start+0xf6>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005954:	e003      	b.n	800595e <HAL_TIM_PWM_Start+0xfe>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2202      	movs	r2, #2
 800595a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2201      	movs	r2, #1
 8005964:	6839      	ldr	r1, [r7, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f001 fc8c 	bl	8007284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a35      	ldr	r2, [pc, #212]	@ (8005a48 <HAL_TIM_PWM_Start+0x1e8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d013      	beq.n	800599e <HAL_TIM_PWM_Start+0x13e>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a34      	ldr	r2, [pc, #208]	@ (8005a4c <HAL_TIM_PWM_Start+0x1ec>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00e      	beq.n	800599e <HAL_TIM_PWM_Start+0x13e>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a32      	ldr	r2, [pc, #200]	@ (8005a50 <HAL_TIM_PWM_Start+0x1f0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d009      	beq.n	800599e <HAL_TIM_PWM_Start+0x13e>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a31      	ldr	r2, [pc, #196]	@ (8005a54 <HAL_TIM_PWM_Start+0x1f4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d004      	beq.n	800599e <HAL_TIM_PWM_Start+0x13e>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a2f      	ldr	r2, [pc, #188]	@ (8005a58 <HAL_TIM_PWM_Start+0x1f8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d101      	bne.n	80059a2 <HAL_TIM_PWM_Start+0x142>
 800599e:	2301      	movs	r3, #1
 80059a0:	e000      	b.n	80059a4 <HAL_TIM_PWM_Start+0x144>
 80059a2:	2300      	movs	r3, #0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d007      	beq.n	80059b8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059b6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a22      	ldr	r2, [pc, #136]	@ (8005a48 <HAL_TIM_PWM_Start+0x1e8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d01d      	beq.n	80059fe <HAL_TIM_PWM_Start+0x19e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ca:	d018      	beq.n	80059fe <HAL_TIM_PWM_Start+0x19e>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a22      	ldr	r2, [pc, #136]	@ (8005a5c <HAL_TIM_PWM_Start+0x1fc>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d013      	beq.n	80059fe <HAL_TIM_PWM_Start+0x19e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a21      	ldr	r2, [pc, #132]	@ (8005a60 <HAL_TIM_PWM_Start+0x200>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00e      	beq.n	80059fe <HAL_TIM_PWM_Start+0x19e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a64 <HAL_TIM_PWM_Start+0x204>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d009      	beq.n	80059fe <HAL_TIM_PWM_Start+0x19e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a17      	ldr	r2, [pc, #92]	@ (8005a4c <HAL_TIM_PWM_Start+0x1ec>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d004      	beq.n	80059fe <HAL_TIM_PWM_Start+0x19e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a15      	ldr	r2, [pc, #84]	@ (8005a50 <HAL_TIM_PWM_Start+0x1f0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d115      	bne.n	8005a2a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689a      	ldr	r2, [r3, #8]
 8005a04:	4b18      	ldr	r3, [pc, #96]	@ (8005a68 <HAL_TIM_PWM_Start+0x208>)
 8005a06:	4013      	ands	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2b06      	cmp	r3, #6
 8005a0e:	d015      	beq.n	8005a3c <HAL_TIM_PWM_Start+0x1dc>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a16:	d011      	beq.n	8005a3c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0201 	orr.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a28:	e008      	b.n	8005a3c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0201 	orr.w	r2, r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	e000      	b.n	8005a3e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40012c00 	.word	0x40012c00
 8005a4c:	40013400 	.word	0x40013400
 8005a50:	40014000 	.word	0x40014000
 8005a54:	40014400 	.word	0x40014400
 8005a58:	40014800 	.word	0x40014800
 8005a5c:	40000400 	.word	0x40000400
 8005a60:	40000800 	.word	0x40000800
 8005a64:	40000c00 	.word	0x40000c00
 8005a68:	00010007 	.word	0x00010007

08005a6c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e049      	b.n	8005b12 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d106      	bne.n	8005a98 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fc f940 	bl	8001d18 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4610      	mov	r0, r2
 8005aac:	f000 febc 	bl	8006828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d104      	bne.n	8005b3a <HAL_TIM_IC_Start_IT+0x1e>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	e023      	b.n	8005b82 <HAL_TIM_IC_Start_IT+0x66>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d104      	bne.n	8005b4a <HAL_TIM_IC_Start_IT+0x2e>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	e01b      	b.n	8005b82 <HAL_TIM_IC_Start_IT+0x66>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d104      	bne.n	8005b5a <HAL_TIM_IC_Start_IT+0x3e>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	e013      	b.n	8005b82 <HAL_TIM_IC_Start_IT+0x66>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b0c      	cmp	r3, #12
 8005b5e:	d104      	bne.n	8005b6a <HAL_TIM_IC_Start_IT+0x4e>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	e00b      	b.n	8005b82 <HAL_TIM_IC_Start_IT+0x66>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b10      	cmp	r3, #16
 8005b6e:	d104      	bne.n	8005b7a <HAL_TIM_IC_Start_IT+0x5e>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	e003      	b.n	8005b82 <HAL_TIM_IC_Start_IT+0x66>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d104      	bne.n	8005b94 <HAL_TIM_IC_Start_IT+0x78>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	e013      	b.n	8005bbc <HAL_TIM_IC_Start_IT+0xa0>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d104      	bne.n	8005ba4 <HAL_TIM_IC_Start_IT+0x88>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	e00b      	b.n	8005bbc <HAL_TIM_IC_Start_IT+0xa0>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d104      	bne.n	8005bb4 <HAL_TIM_IC_Start_IT+0x98>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	e003      	b.n	8005bbc <HAL_TIM_IC_Start_IT+0xa0>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bbe:	7bbb      	ldrb	r3, [r7, #14]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d102      	bne.n	8005bca <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bc4:	7b7b      	ldrb	r3, [r7, #13]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d001      	beq.n	8005bce <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e0dd      	b.n	8005d8a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d104      	bne.n	8005bde <HAL_TIM_IC_Start_IT+0xc2>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bdc:	e023      	b.n	8005c26 <HAL_TIM_IC_Start_IT+0x10a>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d104      	bne.n	8005bee <HAL_TIM_IC_Start_IT+0xd2>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bec:	e01b      	b.n	8005c26 <HAL_TIM_IC_Start_IT+0x10a>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d104      	bne.n	8005bfe <HAL_TIM_IC_Start_IT+0xe2>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bfc:	e013      	b.n	8005c26 <HAL_TIM_IC_Start_IT+0x10a>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b0c      	cmp	r3, #12
 8005c02:	d104      	bne.n	8005c0e <HAL_TIM_IC_Start_IT+0xf2>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c0c:	e00b      	b.n	8005c26 <HAL_TIM_IC_Start_IT+0x10a>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b10      	cmp	r3, #16
 8005c12:	d104      	bne.n	8005c1e <HAL_TIM_IC_Start_IT+0x102>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c1c:	e003      	b.n	8005c26 <HAL_TIM_IC_Start_IT+0x10a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2202      	movs	r2, #2
 8005c22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d104      	bne.n	8005c36 <HAL_TIM_IC_Start_IT+0x11a>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c34:	e013      	b.n	8005c5e <HAL_TIM_IC_Start_IT+0x142>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d104      	bne.n	8005c46 <HAL_TIM_IC_Start_IT+0x12a>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c44:	e00b      	b.n	8005c5e <HAL_TIM_IC_Start_IT+0x142>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d104      	bne.n	8005c56 <HAL_TIM_IC_Start_IT+0x13a>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c54:	e003      	b.n	8005c5e <HAL_TIM_IC_Start_IT+0x142>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2202      	movs	r2, #2
 8005c5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b0c      	cmp	r3, #12
 8005c62:	d841      	bhi.n	8005ce8 <HAL_TIM_IC_Start_IT+0x1cc>
 8005c64:	a201      	add	r2, pc, #4	@ (adr r2, 8005c6c <HAL_TIM_IC_Start_IT+0x150>)
 8005c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6a:	bf00      	nop
 8005c6c:	08005ca1 	.word	0x08005ca1
 8005c70:	08005ce9 	.word	0x08005ce9
 8005c74:	08005ce9 	.word	0x08005ce9
 8005c78:	08005ce9 	.word	0x08005ce9
 8005c7c:	08005cb3 	.word	0x08005cb3
 8005c80:	08005ce9 	.word	0x08005ce9
 8005c84:	08005ce9 	.word	0x08005ce9
 8005c88:	08005ce9 	.word	0x08005ce9
 8005c8c:	08005cc5 	.word	0x08005cc5
 8005c90:	08005ce9 	.word	0x08005ce9
 8005c94:	08005ce9 	.word	0x08005ce9
 8005c98:	08005ce9 	.word	0x08005ce9
 8005c9c:	08005cd7 	.word	0x08005cd7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0202 	orr.w	r2, r2, #2
 8005cae:	60da      	str	r2, [r3, #12]
      break;
 8005cb0:	e01d      	b.n	8005cee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 0204 	orr.w	r2, r2, #4
 8005cc0:	60da      	str	r2, [r3, #12]
      break;
 8005cc2:	e014      	b.n	8005cee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0208 	orr.w	r2, r2, #8
 8005cd2:	60da      	str	r2, [r3, #12]
      break;
 8005cd4:	e00b      	b.n	8005cee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0210 	orr.w	r2, r2, #16
 8005ce4:	60da      	str	r2, [r3, #12]
      break;
 8005ce6:	e002      	b.n	8005cee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	73fb      	strb	r3, [r7, #15]
      break;
 8005cec:	bf00      	nop
  }

  if (status == HAL_OK)
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d149      	bne.n	8005d88 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f001 fac1 	bl	8007284 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a23      	ldr	r2, [pc, #140]	@ (8005d94 <HAL_TIM_IC_Start_IT+0x278>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d01d      	beq.n	8005d48 <HAL_TIM_IC_Start_IT+0x22c>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d14:	d018      	beq.n	8005d48 <HAL_TIM_IC_Start_IT+0x22c>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8005d98 <HAL_TIM_IC_Start_IT+0x27c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d013      	beq.n	8005d48 <HAL_TIM_IC_Start_IT+0x22c>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a1d      	ldr	r2, [pc, #116]	@ (8005d9c <HAL_TIM_IC_Start_IT+0x280>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00e      	beq.n	8005d48 <HAL_TIM_IC_Start_IT+0x22c>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8005da0 <HAL_TIM_IC_Start_IT+0x284>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d009      	beq.n	8005d48 <HAL_TIM_IC_Start_IT+0x22c>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a1a      	ldr	r2, [pc, #104]	@ (8005da4 <HAL_TIM_IC_Start_IT+0x288>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <HAL_TIM_IC_Start_IT+0x22c>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a19      	ldr	r2, [pc, #100]	@ (8005da8 <HAL_TIM_IC_Start_IT+0x28c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d115      	bne.n	8005d74 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	4b17      	ldr	r3, [pc, #92]	@ (8005dac <HAL_TIM_IC_Start_IT+0x290>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2b06      	cmp	r3, #6
 8005d58:	d015      	beq.n	8005d86 <HAL_TIM_IC_Start_IT+0x26a>
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d60:	d011      	beq.n	8005d86 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f042 0201 	orr.w	r2, r2, #1
 8005d70:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d72:	e008      	b.n	8005d86 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0201 	orr.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	e000      	b.n	8005d88 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d86:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	40012c00 	.word	0x40012c00
 8005d98:	40000400 	.word	0x40000400
 8005d9c:	40000800 	.word	0x40000800
 8005da0:	40000c00 	.word	0x40000c00
 8005da4:	40013400 	.word	0x40013400
 8005da8:	40014000 	.word	0x40014000
 8005dac:	00010007 	.word	0x00010007

08005db0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e097      	b.n	8005ef4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7fb fef9 	bl	8001bd0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2202      	movs	r2, #2
 8005de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6812      	ldr	r2, [r2, #0]
 8005df0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005df4:	f023 0307 	bic.w	r3, r3, #7
 8005df8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3304      	adds	r3, #4
 8005e02:	4619      	mov	r1, r3
 8005e04:	4610      	mov	r0, r2
 8005e06:	f000 fd0f 	bl	8006828 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e32:	f023 0303 	bic.w	r3, r3, #3
 8005e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	021b      	lsls	r3, r3, #8
 8005e42:	4313      	orrs	r3, r2
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005e50:	f023 030c 	bic.w	r3, r3, #12
 8005e54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	011a      	lsls	r2, r3, #4
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	031b      	lsls	r3, r3, #12
 8005e80:	4313      	orrs	r3, r2
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005e8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005e96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f24:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d110      	bne.n	8005f4e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d102      	bne.n	8005f38 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f32:	7b7b      	ldrb	r3, [r7, #13]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d001      	beq.n	8005f3c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e089      	b.n	8006050 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f4c:	e031      	b.n	8005fb2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	d110      	bne.n	8005f76 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f54:	7bbb      	ldrb	r3, [r7, #14]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d102      	bne.n	8005f60 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f5a:	7b3b      	ldrb	r3, [r7, #12]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d001      	beq.n	8005f64 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e075      	b.n	8006050 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f74:	e01d      	b.n	8005fb2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d108      	bne.n	8005f8e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f7c:	7bbb      	ldrb	r3, [r7, #14]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d105      	bne.n	8005f8e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f82:	7b7b      	ldrb	r3, [r7, #13]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d102      	bne.n	8005f8e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f88:	7b3b      	ldrb	r3, [r7, #12]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d001      	beq.n	8005f92 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e05e      	b.n	8006050 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2202      	movs	r2, #2
 8005f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2202      	movs	r2, #2
 8005fae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d010      	beq.n	8005fe0 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005fbe:	e01f      	b.n	8006000 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 f95b 	bl	8007284 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f042 0202 	orr.w	r2, r2, #2
 8005fdc:	60da      	str	r2, [r3, #12]
      break;
 8005fde:	e02e      	b.n	800603e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	2104      	movs	r1, #4
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 f94b 	bl	8007284 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68da      	ldr	r2, [r3, #12]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f042 0204 	orr.w	r2, r2, #4
 8005ffc:	60da      	str	r2, [r3, #12]
      break;
 8005ffe:	e01e      	b.n	800603e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2201      	movs	r2, #1
 8006006:	2100      	movs	r1, #0
 8006008:	4618      	mov	r0, r3
 800600a:	f001 f93b 	bl	8007284 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2201      	movs	r2, #1
 8006014:	2104      	movs	r1, #4
 8006016:	4618      	mov	r0, r3
 8006018:	f001 f934 	bl	8007284 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0202 	orr.w	r2, r2, #2
 800602a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0204 	orr.w	r2, r2, #4
 800603a:	60da      	str	r2, [r3, #12]
      break;
 800603c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f042 0201 	orr.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d020      	beq.n	80060bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01b      	beq.n	80060bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f06f 0202 	mvn.w	r2, #2
 800608c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7fb fa5a 	bl	800155c <HAL_TIM_IC_CaptureCallback>
 80060a8:	e005      	b.n	80060b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fb9e 	bl	80067ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fba5 	bl	8006800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f003 0304 	and.w	r3, r3, #4
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d020      	beq.n	8006108 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01b      	beq.n	8006108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f06f 0204 	mvn.w	r2, #4
 80060d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2202      	movs	r2, #2
 80060de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7fb fa34 	bl	800155c <HAL_TIM_IC_CaptureCallback>
 80060f4:	e005      	b.n	8006102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fb78 	bl	80067ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fb7f 	bl	8006800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f003 0308 	and.w	r3, r3, #8
 800610e:	2b00      	cmp	r3, #0
 8006110:	d020      	beq.n	8006154 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f003 0308 	and.w	r3, r3, #8
 8006118:	2b00      	cmp	r3, #0
 800611a:	d01b      	beq.n	8006154 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0208 	mvn.w	r2, #8
 8006124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2204      	movs	r2, #4
 800612a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fb fa0e 	bl	800155c <HAL_TIM_IC_CaptureCallback>
 8006140:	e005      	b.n	800614e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fb52 	bl	80067ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fb59 	bl	8006800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f003 0310 	and.w	r3, r3, #16
 800615a:	2b00      	cmp	r3, #0
 800615c:	d020      	beq.n	80061a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f003 0310 	and.w	r3, r3, #16
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01b      	beq.n	80061a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f06f 0210 	mvn.w	r2, #16
 8006170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2208      	movs	r2, #8
 8006176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fb f9e8 	bl	800155c <HAL_TIM_IC_CaptureCallback>
 800618c:	e005      	b.n	800619a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fb2c 	bl	80067ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fb33 	bl	8006800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00c      	beq.n	80061c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d007      	beq.n	80061c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f06f 0201 	mvn.w	r2, #1
 80061bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fb0a 	bl	80067d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00c      	beq.n	80061e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d007      	beq.n	80061e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80061e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f001 f984 	bl	80074f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00c      	beq.n	800620c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d007      	beq.n	800620c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f001 f97c 	bl	8007504 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00c      	beq.n	8006230 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d007      	beq.n	8006230 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 faf2 	bl	8006814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f003 0320 	and.w	r3, r3, #32
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00c      	beq.n	8006254 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f003 0320 	and.w	r3, r3, #32
 8006240:	2b00      	cmp	r3, #0
 8006242:	d007      	beq.n	8006254 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f06f 0220 	mvn.w	r2, #32
 800624c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f001 f944 	bl	80074dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006254:	bf00      	nop
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006272:	2b01      	cmp	r3, #1
 8006274:	d101      	bne.n	800627a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006276:	2302      	movs	r3, #2
 8006278:	e088      	b.n	800638c <HAL_TIM_IC_ConfigChannel+0x130>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d11b      	bne.n	80062c0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006298:	f000 fe36 	bl	8006f08 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699a      	ldr	r2, [r3, #24]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 020c 	bic.w	r2, r2, #12
 80062aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6999      	ldr	r1, [r3, #24]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	689a      	ldr	r2, [r3, #8]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	619a      	str	r2, [r3, #24]
 80062be:	e060      	b.n	8006382 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d11c      	bne.n	8006300 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80062d6:	f000 feb4 	bl	8007042 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	699a      	ldr	r2, [r3, #24]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80062e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6999      	ldr	r1, [r3, #24]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	021a      	lsls	r2, r3, #8
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	619a      	str	r2, [r3, #24]
 80062fe:	e040      	b.n	8006382 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b08      	cmp	r3, #8
 8006304:	d11b      	bne.n	800633e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006316:	f000 ff01 	bl	800711c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	69da      	ldr	r2, [r3, #28]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 020c 	bic.w	r2, r2, #12
 8006328:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69d9      	ldr	r1, [r3, #28]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	61da      	str	r2, [r3, #28]
 800633c:	e021      	b.n	8006382 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b0c      	cmp	r3, #12
 8006342:	d11c      	bne.n	800637e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006354:	f000 ff1e 	bl	8007194 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	69da      	ldr	r2, [r3, #28]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006366:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	69d9      	ldr	r1, [r3, #28]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	021a      	lsls	r2, r3, #8
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	61da      	str	r2, [r3, #28]
 800637c:	e001      	b.n	8006382 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800638a:	7dfb      	ldrb	r3, [r7, #23]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e0ff      	b.n	80065b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b14      	cmp	r3, #20
 80063be:	f200 80f0 	bhi.w	80065a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80063c2:	a201      	add	r2, pc, #4	@ (adr r2, 80063c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c8:	0800641d 	.word	0x0800641d
 80063cc:	080065a3 	.word	0x080065a3
 80063d0:	080065a3 	.word	0x080065a3
 80063d4:	080065a3 	.word	0x080065a3
 80063d8:	0800645d 	.word	0x0800645d
 80063dc:	080065a3 	.word	0x080065a3
 80063e0:	080065a3 	.word	0x080065a3
 80063e4:	080065a3 	.word	0x080065a3
 80063e8:	0800649f 	.word	0x0800649f
 80063ec:	080065a3 	.word	0x080065a3
 80063f0:	080065a3 	.word	0x080065a3
 80063f4:	080065a3 	.word	0x080065a3
 80063f8:	080064df 	.word	0x080064df
 80063fc:	080065a3 	.word	0x080065a3
 8006400:	080065a3 	.word	0x080065a3
 8006404:	080065a3 	.word	0x080065a3
 8006408:	08006521 	.word	0x08006521
 800640c:	080065a3 	.word	0x080065a3
 8006410:	080065a3 	.word	0x080065a3
 8006414:	080065a3 	.word	0x080065a3
 8006418:	08006561 	.word	0x08006561
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fa9a 	bl	800695c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699a      	ldr	r2, [r3, #24]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f042 0208 	orr.w	r2, r2, #8
 8006436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699a      	ldr	r2, [r3, #24]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0204 	bic.w	r2, r2, #4
 8006446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6999      	ldr	r1, [r3, #24]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	619a      	str	r2, [r3, #24]
      break;
 800645a:	e0a5      	b.n	80065a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68b9      	ldr	r1, [r7, #8]
 8006462:	4618      	mov	r0, r3
 8006464:	f000 fb0a 	bl	8006a7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699a      	ldr	r2, [r3, #24]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	699a      	ldr	r2, [r3, #24]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6999      	ldr	r1, [r3, #24]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	021a      	lsls	r2, r3, #8
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	619a      	str	r2, [r3, #24]
      break;
 800649c:	e084      	b.n	80065a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68b9      	ldr	r1, [r7, #8]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 fb73 	bl	8006b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69da      	ldr	r2, [r3, #28]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f042 0208 	orr.w	r2, r2, #8
 80064b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69da      	ldr	r2, [r3, #28]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0204 	bic.w	r2, r2, #4
 80064c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69d9      	ldr	r1, [r3, #28]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	691a      	ldr	r2, [r3, #16]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	61da      	str	r2, [r3, #28]
      break;
 80064dc:	e064      	b.n	80065a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68b9      	ldr	r1, [r7, #8]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fbdb 	bl	8006ca0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69da      	ldr	r2, [r3, #28]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	69da      	ldr	r2, [r3, #28]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69d9      	ldr	r1, [r3, #28]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	021a      	lsls	r2, r3, #8
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	61da      	str	r2, [r3, #28]
      break;
 800651e:	e043      	b.n	80065a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fc24 	bl	8006d74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0208 	orr.w	r2, r2, #8
 800653a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 0204 	bic.w	r2, r2, #4
 800654a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	691a      	ldr	r2, [r3, #16]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800655e:	e023      	b.n	80065a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68b9      	ldr	r1, [r7, #8]
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fc68 	bl	8006e3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800657a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800658a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	021a      	lsls	r2, r3, #8
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	430a      	orrs	r2, r1
 800659e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80065a0:	e002      	b.n	80065a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	75fb      	strb	r3, [r7, #23]
      break;
 80065a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop

080065bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <HAL_TIM_ConfigClockSource+0x1c>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e0b6      	b.n	8006746 <HAL_TIM_ConfigClockSource+0x18a>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80065fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006602:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006614:	d03e      	beq.n	8006694 <HAL_TIM_ConfigClockSource+0xd8>
 8006616:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800661a:	f200 8087 	bhi.w	800672c <HAL_TIM_ConfigClockSource+0x170>
 800661e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006622:	f000 8086 	beq.w	8006732 <HAL_TIM_ConfigClockSource+0x176>
 8006626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800662a:	d87f      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x170>
 800662c:	2b70      	cmp	r3, #112	@ 0x70
 800662e:	d01a      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0xaa>
 8006630:	2b70      	cmp	r3, #112	@ 0x70
 8006632:	d87b      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x170>
 8006634:	2b60      	cmp	r3, #96	@ 0x60
 8006636:	d050      	beq.n	80066da <HAL_TIM_ConfigClockSource+0x11e>
 8006638:	2b60      	cmp	r3, #96	@ 0x60
 800663a:	d877      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x170>
 800663c:	2b50      	cmp	r3, #80	@ 0x50
 800663e:	d03c      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0xfe>
 8006640:	2b50      	cmp	r3, #80	@ 0x50
 8006642:	d873      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x170>
 8006644:	2b40      	cmp	r3, #64	@ 0x40
 8006646:	d058      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0x13e>
 8006648:	2b40      	cmp	r3, #64	@ 0x40
 800664a:	d86f      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x170>
 800664c:	2b30      	cmp	r3, #48	@ 0x30
 800664e:	d064      	beq.n	800671a <HAL_TIM_ConfigClockSource+0x15e>
 8006650:	2b30      	cmp	r3, #48	@ 0x30
 8006652:	d86b      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x170>
 8006654:	2b20      	cmp	r3, #32
 8006656:	d060      	beq.n	800671a <HAL_TIM_ConfigClockSource+0x15e>
 8006658:	2b20      	cmp	r3, #32
 800665a:	d867      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x170>
 800665c:	2b00      	cmp	r3, #0
 800665e:	d05c      	beq.n	800671a <HAL_TIM_ConfigClockSource+0x15e>
 8006660:	2b10      	cmp	r3, #16
 8006662:	d05a      	beq.n	800671a <HAL_TIM_ConfigClockSource+0x15e>
 8006664:	e062      	b.n	800672c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006676:	f000 fde5 	bl	8007244 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006688:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	609a      	str	r2, [r3, #8]
      break;
 8006692:	e04f      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066a4:	f000 fdce 	bl	8007244 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689a      	ldr	r2, [r3, #8]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066b6:	609a      	str	r2, [r3, #8]
      break;
 80066b8:	e03c      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066c6:	461a      	mov	r2, r3
 80066c8:	f000 fc8c 	bl	8006fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2150      	movs	r1, #80	@ 0x50
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 fd9b 	bl	800720e <TIM_ITRx_SetConfig>
      break;
 80066d8:	e02c      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066e6:	461a      	mov	r2, r3
 80066e8:	f000 fce8 	bl	80070bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2160      	movs	r1, #96	@ 0x60
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 fd8b 	bl	800720e <TIM_ITRx_SetConfig>
      break;
 80066f8:	e01c      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006706:	461a      	mov	r2, r3
 8006708:	f000 fc6c 	bl	8006fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2140      	movs	r1, #64	@ 0x40
 8006712:	4618      	mov	r0, r3
 8006714:	f000 fd7b 	bl	800720e <TIM_ITRx_SetConfig>
      break;
 8006718:	e00c      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4619      	mov	r1, r3
 8006724:	4610      	mov	r0, r2
 8006726:	f000 fd72 	bl	800720e <TIM_ITRx_SetConfig>
      break;
 800672a:	e003      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	73fb      	strb	r3, [r7, #15]
      break;
 8006730:	e000      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006744:	7bfb      	ldrb	r3, [r7, #15]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
	...

08006750 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b0c      	cmp	r3, #12
 8006762:	d831      	bhi.n	80067c8 <HAL_TIM_ReadCapturedValue+0x78>
 8006764:	a201      	add	r2, pc, #4	@ (adr r2, 800676c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676a:	bf00      	nop
 800676c:	080067a1 	.word	0x080067a1
 8006770:	080067c9 	.word	0x080067c9
 8006774:	080067c9 	.word	0x080067c9
 8006778:	080067c9 	.word	0x080067c9
 800677c:	080067ab 	.word	0x080067ab
 8006780:	080067c9 	.word	0x080067c9
 8006784:	080067c9 	.word	0x080067c9
 8006788:	080067c9 	.word	0x080067c9
 800678c:	080067b5 	.word	0x080067b5
 8006790:	080067c9 	.word	0x080067c9
 8006794:	080067c9 	.word	0x080067c9
 8006798:	080067c9 	.word	0x080067c9
 800679c:	080067bf 	.word	0x080067bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067a6:	60fb      	str	r3, [r7, #12]

      break;
 80067a8:	e00f      	b.n	80067ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b0:	60fb      	str	r3, [r7, #12]

      break;
 80067b2:	e00a      	b.n	80067ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ba:	60fb      	str	r3, [r7, #12]

      break;
 80067bc:	e005      	b.n	80067ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c4:	60fb      	str	r3, [r7, #12]

      break;
 80067c6:	e000      	b.n	80067ca <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80067c8:	bf00      	nop
  }

  return tmpreg;
 80067ca:	68fb      	ldr	r3, [r7, #12]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a40      	ldr	r2, [pc, #256]	@ (800693c <TIM_Base_SetConfig+0x114>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d013      	beq.n	8006868 <TIM_Base_SetConfig+0x40>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006846:	d00f      	beq.n	8006868 <TIM_Base_SetConfig+0x40>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a3d      	ldr	r2, [pc, #244]	@ (8006940 <TIM_Base_SetConfig+0x118>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00b      	beq.n	8006868 <TIM_Base_SetConfig+0x40>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a3c      	ldr	r2, [pc, #240]	@ (8006944 <TIM_Base_SetConfig+0x11c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d007      	beq.n	8006868 <TIM_Base_SetConfig+0x40>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a3b      	ldr	r2, [pc, #236]	@ (8006948 <TIM_Base_SetConfig+0x120>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d003      	beq.n	8006868 <TIM_Base_SetConfig+0x40>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a3a      	ldr	r2, [pc, #232]	@ (800694c <TIM_Base_SetConfig+0x124>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d108      	bne.n	800687a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800686e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a2f      	ldr	r2, [pc, #188]	@ (800693c <TIM_Base_SetConfig+0x114>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d01f      	beq.n	80068c2 <TIM_Base_SetConfig+0x9a>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006888:	d01b      	beq.n	80068c2 <TIM_Base_SetConfig+0x9a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a2c      	ldr	r2, [pc, #176]	@ (8006940 <TIM_Base_SetConfig+0x118>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d017      	beq.n	80068c2 <TIM_Base_SetConfig+0x9a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a2b      	ldr	r2, [pc, #172]	@ (8006944 <TIM_Base_SetConfig+0x11c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d013      	beq.n	80068c2 <TIM_Base_SetConfig+0x9a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a2a      	ldr	r2, [pc, #168]	@ (8006948 <TIM_Base_SetConfig+0x120>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00f      	beq.n	80068c2 <TIM_Base_SetConfig+0x9a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a29      	ldr	r2, [pc, #164]	@ (800694c <TIM_Base_SetConfig+0x124>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00b      	beq.n	80068c2 <TIM_Base_SetConfig+0x9a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a28      	ldr	r2, [pc, #160]	@ (8006950 <TIM_Base_SetConfig+0x128>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d007      	beq.n	80068c2 <TIM_Base_SetConfig+0x9a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a27      	ldr	r2, [pc, #156]	@ (8006954 <TIM_Base_SetConfig+0x12c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d003      	beq.n	80068c2 <TIM_Base_SetConfig+0x9a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a26      	ldr	r2, [pc, #152]	@ (8006958 <TIM_Base_SetConfig+0x130>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d108      	bne.n	80068d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	4313      	orrs	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a10      	ldr	r2, [pc, #64]	@ (800693c <TIM_Base_SetConfig+0x114>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d00f      	beq.n	8006920 <TIM_Base_SetConfig+0xf8>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a12      	ldr	r2, [pc, #72]	@ (800694c <TIM_Base_SetConfig+0x124>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d00b      	beq.n	8006920 <TIM_Base_SetConfig+0xf8>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a11      	ldr	r2, [pc, #68]	@ (8006950 <TIM_Base_SetConfig+0x128>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d007      	beq.n	8006920 <TIM_Base_SetConfig+0xf8>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a10      	ldr	r2, [pc, #64]	@ (8006954 <TIM_Base_SetConfig+0x12c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d003      	beq.n	8006920 <TIM_Base_SetConfig+0xf8>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a0f      	ldr	r2, [pc, #60]	@ (8006958 <TIM_Base_SetConfig+0x130>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d103      	bne.n	8006928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	691a      	ldr	r2, [r3, #16]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	615a      	str	r2, [r3, #20]
}
 800692e:	bf00      	nop
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40012c00 	.word	0x40012c00
 8006940:	40000400 	.word	0x40000400
 8006944:	40000800 	.word	0x40000800
 8006948:	40000c00 	.word	0x40000c00
 800694c:	40013400 	.word	0x40013400
 8006950:	40014000 	.word	0x40014000
 8006954:	40014400 	.word	0x40014400
 8006958:	40014800 	.word	0x40014800

0800695c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	f023 0201 	bic.w	r2, r3, #1
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800698a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800698e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f023 0303 	bic.w	r3, r3, #3
 8006996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f023 0302 	bic.w	r3, r3, #2
 80069a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006a68 <TIM_OC1_SetConfig+0x10c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00f      	beq.n	80069dc <TIM_OC1_SetConfig+0x80>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a2b      	ldr	r2, [pc, #172]	@ (8006a6c <TIM_OC1_SetConfig+0x110>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00b      	beq.n	80069dc <TIM_OC1_SetConfig+0x80>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a2a      	ldr	r2, [pc, #168]	@ (8006a70 <TIM_OC1_SetConfig+0x114>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d007      	beq.n	80069dc <TIM_OC1_SetConfig+0x80>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a29      	ldr	r2, [pc, #164]	@ (8006a74 <TIM_OC1_SetConfig+0x118>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d003      	beq.n	80069dc <TIM_OC1_SetConfig+0x80>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a28      	ldr	r2, [pc, #160]	@ (8006a78 <TIM_OC1_SetConfig+0x11c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d10c      	bne.n	80069f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f023 0308 	bic.w	r3, r3, #8
 80069e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f023 0304 	bic.w	r3, r3, #4
 80069f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006a68 <TIM_OC1_SetConfig+0x10c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00f      	beq.n	8006a1e <TIM_OC1_SetConfig+0xc2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a1a      	ldr	r2, [pc, #104]	@ (8006a6c <TIM_OC1_SetConfig+0x110>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00b      	beq.n	8006a1e <TIM_OC1_SetConfig+0xc2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a19      	ldr	r2, [pc, #100]	@ (8006a70 <TIM_OC1_SetConfig+0x114>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d007      	beq.n	8006a1e <TIM_OC1_SetConfig+0xc2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a18      	ldr	r2, [pc, #96]	@ (8006a74 <TIM_OC1_SetConfig+0x118>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d003      	beq.n	8006a1e <TIM_OC1_SetConfig+0xc2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a17      	ldr	r2, [pc, #92]	@ (8006a78 <TIM_OC1_SetConfig+0x11c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d111      	bne.n	8006a42 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	621a      	str	r2, [r3, #32]
}
 8006a5c:	bf00      	nop
 8006a5e:	371c      	adds	r7, #28
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	40012c00 	.word	0x40012c00
 8006a6c:	40013400 	.word	0x40013400
 8006a70:	40014000 	.word	0x40014000
 8006a74:	40014400 	.word	0x40014400
 8006a78:	40014800 	.word	0x40014800

08006a7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	f023 0210 	bic.w	r2, r3, #16
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f023 0320 	bic.w	r3, r3, #32
 8006aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	011b      	lsls	r3, r3, #4
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a28      	ldr	r2, [pc, #160]	@ (8006b7c <TIM_OC2_SetConfig+0x100>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d003      	beq.n	8006ae8 <TIM_OC2_SetConfig+0x6c>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a27      	ldr	r2, [pc, #156]	@ (8006b80 <TIM_OC2_SetConfig+0x104>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d10d      	bne.n	8006b04 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	011b      	lsls	r3, r3, #4
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a1d      	ldr	r2, [pc, #116]	@ (8006b7c <TIM_OC2_SetConfig+0x100>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00f      	beq.n	8006b2c <TIM_OC2_SetConfig+0xb0>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8006b80 <TIM_OC2_SetConfig+0x104>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00b      	beq.n	8006b2c <TIM_OC2_SetConfig+0xb0>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a1b      	ldr	r2, [pc, #108]	@ (8006b84 <TIM_OC2_SetConfig+0x108>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d007      	beq.n	8006b2c <TIM_OC2_SetConfig+0xb0>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8006b88 <TIM_OC2_SetConfig+0x10c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_OC2_SetConfig+0xb0>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a19      	ldr	r2, [pc, #100]	@ (8006b8c <TIM_OC2_SetConfig+0x110>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d113      	bne.n	8006b54 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	621a      	str	r2, [r3, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	40012c00 	.word	0x40012c00
 8006b80:	40013400 	.word	0x40013400
 8006b84:	40014000 	.word	0x40014000
 8006b88:	40014400 	.word	0x40014400
 8006b8c:	40014800 	.word	0x40014800

08006b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0303 	bic.w	r3, r3, #3
 8006bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a27      	ldr	r2, [pc, #156]	@ (8006c8c <TIM_OC3_SetConfig+0xfc>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d003      	beq.n	8006bfa <TIM_OC3_SetConfig+0x6a>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a26      	ldr	r2, [pc, #152]	@ (8006c90 <TIM_OC3_SetConfig+0x100>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d10d      	bne.n	8006c16 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	021b      	lsls	r3, r3, #8
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a1c      	ldr	r2, [pc, #112]	@ (8006c8c <TIM_OC3_SetConfig+0xfc>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00f      	beq.n	8006c3e <TIM_OC3_SetConfig+0xae>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a1b      	ldr	r2, [pc, #108]	@ (8006c90 <TIM_OC3_SetConfig+0x100>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00b      	beq.n	8006c3e <TIM_OC3_SetConfig+0xae>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a1a      	ldr	r2, [pc, #104]	@ (8006c94 <TIM_OC3_SetConfig+0x104>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d007      	beq.n	8006c3e <TIM_OC3_SetConfig+0xae>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a19      	ldr	r2, [pc, #100]	@ (8006c98 <TIM_OC3_SetConfig+0x108>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d003      	beq.n	8006c3e <TIM_OC3_SetConfig+0xae>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a18      	ldr	r2, [pc, #96]	@ (8006c9c <TIM_OC3_SetConfig+0x10c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d113      	bne.n	8006c66 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	011b      	lsls	r3, r3, #4
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	621a      	str	r2, [r3, #32]
}
 8006c80:	bf00      	nop
 8006c82:	371c      	adds	r7, #28
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	40012c00 	.word	0x40012c00
 8006c90:	40013400 	.word	0x40013400
 8006c94:	40014000 	.word	0x40014000
 8006c98:	40014400 	.word	0x40014400
 8006c9c:	40014800 	.word	0x40014800

08006ca0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	021b      	lsls	r3, r3, #8
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	031b      	lsls	r3, r3, #12
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a18      	ldr	r2, [pc, #96]	@ (8006d60 <TIM_OC4_SetConfig+0xc0>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00f      	beq.n	8006d24 <TIM_OC4_SetConfig+0x84>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a17      	ldr	r2, [pc, #92]	@ (8006d64 <TIM_OC4_SetConfig+0xc4>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00b      	beq.n	8006d24 <TIM_OC4_SetConfig+0x84>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a16      	ldr	r2, [pc, #88]	@ (8006d68 <TIM_OC4_SetConfig+0xc8>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d007      	beq.n	8006d24 <TIM_OC4_SetConfig+0x84>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a15      	ldr	r2, [pc, #84]	@ (8006d6c <TIM_OC4_SetConfig+0xcc>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d003      	beq.n	8006d24 <TIM_OC4_SetConfig+0x84>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a14      	ldr	r2, [pc, #80]	@ (8006d70 <TIM_OC4_SetConfig+0xd0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d109      	bne.n	8006d38 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	019b      	lsls	r3, r3, #6
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	621a      	str	r2, [r3, #32]
}
 8006d52:	bf00      	nop
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	40012c00 	.word	0x40012c00
 8006d64:	40013400 	.word	0x40013400
 8006d68:	40014000 	.word	0x40014000
 8006d6c:	40014400 	.word	0x40014400
 8006d70:	40014800 	.word	0x40014800

08006d74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006db8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	041b      	lsls	r3, r3, #16
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a17      	ldr	r2, [pc, #92]	@ (8006e28 <TIM_OC5_SetConfig+0xb4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d00f      	beq.n	8006dee <TIM_OC5_SetConfig+0x7a>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a16      	ldr	r2, [pc, #88]	@ (8006e2c <TIM_OC5_SetConfig+0xb8>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d00b      	beq.n	8006dee <TIM_OC5_SetConfig+0x7a>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a15      	ldr	r2, [pc, #84]	@ (8006e30 <TIM_OC5_SetConfig+0xbc>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d007      	beq.n	8006dee <TIM_OC5_SetConfig+0x7a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a14      	ldr	r2, [pc, #80]	@ (8006e34 <TIM_OC5_SetConfig+0xc0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d003      	beq.n	8006dee <TIM_OC5_SetConfig+0x7a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a13      	ldr	r2, [pc, #76]	@ (8006e38 <TIM_OC5_SetConfig+0xc4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d109      	bne.n	8006e02 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006df4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	021b      	lsls	r3, r3, #8
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	621a      	str	r2, [r3, #32]
}
 8006e1c:	bf00      	nop
 8006e1e:	371c      	adds	r7, #28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr
 8006e28:	40012c00 	.word	0x40012c00
 8006e2c:	40013400 	.word	0x40013400
 8006e30:	40014000 	.word	0x40014000
 8006e34:	40014400 	.word	0x40014400
 8006e38:	40014800 	.word	0x40014800

08006e3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	021b      	lsls	r3, r3, #8
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	051b      	lsls	r3, r3, #20
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a18      	ldr	r2, [pc, #96]	@ (8006ef4 <TIM_OC6_SetConfig+0xb8>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d00f      	beq.n	8006eb8 <TIM_OC6_SetConfig+0x7c>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a17      	ldr	r2, [pc, #92]	@ (8006ef8 <TIM_OC6_SetConfig+0xbc>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d00b      	beq.n	8006eb8 <TIM_OC6_SetConfig+0x7c>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a16      	ldr	r2, [pc, #88]	@ (8006efc <TIM_OC6_SetConfig+0xc0>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d007      	beq.n	8006eb8 <TIM_OC6_SetConfig+0x7c>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a15      	ldr	r2, [pc, #84]	@ (8006f00 <TIM_OC6_SetConfig+0xc4>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d003      	beq.n	8006eb8 <TIM_OC6_SetConfig+0x7c>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a14      	ldr	r2, [pc, #80]	@ (8006f04 <TIM_OC6_SetConfig+0xc8>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d109      	bne.n	8006ecc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	029b      	lsls	r3, r3, #10
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	621a      	str	r2, [r3, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40012c00 	.word	0x40012c00
 8006ef8:	40013400 	.word	0x40013400
 8006efc:	40014000 	.word	0x40014000
 8006f00:	40014400 	.word	0x40014400
 8006f04:	40014800 	.word	0x40014800

08006f08 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	f023 0201 	bic.w	r2, r3, #1
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4a26      	ldr	r2, [pc, #152]	@ (8006fcc <TIM_TI1_SetConfig+0xc4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d017      	beq.n	8006f66 <TIM_TI1_SetConfig+0x5e>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f3c:	d013      	beq.n	8006f66 <TIM_TI1_SetConfig+0x5e>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4a23      	ldr	r2, [pc, #140]	@ (8006fd0 <TIM_TI1_SetConfig+0xc8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d00f      	beq.n	8006f66 <TIM_TI1_SetConfig+0x5e>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4a22      	ldr	r2, [pc, #136]	@ (8006fd4 <TIM_TI1_SetConfig+0xcc>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d00b      	beq.n	8006f66 <TIM_TI1_SetConfig+0x5e>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4a21      	ldr	r2, [pc, #132]	@ (8006fd8 <TIM_TI1_SetConfig+0xd0>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d007      	beq.n	8006f66 <TIM_TI1_SetConfig+0x5e>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4a20      	ldr	r2, [pc, #128]	@ (8006fdc <TIM_TI1_SetConfig+0xd4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d003      	beq.n	8006f66 <TIM_TI1_SetConfig+0x5e>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4a1f      	ldr	r2, [pc, #124]	@ (8006fe0 <TIM_TI1_SetConfig+0xd8>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d101      	bne.n	8006f6a <TIM_TI1_SetConfig+0x62>
 8006f66:	2301      	movs	r3, #1
 8006f68:	e000      	b.n	8006f6c <TIM_TI1_SetConfig+0x64>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d008      	beq.n	8006f82 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f023 0303 	bic.w	r3, r3, #3
 8006f76:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	e003      	b.n	8006f8a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f043 0301 	orr.w	r3, r3, #1
 8006f88:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	f023 030a 	bic.w	r3, r3, #10
 8006fa4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f003 030a 	and.w	r3, r3, #10
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	621a      	str	r2, [r3, #32]
}
 8006fbe:	bf00      	nop
 8006fc0:	371c      	adds	r7, #28
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40012c00 	.word	0x40012c00
 8006fd0:	40000400 	.word	0x40000400
 8006fd4:	40000800 	.word	0x40000800
 8006fd8:	40000c00 	.word	0x40000c00
 8006fdc:	40013400 	.word	0x40013400
 8006fe0:	40014000 	.word	0x40014000

08006fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	f023 0201 	bic.w	r2, r3, #1
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800700e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	011b      	lsls	r3, r3, #4
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	4313      	orrs	r3, r2
 8007018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f023 030a 	bic.w	r3, r3, #10
 8007020:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	4313      	orrs	r3, r2
 8007028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	621a      	str	r2, [r3, #32]
}
 8007036:	bf00      	nop
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007042:	b480      	push	{r7}
 8007044:	b087      	sub	sp, #28
 8007046:	af00      	add	r7, sp, #0
 8007048:	60f8      	str	r0, [r7, #12]
 800704a:	60b9      	str	r1, [r7, #8]
 800704c:	607a      	str	r2, [r7, #4]
 800704e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	f023 0210 	bic.w	r2, r3, #16
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800706e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	021b      	lsls	r3, r3, #8
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	4313      	orrs	r3, r2
 8007078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007080:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	031b      	lsls	r3, r3, #12
 8007086:	b29b      	uxth	r3, r3
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	4313      	orrs	r3, r2
 800708c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007094:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	011b      	lsls	r3, r3, #4
 800709a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	621a      	str	r2, [r3, #32]
}
 80070b0:	bf00      	nop
 80070b2:	371c      	adds	r7, #28
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	f023 0210 	bic.w	r2, r3, #16
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80070e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	031b      	lsls	r3, r3, #12
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80070f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	011b      	lsls	r3, r3, #4
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	4313      	orrs	r3, r2
 8007102:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	621a      	str	r2, [r3, #32]
}
 8007110:	bf00      	nop
 8007112:	371c      	adds	r7, #28
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	69db      	ldr	r3, [r3, #28]
 8007140:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f023 0303 	bic.w	r3, r3, #3
 8007148:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4313      	orrs	r3, r2
 8007150:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007158:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	011b      	lsls	r3, r3, #4
 800715e:	b2db      	uxtb	r3, r3
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	4313      	orrs	r3, r2
 8007164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800716c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	021b      	lsls	r3, r3, #8
 8007172:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	4313      	orrs	r3, r2
 800717a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	621a      	str	r2, [r3, #32]
}
 8007188:	bf00      	nop
 800718a:	371c      	adds	r7, #28
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
 80071a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	021b      	lsls	r3, r3, #8
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071d2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	031b      	lsls	r3, r3, #12
 80071d8:	b29b      	uxth	r3, r3
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	4313      	orrs	r3, r2
 80071de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80071e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	031b      	lsls	r3, r3, #12
 80071ec:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	621a      	str	r2, [r3, #32]
}
 8007202:	bf00      	nop
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800720e:	b480      	push	{r7}
 8007210:	b085      	sub	sp, #20
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4313      	orrs	r3, r2
 800722c:	f043 0307 	orr.w	r3, r3, #7
 8007230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	609a      	str	r2, [r3, #8]
}
 8007238:	bf00      	nop
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800725e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	021a      	lsls	r2, r3, #8
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	431a      	orrs	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4313      	orrs	r3, r2
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	4313      	orrs	r3, r2
 8007270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	609a      	str	r2, [r3, #8]
}
 8007278:	bf00      	nop
 800727a:	371c      	adds	r7, #28
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f003 031f 	and.w	r3, r3, #31
 8007296:	2201      	movs	r2, #1
 8007298:	fa02 f303 	lsl.w	r3, r2, r3
 800729c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6a1a      	ldr	r2, [r3, #32]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	43db      	mvns	r3, r3
 80072a6:	401a      	ands	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6a1a      	ldr	r2, [r3, #32]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f003 031f 	and.w	r3, r3, #31
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	fa01 f303 	lsl.w	r3, r1, r3
 80072bc:	431a      	orrs	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	621a      	str	r2, [r3, #32]
}
 80072c2:	bf00      	nop
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
	...

080072d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e068      	b.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a2e      	ldr	r2, [pc, #184]	@ (80073c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d004      	beq.n	800731c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a2d      	ldr	r2, [pc, #180]	@ (80073cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d108      	bne.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007322:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007334:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	4313      	orrs	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a1e      	ldr	r2, [pc, #120]	@ (80073c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d01d      	beq.n	800738e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800735a:	d018      	beq.n	800738e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a1b      	ldr	r2, [pc, #108]	@ (80073d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d013      	beq.n	800738e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a1a      	ldr	r2, [pc, #104]	@ (80073d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d00e      	beq.n	800738e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a18      	ldr	r2, [pc, #96]	@ (80073d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d009      	beq.n	800738e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a13      	ldr	r2, [pc, #76]	@ (80073cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d004      	beq.n	800738e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a14      	ldr	r2, [pc, #80]	@ (80073dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d10c      	bne.n	80073a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	4313      	orrs	r3, r2
 800739e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	40012c00 	.word	0x40012c00
 80073cc:	40013400 	.word	0x40013400
 80073d0:	40000400 	.word	0x40000400
 80073d4:	40000800 	.word	0x40000800
 80073d8:	40000c00 	.word	0x40000c00
 80073dc:	40014000 	.word	0x40014000

080073e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d101      	bne.n	80073fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80073f8:	2302      	movs	r3, #2
 80073fa:	e065      	b.n	80074c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	4313      	orrs	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	4313      	orrs	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4313      	orrs	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	4313      	orrs	r3, r2
 8007448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	4313      	orrs	r3, r2
 8007456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	041b      	lsls	r3, r3, #16
 8007472:	4313      	orrs	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a16      	ldr	r2, [pc, #88]	@ (80074d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d004      	beq.n	800748a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a14      	ldr	r2, [pc, #80]	@ (80074d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d115      	bne.n	80074b6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007494:	051b      	lsls	r3, r3, #20
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	40012c00 	.word	0x40012c00
 80074d8:	40013400 	.word	0x40013400

080074dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e040      	b.n	80075ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d106      	bne.n	8007540 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7fa fce8 	bl	8001f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2224      	movs	r2, #36	@ 0x24
 8007544:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0201 	bic.w	r2, r2, #1
 8007554:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fae0 	bl	8007b24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f825 	bl	80075b4 <UART_SetConfig>
 800756a:	4603      	mov	r3, r0
 800756c:	2b01      	cmp	r3, #1
 800756e:	d101      	bne.n	8007574 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e01b      	b.n	80075ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007582:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689a      	ldr	r2, [r3, #8]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007592:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0201 	orr.w	r2, r2, #1
 80075a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fb5f 	bl	8007c68 <UART_CheckIdleState>
 80075aa:	4603      	mov	r3, r0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075b8:	b08a      	sub	sp, #40	@ 0x28
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	431a      	orrs	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	431a      	orrs	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	4313      	orrs	r3, r2
 80075da:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	4ba4      	ldr	r3, [pc, #656]	@ (8007874 <UART_SetConfig+0x2c0>)
 80075e4:	4013      	ands	r3, r2
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	6812      	ldr	r2, [r2, #0]
 80075ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075ec:	430b      	orrs	r3, r1
 80075ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	68da      	ldr	r2, [r3, #12]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a99      	ldr	r2, [pc, #612]	@ (8007878 <UART_SetConfig+0x2c4>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d004      	beq.n	8007620 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800761c:	4313      	orrs	r3, r2
 800761e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007630:	430a      	orrs	r2, r1
 8007632:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a90      	ldr	r2, [pc, #576]	@ (800787c <UART_SetConfig+0x2c8>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d126      	bne.n	800768c <UART_SetConfig+0xd8>
 800763e:	4b90      	ldr	r3, [pc, #576]	@ (8007880 <UART_SetConfig+0x2cc>)
 8007640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007644:	f003 0303 	and.w	r3, r3, #3
 8007648:	2b03      	cmp	r3, #3
 800764a:	d81b      	bhi.n	8007684 <UART_SetConfig+0xd0>
 800764c:	a201      	add	r2, pc, #4	@ (adr r2, 8007654 <UART_SetConfig+0xa0>)
 800764e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007652:	bf00      	nop
 8007654:	08007665 	.word	0x08007665
 8007658:	08007675 	.word	0x08007675
 800765c:	0800766d 	.word	0x0800766d
 8007660:	0800767d 	.word	0x0800767d
 8007664:	2301      	movs	r3, #1
 8007666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800766a:	e116      	b.n	800789a <UART_SetConfig+0x2e6>
 800766c:	2302      	movs	r3, #2
 800766e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007672:	e112      	b.n	800789a <UART_SetConfig+0x2e6>
 8007674:	2304      	movs	r3, #4
 8007676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800767a:	e10e      	b.n	800789a <UART_SetConfig+0x2e6>
 800767c:	2308      	movs	r3, #8
 800767e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007682:	e10a      	b.n	800789a <UART_SetConfig+0x2e6>
 8007684:	2310      	movs	r3, #16
 8007686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800768a:	e106      	b.n	800789a <UART_SetConfig+0x2e6>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a7c      	ldr	r2, [pc, #496]	@ (8007884 <UART_SetConfig+0x2d0>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d138      	bne.n	8007708 <UART_SetConfig+0x154>
 8007696:	4b7a      	ldr	r3, [pc, #488]	@ (8007880 <UART_SetConfig+0x2cc>)
 8007698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800769c:	f003 030c 	and.w	r3, r3, #12
 80076a0:	2b0c      	cmp	r3, #12
 80076a2:	d82d      	bhi.n	8007700 <UART_SetConfig+0x14c>
 80076a4:	a201      	add	r2, pc, #4	@ (adr r2, 80076ac <UART_SetConfig+0xf8>)
 80076a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076aa:	bf00      	nop
 80076ac:	080076e1 	.word	0x080076e1
 80076b0:	08007701 	.word	0x08007701
 80076b4:	08007701 	.word	0x08007701
 80076b8:	08007701 	.word	0x08007701
 80076bc:	080076f1 	.word	0x080076f1
 80076c0:	08007701 	.word	0x08007701
 80076c4:	08007701 	.word	0x08007701
 80076c8:	08007701 	.word	0x08007701
 80076cc:	080076e9 	.word	0x080076e9
 80076d0:	08007701 	.word	0x08007701
 80076d4:	08007701 	.word	0x08007701
 80076d8:	08007701 	.word	0x08007701
 80076dc:	080076f9 	.word	0x080076f9
 80076e0:	2300      	movs	r3, #0
 80076e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076e6:	e0d8      	b.n	800789a <UART_SetConfig+0x2e6>
 80076e8:	2302      	movs	r3, #2
 80076ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ee:	e0d4      	b.n	800789a <UART_SetConfig+0x2e6>
 80076f0:	2304      	movs	r3, #4
 80076f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076f6:	e0d0      	b.n	800789a <UART_SetConfig+0x2e6>
 80076f8:	2308      	movs	r3, #8
 80076fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076fe:	e0cc      	b.n	800789a <UART_SetConfig+0x2e6>
 8007700:	2310      	movs	r3, #16
 8007702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007706:	e0c8      	b.n	800789a <UART_SetConfig+0x2e6>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a5e      	ldr	r2, [pc, #376]	@ (8007888 <UART_SetConfig+0x2d4>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d125      	bne.n	800775e <UART_SetConfig+0x1aa>
 8007712:	4b5b      	ldr	r3, [pc, #364]	@ (8007880 <UART_SetConfig+0x2cc>)
 8007714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007718:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800771c:	2b30      	cmp	r3, #48	@ 0x30
 800771e:	d016      	beq.n	800774e <UART_SetConfig+0x19a>
 8007720:	2b30      	cmp	r3, #48	@ 0x30
 8007722:	d818      	bhi.n	8007756 <UART_SetConfig+0x1a2>
 8007724:	2b20      	cmp	r3, #32
 8007726:	d00a      	beq.n	800773e <UART_SetConfig+0x18a>
 8007728:	2b20      	cmp	r3, #32
 800772a:	d814      	bhi.n	8007756 <UART_SetConfig+0x1a2>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <UART_SetConfig+0x182>
 8007730:	2b10      	cmp	r3, #16
 8007732:	d008      	beq.n	8007746 <UART_SetConfig+0x192>
 8007734:	e00f      	b.n	8007756 <UART_SetConfig+0x1a2>
 8007736:	2300      	movs	r3, #0
 8007738:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800773c:	e0ad      	b.n	800789a <UART_SetConfig+0x2e6>
 800773e:	2302      	movs	r3, #2
 8007740:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007744:	e0a9      	b.n	800789a <UART_SetConfig+0x2e6>
 8007746:	2304      	movs	r3, #4
 8007748:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800774c:	e0a5      	b.n	800789a <UART_SetConfig+0x2e6>
 800774e:	2308      	movs	r3, #8
 8007750:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007754:	e0a1      	b.n	800789a <UART_SetConfig+0x2e6>
 8007756:	2310      	movs	r3, #16
 8007758:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800775c:	e09d      	b.n	800789a <UART_SetConfig+0x2e6>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a4a      	ldr	r2, [pc, #296]	@ (800788c <UART_SetConfig+0x2d8>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d125      	bne.n	80077b4 <UART_SetConfig+0x200>
 8007768:	4b45      	ldr	r3, [pc, #276]	@ (8007880 <UART_SetConfig+0x2cc>)
 800776a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800776e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007772:	2bc0      	cmp	r3, #192	@ 0xc0
 8007774:	d016      	beq.n	80077a4 <UART_SetConfig+0x1f0>
 8007776:	2bc0      	cmp	r3, #192	@ 0xc0
 8007778:	d818      	bhi.n	80077ac <UART_SetConfig+0x1f8>
 800777a:	2b80      	cmp	r3, #128	@ 0x80
 800777c:	d00a      	beq.n	8007794 <UART_SetConfig+0x1e0>
 800777e:	2b80      	cmp	r3, #128	@ 0x80
 8007780:	d814      	bhi.n	80077ac <UART_SetConfig+0x1f8>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d002      	beq.n	800778c <UART_SetConfig+0x1d8>
 8007786:	2b40      	cmp	r3, #64	@ 0x40
 8007788:	d008      	beq.n	800779c <UART_SetConfig+0x1e8>
 800778a:	e00f      	b.n	80077ac <UART_SetConfig+0x1f8>
 800778c:	2300      	movs	r3, #0
 800778e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007792:	e082      	b.n	800789a <UART_SetConfig+0x2e6>
 8007794:	2302      	movs	r3, #2
 8007796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800779a:	e07e      	b.n	800789a <UART_SetConfig+0x2e6>
 800779c:	2304      	movs	r3, #4
 800779e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077a2:	e07a      	b.n	800789a <UART_SetConfig+0x2e6>
 80077a4:	2308      	movs	r3, #8
 80077a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077aa:	e076      	b.n	800789a <UART_SetConfig+0x2e6>
 80077ac:	2310      	movs	r3, #16
 80077ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077b2:	e072      	b.n	800789a <UART_SetConfig+0x2e6>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a35      	ldr	r2, [pc, #212]	@ (8007890 <UART_SetConfig+0x2dc>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d12a      	bne.n	8007814 <UART_SetConfig+0x260>
 80077be:	4b30      	ldr	r3, [pc, #192]	@ (8007880 <UART_SetConfig+0x2cc>)
 80077c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077cc:	d01a      	beq.n	8007804 <UART_SetConfig+0x250>
 80077ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077d2:	d81b      	bhi.n	800780c <UART_SetConfig+0x258>
 80077d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077d8:	d00c      	beq.n	80077f4 <UART_SetConfig+0x240>
 80077da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077de:	d815      	bhi.n	800780c <UART_SetConfig+0x258>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d003      	beq.n	80077ec <UART_SetConfig+0x238>
 80077e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077e8:	d008      	beq.n	80077fc <UART_SetConfig+0x248>
 80077ea:	e00f      	b.n	800780c <UART_SetConfig+0x258>
 80077ec:	2300      	movs	r3, #0
 80077ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077f2:	e052      	b.n	800789a <UART_SetConfig+0x2e6>
 80077f4:	2302      	movs	r3, #2
 80077f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077fa:	e04e      	b.n	800789a <UART_SetConfig+0x2e6>
 80077fc:	2304      	movs	r3, #4
 80077fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007802:	e04a      	b.n	800789a <UART_SetConfig+0x2e6>
 8007804:	2308      	movs	r3, #8
 8007806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800780a:	e046      	b.n	800789a <UART_SetConfig+0x2e6>
 800780c:	2310      	movs	r3, #16
 800780e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007812:	e042      	b.n	800789a <UART_SetConfig+0x2e6>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a17      	ldr	r2, [pc, #92]	@ (8007878 <UART_SetConfig+0x2c4>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d13a      	bne.n	8007894 <UART_SetConfig+0x2e0>
 800781e:	4b18      	ldr	r3, [pc, #96]	@ (8007880 <UART_SetConfig+0x2cc>)
 8007820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007824:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007828:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800782c:	d01a      	beq.n	8007864 <UART_SetConfig+0x2b0>
 800782e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007832:	d81b      	bhi.n	800786c <UART_SetConfig+0x2b8>
 8007834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007838:	d00c      	beq.n	8007854 <UART_SetConfig+0x2a0>
 800783a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800783e:	d815      	bhi.n	800786c <UART_SetConfig+0x2b8>
 8007840:	2b00      	cmp	r3, #0
 8007842:	d003      	beq.n	800784c <UART_SetConfig+0x298>
 8007844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007848:	d008      	beq.n	800785c <UART_SetConfig+0x2a8>
 800784a:	e00f      	b.n	800786c <UART_SetConfig+0x2b8>
 800784c:	2300      	movs	r3, #0
 800784e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007852:	e022      	b.n	800789a <UART_SetConfig+0x2e6>
 8007854:	2302      	movs	r3, #2
 8007856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800785a:	e01e      	b.n	800789a <UART_SetConfig+0x2e6>
 800785c:	2304      	movs	r3, #4
 800785e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007862:	e01a      	b.n	800789a <UART_SetConfig+0x2e6>
 8007864:	2308      	movs	r3, #8
 8007866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800786a:	e016      	b.n	800789a <UART_SetConfig+0x2e6>
 800786c:	2310      	movs	r3, #16
 800786e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007872:	e012      	b.n	800789a <UART_SetConfig+0x2e6>
 8007874:	efff69f3 	.word	0xefff69f3
 8007878:	40008000 	.word	0x40008000
 800787c:	40013800 	.word	0x40013800
 8007880:	40021000 	.word	0x40021000
 8007884:	40004400 	.word	0x40004400
 8007888:	40004800 	.word	0x40004800
 800788c:	40004c00 	.word	0x40004c00
 8007890:	40005000 	.word	0x40005000
 8007894:	2310      	movs	r3, #16
 8007896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a9f      	ldr	r2, [pc, #636]	@ (8007b1c <UART_SetConfig+0x568>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d17a      	bne.n	800799a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80078a8:	2b08      	cmp	r3, #8
 80078aa:	d824      	bhi.n	80078f6 <UART_SetConfig+0x342>
 80078ac:	a201      	add	r2, pc, #4	@ (adr r2, 80078b4 <UART_SetConfig+0x300>)
 80078ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b2:	bf00      	nop
 80078b4:	080078d9 	.word	0x080078d9
 80078b8:	080078f7 	.word	0x080078f7
 80078bc:	080078e1 	.word	0x080078e1
 80078c0:	080078f7 	.word	0x080078f7
 80078c4:	080078e7 	.word	0x080078e7
 80078c8:	080078f7 	.word	0x080078f7
 80078cc:	080078f7 	.word	0x080078f7
 80078d0:	080078f7 	.word	0x080078f7
 80078d4:	080078ef 	.word	0x080078ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078d8:	f7fd f958 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 80078dc:	61f8      	str	r0, [r7, #28]
        break;
 80078de:	e010      	b.n	8007902 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078e0:	4b8f      	ldr	r3, [pc, #572]	@ (8007b20 <UART_SetConfig+0x56c>)
 80078e2:	61fb      	str	r3, [r7, #28]
        break;
 80078e4:	e00d      	b.n	8007902 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078e6:	f7fd f8b9 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 80078ea:	61f8      	str	r0, [r7, #28]
        break;
 80078ec:	e009      	b.n	8007902 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078f2:	61fb      	str	r3, [r7, #28]
        break;
 80078f4:	e005      	b.n	8007902 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007900:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 80fb 	beq.w	8007b00 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	4613      	mov	r3, r2
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	4413      	add	r3, r2
 8007914:	69fa      	ldr	r2, [r7, #28]
 8007916:	429a      	cmp	r2, r3
 8007918:	d305      	bcc.n	8007926 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007920:	69fa      	ldr	r2, [r7, #28]
 8007922:	429a      	cmp	r2, r3
 8007924:	d903      	bls.n	800792e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800792c:	e0e8      	b.n	8007b00 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	2200      	movs	r2, #0
 8007932:	461c      	mov	r4, r3
 8007934:	4615      	mov	r5, r2
 8007936:	f04f 0200 	mov.w	r2, #0
 800793a:	f04f 0300 	mov.w	r3, #0
 800793e:	022b      	lsls	r3, r5, #8
 8007940:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007944:	0222      	lsls	r2, r4, #8
 8007946:	68f9      	ldr	r1, [r7, #12]
 8007948:	6849      	ldr	r1, [r1, #4]
 800794a:	0849      	lsrs	r1, r1, #1
 800794c:	2000      	movs	r0, #0
 800794e:	4688      	mov	r8, r1
 8007950:	4681      	mov	r9, r0
 8007952:	eb12 0a08 	adds.w	sl, r2, r8
 8007956:	eb43 0b09 	adc.w	fp, r3, r9
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	603b      	str	r3, [r7, #0]
 8007962:	607a      	str	r2, [r7, #4]
 8007964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007968:	4650      	mov	r0, sl
 800796a:	4659      	mov	r1, fp
 800796c:	f7f8 fc80 	bl	8000270 <__aeabi_uldivmod>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4613      	mov	r3, r2
 8007976:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800797e:	d308      	bcc.n	8007992 <UART_SetConfig+0x3de>
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007986:	d204      	bcs.n	8007992 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	69ba      	ldr	r2, [r7, #24]
 800798e:	60da      	str	r2, [r3, #12]
 8007990:	e0b6      	b.n	8007b00 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007998:	e0b2      	b.n	8007b00 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079a2:	d15e      	bne.n	8007a62 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80079a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d828      	bhi.n	80079fe <UART_SetConfig+0x44a>
 80079ac:	a201      	add	r2, pc, #4	@ (adr r2, 80079b4 <UART_SetConfig+0x400>)
 80079ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b2:	bf00      	nop
 80079b4:	080079d9 	.word	0x080079d9
 80079b8:	080079e1 	.word	0x080079e1
 80079bc:	080079e9 	.word	0x080079e9
 80079c0:	080079ff 	.word	0x080079ff
 80079c4:	080079ef 	.word	0x080079ef
 80079c8:	080079ff 	.word	0x080079ff
 80079cc:	080079ff 	.word	0x080079ff
 80079d0:	080079ff 	.word	0x080079ff
 80079d4:	080079f7 	.word	0x080079f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079d8:	f7fd f8d8 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 80079dc:	61f8      	str	r0, [r7, #28]
        break;
 80079de:	e014      	b.n	8007a0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079e0:	f7fd f8ea 	bl	8004bb8 <HAL_RCC_GetPCLK2Freq>
 80079e4:	61f8      	str	r0, [r7, #28]
        break;
 80079e6:	e010      	b.n	8007a0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079e8:	4b4d      	ldr	r3, [pc, #308]	@ (8007b20 <UART_SetConfig+0x56c>)
 80079ea:	61fb      	str	r3, [r7, #28]
        break;
 80079ec:	e00d      	b.n	8007a0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ee:	f7fd f835 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 80079f2:	61f8      	str	r0, [r7, #28]
        break;
 80079f4:	e009      	b.n	8007a0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079fa:	61fb      	str	r3, [r7, #28]
        break;
 80079fc:	e005      	b.n	8007a0a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007a08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d077      	beq.n	8007b00 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	005a      	lsls	r2, r3, #1
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	085b      	lsrs	r3, r3, #1
 8007a1a:	441a      	add	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a24:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	2b0f      	cmp	r3, #15
 8007a2a:	d916      	bls.n	8007a5a <UART_SetConfig+0x4a6>
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a32:	d212      	bcs.n	8007a5a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	f023 030f 	bic.w	r3, r3, #15
 8007a3c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	085b      	lsrs	r3, r3, #1
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	f003 0307 	and.w	r3, r3, #7
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	8afb      	ldrh	r3, [r7, #22]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	8afa      	ldrh	r2, [r7, #22]
 8007a56:	60da      	str	r2, [r3, #12]
 8007a58:	e052      	b.n	8007b00 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a60:	e04e      	b.n	8007b00 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a66:	2b08      	cmp	r3, #8
 8007a68:	d827      	bhi.n	8007aba <UART_SetConfig+0x506>
 8007a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a70 <UART_SetConfig+0x4bc>)
 8007a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a70:	08007a95 	.word	0x08007a95
 8007a74:	08007a9d 	.word	0x08007a9d
 8007a78:	08007aa5 	.word	0x08007aa5
 8007a7c:	08007abb 	.word	0x08007abb
 8007a80:	08007aab 	.word	0x08007aab
 8007a84:	08007abb 	.word	0x08007abb
 8007a88:	08007abb 	.word	0x08007abb
 8007a8c:	08007abb 	.word	0x08007abb
 8007a90:	08007ab3 	.word	0x08007ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a94:	f7fd f87a 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 8007a98:	61f8      	str	r0, [r7, #28]
        break;
 8007a9a:	e014      	b.n	8007ac6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a9c:	f7fd f88c 	bl	8004bb8 <HAL_RCC_GetPCLK2Freq>
 8007aa0:	61f8      	str	r0, [r7, #28]
        break;
 8007aa2:	e010      	b.n	8007ac6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8007b20 <UART_SetConfig+0x56c>)
 8007aa6:	61fb      	str	r3, [r7, #28]
        break;
 8007aa8:	e00d      	b.n	8007ac6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aaa:	f7fc ffd7 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 8007aae:	61f8      	str	r0, [r7, #28]
        break;
 8007ab0:	e009      	b.n	8007ac6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ab6:	61fb      	str	r3, [r7, #28]
        break;
 8007ab8:	e005      	b.n	8007ac6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007ac4:	bf00      	nop
    }

    if (pclk != 0U)
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d019      	beq.n	8007b00 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	085a      	lsrs	r2, r3, #1
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	441a      	add	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ade:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	2b0f      	cmp	r3, #15
 8007ae4:	d909      	bls.n	8007afa <UART_SetConfig+0x546>
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007aec:	d205      	bcs.n	8007afa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	60da      	str	r2, [r3, #12]
 8007af8:	e002      	b.n	8007b00 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007b0c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3728      	adds	r7, #40	@ 0x28
 8007b14:	46bd      	mov	sp, r7
 8007b16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b1a:	bf00      	nop
 8007b1c:	40008000 	.word	0x40008000
 8007b20:	00f42400 	.word	0x00f42400

08007b24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b30:	f003 0308 	and.w	r3, r3, #8
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00a      	beq.n	8007b4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00a      	beq.n	8007b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00a      	beq.n	8007b92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b96:	f003 0304 	and.w	r3, r3, #4
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00a      	beq.n	8007bb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb8:	f003 0310 	and.w	r3, r3, #16
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00a      	beq.n	8007bd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bda:	f003 0320 	and.w	r3, r3, #32
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d01a      	beq.n	8007c3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c22:	d10a      	bne.n	8007c3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	430a      	orrs	r2, r1
 8007c38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00a      	beq.n	8007c5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	430a      	orrs	r2, r1
 8007c5a:	605a      	str	r2, [r3, #4]
  }
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b098      	sub	sp, #96	@ 0x60
 8007c6c:	af02      	add	r7, sp, #8
 8007c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c78:	f7fa fc84 	bl	8002584 <HAL_GetTick>
 8007c7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0308 	and.w	r3, r3, #8
 8007c88:	2b08      	cmp	r3, #8
 8007c8a:	d12e      	bne.n	8007cea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c94:	2200      	movs	r2, #0
 8007c96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f88c 	bl	8007db8 <UART_WaitOnFlagUntilTimeout>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d021      	beq.n	8007cea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cae:	e853 3f00 	ldrex	r3, [r3]
 8007cb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cba:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cc6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ccc:	e841 2300 	strex	r3, r2, [r1]
 8007cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e6      	bne.n	8007ca6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2220      	movs	r2, #32
 8007cdc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e062      	b.n	8007db0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0304 	and.w	r3, r3, #4
 8007cf4:	2b04      	cmp	r3, #4
 8007cf6:	d149      	bne.n	8007d8c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cf8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d00:	2200      	movs	r2, #0
 8007d02:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f856 	bl	8007db8 <UART_WaitOnFlagUntilTimeout>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d03c      	beq.n	8007d8c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	623b      	str	r3, [r7, #32]
   return(result);
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d30:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d32:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e6      	bne.n	8007d12 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3308      	adds	r3, #8
 8007d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	e853 3f00 	ldrex	r3, [r3]
 8007d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 0301 	bic.w	r3, r3, #1
 8007d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3308      	adds	r3, #8
 8007d62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d64:	61fa      	str	r2, [r7, #28]
 8007d66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d68:	69b9      	ldr	r1, [r7, #24]
 8007d6a:	69fa      	ldr	r2, [r7, #28]
 8007d6c:	e841 2300 	strex	r3, r2, [r1]
 8007d70:	617b      	str	r3, [r7, #20]
   return(result);
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1e5      	bne.n	8007d44 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e011      	b.n	8007db0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2220      	movs	r2, #32
 8007d90:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2220      	movs	r2, #32
 8007d96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3758      	adds	r7, #88	@ 0x58
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	603b      	str	r3, [r7, #0]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dc8:	e049      	b.n	8007e5e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd0:	d045      	beq.n	8007e5e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dd2:	f7fa fbd7 	bl	8002584 <HAL_GetTick>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d302      	bcc.n	8007de8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e048      	b.n	8007e7e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0304 	and.w	r3, r3, #4
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d031      	beq.n	8007e5e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	f003 0308 	and.w	r3, r3, #8
 8007e04:	2b08      	cmp	r3, #8
 8007e06:	d110      	bne.n	8007e2a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2208      	movs	r2, #8
 8007e0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 f838 	bl	8007e86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2208      	movs	r2, #8
 8007e1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e029      	b.n	8007e7e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e38:	d111      	bne.n	8007e5e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 f81e 	bl	8007e86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e00f      	b.n	8007e7e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	69da      	ldr	r2, [r3, #28]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	4013      	ands	r3, r2
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	bf0c      	ite	eq
 8007e6e:	2301      	moveq	r3, #1
 8007e70:	2300      	movne	r3, #0
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	461a      	mov	r2, r3
 8007e76:	79fb      	ldrb	r3, [r7, #7]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d0a6      	beq.n	8007dca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b095      	sub	sp, #84	@ 0x54
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e96:	e853 3f00 	ldrex	r3, [r3]
 8007e9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007eac:	643b      	str	r3, [r7, #64]	@ 0x40
 8007eae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007eb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007eb4:	e841 2300 	strex	r3, r2, [r1]
 8007eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1e6      	bne.n	8007e8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	3308      	adds	r3, #8
 8007ec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	e853 3f00 	ldrex	r3, [r3]
 8007ece:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	f023 0301 	bic.w	r3, r3, #1
 8007ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	3308      	adds	r3, #8
 8007ede:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ee0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ee8:	e841 2300 	strex	r3, r2, [r1]
 8007eec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1e5      	bne.n	8007ec0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d118      	bne.n	8007f2e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	e853 3f00 	ldrex	r3, [r3]
 8007f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f023 0310 	bic.w	r3, r3, #16
 8007f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f1a:	61bb      	str	r3, [r7, #24]
 8007f1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1e:	6979      	ldr	r1, [r7, #20]
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	e841 2300 	strex	r3, r2, [r1]
 8007f26:	613b      	str	r3, [r7, #16]
   return(result);
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1e6      	bne.n	8007efc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2220      	movs	r2, #32
 8007f32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007f42:	bf00      	nop
 8007f44:	3754      	adds	r7, #84	@ 0x54
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
	...

08007f50 <std>:
 8007f50:	2300      	movs	r3, #0
 8007f52:	b510      	push	{r4, lr}
 8007f54:	4604      	mov	r4, r0
 8007f56:	e9c0 3300 	strd	r3, r3, [r0]
 8007f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f5e:	6083      	str	r3, [r0, #8]
 8007f60:	8181      	strh	r1, [r0, #12]
 8007f62:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f64:	81c2      	strh	r2, [r0, #14]
 8007f66:	6183      	str	r3, [r0, #24]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	2208      	movs	r2, #8
 8007f6c:	305c      	adds	r0, #92	@ 0x5c
 8007f6e:	f000 f906 	bl	800817e <memset>
 8007f72:	4b0d      	ldr	r3, [pc, #52]	@ (8007fa8 <std+0x58>)
 8007f74:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f76:	4b0d      	ldr	r3, [pc, #52]	@ (8007fac <std+0x5c>)
 8007f78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb0 <std+0x60>)
 8007f7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb4 <std+0x64>)
 8007f80:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f82:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb8 <std+0x68>)
 8007f84:	6224      	str	r4, [r4, #32]
 8007f86:	429c      	cmp	r4, r3
 8007f88:	d006      	beq.n	8007f98 <std+0x48>
 8007f8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f8e:	4294      	cmp	r4, r2
 8007f90:	d002      	beq.n	8007f98 <std+0x48>
 8007f92:	33d0      	adds	r3, #208	@ 0xd0
 8007f94:	429c      	cmp	r4, r3
 8007f96:	d105      	bne.n	8007fa4 <std+0x54>
 8007f98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fa0:	f000 b966 	b.w	8008270 <__retarget_lock_init_recursive>
 8007fa4:	bd10      	pop	{r4, pc}
 8007fa6:	bf00      	nop
 8007fa8:	080080f9 	.word	0x080080f9
 8007fac:	0800811b 	.word	0x0800811b
 8007fb0:	08008153 	.word	0x08008153
 8007fb4:	08008177 	.word	0x08008177
 8007fb8:	20000574 	.word	0x20000574

08007fbc <stdio_exit_handler>:
 8007fbc:	4a02      	ldr	r2, [pc, #8]	@ (8007fc8 <stdio_exit_handler+0xc>)
 8007fbe:	4903      	ldr	r1, [pc, #12]	@ (8007fcc <stdio_exit_handler+0x10>)
 8007fc0:	4803      	ldr	r0, [pc, #12]	@ (8007fd0 <stdio_exit_handler+0x14>)
 8007fc2:	f000 b869 	b.w	8008098 <_fwalk_sglue>
 8007fc6:	bf00      	nop
 8007fc8:	2000000c 	.word	0x2000000c
 8007fcc:	08008b2d 	.word	0x08008b2d
 8007fd0:	2000001c 	.word	0x2000001c

08007fd4 <cleanup_stdio>:
 8007fd4:	6841      	ldr	r1, [r0, #4]
 8007fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8008008 <cleanup_stdio+0x34>)
 8007fd8:	4299      	cmp	r1, r3
 8007fda:	b510      	push	{r4, lr}
 8007fdc:	4604      	mov	r4, r0
 8007fde:	d001      	beq.n	8007fe4 <cleanup_stdio+0x10>
 8007fe0:	f000 fda4 	bl	8008b2c <_fflush_r>
 8007fe4:	68a1      	ldr	r1, [r4, #8]
 8007fe6:	4b09      	ldr	r3, [pc, #36]	@ (800800c <cleanup_stdio+0x38>)
 8007fe8:	4299      	cmp	r1, r3
 8007fea:	d002      	beq.n	8007ff2 <cleanup_stdio+0x1e>
 8007fec:	4620      	mov	r0, r4
 8007fee:	f000 fd9d 	bl	8008b2c <_fflush_r>
 8007ff2:	68e1      	ldr	r1, [r4, #12]
 8007ff4:	4b06      	ldr	r3, [pc, #24]	@ (8008010 <cleanup_stdio+0x3c>)
 8007ff6:	4299      	cmp	r1, r3
 8007ff8:	d004      	beq.n	8008004 <cleanup_stdio+0x30>
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008000:	f000 bd94 	b.w	8008b2c <_fflush_r>
 8008004:	bd10      	pop	{r4, pc}
 8008006:	bf00      	nop
 8008008:	20000574 	.word	0x20000574
 800800c:	200005dc 	.word	0x200005dc
 8008010:	20000644 	.word	0x20000644

08008014 <global_stdio_init.part.0>:
 8008014:	b510      	push	{r4, lr}
 8008016:	4b0b      	ldr	r3, [pc, #44]	@ (8008044 <global_stdio_init.part.0+0x30>)
 8008018:	4c0b      	ldr	r4, [pc, #44]	@ (8008048 <global_stdio_init.part.0+0x34>)
 800801a:	4a0c      	ldr	r2, [pc, #48]	@ (800804c <global_stdio_init.part.0+0x38>)
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	4620      	mov	r0, r4
 8008020:	2200      	movs	r2, #0
 8008022:	2104      	movs	r1, #4
 8008024:	f7ff ff94 	bl	8007f50 <std>
 8008028:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800802c:	2201      	movs	r2, #1
 800802e:	2109      	movs	r1, #9
 8008030:	f7ff ff8e 	bl	8007f50 <std>
 8008034:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008038:	2202      	movs	r2, #2
 800803a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800803e:	2112      	movs	r1, #18
 8008040:	f7ff bf86 	b.w	8007f50 <std>
 8008044:	200006ac 	.word	0x200006ac
 8008048:	20000574 	.word	0x20000574
 800804c:	08007fbd 	.word	0x08007fbd

08008050 <__sfp_lock_acquire>:
 8008050:	4801      	ldr	r0, [pc, #4]	@ (8008058 <__sfp_lock_acquire+0x8>)
 8008052:	f000 b90e 	b.w	8008272 <__retarget_lock_acquire_recursive>
 8008056:	bf00      	nop
 8008058:	200006b5 	.word	0x200006b5

0800805c <__sfp_lock_release>:
 800805c:	4801      	ldr	r0, [pc, #4]	@ (8008064 <__sfp_lock_release+0x8>)
 800805e:	f000 b909 	b.w	8008274 <__retarget_lock_release_recursive>
 8008062:	bf00      	nop
 8008064:	200006b5 	.word	0x200006b5

08008068 <__sinit>:
 8008068:	b510      	push	{r4, lr}
 800806a:	4604      	mov	r4, r0
 800806c:	f7ff fff0 	bl	8008050 <__sfp_lock_acquire>
 8008070:	6a23      	ldr	r3, [r4, #32]
 8008072:	b11b      	cbz	r3, 800807c <__sinit+0x14>
 8008074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008078:	f7ff bff0 	b.w	800805c <__sfp_lock_release>
 800807c:	4b04      	ldr	r3, [pc, #16]	@ (8008090 <__sinit+0x28>)
 800807e:	6223      	str	r3, [r4, #32]
 8008080:	4b04      	ldr	r3, [pc, #16]	@ (8008094 <__sinit+0x2c>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1f5      	bne.n	8008074 <__sinit+0xc>
 8008088:	f7ff ffc4 	bl	8008014 <global_stdio_init.part.0>
 800808c:	e7f2      	b.n	8008074 <__sinit+0xc>
 800808e:	bf00      	nop
 8008090:	08007fd5 	.word	0x08007fd5
 8008094:	200006ac 	.word	0x200006ac

08008098 <_fwalk_sglue>:
 8008098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800809c:	4607      	mov	r7, r0
 800809e:	4688      	mov	r8, r1
 80080a0:	4614      	mov	r4, r2
 80080a2:	2600      	movs	r6, #0
 80080a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080a8:	f1b9 0901 	subs.w	r9, r9, #1
 80080ac:	d505      	bpl.n	80080ba <_fwalk_sglue+0x22>
 80080ae:	6824      	ldr	r4, [r4, #0]
 80080b0:	2c00      	cmp	r4, #0
 80080b2:	d1f7      	bne.n	80080a4 <_fwalk_sglue+0xc>
 80080b4:	4630      	mov	r0, r6
 80080b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ba:	89ab      	ldrh	r3, [r5, #12]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d907      	bls.n	80080d0 <_fwalk_sglue+0x38>
 80080c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080c4:	3301      	adds	r3, #1
 80080c6:	d003      	beq.n	80080d0 <_fwalk_sglue+0x38>
 80080c8:	4629      	mov	r1, r5
 80080ca:	4638      	mov	r0, r7
 80080cc:	47c0      	blx	r8
 80080ce:	4306      	orrs	r6, r0
 80080d0:	3568      	adds	r5, #104	@ 0x68
 80080d2:	e7e9      	b.n	80080a8 <_fwalk_sglue+0x10>

080080d4 <iprintf>:
 80080d4:	b40f      	push	{r0, r1, r2, r3}
 80080d6:	b507      	push	{r0, r1, r2, lr}
 80080d8:	4906      	ldr	r1, [pc, #24]	@ (80080f4 <iprintf+0x20>)
 80080da:	ab04      	add	r3, sp, #16
 80080dc:	6808      	ldr	r0, [r1, #0]
 80080de:	f853 2b04 	ldr.w	r2, [r3], #4
 80080e2:	6881      	ldr	r1, [r0, #8]
 80080e4:	9301      	str	r3, [sp, #4]
 80080e6:	f000 f9f7 	bl	80084d8 <_vfiprintf_r>
 80080ea:	b003      	add	sp, #12
 80080ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80080f0:	b004      	add	sp, #16
 80080f2:	4770      	bx	lr
 80080f4:	20000018 	.word	0x20000018

080080f8 <__sread>:
 80080f8:	b510      	push	{r4, lr}
 80080fa:	460c      	mov	r4, r1
 80080fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008100:	f000 f868 	bl	80081d4 <_read_r>
 8008104:	2800      	cmp	r0, #0
 8008106:	bfab      	itete	ge
 8008108:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800810a:	89a3      	ldrhlt	r3, [r4, #12]
 800810c:	181b      	addge	r3, r3, r0
 800810e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008112:	bfac      	ite	ge
 8008114:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008116:	81a3      	strhlt	r3, [r4, #12]
 8008118:	bd10      	pop	{r4, pc}

0800811a <__swrite>:
 800811a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800811e:	461f      	mov	r7, r3
 8008120:	898b      	ldrh	r3, [r1, #12]
 8008122:	05db      	lsls	r3, r3, #23
 8008124:	4605      	mov	r5, r0
 8008126:	460c      	mov	r4, r1
 8008128:	4616      	mov	r6, r2
 800812a:	d505      	bpl.n	8008138 <__swrite+0x1e>
 800812c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008130:	2302      	movs	r3, #2
 8008132:	2200      	movs	r2, #0
 8008134:	f000 f83c 	bl	80081b0 <_lseek_r>
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800813e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008142:	81a3      	strh	r3, [r4, #12]
 8008144:	4632      	mov	r2, r6
 8008146:	463b      	mov	r3, r7
 8008148:	4628      	mov	r0, r5
 800814a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800814e:	f000 b853 	b.w	80081f8 <_write_r>

08008152 <__sseek>:
 8008152:	b510      	push	{r4, lr}
 8008154:	460c      	mov	r4, r1
 8008156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800815a:	f000 f829 	bl	80081b0 <_lseek_r>
 800815e:	1c43      	adds	r3, r0, #1
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	bf15      	itete	ne
 8008164:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008166:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800816a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800816e:	81a3      	strheq	r3, [r4, #12]
 8008170:	bf18      	it	ne
 8008172:	81a3      	strhne	r3, [r4, #12]
 8008174:	bd10      	pop	{r4, pc}

08008176 <__sclose>:
 8008176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800817a:	f000 b809 	b.w	8008190 <_close_r>

0800817e <memset>:
 800817e:	4402      	add	r2, r0
 8008180:	4603      	mov	r3, r0
 8008182:	4293      	cmp	r3, r2
 8008184:	d100      	bne.n	8008188 <memset+0xa>
 8008186:	4770      	bx	lr
 8008188:	f803 1b01 	strb.w	r1, [r3], #1
 800818c:	e7f9      	b.n	8008182 <memset+0x4>
	...

08008190 <_close_r>:
 8008190:	b538      	push	{r3, r4, r5, lr}
 8008192:	4d06      	ldr	r5, [pc, #24]	@ (80081ac <_close_r+0x1c>)
 8008194:	2300      	movs	r3, #0
 8008196:	4604      	mov	r4, r0
 8008198:	4608      	mov	r0, r1
 800819a:	602b      	str	r3, [r5, #0]
 800819c:	f7f9 ff77 	bl	800208e <_close>
 80081a0:	1c43      	adds	r3, r0, #1
 80081a2:	d102      	bne.n	80081aa <_close_r+0x1a>
 80081a4:	682b      	ldr	r3, [r5, #0]
 80081a6:	b103      	cbz	r3, 80081aa <_close_r+0x1a>
 80081a8:	6023      	str	r3, [r4, #0]
 80081aa:	bd38      	pop	{r3, r4, r5, pc}
 80081ac:	200006b0 	.word	0x200006b0

080081b0 <_lseek_r>:
 80081b0:	b538      	push	{r3, r4, r5, lr}
 80081b2:	4d07      	ldr	r5, [pc, #28]	@ (80081d0 <_lseek_r+0x20>)
 80081b4:	4604      	mov	r4, r0
 80081b6:	4608      	mov	r0, r1
 80081b8:	4611      	mov	r1, r2
 80081ba:	2200      	movs	r2, #0
 80081bc:	602a      	str	r2, [r5, #0]
 80081be:	461a      	mov	r2, r3
 80081c0:	f7f9 ff8c 	bl	80020dc <_lseek>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d102      	bne.n	80081ce <_lseek_r+0x1e>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	b103      	cbz	r3, 80081ce <_lseek_r+0x1e>
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	bd38      	pop	{r3, r4, r5, pc}
 80081d0:	200006b0 	.word	0x200006b0

080081d4 <_read_r>:
 80081d4:	b538      	push	{r3, r4, r5, lr}
 80081d6:	4d07      	ldr	r5, [pc, #28]	@ (80081f4 <_read_r+0x20>)
 80081d8:	4604      	mov	r4, r0
 80081da:	4608      	mov	r0, r1
 80081dc:	4611      	mov	r1, r2
 80081de:	2200      	movs	r2, #0
 80081e0:	602a      	str	r2, [r5, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	f7f9 ff36 	bl	8002054 <_read>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d102      	bne.n	80081f2 <_read_r+0x1e>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	b103      	cbz	r3, 80081f2 <_read_r+0x1e>
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	bd38      	pop	{r3, r4, r5, pc}
 80081f4:	200006b0 	.word	0x200006b0

080081f8 <_write_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4d07      	ldr	r5, [pc, #28]	@ (8008218 <_write_r+0x20>)
 80081fc:	4604      	mov	r4, r0
 80081fe:	4608      	mov	r0, r1
 8008200:	4611      	mov	r1, r2
 8008202:	2200      	movs	r2, #0
 8008204:	602a      	str	r2, [r5, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	f7f9 fa1a 	bl	8001640 <_write>
 800820c:	1c43      	adds	r3, r0, #1
 800820e:	d102      	bne.n	8008216 <_write_r+0x1e>
 8008210:	682b      	ldr	r3, [r5, #0]
 8008212:	b103      	cbz	r3, 8008216 <_write_r+0x1e>
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	bd38      	pop	{r3, r4, r5, pc}
 8008218:	200006b0 	.word	0x200006b0

0800821c <__errno>:
 800821c:	4b01      	ldr	r3, [pc, #4]	@ (8008224 <__errno+0x8>)
 800821e:	6818      	ldr	r0, [r3, #0]
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	20000018 	.word	0x20000018

08008228 <__libc_init_array>:
 8008228:	b570      	push	{r4, r5, r6, lr}
 800822a:	4d0d      	ldr	r5, [pc, #52]	@ (8008260 <__libc_init_array+0x38>)
 800822c:	4c0d      	ldr	r4, [pc, #52]	@ (8008264 <__libc_init_array+0x3c>)
 800822e:	1b64      	subs	r4, r4, r5
 8008230:	10a4      	asrs	r4, r4, #2
 8008232:	2600      	movs	r6, #0
 8008234:	42a6      	cmp	r6, r4
 8008236:	d109      	bne.n	800824c <__libc_init_array+0x24>
 8008238:	4d0b      	ldr	r5, [pc, #44]	@ (8008268 <__libc_init_array+0x40>)
 800823a:	4c0c      	ldr	r4, [pc, #48]	@ (800826c <__libc_init_array+0x44>)
 800823c:	f000 fdc6 	bl	8008dcc <_init>
 8008240:	1b64      	subs	r4, r4, r5
 8008242:	10a4      	asrs	r4, r4, #2
 8008244:	2600      	movs	r6, #0
 8008246:	42a6      	cmp	r6, r4
 8008248:	d105      	bne.n	8008256 <__libc_init_array+0x2e>
 800824a:	bd70      	pop	{r4, r5, r6, pc}
 800824c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008250:	4798      	blx	r3
 8008252:	3601      	adds	r6, #1
 8008254:	e7ee      	b.n	8008234 <__libc_init_array+0xc>
 8008256:	f855 3b04 	ldr.w	r3, [r5], #4
 800825a:	4798      	blx	r3
 800825c:	3601      	adds	r6, #1
 800825e:	e7f2      	b.n	8008246 <__libc_init_array+0x1e>
 8008260:	08008ea8 	.word	0x08008ea8
 8008264:	08008ea8 	.word	0x08008ea8
 8008268:	08008ea8 	.word	0x08008ea8
 800826c:	08008eac 	.word	0x08008eac

08008270 <__retarget_lock_init_recursive>:
 8008270:	4770      	bx	lr

08008272 <__retarget_lock_acquire_recursive>:
 8008272:	4770      	bx	lr

08008274 <__retarget_lock_release_recursive>:
 8008274:	4770      	bx	lr

08008276 <memcpy>:
 8008276:	440a      	add	r2, r1
 8008278:	4291      	cmp	r1, r2
 800827a:	f100 33ff 	add.w	r3, r0, #4294967295
 800827e:	d100      	bne.n	8008282 <memcpy+0xc>
 8008280:	4770      	bx	lr
 8008282:	b510      	push	{r4, lr}
 8008284:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008288:	f803 4f01 	strb.w	r4, [r3, #1]!
 800828c:	4291      	cmp	r1, r2
 800828e:	d1f9      	bne.n	8008284 <memcpy+0xe>
 8008290:	bd10      	pop	{r4, pc}
	...

08008294 <_free_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	4605      	mov	r5, r0
 8008298:	2900      	cmp	r1, #0
 800829a:	d041      	beq.n	8008320 <_free_r+0x8c>
 800829c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082a0:	1f0c      	subs	r4, r1, #4
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	bfb8      	it	lt
 80082a6:	18e4      	addlt	r4, r4, r3
 80082a8:	f000 f8e0 	bl	800846c <__malloc_lock>
 80082ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008324 <_free_r+0x90>)
 80082ae:	6813      	ldr	r3, [r2, #0]
 80082b0:	b933      	cbnz	r3, 80082c0 <_free_r+0x2c>
 80082b2:	6063      	str	r3, [r4, #4]
 80082b4:	6014      	str	r4, [r2, #0]
 80082b6:	4628      	mov	r0, r5
 80082b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082bc:	f000 b8dc 	b.w	8008478 <__malloc_unlock>
 80082c0:	42a3      	cmp	r3, r4
 80082c2:	d908      	bls.n	80082d6 <_free_r+0x42>
 80082c4:	6820      	ldr	r0, [r4, #0]
 80082c6:	1821      	adds	r1, r4, r0
 80082c8:	428b      	cmp	r3, r1
 80082ca:	bf01      	itttt	eq
 80082cc:	6819      	ldreq	r1, [r3, #0]
 80082ce:	685b      	ldreq	r3, [r3, #4]
 80082d0:	1809      	addeq	r1, r1, r0
 80082d2:	6021      	streq	r1, [r4, #0]
 80082d4:	e7ed      	b.n	80082b2 <_free_r+0x1e>
 80082d6:	461a      	mov	r2, r3
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	b10b      	cbz	r3, 80082e0 <_free_r+0x4c>
 80082dc:	42a3      	cmp	r3, r4
 80082de:	d9fa      	bls.n	80082d6 <_free_r+0x42>
 80082e0:	6811      	ldr	r1, [r2, #0]
 80082e2:	1850      	adds	r0, r2, r1
 80082e4:	42a0      	cmp	r0, r4
 80082e6:	d10b      	bne.n	8008300 <_free_r+0x6c>
 80082e8:	6820      	ldr	r0, [r4, #0]
 80082ea:	4401      	add	r1, r0
 80082ec:	1850      	adds	r0, r2, r1
 80082ee:	4283      	cmp	r3, r0
 80082f0:	6011      	str	r1, [r2, #0]
 80082f2:	d1e0      	bne.n	80082b6 <_free_r+0x22>
 80082f4:	6818      	ldr	r0, [r3, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	6053      	str	r3, [r2, #4]
 80082fa:	4408      	add	r0, r1
 80082fc:	6010      	str	r0, [r2, #0]
 80082fe:	e7da      	b.n	80082b6 <_free_r+0x22>
 8008300:	d902      	bls.n	8008308 <_free_r+0x74>
 8008302:	230c      	movs	r3, #12
 8008304:	602b      	str	r3, [r5, #0]
 8008306:	e7d6      	b.n	80082b6 <_free_r+0x22>
 8008308:	6820      	ldr	r0, [r4, #0]
 800830a:	1821      	adds	r1, r4, r0
 800830c:	428b      	cmp	r3, r1
 800830e:	bf04      	itt	eq
 8008310:	6819      	ldreq	r1, [r3, #0]
 8008312:	685b      	ldreq	r3, [r3, #4]
 8008314:	6063      	str	r3, [r4, #4]
 8008316:	bf04      	itt	eq
 8008318:	1809      	addeq	r1, r1, r0
 800831a:	6021      	streq	r1, [r4, #0]
 800831c:	6054      	str	r4, [r2, #4]
 800831e:	e7ca      	b.n	80082b6 <_free_r+0x22>
 8008320:	bd38      	pop	{r3, r4, r5, pc}
 8008322:	bf00      	nop
 8008324:	200006bc 	.word	0x200006bc

08008328 <sbrk_aligned>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	4e0f      	ldr	r6, [pc, #60]	@ (8008368 <sbrk_aligned+0x40>)
 800832c:	460c      	mov	r4, r1
 800832e:	6831      	ldr	r1, [r6, #0]
 8008330:	4605      	mov	r5, r0
 8008332:	b911      	cbnz	r1, 800833a <sbrk_aligned+0x12>
 8008334:	f000 fcb6 	bl	8008ca4 <_sbrk_r>
 8008338:	6030      	str	r0, [r6, #0]
 800833a:	4621      	mov	r1, r4
 800833c:	4628      	mov	r0, r5
 800833e:	f000 fcb1 	bl	8008ca4 <_sbrk_r>
 8008342:	1c43      	adds	r3, r0, #1
 8008344:	d103      	bne.n	800834e <sbrk_aligned+0x26>
 8008346:	f04f 34ff 	mov.w	r4, #4294967295
 800834a:	4620      	mov	r0, r4
 800834c:	bd70      	pop	{r4, r5, r6, pc}
 800834e:	1cc4      	adds	r4, r0, #3
 8008350:	f024 0403 	bic.w	r4, r4, #3
 8008354:	42a0      	cmp	r0, r4
 8008356:	d0f8      	beq.n	800834a <sbrk_aligned+0x22>
 8008358:	1a21      	subs	r1, r4, r0
 800835a:	4628      	mov	r0, r5
 800835c:	f000 fca2 	bl	8008ca4 <_sbrk_r>
 8008360:	3001      	adds	r0, #1
 8008362:	d1f2      	bne.n	800834a <sbrk_aligned+0x22>
 8008364:	e7ef      	b.n	8008346 <sbrk_aligned+0x1e>
 8008366:	bf00      	nop
 8008368:	200006b8 	.word	0x200006b8

0800836c <_malloc_r>:
 800836c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008370:	1ccd      	adds	r5, r1, #3
 8008372:	f025 0503 	bic.w	r5, r5, #3
 8008376:	3508      	adds	r5, #8
 8008378:	2d0c      	cmp	r5, #12
 800837a:	bf38      	it	cc
 800837c:	250c      	movcc	r5, #12
 800837e:	2d00      	cmp	r5, #0
 8008380:	4606      	mov	r6, r0
 8008382:	db01      	blt.n	8008388 <_malloc_r+0x1c>
 8008384:	42a9      	cmp	r1, r5
 8008386:	d904      	bls.n	8008392 <_malloc_r+0x26>
 8008388:	230c      	movs	r3, #12
 800838a:	6033      	str	r3, [r6, #0]
 800838c:	2000      	movs	r0, #0
 800838e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008392:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008468 <_malloc_r+0xfc>
 8008396:	f000 f869 	bl	800846c <__malloc_lock>
 800839a:	f8d8 3000 	ldr.w	r3, [r8]
 800839e:	461c      	mov	r4, r3
 80083a0:	bb44      	cbnz	r4, 80083f4 <_malloc_r+0x88>
 80083a2:	4629      	mov	r1, r5
 80083a4:	4630      	mov	r0, r6
 80083a6:	f7ff ffbf 	bl	8008328 <sbrk_aligned>
 80083aa:	1c43      	adds	r3, r0, #1
 80083ac:	4604      	mov	r4, r0
 80083ae:	d158      	bne.n	8008462 <_malloc_r+0xf6>
 80083b0:	f8d8 4000 	ldr.w	r4, [r8]
 80083b4:	4627      	mov	r7, r4
 80083b6:	2f00      	cmp	r7, #0
 80083b8:	d143      	bne.n	8008442 <_malloc_r+0xd6>
 80083ba:	2c00      	cmp	r4, #0
 80083bc:	d04b      	beq.n	8008456 <_malloc_r+0xea>
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	4639      	mov	r1, r7
 80083c2:	4630      	mov	r0, r6
 80083c4:	eb04 0903 	add.w	r9, r4, r3
 80083c8:	f000 fc6c 	bl	8008ca4 <_sbrk_r>
 80083cc:	4581      	cmp	r9, r0
 80083ce:	d142      	bne.n	8008456 <_malloc_r+0xea>
 80083d0:	6821      	ldr	r1, [r4, #0]
 80083d2:	1a6d      	subs	r5, r5, r1
 80083d4:	4629      	mov	r1, r5
 80083d6:	4630      	mov	r0, r6
 80083d8:	f7ff ffa6 	bl	8008328 <sbrk_aligned>
 80083dc:	3001      	adds	r0, #1
 80083de:	d03a      	beq.n	8008456 <_malloc_r+0xea>
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	442b      	add	r3, r5
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	f8d8 3000 	ldr.w	r3, [r8]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	bb62      	cbnz	r2, 8008448 <_malloc_r+0xdc>
 80083ee:	f8c8 7000 	str.w	r7, [r8]
 80083f2:	e00f      	b.n	8008414 <_malloc_r+0xa8>
 80083f4:	6822      	ldr	r2, [r4, #0]
 80083f6:	1b52      	subs	r2, r2, r5
 80083f8:	d420      	bmi.n	800843c <_malloc_r+0xd0>
 80083fa:	2a0b      	cmp	r2, #11
 80083fc:	d917      	bls.n	800842e <_malloc_r+0xc2>
 80083fe:	1961      	adds	r1, r4, r5
 8008400:	42a3      	cmp	r3, r4
 8008402:	6025      	str	r5, [r4, #0]
 8008404:	bf18      	it	ne
 8008406:	6059      	strne	r1, [r3, #4]
 8008408:	6863      	ldr	r3, [r4, #4]
 800840a:	bf08      	it	eq
 800840c:	f8c8 1000 	streq.w	r1, [r8]
 8008410:	5162      	str	r2, [r4, r5]
 8008412:	604b      	str	r3, [r1, #4]
 8008414:	4630      	mov	r0, r6
 8008416:	f000 f82f 	bl	8008478 <__malloc_unlock>
 800841a:	f104 000b 	add.w	r0, r4, #11
 800841e:	1d23      	adds	r3, r4, #4
 8008420:	f020 0007 	bic.w	r0, r0, #7
 8008424:	1ac2      	subs	r2, r0, r3
 8008426:	bf1c      	itt	ne
 8008428:	1a1b      	subne	r3, r3, r0
 800842a:	50a3      	strne	r3, [r4, r2]
 800842c:	e7af      	b.n	800838e <_malloc_r+0x22>
 800842e:	6862      	ldr	r2, [r4, #4]
 8008430:	42a3      	cmp	r3, r4
 8008432:	bf0c      	ite	eq
 8008434:	f8c8 2000 	streq.w	r2, [r8]
 8008438:	605a      	strne	r2, [r3, #4]
 800843a:	e7eb      	b.n	8008414 <_malloc_r+0xa8>
 800843c:	4623      	mov	r3, r4
 800843e:	6864      	ldr	r4, [r4, #4]
 8008440:	e7ae      	b.n	80083a0 <_malloc_r+0x34>
 8008442:	463c      	mov	r4, r7
 8008444:	687f      	ldr	r7, [r7, #4]
 8008446:	e7b6      	b.n	80083b6 <_malloc_r+0x4a>
 8008448:	461a      	mov	r2, r3
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	42a3      	cmp	r3, r4
 800844e:	d1fb      	bne.n	8008448 <_malloc_r+0xdc>
 8008450:	2300      	movs	r3, #0
 8008452:	6053      	str	r3, [r2, #4]
 8008454:	e7de      	b.n	8008414 <_malloc_r+0xa8>
 8008456:	230c      	movs	r3, #12
 8008458:	6033      	str	r3, [r6, #0]
 800845a:	4630      	mov	r0, r6
 800845c:	f000 f80c 	bl	8008478 <__malloc_unlock>
 8008460:	e794      	b.n	800838c <_malloc_r+0x20>
 8008462:	6005      	str	r5, [r0, #0]
 8008464:	e7d6      	b.n	8008414 <_malloc_r+0xa8>
 8008466:	bf00      	nop
 8008468:	200006bc 	.word	0x200006bc

0800846c <__malloc_lock>:
 800846c:	4801      	ldr	r0, [pc, #4]	@ (8008474 <__malloc_lock+0x8>)
 800846e:	f7ff bf00 	b.w	8008272 <__retarget_lock_acquire_recursive>
 8008472:	bf00      	nop
 8008474:	200006b4 	.word	0x200006b4

08008478 <__malloc_unlock>:
 8008478:	4801      	ldr	r0, [pc, #4]	@ (8008480 <__malloc_unlock+0x8>)
 800847a:	f7ff befb 	b.w	8008274 <__retarget_lock_release_recursive>
 800847e:	bf00      	nop
 8008480:	200006b4 	.word	0x200006b4

08008484 <__sfputc_r>:
 8008484:	6893      	ldr	r3, [r2, #8]
 8008486:	3b01      	subs	r3, #1
 8008488:	2b00      	cmp	r3, #0
 800848a:	b410      	push	{r4}
 800848c:	6093      	str	r3, [r2, #8]
 800848e:	da08      	bge.n	80084a2 <__sfputc_r+0x1e>
 8008490:	6994      	ldr	r4, [r2, #24]
 8008492:	42a3      	cmp	r3, r4
 8008494:	db01      	blt.n	800849a <__sfputc_r+0x16>
 8008496:	290a      	cmp	r1, #10
 8008498:	d103      	bne.n	80084a2 <__sfputc_r+0x1e>
 800849a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800849e:	f000 bb6d 	b.w	8008b7c <__swbuf_r>
 80084a2:	6813      	ldr	r3, [r2, #0]
 80084a4:	1c58      	adds	r0, r3, #1
 80084a6:	6010      	str	r0, [r2, #0]
 80084a8:	7019      	strb	r1, [r3, #0]
 80084aa:	4608      	mov	r0, r1
 80084ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <__sfputs_r>:
 80084b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b4:	4606      	mov	r6, r0
 80084b6:	460f      	mov	r7, r1
 80084b8:	4614      	mov	r4, r2
 80084ba:	18d5      	adds	r5, r2, r3
 80084bc:	42ac      	cmp	r4, r5
 80084be:	d101      	bne.n	80084c4 <__sfputs_r+0x12>
 80084c0:	2000      	movs	r0, #0
 80084c2:	e007      	b.n	80084d4 <__sfputs_r+0x22>
 80084c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084c8:	463a      	mov	r2, r7
 80084ca:	4630      	mov	r0, r6
 80084cc:	f7ff ffda 	bl	8008484 <__sfputc_r>
 80084d0:	1c43      	adds	r3, r0, #1
 80084d2:	d1f3      	bne.n	80084bc <__sfputs_r+0xa>
 80084d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084d8 <_vfiprintf_r>:
 80084d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084dc:	460d      	mov	r5, r1
 80084de:	b09d      	sub	sp, #116	@ 0x74
 80084e0:	4614      	mov	r4, r2
 80084e2:	4698      	mov	r8, r3
 80084e4:	4606      	mov	r6, r0
 80084e6:	b118      	cbz	r0, 80084f0 <_vfiprintf_r+0x18>
 80084e8:	6a03      	ldr	r3, [r0, #32]
 80084ea:	b90b      	cbnz	r3, 80084f0 <_vfiprintf_r+0x18>
 80084ec:	f7ff fdbc 	bl	8008068 <__sinit>
 80084f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084f2:	07d9      	lsls	r1, r3, #31
 80084f4:	d405      	bmi.n	8008502 <_vfiprintf_r+0x2a>
 80084f6:	89ab      	ldrh	r3, [r5, #12]
 80084f8:	059a      	lsls	r2, r3, #22
 80084fa:	d402      	bmi.n	8008502 <_vfiprintf_r+0x2a>
 80084fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084fe:	f7ff feb8 	bl	8008272 <__retarget_lock_acquire_recursive>
 8008502:	89ab      	ldrh	r3, [r5, #12]
 8008504:	071b      	lsls	r3, r3, #28
 8008506:	d501      	bpl.n	800850c <_vfiprintf_r+0x34>
 8008508:	692b      	ldr	r3, [r5, #16]
 800850a:	b99b      	cbnz	r3, 8008534 <_vfiprintf_r+0x5c>
 800850c:	4629      	mov	r1, r5
 800850e:	4630      	mov	r0, r6
 8008510:	f000 fb72 	bl	8008bf8 <__swsetup_r>
 8008514:	b170      	cbz	r0, 8008534 <_vfiprintf_r+0x5c>
 8008516:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008518:	07dc      	lsls	r4, r3, #31
 800851a:	d504      	bpl.n	8008526 <_vfiprintf_r+0x4e>
 800851c:	f04f 30ff 	mov.w	r0, #4294967295
 8008520:	b01d      	add	sp, #116	@ 0x74
 8008522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008526:	89ab      	ldrh	r3, [r5, #12]
 8008528:	0598      	lsls	r0, r3, #22
 800852a:	d4f7      	bmi.n	800851c <_vfiprintf_r+0x44>
 800852c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800852e:	f7ff fea1 	bl	8008274 <__retarget_lock_release_recursive>
 8008532:	e7f3      	b.n	800851c <_vfiprintf_r+0x44>
 8008534:	2300      	movs	r3, #0
 8008536:	9309      	str	r3, [sp, #36]	@ 0x24
 8008538:	2320      	movs	r3, #32
 800853a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800853e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008542:	2330      	movs	r3, #48	@ 0x30
 8008544:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80086f4 <_vfiprintf_r+0x21c>
 8008548:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800854c:	f04f 0901 	mov.w	r9, #1
 8008550:	4623      	mov	r3, r4
 8008552:	469a      	mov	sl, r3
 8008554:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008558:	b10a      	cbz	r2, 800855e <_vfiprintf_r+0x86>
 800855a:	2a25      	cmp	r2, #37	@ 0x25
 800855c:	d1f9      	bne.n	8008552 <_vfiprintf_r+0x7a>
 800855e:	ebba 0b04 	subs.w	fp, sl, r4
 8008562:	d00b      	beq.n	800857c <_vfiprintf_r+0xa4>
 8008564:	465b      	mov	r3, fp
 8008566:	4622      	mov	r2, r4
 8008568:	4629      	mov	r1, r5
 800856a:	4630      	mov	r0, r6
 800856c:	f7ff ffa1 	bl	80084b2 <__sfputs_r>
 8008570:	3001      	adds	r0, #1
 8008572:	f000 80a7 	beq.w	80086c4 <_vfiprintf_r+0x1ec>
 8008576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008578:	445a      	add	r2, fp
 800857a:	9209      	str	r2, [sp, #36]	@ 0x24
 800857c:	f89a 3000 	ldrb.w	r3, [sl]
 8008580:	2b00      	cmp	r3, #0
 8008582:	f000 809f 	beq.w	80086c4 <_vfiprintf_r+0x1ec>
 8008586:	2300      	movs	r3, #0
 8008588:	f04f 32ff 	mov.w	r2, #4294967295
 800858c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008590:	f10a 0a01 	add.w	sl, sl, #1
 8008594:	9304      	str	r3, [sp, #16]
 8008596:	9307      	str	r3, [sp, #28]
 8008598:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800859c:	931a      	str	r3, [sp, #104]	@ 0x68
 800859e:	4654      	mov	r4, sl
 80085a0:	2205      	movs	r2, #5
 80085a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a6:	4853      	ldr	r0, [pc, #332]	@ (80086f4 <_vfiprintf_r+0x21c>)
 80085a8:	f7f7 fe12 	bl	80001d0 <memchr>
 80085ac:	9a04      	ldr	r2, [sp, #16]
 80085ae:	b9d8      	cbnz	r0, 80085e8 <_vfiprintf_r+0x110>
 80085b0:	06d1      	lsls	r1, r2, #27
 80085b2:	bf44      	itt	mi
 80085b4:	2320      	movmi	r3, #32
 80085b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085ba:	0713      	lsls	r3, r2, #28
 80085bc:	bf44      	itt	mi
 80085be:	232b      	movmi	r3, #43	@ 0x2b
 80085c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085c4:	f89a 3000 	ldrb.w	r3, [sl]
 80085c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80085ca:	d015      	beq.n	80085f8 <_vfiprintf_r+0x120>
 80085cc:	9a07      	ldr	r2, [sp, #28]
 80085ce:	4654      	mov	r4, sl
 80085d0:	2000      	movs	r0, #0
 80085d2:	f04f 0c0a 	mov.w	ip, #10
 80085d6:	4621      	mov	r1, r4
 80085d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085dc:	3b30      	subs	r3, #48	@ 0x30
 80085de:	2b09      	cmp	r3, #9
 80085e0:	d94b      	bls.n	800867a <_vfiprintf_r+0x1a2>
 80085e2:	b1b0      	cbz	r0, 8008612 <_vfiprintf_r+0x13a>
 80085e4:	9207      	str	r2, [sp, #28]
 80085e6:	e014      	b.n	8008612 <_vfiprintf_r+0x13a>
 80085e8:	eba0 0308 	sub.w	r3, r0, r8
 80085ec:	fa09 f303 	lsl.w	r3, r9, r3
 80085f0:	4313      	orrs	r3, r2
 80085f2:	9304      	str	r3, [sp, #16]
 80085f4:	46a2      	mov	sl, r4
 80085f6:	e7d2      	b.n	800859e <_vfiprintf_r+0xc6>
 80085f8:	9b03      	ldr	r3, [sp, #12]
 80085fa:	1d19      	adds	r1, r3, #4
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	9103      	str	r1, [sp, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	bfbb      	ittet	lt
 8008604:	425b      	neglt	r3, r3
 8008606:	f042 0202 	orrlt.w	r2, r2, #2
 800860a:	9307      	strge	r3, [sp, #28]
 800860c:	9307      	strlt	r3, [sp, #28]
 800860e:	bfb8      	it	lt
 8008610:	9204      	strlt	r2, [sp, #16]
 8008612:	7823      	ldrb	r3, [r4, #0]
 8008614:	2b2e      	cmp	r3, #46	@ 0x2e
 8008616:	d10a      	bne.n	800862e <_vfiprintf_r+0x156>
 8008618:	7863      	ldrb	r3, [r4, #1]
 800861a:	2b2a      	cmp	r3, #42	@ 0x2a
 800861c:	d132      	bne.n	8008684 <_vfiprintf_r+0x1ac>
 800861e:	9b03      	ldr	r3, [sp, #12]
 8008620:	1d1a      	adds	r2, r3, #4
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	9203      	str	r2, [sp, #12]
 8008626:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800862a:	3402      	adds	r4, #2
 800862c:	9305      	str	r3, [sp, #20]
 800862e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008704 <_vfiprintf_r+0x22c>
 8008632:	7821      	ldrb	r1, [r4, #0]
 8008634:	2203      	movs	r2, #3
 8008636:	4650      	mov	r0, sl
 8008638:	f7f7 fdca 	bl	80001d0 <memchr>
 800863c:	b138      	cbz	r0, 800864e <_vfiprintf_r+0x176>
 800863e:	9b04      	ldr	r3, [sp, #16]
 8008640:	eba0 000a 	sub.w	r0, r0, sl
 8008644:	2240      	movs	r2, #64	@ 0x40
 8008646:	4082      	lsls	r2, r0
 8008648:	4313      	orrs	r3, r2
 800864a:	3401      	adds	r4, #1
 800864c:	9304      	str	r3, [sp, #16]
 800864e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008652:	4829      	ldr	r0, [pc, #164]	@ (80086f8 <_vfiprintf_r+0x220>)
 8008654:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008658:	2206      	movs	r2, #6
 800865a:	f7f7 fdb9 	bl	80001d0 <memchr>
 800865e:	2800      	cmp	r0, #0
 8008660:	d03f      	beq.n	80086e2 <_vfiprintf_r+0x20a>
 8008662:	4b26      	ldr	r3, [pc, #152]	@ (80086fc <_vfiprintf_r+0x224>)
 8008664:	bb1b      	cbnz	r3, 80086ae <_vfiprintf_r+0x1d6>
 8008666:	9b03      	ldr	r3, [sp, #12]
 8008668:	3307      	adds	r3, #7
 800866a:	f023 0307 	bic.w	r3, r3, #7
 800866e:	3308      	adds	r3, #8
 8008670:	9303      	str	r3, [sp, #12]
 8008672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008674:	443b      	add	r3, r7
 8008676:	9309      	str	r3, [sp, #36]	@ 0x24
 8008678:	e76a      	b.n	8008550 <_vfiprintf_r+0x78>
 800867a:	fb0c 3202 	mla	r2, ip, r2, r3
 800867e:	460c      	mov	r4, r1
 8008680:	2001      	movs	r0, #1
 8008682:	e7a8      	b.n	80085d6 <_vfiprintf_r+0xfe>
 8008684:	2300      	movs	r3, #0
 8008686:	3401      	adds	r4, #1
 8008688:	9305      	str	r3, [sp, #20]
 800868a:	4619      	mov	r1, r3
 800868c:	f04f 0c0a 	mov.w	ip, #10
 8008690:	4620      	mov	r0, r4
 8008692:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008696:	3a30      	subs	r2, #48	@ 0x30
 8008698:	2a09      	cmp	r2, #9
 800869a:	d903      	bls.n	80086a4 <_vfiprintf_r+0x1cc>
 800869c:	2b00      	cmp	r3, #0
 800869e:	d0c6      	beq.n	800862e <_vfiprintf_r+0x156>
 80086a0:	9105      	str	r1, [sp, #20]
 80086a2:	e7c4      	b.n	800862e <_vfiprintf_r+0x156>
 80086a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80086a8:	4604      	mov	r4, r0
 80086aa:	2301      	movs	r3, #1
 80086ac:	e7f0      	b.n	8008690 <_vfiprintf_r+0x1b8>
 80086ae:	ab03      	add	r3, sp, #12
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	462a      	mov	r2, r5
 80086b4:	4b12      	ldr	r3, [pc, #72]	@ (8008700 <_vfiprintf_r+0x228>)
 80086b6:	a904      	add	r1, sp, #16
 80086b8:	4630      	mov	r0, r6
 80086ba:	f3af 8000 	nop.w
 80086be:	4607      	mov	r7, r0
 80086c0:	1c78      	adds	r0, r7, #1
 80086c2:	d1d6      	bne.n	8008672 <_vfiprintf_r+0x19a>
 80086c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086c6:	07d9      	lsls	r1, r3, #31
 80086c8:	d405      	bmi.n	80086d6 <_vfiprintf_r+0x1fe>
 80086ca:	89ab      	ldrh	r3, [r5, #12]
 80086cc:	059a      	lsls	r2, r3, #22
 80086ce:	d402      	bmi.n	80086d6 <_vfiprintf_r+0x1fe>
 80086d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086d2:	f7ff fdcf 	bl	8008274 <__retarget_lock_release_recursive>
 80086d6:	89ab      	ldrh	r3, [r5, #12]
 80086d8:	065b      	lsls	r3, r3, #25
 80086da:	f53f af1f 	bmi.w	800851c <_vfiprintf_r+0x44>
 80086de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086e0:	e71e      	b.n	8008520 <_vfiprintf_r+0x48>
 80086e2:	ab03      	add	r3, sp, #12
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	462a      	mov	r2, r5
 80086e8:	4b05      	ldr	r3, [pc, #20]	@ (8008700 <_vfiprintf_r+0x228>)
 80086ea:	a904      	add	r1, sp, #16
 80086ec:	4630      	mov	r0, r6
 80086ee:	f000 f879 	bl	80087e4 <_printf_i>
 80086f2:	e7e4      	b.n	80086be <_vfiprintf_r+0x1e6>
 80086f4:	08008e6c 	.word	0x08008e6c
 80086f8:	08008e76 	.word	0x08008e76
 80086fc:	00000000 	.word	0x00000000
 8008700:	080084b3 	.word	0x080084b3
 8008704:	08008e72 	.word	0x08008e72

08008708 <_printf_common>:
 8008708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800870c:	4616      	mov	r6, r2
 800870e:	4698      	mov	r8, r3
 8008710:	688a      	ldr	r2, [r1, #8]
 8008712:	690b      	ldr	r3, [r1, #16]
 8008714:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008718:	4293      	cmp	r3, r2
 800871a:	bfb8      	it	lt
 800871c:	4613      	movlt	r3, r2
 800871e:	6033      	str	r3, [r6, #0]
 8008720:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008724:	4607      	mov	r7, r0
 8008726:	460c      	mov	r4, r1
 8008728:	b10a      	cbz	r2, 800872e <_printf_common+0x26>
 800872a:	3301      	adds	r3, #1
 800872c:	6033      	str	r3, [r6, #0]
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	0699      	lsls	r1, r3, #26
 8008732:	bf42      	ittt	mi
 8008734:	6833      	ldrmi	r3, [r6, #0]
 8008736:	3302      	addmi	r3, #2
 8008738:	6033      	strmi	r3, [r6, #0]
 800873a:	6825      	ldr	r5, [r4, #0]
 800873c:	f015 0506 	ands.w	r5, r5, #6
 8008740:	d106      	bne.n	8008750 <_printf_common+0x48>
 8008742:	f104 0a19 	add.w	sl, r4, #25
 8008746:	68e3      	ldr	r3, [r4, #12]
 8008748:	6832      	ldr	r2, [r6, #0]
 800874a:	1a9b      	subs	r3, r3, r2
 800874c:	42ab      	cmp	r3, r5
 800874e:	dc26      	bgt.n	800879e <_printf_common+0x96>
 8008750:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008754:	6822      	ldr	r2, [r4, #0]
 8008756:	3b00      	subs	r3, #0
 8008758:	bf18      	it	ne
 800875a:	2301      	movne	r3, #1
 800875c:	0692      	lsls	r2, r2, #26
 800875e:	d42b      	bmi.n	80087b8 <_printf_common+0xb0>
 8008760:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008764:	4641      	mov	r1, r8
 8008766:	4638      	mov	r0, r7
 8008768:	47c8      	blx	r9
 800876a:	3001      	adds	r0, #1
 800876c:	d01e      	beq.n	80087ac <_printf_common+0xa4>
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	6922      	ldr	r2, [r4, #16]
 8008772:	f003 0306 	and.w	r3, r3, #6
 8008776:	2b04      	cmp	r3, #4
 8008778:	bf02      	ittt	eq
 800877a:	68e5      	ldreq	r5, [r4, #12]
 800877c:	6833      	ldreq	r3, [r6, #0]
 800877e:	1aed      	subeq	r5, r5, r3
 8008780:	68a3      	ldr	r3, [r4, #8]
 8008782:	bf0c      	ite	eq
 8008784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008788:	2500      	movne	r5, #0
 800878a:	4293      	cmp	r3, r2
 800878c:	bfc4      	itt	gt
 800878e:	1a9b      	subgt	r3, r3, r2
 8008790:	18ed      	addgt	r5, r5, r3
 8008792:	2600      	movs	r6, #0
 8008794:	341a      	adds	r4, #26
 8008796:	42b5      	cmp	r5, r6
 8008798:	d11a      	bne.n	80087d0 <_printf_common+0xc8>
 800879a:	2000      	movs	r0, #0
 800879c:	e008      	b.n	80087b0 <_printf_common+0xa8>
 800879e:	2301      	movs	r3, #1
 80087a0:	4652      	mov	r2, sl
 80087a2:	4641      	mov	r1, r8
 80087a4:	4638      	mov	r0, r7
 80087a6:	47c8      	blx	r9
 80087a8:	3001      	adds	r0, #1
 80087aa:	d103      	bne.n	80087b4 <_printf_common+0xac>
 80087ac:	f04f 30ff 	mov.w	r0, #4294967295
 80087b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b4:	3501      	adds	r5, #1
 80087b6:	e7c6      	b.n	8008746 <_printf_common+0x3e>
 80087b8:	18e1      	adds	r1, r4, r3
 80087ba:	1c5a      	adds	r2, r3, #1
 80087bc:	2030      	movs	r0, #48	@ 0x30
 80087be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087c2:	4422      	add	r2, r4
 80087c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80087c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80087cc:	3302      	adds	r3, #2
 80087ce:	e7c7      	b.n	8008760 <_printf_common+0x58>
 80087d0:	2301      	movs	r3, #1
 80087d2:	4622      	mov	r2, r4
 80087d4:	4641      	mov	r1, r8
 80087d6:	4638      	mov	r0, r7
 80087d8:	47c8      	blx	r9
 80087da:	3001      	adds	r0, #1
 80087dc:	d0e6      	beq.n	80087ac <_printf_common+0xa4>
 80087de:	3601      	adds	r6, #1
 80087e0:	e7d9      	b.n	8008796 <_printf_common+0x8e>
	...

080087e4 <_printf_i>:
 80087e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087e8:	7e0f      	ldrb	r7, [r1, #24]
 80087ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087ec:	2f78      	cmp	r7, #120	@ 0x78
 80087ee:	4691      	mov	r9, r2
 80087f0:	4680      	mov	r8, r0
 80087f2:	460c      	mov	r4, r1
 80087f4:	469a      	mov	sl, r3
 80087f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80087fa:	d807      	bhi.n	800880c <_printf_i+0x28>
 80087fc:	2f62      	cmp	r7, #98	@ 0x62
 80087fe:	d80a      	bhi.n	8008816 <_printf_i+0x32>
 8008800:	2f00      	cmp	r7, #0
 8008802:	f000 80d2 	beq.w	80089aa <_printf_i+0x1c6>
 8008806:	2f58      	cmp	r7, #88	@ 0x58
 8008808:	f000 80b9 	beq.w	800897e <_printf_i+0x19a>
 800880c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008810:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008814:	e03a      	b.n	800888c <_printf_i+0xa8>
 8008816:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800881a:	2b15      	cmp	r3, #21
 800881c:	d8f6      	bhi.n	800880c <_printf_i+0x28>
 800881e:	a101      	add	r1, pc, #4	@ (adr r1, 8008824 <_printf_i+0x40>)
 8008820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008824:	0800887d 	.word	0x0800887d
 8008828:	08008891 	.word	0x08008891
 800882c:	0800880d 	.word	0x0800880d
 8008830:	0800880d 	.word	0x0800880d
 8008834:	0800880d 	.word	0x0800880d
 8008838:	0800880d 	.word	0x0800880d
 800883c:	08008891 	.word	0x08008891
 8008840:	0800880d 	.word	0x0800880d
 8008844:	0800880d 	.word	0x0800880d
 8008848:	0800880d 	.word	0x0800880d
 800884c:	0800880d 	.word	0x0800880d
 8008850:	08008991 	.word	0x08008991
 8008854:	080088bb 	.word	0x080088bb
 8008858:	0800894b 	.word	0x0800894b
 800885c:	0800880d 	.word	0x0800880d
 8008860:	0800880d 	.word	0x0800880d
 8008864:	080089b3 	.word	0x080089b3
 8008868:	0800880d 	.word	0x0800880d
 800886c:	080088bb 	.word	0x080088bb
 8008870:	0800880d 	.word	0x0800880d
 8008874:	0800880d 	.word	0x0800880d
 8008878:	08008953 	.word	0x08008953
 800887c:	6833      	ldr	r3, [r6, #0]
 800887e:	1d1a      	adds	r2, r3, #4
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	6032      	str	r2, [r6, #0]
 8008884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008888:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800888c:	2301      	movs	r3, #1
 800888e:	e09d      	b.n	80089cc <_printf_i+0x1e8>
 8008890:	6833      	ldr	r3, [r6, #0]
 8008892:	6820      	ldr	r0, [r4, #0]
 8008894:	1d19      	adds	r1, r3, #4
 8008896:	6031      	str	r1, [r6, #0]
 8008898:	0606      	lsls	r6, r0, #24
 800889a:	d501      	bpl.n	80088a0 <_printf_i+0xbc>
 800889c:	681d      	ldr	r5, [r3, #0]
 800889e:	e003      	b.n	80088a8 <_printf_i+0xc4>
 80088a0:	0645      	lsls	r5, r0, #25
 80088a2:	d5fb      	bpl.n	800889c <_printf_i+0xb8>
 80088a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088a8:	2d00      	cmp	r5, #0
 80088aa:	da03      	bge.n	80088b4 <_printf_i+0xd0>
 80088ac:	232d      	movs	r3, #45	@ 0x2d
 80088ae:	426d      	negs	r5, r5
 80088b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088b4:	4859      	ldr	r0, [pc, #356]	@ (8008a1c <_printf_i+0x238>)
 80088b6:	230a      	movs	r3, #10
 80088b8:	e011      	b.n	80088de <_printf_i+0xfa>
 80088ba:	6821      	ldr	r1, [r4, #0]
 80088bc:	6833      	ldr	r3, [r6, #0]
 80088be:	0608      	lsls	r0, r1, #24
 80088c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80088c4:	d402      	bmi.n	80088cc <_printf_i+0xe8>
 80088c6:	0649      	lsls	r1, r1, #25
 80088c8:	bf48      	it	mi
 80088ca:	b2ad      	uxthmi	r5, r5
 80088cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80088ce:	4853      	ldr	r0, [pc, #332]	@ (8008a1c <_printf_i+0x238>)
 80088d0:	6033      	str	r3, [r6, #0]
 80088d2:	bf14      	ite	ne
 80088d4:	230a      	movne	r3, #10
 80088d6:	2308      	moveq	r3, #8
 80088d8:	2100      	movs	r1, #0
 80088da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80088de:	6866      	ldr	r6, [r4, #4]
 80088e0:	60a6      	str	r6, [r4, #8]
 80088e2:	2e00      	cmp	r6, #0
 80088e4:	bfa2      	ittt	ge
 80088e6:	6821      	ldrge	r1, [r4, #0]
 80088e8:	f021 0104 	bicge.w	r1, r1, #4
 80088ec:	6021      	strge	r1, [r4, #0]
 80088ee:	b90d      	cbnz	r5, 80088f4 <_printf_i+0x110>
 80088f0:	2e00      	cmp	r6, #0
 80088f2:	d04b      	beq.n	800898c <_printf_i+0x1a8>
 80088f4:	4616      	mov	r6, r2
 80088f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80088fa:	fb03 5711 	mls	r7, r3, r1, r5
 80088fe:	5dc7      	ldrb	r7, [r0, r7]
 8008900:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008904:	462f      	mov	r7, r5
 8008906:	42bb      	cmp	r3, r7
 8008908:	460d      	mov	r5, r1
 800890a:	d9f4      	bls.n	80088f6 <_printf_i+0x112>
 800890c:	2b08      	cmp	r3, #8
 800890e:	d10b      	bne.n	8008928 <_printf_i+0x144>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	07df      	lsls	r7, r3, #31
 8008914:	d508      	bpl.n	8008928 <_printf_i+0x144>
 8008916:	6923      	ldr	r3, [r4, #16]
 8008918:	6861      	ldr	r1, [r4, #4]
 800891a:	4299      	cmp	r1, r3
 800891c:	bfde      	ittt	le
 800891e:	2330      	movle	r3, #48	@ 0x30
 8008920:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008924:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008928:	1b92      	subs	r2, r2, r6
 800892a:	6122      	str	r2, [r4, #16]
 800892c:	f8cd a000 	str.w	sl, [sp]
 8008930:	464b      	mov	r3, r9
 8008932:	aa03      	add	r2, sp, #12
 8008934:	4621      	mov	r1, r4
 8008936:	4640      	mov	r0, r8
 8008938:	f7ff fee6 	bl	8008708 <_printf_common>
 800893c:	3001      	adds	r0, #1
 800893e:	d14a      	bne.n	80089d6 <_printf_i+0x1f2>
 8008940:	f04f 30ff 	mov.w	r0, #4294967295
 8008944:	b004      	add	sp, #16
 8008946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	f043 0320 	orr.w	r3, r3, #32
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	4833      	ldr	r0, [pc, #204]	@ (8008a20 <_printf_i+0x23c>)
 8008954:	2778      	movs	r7, #120	@ 0x78
 8008956:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	6831      	ldr	r1, [r6, #0]
 800895e:	061f      	lsls	r7, r3, #24
 8008960:	f851 5b04 	ldr.w	r5, [r1], #4
 8008964:	d402      	bmi.n	800896c <_printf_i+0x188>
 8008966:	065f      	lsls	r7, r3, #25
 8008968:	bf48      	it	mi
 800896a:	b2ad      	uxthmi	r5, r5
 800896c:	6031      	str	r1, [r6, #0]
 800896e:	07d9      	lsls	r1, r3, #31
 8008970:	bf44      	itt	mi
 8008972:	f043 0320 	orrmi.w	r3, r3, #32
 8008976:	6023      	strmi	r3, [r4, #0]
 8008978:	b11d      	cbz	r5, 8008982 <_printf_i+0x19e>
 800897a:	2310      	movs	r3, #16
 800897c:	e7ac      	b.n	80088d8 <_printf_i+0xf4>
 800897e:	4827      	ldr	r0, [pc, #156]	@ (8008a1c <_printf_i+0x238>)
 8008980:	e7e9      	b.n	8008956 <_printf_i+0x172>
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	f023 0320 	bic.w	r3, r3, #32
 8008988:	6023      	str	r3, [r4, #0]
 800898a:	e7f6      	b.n	800897a <_printf_i+0x196>
 800898c:	4616      	mov	r6, r2
 800898e:	e7bd      	b.n	800890c <_printf_i+0x128>
 8008990:	6833      	ldr	r3, [r6, #0]
 8008992:	6825      	ldr	r5, [r4, #0]
 8008994:	6961      	ldr	r1, [r4, #20]
 8008996:	1d18      	adds	r0, r3, #4
 8008998:	6030      	str	r0, [r6, #0]
 800899a:	062e      	lsls	r6, r5, #24
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	d501      	bpl.n	80089a4 <_printf_i+0x1c0>
 80089a0:	6019      	str	r1, [r3, #0]
 80089a2:	e002      	b.n	80089aa <_printf_i+0x1c6>
 80089a4:	0668      	lsls	r0, r5, #25
 80089a6:	d5fb      	bpl.n	80089a0 <_printf_i+0x1bc>
 80089a8:	8019      	strh	r1, [r3, #0]
 80089aa:	2300      	movs	r3, #0
 80089ac:	6123      	str	r3, [r4, #16]
 80089ae:	4616      	mov	r6, r2
 80089b0:	e7bc      	b.n	800892c <_printf_i+0x148>
 80089b2:	6833      	ldr	r3, [r6, #0]
 80089b4:	1d1a      	adds	r2, r3, #4
 80089b6:	6032      	str	r2, [r6, #0]
 80089b8:	681e      	ldr	r6, [r3, #0]
 80089ba:	6862      	ldr	r2, [r4, #4]
 80089bc:	2100      	movs	r1, #0
 80089be:	4630      	mov	r0, r6
 80089c0:	f7f7 fc06 	bl	80001d0 <memchr>
 80089c4:	b108      	cbz	r0, 80089ca <_printf_i+0x1e6>
 80089c6:	1b80      	subs	r0, r0, r6
 80089c8:	6060      	str	r0, [r4, #4]
 80089ca:	6863      	ldr	r3, [r4, #4]
 80089cc:	6123      	str	r3, [r4, #16]
 80089ce:	2300      	movs	r3, #0
 80089d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089d4:	e7aa      	b.n	800892c <_printf_i+0x148>
 80089d6:	6923      	ldr	r3, [r4, #16]
 80089d8:	4632      	mov	r2, r6
 80089da:	4649      	mov	r1, r9
 80089dc:	4640      	mov	r0, r8
 80089de:	47d0      	blx	sl
 80089e0:	3001      	adds	r0, #1
 80089e2:	d0ad      	beq.n	8008940 <_printf_i+0x15c>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	079b      	lsls	r3, r3, #30
 80089e8:	d413      	bmi.n	8008a12 <_printf_i+0x22e>
 80089ea:	68e0      	ldr	r0, [r4, #12]
 80089ec:	9b03      	ldr	r3, [sp, #12]
 80089ee:	4298      	cmp	r0, r3
 80089f0:	bfb8      	it	lt
 80089f2:	4618      	movlt	r0, r3
 80089f4:	e7a6      	b.n	8008944 <_printf_i+0x160>
 80089f6:	2301      	movs	r3, #1
 80089f8:	4632      	mov	r2, r6
 80089fa:	4649      	mov	r1, r9
 80089fc:	4640      	mov	r0, r8
 80089fe:	47d0      	blx	sl
 8008a00:	3001      	adds	r0, #1
 8008a02:	d09d      	beq.n	8008940 <_printf_i+0x15c>
 8008a04:	3501      	adds	r5, #1
 8008a06:	68e3      	ldr	r3, [r4, #12]
 8008a08:	9903      	ldr	r1, [sp, #12]
 8008a0a:	1a5b      	subs	r3, r3, r1
 8008a0c:	42ab      	cmp	r3, r5
 8008a0e:	dcf2      	bgt.n	80089f6 <_printf_i+0x212>
 8008a10:	e7eb      	b.n	80089ea <_printf_i+0x206>
 8008a12:	2500      	movs	r5, #0
 8008a14:	f104 0619 	add.w	r6, r4, #25
 8008a18:	e7f5      	b.n	8008a06 <_printf_i+0x222>
 8008a1a:	bf00      	nop
 8008a1c:	08008e7d 	.word	0x08008e7d
 8008a20:	08008e8e 	.word	0x08008e8e

08008a24 <__sflush_r>:
 8008a24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a2c:	0716      	lsls	r6, r2, #28
 8008a2e:	4605      	mov	r5, r0
 8008a30:	460c      	mov	r4, r1
 8008a32:	d454      	bmi.n	8008ade <__sflush_r+0xba>
 8008a34:	684b      	ldr	r3, [r1, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	dc02      	bgt.n	8008a40 <__sflush_r+0x1c>
 8008a3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	dd48      	ble.n	8008ad2 <__sflush_r+0xae>
 8008a40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a42:	2e00      	cmp	r6, #0
 8008a44:	d045      	beq.n	8008ad2 <__sflush_r+0xae>
 8008a46:	2300      	movs	r3, #0
 8008a48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a4c:	682f      	ldr	r7, [r5, #0]
 8008a4e:	6a21      	ldr	r1, [r4, #32]
 8008a50:	602b      	str	r3, [r5, #0]
 8008a52:	d030      	beq.n	8008ab6 <__sflush_r+0x92>
 8008a54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a56:	89a3      	ldrh	r3, [r4, #12]
 8008a58:	0759      	lsls	r1, r3, #29
 8008a5a:	d505      	bpl.n	8008a68 <__sflush_r+0x44>
 8008a5c:	6863      	ldr	r3, [r4, #4]
 8008a5e:	1ad2      	subs	r2, r2, r3
 8008a60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a62:	b10b      	cbz	r3, 8008a68 <__sflush_r+0x44>
 8008a64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a66:	1ad2      	subs	r2, r2, r3
 8008a68:	2300      	movs	r3, #0
 8008a6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a6c:	6a21      	ldr	r1, [r4, #32]
 8008a6e:	4628      	mov	r0, r5
 8008a70:	47b0      	blx	r6
 8008a72:	1c43      	adds	r3, r0, #1
 8008a74:	89a3      	ldrh	r3, [r4, #12]
 8008a76:	d106      	bne.n	8008a86 <__sflush_r+0x62>
 8008a78:	6829      	ldr	r1, [r5, #0]
 8008a7a:	291d      	cmp	r1, #29
 8008a7c:	d82b      	bhi.n	8008ad6 <__sflush_r+0xb2>
 8008a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8008b28 <__sflush_r+0x104>)
 8008a80:	410a      	asrs	r2, r1
 8008a82:	07d6      	lsls	r6, r2, #31
 8008a84:	d427      	bmi.n	8008ad6 <__sflush_r+0xb2>
 8008a86:	2200      	movs	r2, #0
 8008a88:	6062      	str	r2, [r4, #4]
 8008a8a:	04d9      	lsls	r1, r3, #19
 8008a8c:	6922      	ldr	r2, [r4, #16]
 8008a8e:	6022      	str	r2, [r4, #0]
 8008a90:	d504      	bpl.n	8008a9c <__sflush_r+0x78>
 8008a92:	1c42      	adds	r2, r0, #1
 8008a94:	d101      	bne.n	8008a9a <__sflush_r+0x76>
 8008a96:	682b      	ldr	r3, [r5, #0]
 8008a98:	b903      	cbnz	r3, 8008a9c <__sflush_r+0x78>
 8008a9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a9e:	602f      	str	r7, [r5, #0]
 8008aa0:	b1b9      	cbz	r1, 8008ad2 <__sflush_r+0xae>
 8008aa2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008aa6:	4299      	cmp	r1, r3
 8008aa8:	d002      	beq.n	8008ab0 <__sflush_r+0x8c>
 8008aaa:	4628      	mov	r0, r5
 8008aac:	f7ff fbf2 	bl	8008294 <_free_r>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ab4:	e00d      	b.n	8008ad2 <__sflush_r+0xae>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	4628      	mov	r0, r5
 8008aba:	47b0      	blx	r6
 8008abc:	4602      	mov	r2, r0
 8008abe:	1c50      	adds	r0, r2, #1
 8008ac0:	d1c9      	bne.n	8008a56 <__sflush_r+0x32>
 8008ac2:	682b      	ldr	r3, [r5, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d0c6      	beq.n	8008a56 <__sflush_r+0x32>
 8008ac8:	2b1d      	cmp	r3, #29
 8008aca:	d001      	beq.n	8008ad0 <__sflush_r+0xac>
 8008acc:	2b16      	cmp	r3, #22
 8008ace:	d11e      	bne.n	8008b0e <__sflush_r+0xea>
 8008ad0:	602f      	str	r7, [r5, #0]
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	e022      	b.n	8008b1c <__sflush_r+0xf8>
 8008ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ada:	b21b      	sxth	r3, r3
 8008adc:	e01b      	b.n	8008b16 <__sflush_r+0xf2>
 8008ade:	690f      	ldr	r7, [r1, #16]
 8008ae0:	2f00      	cmp	r7, #0
 8008ae2:	d0f6      	beq.n	8008ad2 <__sflush_r+0xae>
 8008ae4:	0793      	lsls	r3, r2, #30
 8008ae6:	680e      	ldr	r6, [r1, #0]
 8008ae8:	bf08      	it	eq
 8008aea:	694b      	ldreq	r3, [r1, #20]
 8008aec:	600f      	str	r7, [r1, #0]
 8008aee:	bf18      	it	ne
 8008af0:	2300      	movne	r3, #0
 8008af2:	eba6 0807 	sub.w	r8, r6, r7
 8008af6:	608b      	str	r3, [r1, #8]
 8008af8:	f1b8 0f00 	cmp.w	r8, #0
 8008afc:	dde9      	ble.n	8008ad2 <__sflush_r+0xae>
 8008afe:	6a21      	ldr	r1, [r4, #32]
 8008b00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b02:	4643      	mov	r3, r8
 8008b04:	463a      	mov	r2, r7
 8008b06:	4628      	mov	r0, r5
 8008b08:	47b0      	blx	r6
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	dc08      	bgt.n	8008b20 <__sflush_r+0xfc>
 8008b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b16:	81a3      	strh	r3, [r4, #12]
 8008b18:	f04f 30ff 	mov.w	r0, #4294967295
 8008b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b20:	4407      	add	r7, r0
 8008b22:	eba8 0800 	sub.w	r8, r8, r0
 8008b26:	e7e7      	b.n	8008af8 <__sflush_r+0xd4>
 8008b28:	dfbffffe 	.word	0xdfbffffe

08008b2c <_fflush_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	690b      	ldr	r3, [r1, #16]
 8008b30:	4605      	mov	r5, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	b913      	cbnz	r3, 8008b3c <_fflush_r+0x10>
 8008b36:	2500      	movs	r5, #0
 8008b38:	4628      	mov	r0, r5
 8008b3a:	bd38      	pop	{r3, r4, r5, pc}
 8008b3c:	b118      	cbz	r0, 8008b46 <_fflush_r+0x1a>
 8008b3e:	6a03      	ldr	r3, [r0, #32]
 8008b40:	b90b      	cbnz	r3, 8008b46 <_fflush_r+0x1a>
 8008b42:	f7ff fa91 	bl	8008068 <__sinit>
 8008b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d0f3      	beq.n	8008b36 <_fflush_r+0xa>
 8008b4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b50:	07d0      	lsls	r0, r2, #31
 8008b52:	d404      	bmi.n	8008b5e <_fflush_r+0x32>
 8008b54:	0599      	lsls	r1, r3, #22
 8008b56:	d402      	bmi.n	8008b5e <_fflush_r+0x32>
 8008b58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b5a:	f7ff fb8a 	bl	8008272 <__retarget_lock_acquire_recursive>
 8008b5e:	4628      	mov	r0, r5
 8008b60:	4621      	mov	r1, r4
 8008b62:	f7ff ff5f 	bl	8008a24 <__sflush_r>
 8008b66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b68:	07da      	lsls	r2, r3, #31
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	d4e4      	bmi.n	8008b38 <_fflush_r+0xc>
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	059b      	lsls	r3, r3, #22
 8008b72:	d4e1      	bmi.n	8008b38 <_fflush_r+0xc>
 8008b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b76:	f7ff fb7d 	bl	8008274 <__retarget_lock_release_recursive>
 8008b7a:	e7dd      	b.n	8008b38 <_fflush_r+0xc>

08008b7c <__swbuf_r>:
 8008b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7e:	460e      	mov	r6, r1
 8008b80:	4614      	mov	r4, r2
 8008b82:	4605      	mov	r5, r0
 8008b84:	b118      	cbz	r0, 8008b8e <__swbuf_r+0x12>
 8008b86:	6a03      	ldr	r3, [r0, #32]
 8008b88:	b90b      	cbnz	r3, 8008b8e <__swbuf_r+0x12>
 8008b8a:	f7ff fa6d 	bl	8008068 <__sinit>
 8008b8e:	69a3      	ldr	r3, [r4, #24]
 8008b90:	60a3      	str	r3, [r4, #8]
 8008b92:	89a3      	ldrh	r3, [r4, #12]
 8008b94:	071a      	lsls	r2, r3, #28
 8008b96:	d501      	bpl.n	8008b9c <__swbuf_r+0x20>
 8008b98:	6923      	ldr	r3, [r4, #16]
 8008b9a:	b943      	cbnz	r3, 8008bae <__swbuf_r+0x32>
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	f000 f82a 	bl	8008bf8 <__swsetup_r>
 8008ba4:	b118      	cbz	r0, 8008bae <__swbuf_r+0x32>
 8008ba6:	f04f 37ff 	mov.w	r7, #4294967295
 8008baa:	4638      	mov	r0, r7
 8008bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	6922      	ldr	r2, [r4, #16]
 8008bb2:	1a98      	subs	r0, r3, r2
 8008bb4:	6963      	ldr	r3, [r4, #20]
 8008bb6:	b2f6      	uxtb	r6, r6
 8008bb8:	4283      	cmp	r3, r0
 8008bba:	4637      	mov	r7, r6
 8008bbc:	dc05      	bgt.n	8008bca <__swbuf_r+0x4e>
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f7ff ffb3 	bl	8008b2c <_fflush_r>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d1ed      	bne.n	8008ba6 <__swbuf_r+0x2a>
 8008bca:	68a3      	ldr	r3, [r4, #8]
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	60a3      	str	r3, [r4, #8]
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	1c5a      	adds	r2, r3, #1
 8008bd4:	6022      	str	r2, [r4, #0]
 8008bd6:	701e      	strb	r6, [r3, #0]
 8008bd8:	6962      	ldr	r2, [r4, #20]
 8008bda:	1c43      	adds	r3, r0, #1
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d004      	beq.n	8008bea <__swbuf_r+0x6e>
 8008be0:	89a3      	ldrh	r3, [r4, #12]
 8008be2:	07db      	lsls	r3, r3, #31
 8008be4:	d5e1      	bpl.n	8008baa <__swbuf_r+0x2e>
 8008be6:	2e0a      	cmp	r6, #10
 8008be8:	d1df      	bne.n	8008baa <__swbuf_r+0x2e>
 8008bea:	4621      	mov	r1, r4
 8008bec:	4628      	mov	r0, r5
 8008bee:	f7ff ff9d 	bl	8008b2c <_fflush_r>
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	d0d9      	beq.n	8008baa <__swbuf_r+0x2e>
 8008bf6:	e7d6      	b.n	8008ba6 <__swbuf_r+0x2a>

08008bf8 <__swsetup_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4b29      	ldr	r3, [pc, #164]	@ (8008ca0 <__swsetup_r+0xa8>)
 8008bfc:	4605      	mov	r5, r0
 8008bfe:	6818      	ldr	r0, [r3, #0]
 8008c00:	460c      	mov	r4, r1
 8008c02:	b118      	cbz	r0, 8008c0c <__swsetup_r+0x14>
 8008c04:	6a03      	ldr	r3, [r0, #32]
 8008c06:	b90b      	cbnz	r3, 8008c0c <__swsetup_r+0x14>
 8008c08:	f7ff fa2e 	bl	8008068 <__sinit>
 8008c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c10:	0719      	lsls	r1, r3, #28
 8008c12:	d422      	bmi.n	8008c5a <__swsetup_r+0x62>
 8008c14:	06da      	lsls	r2, r3, #27
 8008c16:	d407      	bmi.n	8008c28 <__swsetup_r+0x30>
 8008c18:	2209      	movs	r2, #9
 8008c1a:	602a      	str	r2, [r5, #0]
 8008c1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c20:	81a3      	strh	r3, [r4, #12]
 8008c22:	f04f 30ff 	mov.w	r0, #4294967295
 8008c26:	e033      	b.n	8008c90 <__swsetup_r+0x98>
 8008c28:	0758      	lsls	r0, r3, #29
 8008c2a:	d512      	bpl.n	8008c52 <__swsetup_r+0x5a>
 8008c2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c2e:	b141      	cbz	r1, 8008c42 <__swsetup_r+0x4a>
 8008c30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c34:	4299      	cmp	r1, r3
 8008c36:	d002      	beq.n	8008c3e <__swsetup_r+0x46>
 8008c38:	4628      	mov	r0, r5
 8008c3a:	f7ff fb2b 	bl	8008294 <_free_r>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c48:	81a3      	strh	r3, [r4, #12]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	6063      	str	r3, [r4, #4]
 8008c4e:	6923      	ldr	r3, [r4, #16]
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	89a3      	ldrh	r3, [r4, #12]
 8008c54:	f043 0308 	orr.w	r3, r3, #8
 8008c58:	81a3      	strh	r3, [r4, #12]
 8008c5a:	6923      	ldr	r3, [r4, #16]
 8008c5c:	b94b      	cbnz	r3, 8008c72 <__swsetup_r+0x7a>
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c68:	d003      	beq.n	8008c72 <__swsetup_r+0x7a>
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	f000 f84f 	bl	8008d10 <__smakebuf_r>
 8008c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c76:	f013 0201 	ands.w	r2, r3, #1
 8008c7a:	d00a      	beq.n	8008c92 <__swsetup_r+0x9a>
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	60a2      	str	r2, [r4, #8]
 8008c80:	6962      	ldr	r2, [r4, #20]
 8008c82:	4252      	negs	r2, r2
 8008c84:	61a2      	str	r2, [r4, #24]
 8008c86:	6922      	ldr	r2, [r4, #16]
 8008c88:	b942      	cbnz	r2, 8008c9c <__swsetup_r+0xa4>
 8008c8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c8e:	d1c5      	bne.n	8008c1c <__swsetup_r+0x24>
 8008c90:	bd38      	pop	{r3, r4, r5, pc}
 8008c92:	0799      	lsls	r1, r3, #30
 8008c94:	bf58      	it	pl
 8008c96:	6962      	ldrpl	r2, [r4, #20]
 8008c98:	60a2      	str	r2, [r4, #8]
 8008c9a:	e7f4      	b.n	8008c86 <__swsetup_r+0x8e>
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	e7f7      	b.n	8008c90 <__swsetup_r+0x98>
 8008ca0:	20000018 	.word	0x20000018

08008ca4 <_sbrk_r>:
 8008ca4:	b538      	push	{r3, r4, r5, lr}
 8008ca6:	4d06      	ldr	r5, [pc, #24]	@ (8008cc0 <_sbrk_r+0x1c>)
 8008ca8:	2300      	movs	r3, #0
 8008caa:	4604      	mov	r4, r0
 8008cac:	4608      	mov	r0, r1
 8008cae:	602b      	str	r3, [r5, #0]
 8008cb0:	f7f9 fa22 	bl	80020f8 <_sbrk>
 8008cb4:	1c43      	adds	r3, r0, #1
 8008cb6:	d102      	bne.n	8008cbe <_sbrk_r+0x1a>
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	b103      	cbz	r3, 8008cbe <_sbrk_r+0x1a>
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	bd38      	pop	{r3, r4, r5, pc}
 8008cc0:	200006b0 	.word	0x200006b0

08008cc4 <__swhatbuf_r>:
 8008cc4:	b570      	push	{r4, r5, r6, lr}
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ccc:	2900      	cmp	r1, #0
 8008cce:	b096      	sub	sp, #88	@ 0x58
 8008cd0:	4615      	mov	r5, r2
 8008cd2:	461e      	mov	r6, r3
 8008cd4:	da0d      	bge.n	8008cf2 <__swhatbuf_r+0x2e>
 8008cd6:	89a3      	ldrh	r3, [r4, #12]
 8008cd8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008cdc:	f04f 0100 	mov.w	r1, #0
 8008ce0:	bf14      	ite	ne
 8008ce2:	2340      	movne	r3, #64	@ 0x40
 8008ce4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ce8:	2000      	movs	r0, #0
 8008cea:	6031      	str	r1, [r6, #0]
 8008cec:	602b      	str	r3, [r5, #0]
 8008cee:	b016      	add	sp, #88	@ 0x58
 8008cf0:	bd70      	pop	{r4, r5, r6, pc}
 8008cf2:	466a      	mov	r2, sp
 8008cf4:	f000 f848 	bl	8008d88 <_fstat_r>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	dbec      	blt.n	8008cd6 <__swhatbuf_r+0x12>
 8008cfc:	9901      	ldr	r1, [sp, #4]
 8008cfe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d06:	4259      	negs	r1, r3
 8008d08:	4159      	adcs	r1, r3
 8008d0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d0e:	e7eb      	b.n	8008ce8 <__swhatbuf_r+0x24>

08008d10 <__smakebuf_r>:
 8008d10:	898b      	ldrh	r3, [r1, #12]
 8008d12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d14:	079d      	lsls	r5, r3, #30
 8008d16:	4606      	mov	r6, r0
 8008d18:	460c      	mov	r4, r1
 8008d1a:	d507      	bpl.n	8008d2c <__smakebuf_r+0x1c>
 8008d1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d20:	6023      	str	r3, [r4, #0]
 8008d22:	6123      	str	r3, [r4, #16]
 8008d24:	2301      	movs	r3, #1
 8008d26:	6163      	str	r3, [r4, #20]
 8008d28:	b003      	add	sp, #12
 8008d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d2c:	ab01      	add	r3, sp, #4
 8008d2e:	466a      	mov	r2, sp
 8008d30:	f7ff ffc8 	bl	8008cc4 <__swhatbuf_r>
 8008d34:	9f00      	ldr	r7, [sp, #0]
 8008d36:	4605      	mov	r5, r0
 8008d38:	4639      	mov	r1, r7
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f7ff fb16 	bl	800836c <_malloc_r>
 8008d40:	b948      	cbnz	r0, 8008d56 <__smakebuf_r+0x46>
 8008d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d46:	059a      	lsls	r2, r3, #22
 8008d48:	d4ee      	bmi.n	8008d28 <__smakebuf_r+0x18>
 8008d4a:	f023 0303 	bic.w	r3, r3, #3
 8008d4e:	f043 0302 	orr.w	r3, r3, #2
 8008d52:	81a3      	strh	r3, [r4, #12]
 8008d54:	e7e2      	b.n	8008d1c <__smakebuf_r+0xc>
 8008d56:	89a3      	ldrh	r3, [r4, #12]
 8008d58:	6020      	str	r0, [r4, #0]
 8008d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d5e:	81a3      	strh	r3, [r4, #12]
 8008d60:	9b01      	ldr	r3, [sp, #4]
 8008d62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d66:	b15b      	cbz	r3, 8008d80 <__smakebuf_r+0x70>
 8008d68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	f000 f81d 	bl	8008dac <_isatty_r>
 8008d72:	b128      	cbz	r0, 8008d80 <__smakebuf_r+0x70>
 8008d74:	89a3      	ldrh	r3, [r4, #12]
 8008d76:	f023 0303 	bic.w	r3, r3, #3
 8008d7a:	f043 0301 	orr.w	r3, r3, #1
 8008d7e:	81a3      	strh	r3, [r4, #12]
 8008d80:	89a3      	ldrh	r3, [r4, #12]
 8008d82:	431d      	orrs	r5, r3
 8008d84:	81a5      	strh	r5, [r4, #12]
 8008d86:	e7cf      	b.n	8008d28 <__smakebuf_r+0x18>

08008d88 <_fstat_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	4d07      	ldr	r5, [pc, #28]	@ (8008da8 <_fstat_r+0x20>)
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	4604      	mov	r4, r0
 8008d90:	4608      	mov	r0, r1
 8008d92:	4611      	mov	r1, r2
 8008d94:	602b      	str	r3, [r5, #0]
 8008d96:	f7f9 f986 	bl	80020a6 <_fstat>
 8008d9a:	1c43      	adds	r3, r0, #1
 8008d9c:	d102      	bne.n	8008da4 <_fstat_r+0x1c>
 8008d9e:	682b      	ldr	r3, [r5, #0]
 8008da0:	b103      	cbz	r3, 8008da4 <_fstat_r+0x1c>
 8008da2:	6023      	str	r3, [r4, #0]
 8008da4:	bd38      	pop	{r3, r4, r5, pc}
 8008da6:	bf00      	nop
 8008da8:	200006b0 	.word	0x200006b0

08008dac <_isatty_r>:
 8008dac:	b538      	push	{r3, r4, r5, lr}
 8008dae:	4d06      	ldr	r5, [pc, #24]	@ (8008dc8 <_isatty_r+0x1c>)
 8008db0:	2300      	movs	r3, #0
 8008db2:	4604      	mov	r4, r0
 8008db4:	4608      	mov	r0, r1
 8008db6:	602b      	str	r3, [r5, #0]
 8008db8:	f7f9 f985 	bl	80020c6 <_isatty>
 8008dbc:	1c43      	adds	r3, r0, #1
 8008dbe:	d102      	bne.n	8008dc6 <_isatty_r+0x1a>
 8008dc0:	682b      	ldr	r3, [r5, #0]
 8008dc2:	b103      	cbz	r3, 8008dc6 <_isatty_r+0x1a>
 8008dc4:	6023      	str	r3, [r4, #0]
 8008dc6:	bd38      	pop	{r3, r4, r5, pc}
 8008dc8:	200006b0 	.word	0x200006b0

08008dcc <_init>:
 8008dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dce:	bf00      	nop
 8008dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dd2:	bc08      	pop	{r3}
 8008dd4:	469e      	mov	lr, r3
 8008dd6:	4770      	bx	lr

08008dd8 <_fini>:
 8008dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dda:	bf00      	nop
 8008ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dde:	bc08      	pop	{r3}
 8008de0:	469e      	mov	lr, r3
 8008de2:	4770      	bx	lr
