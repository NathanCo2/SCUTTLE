
SCUTTLE_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ff8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007180  08007180  00008180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071c8  080071c8  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  080071c8  080071c8  000081c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071d0  080071d0  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071d0  080071d0  000081d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071d4  080071d4  000081d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080071d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  2000000c  080071e4  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  080071e4  000094c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000195bf  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c98  00000000  00000000  000225fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  00025298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000127d  00000000  00000000  00026a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271f4  00000000  00000000  00027c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7f6  00000000  00000000  0004ee71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9587  00000000  00000000  0006b667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00164bee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065dc  00000000  00000000  00164c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0016b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007168 	.word	0x08007168

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007168 	.word	0x08007168

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b09c      	sub	sp, #112	@ 0x70
 80004bc:	af18      	add	r7, sp, #96	@ 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f001 fbc8 	bl	8001c52 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f87f 	bl	80005c4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004c6:	f000 f8cc 	bl	8000662 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ca:	f000 fe1f 	bl	800110c <MX_GPIO_Init>
  MX_TIM1_Init();
 80004ce:	f000 fab3 	bl	8000a38 <MX_TIM1_Init>
  MX_ADC1_Init();
 80004d2:	f000 f8f1 	bl	80006b8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80004d6:	f000 f967 	bl	80007a8 <MX_ADC2_Init>
  MX_ADC3_Init();
 80004da:	f000 f9cb 	bl	8000874 <MX_ADC3_Init>
  MX_TIM2_Init();
 80004de:	f000 fb6d 	bl	8000bbc <MX_TIM2_Init>
  MX_SPI3_Init();
 80004e2:	f000 fa6b 	bl	80009bc <MX_SPI3_Init>
  MX_TIM3_Init();
 80004e6:	f000 fbbd 	bl	8000c64 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80004ea:	f000 fddf 	bl	80010ac <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80004ee:	f000 fc0f 	bl	8000d10 <MX_TIM4_Init>
  MX_TIM5_Init();
 80004f2:	f000 fc63 	bl	8000dbc <MX_TIM5_Init>
  MX_I2C2_Init();
 80004f6:	f000 fa21 	bl	800093c <MX_I2C2_Init>
  MX_TIM8_Init();
 80004fa:	f000 fcbf 	bl	8000e7c <MX_TIM8_Init>
  MX_TIM15_Init();
 80004fe:	f000 fd71 	bl	8000fe4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */




  uint8_t task = 0; //State variable for main loop
 8000502:	2300      	movs	r3, #0
 8000504:	73fb      	strb	r3, [r7, #15]
  uint8_t T1State = 0; //Task 1 State
 8000506:	2300      	movs	r3, #0
 8000508:	71bb      	strb	r3, [r7, #6]
  uint8_t T2State = 0; //Task 2 State
 800050a:	2300      	movs	r3, #0
 800050c:	717b      	strb	r3, [r7, #5]
  uint8_t T3State = 0; //Task 3 State
 800050e:	2300      	movs	r3, #0
 8000510:	73bb      	strb	r3, [r7, #14]
  uint8_t T4State = 0; //Task 4 State
 8000512:	2300      	movs	r3, #0
 8000514:	737b      	strb	r3, [r7, #13]
  uint8_t T5State = 0; //Task 5 State
 8000516:	2300      	movs	r3, #0
 8000518:	733b      	strb	r3, [r7, #12]
  uint8_t T6State = 0; //Task 6 State
 800051a:	2300      	movs	r3, #0
 800051c:	72fb      	strb	r3, [r7, #11]

  //Set motors, metal detector, and camera to ON by default. Will turn off if battery too low or killswitch active
   uint8_t DriveON = 1;
 800051e:	2301      	movs	r3, #1
 8000520:	72bb      	strb	r3, [r7, #10]
   uint8_t ArmON = 1;
 8000522:	2301      	movs	r3, #1
 8000524:	727b      	strb	r3, [r7, #9]
   uint8_t MDON = 1;
 8000526:	2301      	movs	r3, #1
 8000528:	723b      	strb	r3, [r7, #8]
   uint8_t OPENMV = 1;
 800052a:	2301      	movs	r3, #1
 800052c:	71fb      	strb	r3, [r7, #7]

   //Set Kill switch to be off by default
   uint8_t BatKill = 0; //If Kill is 1 then turn everything off
 800052e:	2300      	movs	r3, #0
 8000530:	713b      	strb	r3, [r7, #4]
   uint8_t RadKill = 0; //Radio Kill switch
 8000532:	2300      	movs	r3, #0
 8000534:	70fb      	strb	r3, [r7, #3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  //Run FSM
	  switch(task){
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	2b06      	cmp	r3, #6
 800053a:	d8fc      	bhi.n	8000536 <main+0x7e>
 800053c:	a201      	add	r2, pc, #4	@ (adr r2, 8000544 <main+0x8c>)
 800053e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000542:	bf00      	nop
 8000544:	08000561 	.word	0x08000561
 8000548:	08000567 	.word	0x08000567
 800054c:	0800058d 	.word	0x0800058d
 8000550:	0800059f 	.word	0x0800059f
 8000554:	080005a5 	.word	0x080005a5
 8000558:	080005ab 	.word	0x080005ab
 800055c:	080005b1 	.word	0x080005b1

	  case 0: //State 0
		  //State 0: INIT
		  //Do not make file for this, just Initialize as necessary
		  task = 1;
 8000560:	2301      	movs	r3, #1
 8000562:	73fb      	strb	r3, [r7, #15]
		  break;
 8000564:	e028      	b.n	80005b8 <main+0x100>

	  case 1: //State 1
		  //State 1: Diagnostics
		  //Check battery and shut off if necessary
		  task1_run(&T1State, hadc1,&BatKill);
 8000566:	4c15      	ldr	r4, [pc, #84]	@ (80005bc <main+0x104>)
 8000568:	1dbd      	adds	r5, r7, #6
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	9316      	str	r3, [sp, #88]	@ 0x58
 800056e:	4668      	mov	r0, sp
 8000570:	f104 030c 	add.w	r3, r4, #12
 8000574:	2258      	movs	r2, #88	@ 0x58
 8000576:	4619      	mov	r1, r3
 8000578:	f006 fde8 	bl	800714c <memcpy>
 800057c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000580:	4628      	mov	r0, r5
 8000582:	f001 fad9 	bl	8001b38 <task1_run>
		  task = 2;
 8000586:	2302      	movs	r3, #2
 8000588:	73fb      	strb	r3, [r7, #15]
		  break;
 800058a:	e015      	b.n	80005b8 <main+0x100>

	  case 2: //State 2
		  //State 2: Radio
		  //Check killswitches and radio, act accordingly
		  task2_run(&T2State,&BatKill,&RadKill,&usWidth);
 800058c:	1cfa      	adds	r2, r7, #3
 800058e:	1d39      	adds	r1, r7, #4
 8000590:	1d78      	adds	r0, r7, #5
 8000592:	4b0b      	ldr	r3, [pc, #44]	@ (80005c0 <main+0x108>)
 8000594:	f001 fb0a 	bl	8001bac <task2_run>
	  	  task = 3;
 8000598:	2303      	movs	r3, #3
 800059a:	73fb      	strb	r3, [r7, #15]
	  	  break;
 800059c:	e00c      	b.n	80005b8 <main+0x100>

	  case 3: //State 3
		  //State 3:
	  	  //Insert State 3 class here
	  	  task = 4;
 800059e:	2304      	movs	r3, #4
 80005a0:	73fb      	strb	r3, [r7, #15]
	  	  break;
 80005a2:	e009      	b.n	80005b8 <main+0x100>

	  case 4: //State 4
		  //State 4:
	  	  //Insert State 4 class here
	  	  task = 5;
 80005a4:	2305      	movs	r3, #5
 80005a6:	73fb      	strb	r3, [r7, #15]
	  	  break;
 80005a8:	e006      	b.n	80005b8 <main+0x100>

	  case 5: //State 5
		  //State 5:
	  	  //Insert State 5 class here
	  	  task = 6;
 80005aa:	2306      	movs	r3, #6
 80005ac:	73fb      	strb	r3, [r7, #15]
	  	  break;
 80005ae:	e003      	b.n	80005b8 <main+0x100>

	  case 6: //State 6
		  //State 6:
	  	  //Insert State 6 class here
	  	  task = 1; //Do not go back to init
 80005b0:	2301      	movs	r3, #1
 80005b2:	73fb      	strb	r3, [r7, #15]
	  	  break;
 80005b4:	bf00      	nop
 80005b6:	e7be      	b.n	8000536 <main+0x7e>
	  switch(task){
 80005b8:	e7bd      	b.n	8000536 <main+0x7e>
 80005ba:	bf00      	nop
 80005bc:	20000028 	.word	0x20000028
 80005c0:	200004a8 	.word	0x200004a8

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b096      	sub	sp, #88	@ 0x58
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2244      	movs	r2, #68	@ 0x44
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f006 fd8d 	bl	80070f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	463b      	mov	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ea:	f003 f9dd 	bl	80039a8 <HAL_PWREx_ControlVoltageScaling>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f4:	f000 fe7e 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	2303      	movs	r3, #3
 8000608:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 800060a:	2305      	movs	r3, #5
 800060c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 800060e:	2320      	movs	r3, #32
 8000610:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000612:	2307      	movs	r3, #7
 8000614:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fa16 	bl	8003a54 <HAL_RCC_OscConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800062e:	f000 fe61 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2303      	movs	r3, #3
 8000638:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000646:	463b      	mov	r3, r7
 8000648:	2104      	movs	r1, #4
 800064a:	4618      	mov	r0, r3
 800064c:	f003 fdde 	bl	800420c <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000656:	f000 fe4d 	bl	80012f4 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3758      	adds	r7, #88	@ 0x58
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b0a2      	sub	sp, #136	@ 0x88
 8000666:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2284      	movs	r2, #132	@ 0x84
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f006 fd3f 	bl	80070f2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000674:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000678:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800067a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800067e:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000680:	2303      	movs	r3, #3
 8000682:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000684:	2305      	movs	r3, #5
 8000686:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000688:	2318      	movs	r3, #24
 800068a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800068c:	2307      	movs	r3, #7
 800068e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000698:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800069c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4618      	mov	r0, r3
 80006a2:	f003 ffd7 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 80006ac:	f000 fe22 	bl	80012f4 <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3788      	adds	r7, #136	@ 0x88
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	@ 0x28
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
 80006d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006da:	4b2f      	ldr	r3, [pc, #188]	@ (8000798 <MX_ADC1_Init+0xe0>)
 80006dc:	4a2f      	ldr	r2, [pc, #188]	@ (800079c <MX_ADC1_Init+0xe4>)
 80006de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000798 <MX_ADC1_Init+0xe0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000798 <MX_ADC1_Init+0xe0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <MX_ADC1_Init+0xe0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f2:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <MX_ADC1_Init+0xe0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f8:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <MX_ADC1_Init+0xe0>)
 80006fa:	2204      	movs	r2, #4
 80006fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006fe:	4b26      	ldr	r3, [pc, #152]	@ (8000798 <MX_ADC1_Init+0xe0>)
 8000700:	2200      	movs	r2, #0
 8000702:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000704:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <MX_ADC1_Init+0xe0>)
 8000706:	2200      	movs	r2, #0
 8000708:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800070a:	4b23      	ldr	r3, [pc, #140]	@ (8000798 <MX_ADC1_Init+0xe0>)
 800070c:	2201      	movs	r2, #1
 800070e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000710:	4b21      	ldr	r3, [pc, #132]	@ (8000798 <MX_ADC1_Init+0xe0>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000718:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <MX_ADC1_Init+0xe0>)
 800071a:	2200      	movs	r2, #0
 800071c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071e:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <MX_ADC1_Init+0xe0>)
 8000720:	2200      	movs	r2, #0
 8000722:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000724:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <MX_ADC1_Init+0xe0>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800072c:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <MX_ADC1_Init+0xe0>)
 800072e:	2200      	movs	r2, #0
 8000730:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000732:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <MX_ADC1_Init+0xe0>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800073a:	4817      	ldr	r0, [pc, #92]	@ (8000798 <MX_ADC1_Init+0xe0>)
 800073c:	f001 fce2 	bl	8002104 <HAL_ADC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000746:	f000 fdd5 	bl	80012f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	4810      	ldr	r0, [pc, #64]	@ (8000798 <MX_ADC1_Init+0xe0>)
 8000756:	f002 fc63 	bl	8003020 <HAL_ADCEx_MultiModeConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000760:	f000 fdc8 	bl	80012f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000764:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_ADC1_Init+0xe8>)
 8000766:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000768:	2306      	movs	r3, #6
 800076a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_ADC1_Init+0xec>)
 8000772:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000774:	2304      	movs	r3, #4
 8000776:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_ADC1_Init+0xe0>)
 8000782:	f001 ffaf 	bl	80026e4 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800078c:	f000 fdb2 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	@ 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000028 	.word	0x20000028
 800079c:	50040000 	.word	0x50040000
 80007a0:	04300002 	.word	0x04300002
 80007a4:	407f0000 	.word	0x407f0000

080007a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007be:	4b29      	ldr	r3, [pc, #164]	@ (8000864 <MX_ADC2_Init+0xbc>)
 80007c0:	4a29      	ldr	r2, [pc, #164]	@ (8000868 <MX_ADC2_Init+0xc0>)
 80007c2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007c4:	4b27      	ldr	r3, [pc, #156]	@ (8000864 <MX_ADC2_Init+0xbc>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007ca:	4b26      	ldr	r3, [pc, #152]	@ (8000864 <MX_ADC2_Init+0xbc>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d0:	4b24      	ldr	r3, [pc, #144]	@ (8000864 <MX_ADC2_Init+0xbc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d6:	4b23      	ldr	r3, [pc, #140]	@ (8000864 <MX_ADC2_Init+0xbc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007dc:	4b21      	ldr	r3, [pc, #132]	@ (8000864 <MX_ADC2_Init+0xbc>)
 80007de:	2204      	movs	r2, #4
 80007e0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007e2:	4b20      	ldr	r3, [pc, #128]	@ (8000864 <MX_ADC2_Init+0xbc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000864 <MX_ADC2_Init+0xbc>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80007ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000864 <MX_ADC2_Init+0xbc>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <MX_ADC2_Init+0xbc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fc:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <MX_ADC2_Init+0xbc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000802:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <MX_ADC2_Init+0xbc>)
 8000804:	2200      	movs	r2, #0
 8000806:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000808:	4b16      	ldr	r3, [pc, #88]	@ (8000864 <MX_ADC2_Init+0xbc>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000810:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <MX_ADC2_Init+0xbc>)
 8000812:	2200      	movs	r2, #0
 8000814:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000816:	4b13      	ldr	r3, [pc, #76]	@ (8000864 <MX_ADC2_Init+0xbc>)
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800081e:	4811      	ldr	r0, [pc, #68]	@ (8000864 <MX_ADC2_Init+0xbc>)
 8000820:	f001 fc70 	bl	8002104 <HAL_ADC_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800082a:	f000 fd63 	bl	80012f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_ADC2_Init+0xc4>)
 8000830:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000832:	2306      	movs	r3, #6
 8000834:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800083a:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <MX_ADC2_Init+0xc8>)
 800083c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800083e:	2304      	movs	r3, #4
 8000840:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000846:	463b      	mov	r3, r7
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	@ (8000864 <MX_ADC2_Init+0xbc>)
 800084c:	f001 ff4a 	bl	80026e4 <HAL_ADC_ConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000856:	f000 fd4d 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000008c 	.word	0x2000008c
 8000868:	50040100 	.word	0x50040100
 800086c:	08600004 	.word	0x08600004
 8000870:	407f0000 	.word	0x407f0000

08000874 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800087a:	463b      	mov	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
 8000888:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800088a:	4b29      	ldr	r3, [pc, #164]	@ (8000930 <MX_ADC3_Init+0xbc>)
 800088c:	4a29      	ldr	r2, [pc, #164]	@ (8000934 <MX_ADC3_Init+0xc0>)
 800088e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000890:	4b27      	ldr	r3, [pc, #156]	@ (8000930 <MX_ADC3_Init+0xbc>)
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000896:	4b26      	ldr	r3, [pc, #152]	@ (8000930 <MX_ADC3_Init+0xbc>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089c:	4b24      	ldr	r3, [pc, #144]	@ (8000930 <MX_ADC3_Init+0xbc>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008a2:	4b23      	ldr	r3, [pc, #140]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a8:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008aa:	2204      	movs	r2, #4
 80008ac:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80008ae:	4b20      	ldr	r3, [pc, #128]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008bc:	2201      	movs	r2, #1
 80008be:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c8:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008d4:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008de:	2200      	movs	r2, #0
 80008e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80008e2:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008ea:	4811      	ldr	r0, [pc, #68]	@ (8000930 <MX_ADC3_Init+0xbc>)
 80008ec:	f001 fc0a 	bl	8002104 <HAL_ADC_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80008f6:	f000 fcfd 	bl	80012f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_ADC3_Init+0xc4>)
 80008fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008fe:	2306      	movs	r3, #6
 8000900:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000906:	237f      	movs	r3, #127	@ 0x7f
 8000908:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800090a:	2304      	movs	r3, #4
 800090c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000912:	463b      	mov	r3, r7
 8000914:	4619      	mov	r1, r3
 8000916:	4806      	ldr	r0, [pc, #24]	@ (8000930 <MX_ADC3_Init+0xbc>)
 8000918:	f001 fee4 	bl	80026e4 <HAL_ADC_ConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000922:	f000 fce7 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000f0 	.word	0x200000f0
 8000934:	50040200 	.word	0x50040200
 8000938:	0c900008 	.word	0x0c900008

0800093c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000940:	4b1b      	ldr	r3, [pc, #108]	@ (80009b0 <MX_I2C2_Init+0x74>)
 8000942:	4a1c      	ldr	r2, [pc, #112]	@ (80009b4 <MX_I2C2_Init+0x78>)
 8000944:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000946:	4b1a      	ldr	r3, [pc, #104]	@ (80009b0 <MX_I2C2_Init+0x74>)
 8000948:	4a1b      	ldr	r2, [pc, #108]	@ (80009b8 <MX_I2C2_Init+0x7c>)
 800094a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800094c:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <MX_I2C2_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000952:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <MX_I2C2_Init+0x74>)
 8000954:	2201      	movs	r2, #1
 8000956:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000958:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <MX_I2C2_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800095e:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <MX_I2C2_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000964:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <MX_I2C2_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800096a:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <MX_I2C2_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000970:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <MX_I2C2_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000976:	480e      	ldr	r0, [pc, #56]	@ (80009b0 <MX_I2C2_Init+0x74>)
 8000978:	f002 fed6 	bl	8003728 <HAL_I2C_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000982:	f000 fcb7 	bl	80012f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000986:	2100      	movs	r1, #0
 8000988:	4809      	ldr	r0, [pc, #36]	@ (80009b0 <MX_I2C2_Init+0x74>)
 800098a:	f002 ff68 	bl	800385e <HAL_I2CEx_ConfigAnalogFilter>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000994:	f000 fcae 	bl	80012f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000998:	2100      	movs	r1, #0
 800099a:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_I2C2_Init+0x74>)
 800099c:	f002 ffaa 	bl	80038f4 <HAL_I2CEx_ConfigDigitalFilter>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009a6:	f000 fca5 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000154 	.word	0x20000154
 80009b4:	40005800 	.word	0x40005800
 80009b8:	10909cec 	.word	0x10909cec

080009bc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a30 <MX_SPI3_Init+0x74>)
 80009c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a34 <MX_SPI3_Init+0x78>)
 80009c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <MX_SPI3_Init+0x74>)
 80009c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80009ce:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <MX_SPI3_Init+0x74>)
 80009d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009d4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009d6:	4b16      	ldr	r3, [pc, #88]	@ (8000a30 <MX_SPI3_Init+0x74>)
 80009d8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80009dc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009de:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <MX_SPI3_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <MX_SPI3_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <MX_SPI3_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <MX_SPI3_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <MX_SPI3_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <MX_SPI3_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <MX_SPI3_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a08:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <MX_SPI3_Init+0x74>)
 8000a0a:	2207      	movs	r2, #7
 8000a0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <MX_SPI3_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <MX_SPI3_Init+0x74>)
 8000a16:	2208      	movs	r2, #8
 8000a18:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <MX_SPI3_Init+0x74>)
 8000a1c:	f004 faa6 	bl	8004f6c <HAL_SPI_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a26:	f000 fc65 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200001a8 	.word	0x200001a8
 8000a34:	40003c00 	.word	0x40003c00

08000a38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b096      	sub	sp, #88	@ 0x58
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
 8000a5a:	615a      	str	r2, [r3, #20]
 8000a5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	222c      	movs	r2, #44	@ 0x2c
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f006 fb44 	bl	80070f2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a6a:	4b52      	ldr	r3, [pc, #328]	@ (8000bb4 <MX_TIM1_Init+0x17c>)
 8000a6c:	4a52      	ldr	r2, [pc, #328]	@ (8000bb8 <MX_TIM1_Init+0x180>)
 8000a6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a70:	4b50      	ldr	r3, [pc, #320]	@ (8000bb4 <MX_TIM1_Init+0x17c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b4f      	ldr	r3, [pc, #316]	@ (8000bb4 <MX_TIM1_Init+0x17c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8000a7c:	4b4d      	ldr	r3, [pc, #308]	@ (8000bb4 <MX_TIM1_Init+0x17c>)
 8000a7e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000a82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a84:	4b4b      	ldr	r3, [pc, #300]	@ (8000bb4 <MX_TIM1_Init+0x17c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8000bb4 <MX_TIM1_Init+0x17c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a90:	4b48      	ldr	r3, [pc, #288]	@ (8000bb4 <MX_TIM1_Init+0x17c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a96:	4847      	ldr	r0, [pc, #284]	@ (8000bb4 <MX_TIM1_Init+0x17c>)
 8000a98:	f004 fb6c 	bl	8005174 <HAL_TIM_PWM_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000aa2:	f000 fc27 	bl	80012f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000aa6:	4843      	ldr	r0, [pc, #268]	@ (8000bb4 <MX_TIM1_Init+0x17c>)
 8000aa8:	f004 fb03 	bl	80050b2 <HAL_TIM_OC_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000ab2:	f000 fc1f 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	483a      	ldr	r0, [pc, #232]	@ (8000bb4 <MX_TIM1_Init+0x17c>)
 8000aca:	f005 fcd3 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000ad4:	f000 fc0e 	bl	80012f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad8:	2360      	movs	r3, #96	@ 0x60
 8000ada:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aec:	2300      	movs	r3, #0
 8000aee:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000af0:	2300      	movs	r3, #0
 8000af2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000af8:	2200      	movs	r2, #0
 8000afa:	4619      	mov	r1, r3
 8000afc:	482d      	ldr	r0, [pc, #180]	@ (8000bb4 <MX_TIM1_Init+0x17c>)
 8000afe:	f004 fea5 	bl	800584c <HAL_TIM_PWM_ConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000b08:	f000 fbf4 	bl	80012f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b10:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b14:	2204      	movs	r2, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	4826      	ldr	r0, [pc, #152]	@ (8000bb4 <MX_TIM1_Init+0x17c>)
 8000b1a:	f004 fd81 	bl	8005620 <HAL_TIM_OC_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000b24:	f000 fbe6 	bl	80012f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b28:	2360      	movs	r3, #96	@ 0x60
 8000b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b30:	2208      	movs	r2, #8
 8000b32:	4619      	mov	r1, r3
 8000b34:	481f      	ldr	r0, [pc, #124]	@ (8000bb4 <MX_TIM1_Init+0x17c>)
 8000b36:	f004 fe89 	bl	800584c <HAL_TIM_PWM_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000b40:	f000 fbd8 	bl	80012f4 <Error_Handler>
  }
  sConfigOC.Pulse = 29999;
 8000b44:	f247 532f 	movw	r3, #29999	@ 0x752f
 8000b48:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b4e:	220c      	movs	r2, #12
 8000b50:	4619      	mov	r1, r3
 8000b52:	4818      	ldr	r0, [pc, #96]	@ (8000bb4 <MX_TIM1_Init+0x17c>)
 8000b54:	f004 fe7a 	bl	800584c <HAL_TIM_PWM_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000b5e:	f000 fbc9 	bl	80012f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	4619      	mov	r1, r3
 8000b96:	4807      	ldr	r0, [pc, #28]	@ (8000bb4 <MX_TIM1_Init+0x17c>)
 8000b98:	f005 fcf4 	bl	8006584 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 8000ba2:	f000 fba7 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ba6:	4803      	ldr	r0, [pc, #12]	@ (8000bb4 <MX_TIM1_Init+0x17c>)
 8000ba8:	f000 feba 	bl	8001920 <HAL_TIM_MspPostInit>

}
 8000bac:	bf00      	nop
 8000bae:	3758      	adds	r7, #88	@ 0x58
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	2000020c 	.word	0x2000020c
 8000bb8:	40012c00 	.word	0x40012c00

08000bbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	@ 0x30
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	2224      	movs	r2, #36	@ 0x24
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f006 fa91 	bl	80070f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bda:	4b21      	ldr	r3, [pc, #132]	@ (8000c60 <MX_TIM2_Init+0xa4>)
 8000bdc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000be0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000be2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c60 <MX_TIM2_Init+0xa4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c60 <MX_TIM2_Init+0xa4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000bee:	4b1c      	ldr	r3, [pc, #112]	@ (8000c60 <MX_TIM2_Init+0xa4>)
 8000bf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bf4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <MX_TIM2_Init+0xa4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	@ (8000c60 <MX_TIM2_Init+0xa4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c02:	2301      	movs	r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <MX_TIM2_Init+0xa4>)
 8000c2e:	f004 fb4f 	bl	80052d0 <HAL_TIM_Encoder_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000c38:	f000 fb5c 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c44:	463b      	mov	r3, r7
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <MX_TIM2_Init+0xa4>)
 8000c4a:	f005 fc13 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000c54:	f000 fb4e 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	3730      	adds	r7, #48	@ 0x30
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000258 	.word	0x20000258

08000c64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08c      	sub	sp, #48	@ 0x30
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	2224      	movs	r2, #36	@ 0x24
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f006 fa3d 	bl	80070f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c82:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <MX_TIM3_Init+0xa4>)
 8000c84:	4a21      	ldr	r2, [pc, #132]	@ (8000d0c <MX_TIM3_Init+0xa8>)
 8000c86:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c88:	4b1f      	ldr	r3, [pc, #124]	@ (8000d08 <MX_TIM3_Init+0xa4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d08 <MX_TIM3_Init+0xa4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c94:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <MX_TIM3_Init+0xa4>)
 8000c96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <MX_TIM3_Init+0xa4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <MX_TIM3_Init+0xa4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480d      	ldr	r0, [pc, #52]	@ (8000d08 <MX_TIM3_Init+0xa4>)
 8000cd4:	f004 fafc 	bl	80052d0 <HAL_TIM_Encoder_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000cde:	f000 fb09 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	@ (8000d08 <MX_TIM3_Init+0xa4>)
 8000cf0:	f005 fbc0 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000cfa:	f000 fafb 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	3730      	adds	r7, #48	@ 0x30
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200002a4 	.word	0x200002a4
 8000d0c:	40000400 	.word	0x40000400

08000d10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08c      	sub	sp, #48	@ 0x30
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	2224      	movs	r2, #36	@ 0x24
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f006 f9e7 	bl	80070f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	463b      	mov	r3, r7
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d2e:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <MX_TIM4_Init+0xa4>)
 8000d30:	4a21      	ldr	r2, [pc, #132]	@ (8000db8 <MX_TIM4_Init+0xa8>)
 8000d32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <MX_TIM4_Init+0xa4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000db4 <MX_TIM4_Init+0xa4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d40:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <MX_TIM4_Init+0xa4>)
 8000d42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d48:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <MX_TIM4_Init+0xa4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4e:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <MX_TIM4_Init+0xa4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480d      	ldr	r0, [pc, #52]	@ (8000db4 <MX_TIM4_Init+0xa4>)
 8000d80:	f004 faa6 	bl	80052d0 <HAL_TIM_Encoder_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d8a:	f000 fab3 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4806      	ldr	r0, [pc, #24]	@ (8000db4 <MX_TIM4_Init+0xa4>)
 8000d9c:	f005 fb6a 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000da6:	f000 faa5 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	3730      	adds	r7, #48	@ 0x30
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200002f0 	.word	0x200002f0
 8000db8:	40000800 	.word	0x40000800

08000dbc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000dda:	4b26      	ldr	r3, [pc, #152]	@ (8000e74 <MX_TIM5_Init+0xb8>)
 8000ddc:	4a26      	ldr	r2, [pc, #152]	@ (8000e78 <MX_TIM5_Init+0xbc>)
 8000dde:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000de0:	4b24      	ldr	r3, [pc, #144]	@ (8000e74 <MX_TIM5_Init+0xb8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de6:	4b23      	ldr	r3, [pc, #140]	@ (8000e74 <MX_TIM5_Init+0xb8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000dec:	4b21      	ldr	r3, [pc, #132]	@ (8000e74 <MX_TIM5_Init+0xb8>)
 8000dee:	f04f 32ff 	mov.w	r2, #4294967295
 8000df2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <MX_TIM5_Init+0xb8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000e74 <MX_TIM5_Init+0xb8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000e00:	481c      	ldr	r0, [pc, #112]	@ (8000e74 <MX_TIM5_Init+0xb8>)
 8000e02:	f004 fa0e 	bl	8005222 <HAL_TIM_IC_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000e0c:	f000 fa72 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4815      	ldr	r0, [pc, #84]	@ (8000e74 <MX_TIM5_Init+0xb8>)
 8000e20:	f005 fb28 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8000e2a:	f000 fa63 	bl	80012f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e32:	2301      	movs	r3, #1
 8000e34:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2208      	movs	r2, #8
 8000e42:	4619      	mov	r1, r3
 8000e44:	480b      	ldr	r0, [pc, #44]	@ (8000e74 <MX_TIM5_Init+0xb8>)
 8000e46:	f004 fc65 	bl	8005714 <HAL_TIM_IC_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000e50:	f000 fa50 	bl	80012f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	220c      	movs	r2, #12
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4806      	ldr	r0, [pc, #24]	@ (8000e74 <MX_TIM5_Init+0xb8>)
 8000e5c:	f004 fc5a 	bl	8005714 <HAL_TIM_IC_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8000e66:	f000 fa45 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	3720      	adds	r7, #32
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000033c 	.word	0x2000033c
 8000e78:	40000c00 	.word	0x40000c00

08000e7c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b096      	sub	sp, #88	@ 0x58
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e82:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]
 8000e9e:	615a      	str	r2, [r3, #20]
 8000ea0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	222c      	movs	r2, #44	@ 0x2c
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f006 f922 	bl	80070f2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000eae:	4b4b      	ldr	r3, [pc, #300]	@ (8000fdc <MX_TIM8_Init+0x160>)
 8000eb0:	4a4b      	ldr	r2, [pc, #300]	@ (8000fe0 <MX_TIM8_Init+0x164>)
 8000eb2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000eb4:	4b49      	ldr	r3, [pc, #292]	@ (8000fdc <MX_TIM8_Init+0x160>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eba:	4b48      	ldr	r3, [pc, #288]	@ (8000fdc <MX_TIM8_Init+0x160>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000ec0:	4b46      	ldr	r3, [pc, #280]	@ (8000fdc <MX_TIM8_Init+0x160>)
 8000ec2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ec6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec8:	4b44      	ldr	r3, [pc, #272]	@ (8000fdc <MX_TIM8_Init+0x160>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ece:	4b43      	ldr	r3, [pc, #268]	@ (8000fdc <MX_TIM8_Init+0x160>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed4:	4b41      	ldr	r3, [pc, #260]	@ (8000fdc <MX_TIM8_Init+0x160>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000eda:	4840      	ldr	r0, [pc, #256]	@ (8000fdc <MX_TIM8_Init+0x160>)
 8000edc:	f004 f94a 	bl	8005174 <HAL_TIM_PWM_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000ee6:	f000 fa05 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ef6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000efa:	4619      	mov	r1, r3
 8000efc:	4837      	ldr	r0, [pc, #220]	@ (8000fdc <MX_TIM8_Init+0x160>)
 8000efe:	f005 fab9 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000f08:	f000 f9f4 	bl	80012f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f0c:	2360      	movs	r3, #96	@ 0x60
 8000f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f14:	2300      	movs	r3, #0
 8000f16:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f24:	2300      	movs	r3, #0
 8000f26:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	4619      	mov	r1, r3
 8000f30:	482a      	ldr	r0, [pc, #168]	@ (8000fdc <MX_TIM8_Init+0x160>)
 8000f32:	f004 fc8b 	bl	800584c <HAL_TIM_PWM_ConfigChannel>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000f3c:	f000 f9da 	bl	80012f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f44:	2204      	movs	r2, #4
 8000f46:	4619      	mov	r1, r3
 8000f48:	4824      	ldr	r0, [pc, #144]	@ (8000fdc <MX_TIM8_Init+0x160>)
 8000f4a:	f004 fc7f 	bl	800584c <HAL_TIM_PWM_ConfigChannel>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000f54:	f000 f9ce 	bl	80012f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f5c:	2208      	movs	r2, #8
 8000f5e:	4619      	mov	r1, r3
 8000f60:	481e      	ldr	r0, [pc, #120]	@ (8000fdc <MX_TIM8_Init+0x160>)
 8000f62:	f004 fc73 	bl	800584c <HAL_TIM_PWM_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8000f6c:	f000 f9c2 	bl	80012f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f74:	220c      	movs	r2, #12
 8000f76:	4619      	mov	r1, r3
 8000f78:	4818      	ldr	r0, [pc, #96]	@ (8000fdc <MX_TIM8_Init+0x160>)
 8000f7a:	f004 fc67 	bl	800584c <HAL_TIM_PWM_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8000f84:	f000 f9b6 	bl	80012f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fa0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000faa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4807      	ldr	r0, [pc, #28]	@ (8000fdc <MX_TIM8_Init+0x160>)
 8000fbe:	f005 fae1 	bl	8006584 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM8_Init+0x150>
  {
    Error_Handler();
 8000fc8:	f000 f994 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000fcc:	4803      	ldr	r0, [pc, #12]	@ (8000fdc <MX_TIM8_Init+0x160>)
 8000fce:	f000 fca7 	bl	8001920 <HAL_TIM_MspPostInit>

}
 8000fd2:	bf00      	nop
 8000fd4:	3758      	adds	r7, #88	@ 0x58
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000388 	.word	0x20000388
 8000fe0:	40013400 	.word	0x40013400

08000fe4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001002:	4b28      	ldr	r3, [pc, #160]	@ (80010a4 <MX_TIM15_Init+0xc0>)
 8001004:	4a28      	ldr	r2, [pc, #160]	@ (80010a8 <MX_TIM15_Init+0xc4>)
 8001006:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80;
 8001008:	4b26      	ldr	r3, [pc, #152]	@ (80010a4 <MX_TIM15_Init+0xc0>)
 800100a:	2250      	movs	r2, #80	@ 0x50
 800100c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100e:	4b25      	ldr	r3, [pc, #148]	@ (80010a4 <MX_TIM15_Init+0xc0>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001014:	4b23      	ldr	r3, [pc, #140]	@ (80010a4 <MX_TIM15_Init+0xc0>)
 8001016:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800101a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101c:	4b21      	ldr	r3, [pc, #132]	@ (80010a4 <MX_TIM15_Init+0xc0>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001022:	4b20      	ldr	r3, [pc, #128]	@ (80010a4 <MX_TIM15_Init+0xc0>)
 8001024:	2200      	movs	r2, #0
 8001026:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001028:	4b1e      	ldr	r3, [pc, #120]	@ (80010a4 <MX_TIM15_Init+0xc0>)
 800102a:	2280      	movs	r2, #128	@ 0x80
 800102c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800102e:	481d      	ldr	r0, [pc, #116]	@ (80010a4 <MX_TIM15_Init+0xc0>)
 8001030:	f004 f8f7 	bl	8005222 <HAL_TIM_IC_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800103a:	f000 f95b 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4619      	mov	r1, r3
 800104c:	4815      	ldr	r0, [pc, #84]	@ (80010a4 <MX_TIM15_Init+0xc0>)
 800104e:	f005 fa11 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001058:	f000 f94c 	bl	80012f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800105c:	230a      	movs	r3, #10
 800105e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001060:	2301      	movs	r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2200      	movs	r2, #0
 8001070:	4619      	mov	r1, r3
 8001072:	480c      	ldr	r0, [pc, #48]	@ (80010a4 <MX_TIM15_Init+0xc0>)
 8001074:	f004 fb4e 	bl	8005714 <HAL_TIM_IC_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 800107e:	f000 f939 	bl	80012f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2204      	movs	r2, #4
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_TIM15_Init+0xc0>)
 800108e:	f004 fb41 	bl	8005714 <HAL_TIM_IC_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM15_Init+0xb8>
  {
    Error_Handler();
 8001098:	f000 f92c 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	3720      	adds	r7, #32
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200003d4 	.word	0x200003d4
 80010a8:	40014000 	.word	0x40014000

080010ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010b0:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <MX_USART3_UART_Init+0x58>)
 80010b2:	4a15      	ldr	r2, [pc, #84]	@ (8001108 <MX_USART3_UART_Init+0x5c>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010b6:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <MX_USART3_UART_Init+0x58>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_USART3_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <MX_USART3_UART_Init+0x58>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MX_USART3_UART_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_USART3_UART_Init+0x58>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <MX_USART3_UART_Init+0x58>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_USART3_UART_Init+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <MX_USART3_UART_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_USART3_UART_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	@ (8001104 <MX_USART3_UART_Init+0x58>)
 80010f0:	f005 fae4 	bl	80066bc <HAL_UART_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010fa:	f000 f8fb 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000420 	.word	0x20000420
 8001108:	40004800 	.word	0x40004800

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	@ 0x28
 8001110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001122:	4b39      	ldr	r3, [pc, #228]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	4a38      	ldr	r2, [pc, #224]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001128:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800112c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112e:	4b36      	ldr	r3, [pc, #216]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	4b33      	ldr	r3, [pc, #204]	@ (8001208 <MX_GPIO_Init+0xfc>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113e:	4a32      	ldr	r2, [pc, #200]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001146:	4b30      	ldr	r3, [pc, #192]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b2d      	ldr	r3, [pc, #180]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001156:	4a2c      	ldr	r2, [pc, #176]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115e:	4b2a      	ldr	r3, [pc, #168]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	4b27      	ldr	r3, [pc, #156]	@ (8001208 <MX_GPIO_Init+0xfc>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	4a26      	ldr	r2, [pc, #152]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001176:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <MX_GPIO_Init+0xfc>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	2108      	movs	r1, #8
 8001186:	4821      	ldr	r0, [pc, #132]	@ (800120c <MX_GPIO_Init+0x100>)
 8001188:	f002 fab6 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8001192:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001196:	f002 faaf 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f243 0106 	movw	r1, #12294	@ 0x3006
 80011a0:	481b      	ldr	r0, [pc, #108]	@ (8001210 <MX_GPIO_Init+0x104>)
 80011a2:	f002 faa9 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011a6:	2308      	movs	r3, #8
 80011a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4813      	ldr	r0, [pc, #76]	@ (800120c <MX_GPIO_Init+0x100>)
 80011be:	f002 f8f1 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 80011c2:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011de:	f002 f8e1 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13;
 80011e2:	f243 0306 	movw	r3, #12294	@ 0x3006
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4805      	ldr	r0, [pc, #20]	@ (8001210 <MX_GPIO_Init+0x104>)
 80011fc:	f002 f8d2 	bl	80033a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	@ 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40021000 	.word	0x40021000
 800120c:	48000800 	.word	0x48000800
 8001210:	48000400 	.word	0x48000400

08001214 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) //Function from https://controllerstech.com/input-capture-in-stm32/
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	7f1b      	ldrb	r3, [r3, #28]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d154      	bne.n	80012ce <HAL_TIM_IC_CaptureCallback+0xba>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001224:	4b2c      	ldr	r3, [pc, #176]	@ (80012d8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d10a      	bne.n	8001242 <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800122c:	2100      	movs	r1, #0
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f004 fc20 	bl	8005a74 <HAL_TIM_ReadCapturedValue>
 8001234:	4603      	mov	r3, r0
 8001236:	4a29      	ldr	r2, [pc, #164]	@ (80012dc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001238:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 800123a:	4b27      	ldr	r3, [pc, #156]	@ (80012d8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800123c:	2201      	movs	r2, #1
 800123e:	601a      	str	r2, [r3, #0]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
 8001240:	e045      	b.n	80012ce <HAL_TIM_IC_CaptureCallback+0xba>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001242:	2100      	movs	r1, #0
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f004 fc15 	bl	8005a74 <HAL_TIM_ReadCapturedValue>
 800124a:	4603      	mov	r3, r0
 800124c:	4a24      	ldr	r2, [pc, #144]	@ (80012e0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800124e:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 8001250:	4b23      	ldr	r3, [pc, #140]	@ (80012e0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	d907      	bls.n	800126c <HAL_TIM_IC_CaptureCallback+0x58>
				Difference = IC_Val2-IC_Val1;
 800125c:	4b20      	ldr	r3, [pc, #128]	@ (80012e0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	4a1f      	ldr	r2, [pc, #124]	@ (80012e4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e00f      	b.n	800128c <HAL_TIM_IC_CaptureCallback+0x78>
			else if (IC_Val1 > IC_Val2)
 800126c:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <HAL_TIM_IC_CaptureCallback+0xc8>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d909      	bls.n	800128c <HAL_TIM_IC_CaptureCallback+0x78>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001278:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b17      	ldr	r3, [pc, #92]	@ (80012dc <HAL_TIM_IC_CaptureCallback+0xc8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001286:	33ff      	adds	r3, #255	@ 0xff
 8001288:	4a16      	ldr	r2, [pc, #88]	@ (80012e4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800128a:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 800128c:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800128e:	60fb      	str	r3, [r7, #12]
			float mFactor = 1000000/refClock;
 8001290:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80012ec <HAL_TIM_IC_CaptureCallback+0xd8>
 8001294:	ed97 7a03 	vldr	s14, [r7, #12]
 8001298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800129c:	edc7 7a02 	vstr	s15, [r7, #8]
			usWidth = Difference*mFactor;
 80012a0:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80012b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b8:	ee17 2a90 	vmov	r2, s15
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80012be:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2200      	movs	r2, #0
 80012c6:	625a      	str	r2, [r3, #36]	@ 0x24
			Is_First_Captured = 0; // set it back to false
 80012c8:	4b03      	ldr	r3, [pc, #12]	@ (80012d8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200004b8 	.word	0x200004b8
 80012dc:	200004ac 	.word	0x200004ac
 80012e0:	200004b0 	.word	0x200004b0
 80012e4:	200004b4 	.word	0x200004b4
 80012e8:	49742400 	.word	0x49742400
 80012ec:	49742400 	.word	0x49742400
 80012f0:	200004a8 	.word	0x200004a8

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <HAL_MspInit+0x44>)
 800130c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800130e:	4a0e      	ldr	r2, [pc, #56]	@ (8001348 <HAL_MspInit+0x44>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6613      	str	r3, [r2, #96]	@ 0x60
 8001316:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <HAL_MspInit+0x44>)
 8001318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <HAL_MspInit+0x44>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001326:	4a08      	ldr	r2, [pc, #32]	@ (8001348 <HAL_MspInit+0x44>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800132c:	6593      	str	r3, [r2, #88]	@ 0x58
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <HAL_MspInit+0x44>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000

0800134c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	@ 0x38
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a58      	ldr	r2, [pc, #352]	@ (80014cc <HAL_ADC_MspInit+0x180>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d12d      	bne.n	80013ca <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800136e:	4b58      	ldr	r3, [pc, #352]	@ (80014d0 <HAL_ADC_MspInit+0x184>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	3301      	adds	r3, #1
 8001374:	4a56      	ldr	r2, [pc, #344]	@ (80014d0 <HAL_ADC_MspInit+0x184>)
 8001376:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001378:	4b55      	ldr	r3, [pc, #340]	@ (80014d0 <HAL_ADC_MspInit+0x184>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d10b      	bne.n	8001398 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001380:	4b54      	ldr	r3, [pc, #336]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001384:	4a53      	ldr	r2, [pc, #332]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 8001386:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800138a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138c:	4b51      	ldr	r3, [pc, #324]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001394:	623b      	str	r3, [r7, #32]
 8001396:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001398:	4b4e      	ldr	r3, [pc, #312]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139c:	4a4d      	ldr	r2, [pc, #308]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a4:	4b4b      	ldr	r3, [pc, #300]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013b0:	2303      	movs	r3, #3
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b4:	2303      	movs	r3, #3
 80013b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c0:	4619      	mov	r1, r3
 80013c2:	4845      	ldr	r0, [pc, #276]	@ (80014d8 <HAL_ADC_MspInit+0x18c>)
 80013c4:	f001 ffee 	bl	80033a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80013c8:	e07c      	b.n	80014c4 <HAL_ADC_MspInit+0x178>
  else if(hadc->Instance==ADC2)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a43      	ldr	r2, [pc, #268]	@ (80014dc <HAL_ADC_MspInit+0x190>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d145      	bne.n	8001460 <HAL_ADC_MspInit+0x114>
    HAL_RCC_ADC_CLK_ENABLED++;
 80013d4:	4b3e      	ldr	r3, [pc, #248]	@ (80014d0 <HAL_ADC_MspInit+0x184>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	4a3d      	ldr	r2, [pc, #244]	@ (80014d0 <HAL_ADC_MspInit+0x184>)
 80013dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80013de:	4b3c      	ldr	r3, [pc, #240]	@ (80014d0 <HAL_ADC_MspInit+0x184>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d10b      	bne.n	80013fe <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80013e6:	4b3b      	ldr	r3, [pc, #236]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	4a3a      	ldr	r2, [pc, #232]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 80013ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f2:	4b38      	ldr	r3, [pc, #224]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4b35      	ldr	r3, [pc, #212]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	4a34      	ldr	r2, [pc, #208]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140a:	4b32      	ldr	r3, [pc, #200]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001416:	4b2f      	ldr	r3, [pc, #188]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	4a2e      	ldr	r2, [pc, #184]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001422:	4b2c      	ldr	r3, [pc, #176]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800142e:	2306      	movs	r3, #6
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001432:	2303      	movs	r3, #3
 8001434:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800143e:	4619      	mov	r1, r3
 8001440:	4825      	ldr	r0, [pc, #148]	@ (80014d8 <HAL_ADC_MspInit+0x18c>)
 8001442:	f001 ffaf 	bl	80033a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001446:	2301      	movs	r3, #1
 8001448:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800144a:	230b      	movs	r3, #11
 800144c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001452:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001456:	4619      	mov	r1, r3
 8001458:	4821      	ldr	r0, [pc, #132]	@ (80014e0 <HAL_ADC_MspInit+0x194>)
 800145a:	f001 ffa3 	bl	80033a4 <HAL_GPIO_Init>
}
 800145e:	e031      	b.n	80014c4 <HAL_ADC_MspInit+0x178>
  else if(hadc->Instance==ADC3)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a1f      	ldr	r2, [pc, #124]	@ (80014e4 <HAL_ADC_MspInit+0x198>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d12c      	bne.n	80014c4 <HAL_ADC_MspInit+0x178>
    HAL_RCC_ADC_CLK_ENABLED++;
 800146a:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <HAL_ADC_MspInit+0x184>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	4a17      	ldr	r2, [pc, #92]	@ (80014d0 <HAL_ADC_MspInit+0x184>)
 8001472:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001474:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <HAL_ADC_MspInit+0x184>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d10b      	bne.n	8001494 <HAL_ADC_MspInit+0x148>
      __HAL_RCC_ADC_CLK_ENABLE();
 800147c:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001480:	4a14      	ldr	r2, [pc, #80]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 8001482:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001486:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001488:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001494:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001498:	4a0e      	ldr	r2, [pc, #56]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a0:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <HAL_ADC_MspInit+0x188>)
 80014a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014ac:	2304      	movs	r3, #4
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b0:	2303      	movs	r3, #3
 80014b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014bc:	4619      	mov	r1, r3
 80014be:	4806      	ldr	r0, [pc, #24]	@ (80014d8 <HAL_ADC_MspInit+0x18c>)
 80014c0:	f001 ff70 	bl	80033a4 <HAL_GPIO_Init>
}
 80014c4:	bf00      	nop
 80014c6:	3738      	adds	r7, #56	@ 0x38
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	50040000 	.word	0x50040000
 80014d0:	200004bc 	.word	0x200004bc
 80014d4:	40021000 	.word	0x40021000
 80014d8:	48000800 	.word	0x48000800
 80014dc:	50040100 	.word	0x50040100
 80014e0:	48000400 	.word	0x48000400
 80014e4:	50040200 	.word	0x50040200

080014e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b0aa      	sub	sp, #168	@ 0xa8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	2284      	movs	r2, #132	@ 0x84
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f005 fdf2 	bl	80070f2 <memset>
  if(hi2c->Instance==I2C2)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a21      	ldr	r2, [pc, #132]	@ (8001598 <HAL_I2C_MspInit+0xb0>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d13b      	bne.n	8001590 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001518:	2380      	movs	r3, #128	@ 0x80
 800151a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800151c:	2300      	movs	r3, #0
 800151e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	4618      	mov	r0, r3
 8001526:	f003 f895 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001530:	f7ff fee0 	bl	80012f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001534:	4b19      	ldr	r3, [pc, #100]	@ (800159c <HAL_I2C_MspInit+0xb4>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001538:	4a18      	ldr	r2, [pc, #96]	@ (800159c <HAL_I2C_MspInit+0xb4>)
 800153a:	f043 0302 	orr.w	r3, r3, #2
 800153e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001540:	4b16      	ldr	r3, [pc, #88]	@ (800159c <HAL_I2C_MspInit+0xb4>)
 8001542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800154c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001550:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001554:	2312      	movs	r3, #18
 8001556:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001566:	2304      	movs	r3, #4
 8001568:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001570:	4619      	mov	r1, r3
 8001572:	480b      	ldr	r0, [pc, #44]	@ (80015a0 <HAL_I2C_MspInit+0xb8>)
 8001574:	f001 ff16 	bl	80033a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001578:	4b08      	ldr	r3, [pc, #32]	@ (800159c <HAL_I2C_MspInit+0xb4>)
 800157a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157c:	4a07      	ldr	r2, [pc, #28]	@ (800159c <HAL_I2C_MspInit+0xb4>)
 800157e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001582:	6593      	str	r3, [r2, #88]	@ 0x58
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <HAL_I2C_MspInit+0xb4>)
 8001586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001588:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001590:	bf00      	nop
 8001592:	37a8      	adds	r7, #168	@ 0xa8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40005800 	.word	0x40005800
 800159c:	40021000 	.word	0x40021000
 80015a0:	48000400 	.word	0x48000400

080015a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	@ 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a26      	ldr	r2, [pc, #152]	@ (800165c <HAL_SPI_MspInit+0xb8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d145      	bne.n	8001652 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015c6:	4b26      	ldr	r3, [pc, #152]	@ (8001660 <HAL_SPI_MspInit+0xbc>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ca:	4a25      	ldr	r2, [pc, #148]	@ (8001660 <HAL_SPI_MspInit+0xbc>)
 80015cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015d2:	4b23      	ldr	r3, [pc, #140]	@ (8001660 <HAL_SPI_MspInit+0xbc>)
 80015d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	4b20      	ldr	r3, [pc, #128]	@ (8001660 <HAL_SPI_MspInit+0xbc>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001660 <HAL_SPI_MspInit+0xbc>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001660 <HAL_SPI_MspInit+0xbc>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <HAL_SPI_MspInit+0xbc>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	4a19      	ldr	r2, [pc, #100]	@ (8001660 <HAL_SPI_MspInit+0xbc>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001602:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <HAL_SPI_MspInit+0xbc>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800160e:	2310      	movs	r3, #16
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800161e:	2306      	movs	r3, #6
 8001620:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800162c:	f001 feba 	bl	80033a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001630:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001642:	2306      	movs	r3, #6
 8001644:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	@ (8001664 <HAL_SPI_MspInit+0xc0>)
 800164e:	f001 fea9 	bl	80033a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	@ 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40003c00 	.word	0x40003c00
 8001660:	40021000 	.word	0x40021000
 8001664:	48000800 	.word	0x48000800

08001668 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a16      	ldr	r2, [pc, #88]	@ (80016d0 <HAL_TIM_PWM_MspInit+0x68>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d114      	bne.n	80016a4 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800167a:	4b16      	ldr	r3, [pc, #88]	@ (80016d4 <HAL_TIM_PWM_MspInit+0x6c>)
 800167c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167e:	4a15      	ldr	r2, [pc, #84]	@ (80016d4 <HAL_TIM_PWM_MspInit+0x6c>)
 8001680:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001684:	6613      	str	r3, [r2, #96]	@ 0x60
 8001686:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <HAL_TIM_PWM_MspInit+0x6c>)
 8001688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800168a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	2018      	movs	r0, #24
 8001698:	f001 fe4d 	bl	8003336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800169c:	2018      	movs	r0, #24
 800169e:	f001 fe66 	bl	800336e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80016a2:	e010      	b.n	80016c6 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM8)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0b      	ldr	r2, [pc, #44]	@ (80016d8 <HAL_TIM_PWM_MspInit+0x70>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d10b      	bne.n	80016c6 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80016ae:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <HAL_TIM_PWM_MspInit+0x6c>)
 80016b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b2:	4a08      	ldr	r2, [pc, #32]	@ (80016d4 <HAL_TIM_PWM_MspInit+0x6c>)
 80016b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ba:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <HAL_TIM_PWM_MspInit+0x6c>)
 80016bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40012c00 	.word	0x40012c00
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40013400 	.word	0x40013400

080016dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08e      	sub	sp, #56	@ 0x38
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016fc:	d129      	bne.n	8001752 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016fe:	4b45      	ldr	r3, [pc, #276]	@ (8001814 <HAL_TIM_Encoder_MspInit+0x138>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001702:	4a44      	ldr	r2, [pc, #272]	@ (8001814 <HAL_TIM_Encoder_MspInit+0x138>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6593      	str	r3, [r2, #88]	@ 0x58
 800170a:	4b42      	ldr	r3, [pc, #264]	@ (8001814 <HAL_TIM_Encoder_MspInit+0x138>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	623b      	str	r3, [r7, #32]
 8001714:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	4b3f      	ldr	r3, [pc, #252]	@ (8001814 <HAL_TIM_Encoder_MspInit+0x138>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171a:	4a3e      	ldr	r2, [pc, #248]	@ (8001814 <HAL_TIM_Encoder_MspInit+0x138>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001722:	4b3c      	ldr	r3, [pc, #240]	@ (8001814 <HAL_TIM_Encoder_MspInit+0x138>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	61fb      	str	r3, [r7, #28]
 800172c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800172e:	2303      	movs	r3, #3
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800173e:	2301      	movs	r3, #1
 8001740:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001746:	4619      	mov	r1, r3
 8001748:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800174c:	f001 fe2a 	bl	80033a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001750:	e05b      	b.n	800180a <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a30      	ldr	r2, [pc, #192]	@ (8001818 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d129      	bne.n	80017b0 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800175c:	4b2d      	ldr	r3, [pc, #180]	@ (8001814 <HAL_TIM_Encoder_MspInit+0x138>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001760:	4a2c      	ldr	r2, [pc, #176]	@ (8001814 <HAL_TIM_Encoder_MspInit+0x138>)
 8001762:	f043 0302 	orr.w	r3, r3, #2
 8001766:	6593      	str	r3, [r2, #88]	@ 0x58
 8001768:	4b2a      	ldr	r3, [pc, #168]	@ (8001814 <HAL_TIM_Encoder_MspInit+0x138>)
 800176a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001774:	4b27      	ldr	r3, [pc, #156]	@ (8001814 <HAL_TIM_Encoder_MspInit+0x138>)
 8001776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001778:	4a26      	ldr	r2, [pc, #152]	@ (8001814 <HAL_TIM_Encoder_MspInit+0x138>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001780:	4b24      	ldr	r3, [pc, #144]	@ (8001814 <HAL_TIM_Encoder_MspInit+0x138>)
 8001782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800178c:	23c0      	movs	r3, #192	@ 0xc0
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800179c:	2302      	movs	r3, #2
 800179e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a4:	4619      	mov	r1, r3
 80017a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017aa:	f001 fdfb 	bl	80033a4 <HAL_GPIO_Init>
}
 80017ae:	e02c      	b.n	800180a <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a19      	ldr	r2, [pc, #100]	@ (800181c <HAL_TIM_Encoder_MspInit+0x140>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d127      	bne.n	800180a <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017ba:	4b16      	ldr	r3, [pc, #88]	@ (8001814 <HAL_TIM_Encoder_MspInit+0x138>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017be:	4a15      	ldr	r2, [pc, #84]	@ (8001814 <HAL_TIM_Encoder_MspInit+0x138>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c6:	4b13      	ldr	r3, [pc, #76]	@ (8001814 <HAL_TIM_Encoder_MspInit+0x138>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <HAL_TIM_Encoder_MspInit+0x138>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001814 <HAL_TIM_Encoder_MspInit+0x138>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017de:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <HAL_TIM_Encoder_MspInit+0x138>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017ea:	23c0      	movs	r3, #192	@ 0xc0
 80017ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017fa:	2302      	movs	r3, #2
 80017fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001802:	4619      	mov	r1, r3
 8001804:	4806      	ldr	r0, [pc, #24]	@ (8001820 <HAL_TIM_Encoder_MspInit+0x144>)
 8001806:	f001 fdcd 	bl	80033a4 <HAL_GPIO_Init>
}
 800180a:	bf00      	nop
 800180c:	3738      	adds	r7, #56	@ 0x38
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	40000400 	.word	0x40000400
 800181c:	40000800 	.word	0x40000800
 8001820:	48000400 	.word	0x48000400

08001824 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	@ 0x30
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a33      	ldr	r2, [pc, #204]	@ (8001910 <HAL_TIM_IC_MspInit+0xec>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d129      	bne.n	800189a <HAL_TIM_IC_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001846:	4b33      	ldr	r3, [pc, #204]	@ (8001914 <HAL_TIM_IC_MspInit+0xf0>)
 8001848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184a:	4a32      	ldr	r2, [pc, #200]	@ (8001914 <HAL_TIM_IC_MspInit+0xf0>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	6593      	str	r3, [r2, #88]	@ 0x58
 8001852:	4b30      	ldr	r3, [pc, #192]	@ (8001914 <HAL_TIM_IC_MspInit+0xf0>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	4b2d      	ldr	r3, [pc, #180]	@ (8001914 <HAL_TIM_IC_MspInit+0xf0>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001862:	4a2c      	ldr	r2, [pc, #176]	@ (8001914 <HAL_TIM_IC_MspInit+0xf0>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800186a:	4b2a      	ldr	r3, [pc, #168]	@ (8001914 <HAL_TIM_IC_MspInit+0xf0>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001876:	230c      	movs	r3, #12
 8001878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001886:	2302      	movs	r3, #2
 8001888:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	4619      	mov	r1, r3
 8001890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001894:	f001 fd86 	bl	80033a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001898:	e035      	b.n	8001906 <HAL_TIM_IC_MspInit+0xe2>
  else if(htim_ic->Instance==TIM15)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a1e      	ldr	r2, [pc, #120]	@ (8001918 <HAL_TIM_IC_MspInit+0xf4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d130      	bne.n	8001906 <HAL_TIM_IC_MspInit+0xe2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80018a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001914 <HAL_TIM_IC_MspInit+0xf0>)
 80018a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001914 <HAL_TIM_IC_MspInit+0xf0>)
 80018aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80018b0:	4b18      	ldr	r3, [pc, #96]	@ (8001914 <HAL_TIM_IC_MspInit+0xf0>)
 80018b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018bc:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <HAL_TIM_IC_MspInit+0xf0>)
 80018be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c0:	4a14      	ldr	r2, [pc, #80]	@ (8001914 <HAL_TIM_IC_MspInit+0xf0>)
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c8:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <HAL_TIM_IC_MspInit+0xf0>)
 80018ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80018d4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80018d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80018e6:	230e      	movs	r3, #14
 80018e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	4619      	mov	r1, r3
 80018f0:	480a      	ldr	r0, [pc, #40]	@ (800191c <HAL_TIM_IC_MspInit+0xf8>)
 80018f2:	f001 fd57 	bl	80033a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2018      	movs	r0, #24
 80018fc:	f001 fd1b 	bl	8003336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001900:	2018      	movs	r0, #24
 8001902:	f001 fd34 	bl	800336e <HAL_NVIC_EnableIRQ>
}
 8001906:	bf00      	nop
 8001908:	3730      	adds	r7, #48	@ 0x30
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40000c00 	.word	0x40000c00
 8001914:	40021000 	.word	0x40021000
 8001918:	40014000 	.word	0x40014000
 800191c:	48000400 	.word	0x48000400

08001920 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	@ 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a23      	ldr	r2, [pc, #140]	@ (80019cc <HAL_TIM_MspPostInit+0xac>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d11e      	bne.n	8001980 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	4b23      	ldr	r3, [pc, #140]	@ (80019d0 <HAL_TIM_MspPostInit+0xb0>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001946:	4a22      	ldr	r2, [pc, #136]	@ (80019d0 <HAL_TIM_MspPostInit+0xb0>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194e:	4b20      	ldr	r3, [pc, #128]	@ (80019d0 <HAL_TIM_MspPostInit+0xb0>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800195a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800195e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800196c:	2301      	movs	r3, #1
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4619      	mov	r1, r3
 8001976:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800197a:	f001 fd13 	bl	80033a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800197e:	e021      	b.n	80019c4 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM8)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a13      	ldr	r2, [pc, #76]	@ (80019d4 <HAL_TIM_MspPostInit+0xb4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d11c      	bne.n	80019c4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800198a:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <HAL_TIM_MspPostInit+0xb0>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198e:	4a10      	ldr	r2, [pc, #64]	@ (80019d0 <HAL_TIM_MspPostInit+0xb0>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001996:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <HAL_TIM_MspPostInit+0xb0>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80019a2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80019a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80019b4:	2303      	movs	r3, #3
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	4806      	ldr	r0, [pc, #24]	@ (80019d8 <HAL_TIM_MspPostInit+0xb8>)
 80019c0:	f001 fcf0 	bl	80033a4 <HAL_GPIO_Init>
}
 80019c4:	bf00      	nop
 80019c6:	3728      	adds	r7, #40	@ 0x28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40012c00 	.word	0x40012c00
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40013400 	.word	0x40013400
 80019d8:	48000800 	.word	0x48000800

080019dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b0aa      	sub	sp, #168	@ 0xa8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	2284      	movs	r2, #132	@ 0x84
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f005 fb78 	bl	80070f2 <memset>
  if(huart->Instance==USART3)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a21      	ldr	r2, [pc, #132]	@ (8001a8c <HAL_UART_MspInit+0xb0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d13a      	bne.n	8001a82 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f002 fe1b 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a24:	f7ff fc66 	bl	80012f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a28:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <HAL_UART_MspInit+0xb4>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2c:	4a18      	ldr	r2, [pc, #96]	@ (8001a90 <HAL_UART_MspInit+0xb4>)
 8001a2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a32:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a34:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <HAL_UART_MspInit+0xb4>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a40:	4b13      	ldr	r3, [pc, #76]	@ (8001a90 <HAL_UART_MspInit+0xb4>)
 8001a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a44:	4a12      	ldr	r2, [pc, #72]	@ (8001a90 <HAL_UART_MspInit+0xb4>)
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a4c:	4b10      	ldr	r3, [pc, #64]	@ (8001a90 <HAL_UART_MspInit+0xb4>)
 8001a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a58:	2330      	movs	r3, #48	@ 0x30
 8001a5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a70:	2307      	movs	r3, #7
 8001a72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a76:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	@ (8001a94 <HAL_UART_MspInit+0xb8>)
 8001a7e:	f001 fc91 	bl	80033a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a82:	bf00      	nop
 8001a84:	37a8      	adds	r7, #168	@ 0xa8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40004800 	.word	0x40004800
 8001a90:	40021000 	.word	0x40021000
 8001a94:	48000800 	.word	0x48000800

08001a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <NMI_Handler+0x4>

08001aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <HardFault_Handler+0x4>

08001aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <MemManage_Handler+0x4>

08001ab0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <BusFault_Handler+0x4>

08001ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <UsageFault_Handler+0x4>

08001ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aee:	f000 f905 	bl	8001cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001afc:	4803      	ldr	r0, [pc, #12]	@ (8001b0c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001afe:	f003 fc8d 	bl	800541c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001b02:	4803      	ldr	r0, [pc, #12]	@ (8001b10 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001b04:	f003 fc8a 	bl	800541c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000020c 	.word	0x2000020c
 8001b10:	200003d4 	.word	0x200003d4

08001b14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b18:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <SystemInit+0x20>)
 8001b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b1e:	4a05      	ldr	r2, [pc, #20]	@ (8001b34 <SystemInit+0x20>)
 8001b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <task1_run>:


#include "task1.h"


void task1_run(uint8_t* State, ADC_HandleTypeDef Analog1,uint8_t* Kill) {
 8001b38:	b084      	sub	sp, #16
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	f107 001c 	add.w	r0, r7, #28
 8001b46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    // Task 1 implementation
	while(1){
		switch(*State){
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <task1_run+0x20>
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d00c      	beq.n	8001b70 <task1_run+0x38>
 8001b56:	e7f8      	b.n	8001b4a <task1_run+0x12>

		case 0:
			//State 0: INIT
			//Initialize ADC
			HAL_ADC_Start(&Analog1);
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fc21 	bl	80023a4 <HAL_ADC_Start>
			Analog1.Init.EOCSelection = DISABLE; //Apparently important
 8001b62:	2300      	movs	r3, #0
 8001b64:	633b      	str	r3, [r7, #48]	@ 0x30
			//Set Variables
			uint16_t Bat_Res = 0; //Battery reading, should not be below 3303
 8001b66:	2300      	movs	r3, #0
 8001b68:	81fb      	strh	r3, [r7, #14]
			*State = 1;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]

		case 1:
			//State 1: Check Battery
			//Read ADC, make sure good for conversion first
			if (HAL_ADC_PollForConversion(&Analog1, 10000) == HAL_OK)
 8001b70:	f107 031c 	add.w	r3, r7, #28
 8001b74:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 fccd 	bl	8002518 <HAL_ADC_PollForConversion>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d106      	bne.n	8001b92 <task1_run+0x5a>
			        {
			            Bat_Res = HAL_ADC_GetValue(&Analog1);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 fd9d 	bl	80026c8 <HAL_ADC_GetValue>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	81fb      	strh	r3, [r7, #14]
			        }
			if (Bat_Res <3303) {
 8001b92:	89fb      	ldrh	r3, [r7, #14]
 8001b94:	f640 42e6 	movw	r2, #3302	@ 0xce6
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d803      	bhi.n	8001ba4 <task1_run+0x6c>
				//If battery too low, turn everything off, they should be on by default
				*Kill = 1; //Kill if battery too low
 8001b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]

			}

			*State = 1; //Always return to state 1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
		switch(*State){
 8001baa:	e7ce      	b.n	8001b4a <task1_run+0x12>

08001bac <task2_run>:
#include "task2.h"
#include <stdlib.h>


void task2_run(uint8_t* State, uint8_t* BatKill,uint8_t* RadKill,uint16_t* usWidth)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
    // Task 2 implementation
	while(1){
		switch(*State){
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <task2_run+0x1c>
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d003      	beq.n	8001bce <task2_run+0x22>
 8001bc6:	e7f8      	b.n	8001bba <task2_run+0xe>

		case 0:
			//State 0: INIT

			*State = 1;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]

		case 1:
			//State 1: Check Battery
			//Check Radio First, then Battery
			if(abs(*usWidth-1500)<200) //If Pulse width within 200 microseconds, then kill
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8001bd6:	f113 0fc7 	cmn.w	r3, #199	@ 0xc7
 8001bda:	db09      	blt.n	8001bf0 <task2_run+0x44>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8001be4:	2bc7      	cmp	r3, #199	@ 0xc7
 8001be6:	dc03      	bgt.n	8001bf0 <task2_run+0x44>
			{
				*RadKill = 1;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
 8001bee:	e002      	b.n	8001bf6 <task2_run+0x4a>
				//Kill all motors and metal detector
			}
			else {
				*RadKill = 0;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]

			if (*BatKill == 1){
				//Kill Everything

			}
			*State = 1; //Always return to state 1
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	701a      	strb	r2, [r3, #0]
		switch(*State){
 8001bfc:	e7dd      	b.n	8001bba <task2_run+0xe>
	...

08001c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c04:	f7ff ff86 	bl	8001b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c08:	480c      	ldr	r0, [pc, #48]	@ (8001c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c0a:	490d      	ldr	r1, [pc, #52]	@ (8001c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c44 <LoopForever+0xe>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c10:	e002      	b.n	8001c18 <LoopCopyDataInit>

08001c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c16:	3304      	adds	r3, #4

08001c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c1c:	d3f9      	bcc.n	8001c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c20:	4c0a      	ldr	r4, [pc, #40]	@ (8001c4c <LoopForever+0x16>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c24:	e001      	b.n	8001c2a <LoopFillZerobss>

08001c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c28:	3204      	adds	r2, #4

08001c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c2c:	d3fb      	bcc.n	8001c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f005 fa69 	bl	8007104 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c32:	f7fe fc41 	bl	80004b8 <main>

08001c36 <LoopForever>:

LoopForever:
    b LoopForever
 8001c36:	e7fe      	b.n	8001c36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c44:	080071d8 	.word	0x080071d8
  ldr r2, =_sbss
 8001c48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c4c:	200004c4 	.word	0x200004c4

08001c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC1_2_IRQHandler>

08001c52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	f001 fb5f 	bl	8003320 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c62:	200f      	movs	r0, #15
 8001c64:	f000 f80e 	bl	8001c84 <HAL_InitTick>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	71fb      	strb	r3, [r7, #7]
 8001c72:	e001      	b.n	8001c78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c74:	f7ff fb46 	bl	8001304 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c78:	79fb      	ldrb	r3, [r7, #7]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c90:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <HAL_InitTick+0x6c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d023      	beq.n	8001ce0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c98:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <HAL_InitTick+0x70>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <HAL_InitTick+0x6c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 fb6b 	bl	800338a <HAL_SYSTICK_Config>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10f      	bne.n	8001cda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b0f      	cmp	r3, #15
 8001cbe:	d809      	bhi.n	8001cd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f001 fb35 	bl	8003336 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf8 <HAL_InitTick+0x74>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e007      	b.n	8001ce4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	e004      	b.n	8001ce4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
 8001cde:	e001      	b.n	8001ce4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000008 	.word	0x20000008
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000004 	.word	0x20000004

08001cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_IncTick+0x20>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_IncTick+0x24>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a04      	ldr	r2, [pc, #16]	@ (8001d20 <HAL_IncTick+0x24>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	200004c0 	.word	0x200004c0

08001d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b03      	ldr	r3, [pc, #12]	@ (8001d38 <HAL_GetTick+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	200004c0 	.word	0x200004c0

08001d3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	609a      	str	r2, [r3, #8]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	3360      	adds	r3, #96	@ 0x60
 8001db6:	461a      	mov	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <LL_ADC_SetOffset+0x44>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ddc:	bf00      	nop
 8001dde:	371c      	adds	r7, #28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	03fff000 	.word	0x03fff000

08001dec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3360      	adds	r3, #96	@ 0x60
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3360      	adds	r3, #96	@ 0x60
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e42:	bf00      	nop
 8001e44:	371c      	adds	r7, #28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	3330      	adds	r3, #48	@ 0x30
 8001e84:	461a      	mov	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	4413      	add	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	211f      	movs	r1, #31
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	0e9b      	lsrs	r3, r3, #26
 8001eac:	f003 011f 	and.w	r1, r3, #31
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ec0:	bf00      	nop
 8001ec2:	371c      	adds	r7, #28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3314      	adds	r3, #20
 8001edc:	461a      	mov	r2, r3
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	0e5b      	lsrs	r3, r3, #25
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	4413      	add	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	0d1b      	lsrs	r3, r3, #20
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	2107      	movs	r1, #7
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	401a      	ands	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	0d1b      	lsrs	r3, r3, #20
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	431a      	orrs	r2, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f16:	bf00      	nop
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	401a      	ands	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f003 0318 	and.w	r3, r3, #24
 8001f46:	4908      	ldr	r1, [pc, #32]	@ (8001f68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f48:	40d9      	lsrs	r1, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	400b      	ands	r3, r1
 8001f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f52:	431a      	orrs	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	0007ffff 	.word	0x0007ffff

08001f6c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 031f 	and.w	r3, r3, #31
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001fb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6093      	str	r3, [r2, #8]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fdc:	d101      	bne.n	8001fe2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002000:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002004:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002028:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800202c:	d101      	bne.n	8002032 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002050:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <LL_ADC_IsEnabled+0x18>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <LL_ADC_IsEnabled+0x1a>
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800209e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020a2:	f043 0204 	orr.w	r2, r3, #4
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d101      	bne.n	80020ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d101      	bne.n	80020f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b089      	sub	sp, #36	@ 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e130      	b.n	8002380 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff f90d 	bl	800134c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff3f 	bl	8001fc8 <LL_ADC_IsDeepPowerDownEnabled>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d004      	beq.n	800215a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff25 	bl	8001fa4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ff5a 	bl	8002018 <LL_ADC_IsInternalRegulatorEnabled>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d115      	bne.n	8002196 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ff3e 	bl	8001ff0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002174:	4b84      	ldr	r3, [pc, #528]	@ (8002388 <HAL_ADC_Init+0x284>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	099b      	lsrs	r3, r3, #6
 800217a:	4a84      	ldr	r2, [pc, #528]	@ (800238c <HAL_ADC_Init+0x288>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	099b      	lsrs	r3, r3, #6
 8002182:	3301      	adds	r3, #1
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002188:	e002      	b.n	8002190 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3b01      	subs	r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f9      	bne.n	800218a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ff3c 	bl	8002018 <LL_ADC_IsInternalRegulatorEnabled>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10d      	bne.n	80021c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021aa:	f043 0210 	orr.w	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b6:	f043 0201 	orr.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ff75 	bl	80020b6 <LL_ADC_REG_IsConversionOngoing>
 80021cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f040 80c9 	bne.w	800236e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f040 80c5 	bne.w	800236e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021ec:	f043 0202 	orr.w	r2, r3, #2
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff35 	bl	8002068 <LL_ADC_IsEnabled>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d115      	bne.n	8002230 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002204:	4862      	ldr	r0, [pc, #392]	@ (8002390 <HAL_ADC_Init+0x28c>)
 8002206:	f7ff ff2f 	bl	8002068 <LL_ADC_IsEnabled>
 800220a:	4604      	mov	r4, r0
 800220c:	4861      	ldr	r0, [pc, #388]	@ (8002394 <HAL_ADC_Init+0x290>)
 800220e:	f7ff ff2b 	bl	8002068 <LL_ADC_IsEnabled>
 8002212:	4603      	mov	r3, r0
 8002214:	431c      	orrs	r4, r3
 8002216:	4860      	ldr	r0, [pc, #384]	@ (8002398 <HAL_ADC_Init+0x294>)
 8002218:	f7ff ff26 	bl	8002068 <LL_ADC_IsEnabled>
 800221c:	4603      	mov	r3, r0
 800221e:	4323      	orrs	r3, r4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d105      	bne.n	8002230 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4619      	mov	r1, r3
 800222a:	485c      	ldr	r0, [pc, #368]	@ (800239c <HAL_ADC_Init+0x298>)
 800222c:	f7ff fd86 	bl	8001d3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7e5b      	ldrb	r3, [r3, #25]
 8002234:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800223a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002240:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002246:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800224e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3020 	ldrb.w	r3, [r3, #32]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d106      	bne.n	800226c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	3b01      	subs	r3, #1
 8002264:	045b      	lsls	r3, r3, #17
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002270:	2b00      	cmp	r3, #0
 8002272:	d009      	beq.n	8002288 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002278:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002280:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	4b44      	ldr	r3, [pc, #272]	@ (80023a0 <HAL_ADC_Init+0x29c>)
 8002290:	4013      	ands	r3, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	69b9      	ldr	r1, [r7, #24]
 8002298:	430b      	orrs	r3, r1
 800229a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff1b 	bl	80020dc <LL_ADC_INJ_IsConversionOngoing>
 80022a6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d13d      	bne.n	800232a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d13a      	bne.n	800232a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022b8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022c0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022d0:	f023 0302 	bic.w	r3, r3, #2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	69b9      	ldr	r1, [r7, #24]
 80022da:	430b      	orrs	r3, r1
 80022dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d118      	bne.n	800231a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80022f2:	f023 0304 	bic.w	r3, r3, #4
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022fe:	4311      	orrs	r1, r2
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002304:	4311      	orrs	r1, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800230a:	430a      	orrs	r2, r1
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	611a      	str	r2, [r3, #16]
 8002318:	e007      	b.n	800232a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0201 	bic.w	r2, r2, #1
 8002328:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d10c      	bne.n	800234c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002338:	f023 010f 	bic.w	r1, r3, #15
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	1e5a      	subs	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	631a      	str	r2, [r3, #48]	@ 0x30
 800234a:	e007      	b.n	800235c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 020f 	bic.w	r2, r2, #15
 800235a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002360:	f023 0303 	bic.w	r3, r3, #3
 8002364:	f043 0201 	orr.w	r2, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	655a      	str	r2, [r3, #84]	@ 0x54
 800236c:	e007      	b.n	800237e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002372:	f043 0210 	orr.w	r2, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800237e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3724      	adds	r7, #36	@ 0x24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd90      	pop	{r4, r7, pc}
 8002388:	20000000 	.word	0x20000000
 800238c:	053e2d63 	.word	0x053e2d63
 8002390:	50040000 	.word	0x50040000
 8002394:	50040100 	.word	0x50040100
 8002398:	50040200 	.word	0x50040200
 800239c:	50040300 	.word	0x50040300
 80023a0:	fff0c007 	.word	0xfff0c007

080023a4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023ac:	4857      	ldr	r0, [pc, #348]	@ (800250c <HAL_ADC_Start+0x168>)
 80023ae:	f7ff fddd 	bl	8001f6c <LL_ADC_GetMultimode>
 80023b2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fe7c 	bl	80020b6 <LL_ADC_REG_IsConversionOngoing>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f040 809c 	bne.w	80024fe <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_Start+0x30>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e097      	b.n	8002504 <HAL_ADC_Start+0x160>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 fd73 	bl	8002ec8 <ADC_Enable>
 80023e2:	4603      	mov	r3, r0
 80023e4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023e6:	7dfb      	ldrb	r3, [r7, #23]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f040 8083 	bne.w	80024f4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023f6:	f023 0301 	bic.w	r3, r3, #1
 80023fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a42      	ldr	r2, [pc, #264]	@ (8002510 <HAL_ADC_Start+0x16c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d002      	beq.n	8002412 <HAL_ADC_Start+0x6e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	e000      	b.n	8002414 <HAL_ADC_Start+0x70>
 8002412:	4b40      	ldr	r3, [pc, #256]	@ (8002514 <HAL_ADC_Start+0x170>)
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	4293      	cmp	r3, r2
 800241a:	d002      	beq.n	8002422 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d105      	bne.n	800242e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002426:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002432:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800243a:	d106      	bne.n	800244a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002440:	f023 0206 	bic.w	r2, r3, #6
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	659a      	str	r2, [r3, #88]	@ 0x58
 8002448:	e002      	b.n	8002450 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	221c      	movs	r2, #28
 8002456:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a2a      	ldr	r2, [pc, #168]	@ (8002510 <HAL_ADC_Start+0x16c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d002      	beq.n	8002470 <HAL_ADC_Start+0xcc>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	e000      	b.n	8002472 <HAL_ADC_Start+0xce>
 8002470:	4b28      	ldr	r3, [pc, #160]	@ (8002514 <HAL_ADC_Start+0x170>)
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	4293      	cmp	r3, r2
 8002478:	d008      	beq.n	800248c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2b05      	cmp	r3, #5
 8002484:	d002      	beq.n	800248c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b09      	cmp	r3, #9
 800248a:	d114      	bne.n	80024b6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024a2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fded 	bl	800208e <LL_ADC_REG_StartConversion>
 80024b4:	e025      	b.n	8002502 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a12      	ldr	r2, [pc, #72]	@ (8002510 <HAL_ADC_Start+0x16c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d002      	beq.n	80024d2 <HAL_ADC_Start+0x12e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	e000      	b.n	80024d4 <HAL_ADC_Start+0x130>
 80024d2:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <HAL_ADC_Start+0x170>)
 80024d4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00f      	beq.n	8002502 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024ea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	655a      	str	r2, [r3, #84]	@ 0x54
 80024f2:	e006      	b.n	8002502 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80024fc:	e001      	b.n	8002502 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024fe:	2302      	movs	r3, #2
 8002500:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002502:	7dfb      	ldrb	r3, [r7, #23]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	50040300 	.word	0x50040300
 8002510:	50040100 	.word	0x50040100
 8002514:	50040000 	.word	0x50040000

08002518 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002522:	4866      	ldr	r0, [pc, #408]	@ (80026bc <HAL_ADC_PollForConversion+0x1a4>)
 8002524:	f7ff fd22 	bl	8001f6c <LL_ADC_GetMultimode>
 8002528:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	2b08      	cmp	r3, #8
 8002530:	d102      	bne.n	8002538 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002532:	2308      	movs	r3, #8
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	e02a      	b.n	800258e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b05      	cmp	r3, #5
 8002542:	d002      	beq.n	800254a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b09      	cmp	r3, #9
 8002548:	d111      	bne.n	800256e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d007      	beq.n	8002568 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255c:	f043 0220 	orr.w	r2, r3, #32
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0a4      	b.n	80026b2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002568:	2304      	movs	r3, #4
 800256a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800256c:	e00f      	b.n	800258e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800256e:	4853      	ldr	r0, [pc, #332]	@ (80026bc <HAL_ADC_PollForConversion+0x1a4>)
 8002570:	f7ff fd0a 	bl	8001f88 <LL_ADC_GetMultiDMATransfer>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d007      	beq.n	800258a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257e:	f043 0220 	orr.w	r2, r3, #32
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e093      	b.n	80026b2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800258a:	2304      	movs	r3, #4
 800258c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800258e:	f7ff fbc9 	bl	8001d24 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002594:	e021      	b.n	80025da <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259c:	d01d      	beq.n	80025da <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800259e:	f7ff fbc1 	bl	8001d24 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d302      	bcc.n	80025b4 <HAL_ADC_PollForConversion+0x9c>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d112      	bne.n	80025da <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	4013      	ands	r3, r2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10b      	bne.n	80025da <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c6:	f043 0204 	orr.w	r2, r3, #4
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e06b      	b.n	80026b2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0d6      	beq.n	8002596 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fc28 	bl	8001e4e <LL_ADC_REG_IsTriggerSourceSWStart>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01c      	beq.n	800263e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	7e5b      	ldrb	r3, [r3, #25]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d118      	bne.n	800263e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b08      	cmp	r3, #8
 8002618:	d111      	bne.n	800263e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d105      	bne.n	800263e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002636:	f043 0201 	orr.w	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a1f      	ldr	r2, [pc, #124]	@ (80026c0 <HAL_ADC_PollForConversion+0x1a8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d002      	beq.n	800264e <HAL_ADC_PollForConversion+0x136>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	e000      	b.n	8002650 <HAL_ADC_PollForConversion+0x138>
 800264e:	4b1d      	ldr	r3, [pc, #116]	@ (80026c4 <HAL_ADC_PollForConversion+0x1ac>)
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	4293      	cmp	r3, r2
 8002656:	d008      	beq.n	800266a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2b05      	cmp	r3, #5
 8002662:	d002      	beq.n	800266a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2b09      	cmp	r3, #9
 8002668:	d104      	bne.n	8002674 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	e00c      	b.n	800268e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a11      	ldr	r2, [pc, #68]	@ (80026c0 <HAL_ADC_PollForConversion+0x1a8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d002      	beq.n	8002684 <HAL_ADC_PollForConversion+0x16c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	e000      	b.n	8002686 <HAL_ADC_PollForConversion+0x16e>
 8002684:	4b0f      	ldr	r3, [pc, #60]	@ (80026c4 <HAL_ADC_PollForConversion+0x1ac>)
 8002686:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	2b08      	cmp	r3, #8
 8002692:	d104      	bne.n	800269e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2208      	movs	r2, #8
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e008      	b.n	80026b0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d103      	bne.n	80026b0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	220c      	movs	r2, #12
 80026ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3720      	adds	r7, #32
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	50040300 	.word	0x50040300
 80026c0:	50040100 	.word	0x50040100
 80026c4:	50040000 	.word	0x50040000

080026c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b0b6      	sub	sp, #216	@ 0xd8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x22>
 8002702:	2302      	movs	r3, #2
 8002704:	e3c9      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x7b6>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fccf 	bl	80020b6 <LL_ADC_REG_IsConversionOngoing>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	f040 83aa 	bne.w	8002e74 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d824      	bhi.n	800277a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	3b02      	subs	r3, #2
 8002736:	2b03      	cmp	r3, #3
 8002738:	d81b      	bhi.n	8002772 <HAL_ADC_ConfigChannel+0x8e>
 800273a:	a201      	add	r2, pc, #4	@ (adr r2, 8002740 <HAL_ADC_ConfigChannel+0x5c>)
 800273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002740:	08002751 	.word	0x08002751
 8002744:	08002759 	.word	0x08002759
 8002748:	08002761 	.word	0x08002761
 800274c:	08002769 	.word	0x08002769
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002750:	230c      	movs	r3, #12
 8002752:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002756:	e010      	b.n	800277a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002758:	2312      	movs	r3, #18
 800275a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800275e:	e00c      	b.n	800277a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002760:	2318      	movs	r3, #24
 8002762:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002766:	e008      	b.n	800277a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002768:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800276c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002770:	e003      	b.n	800277a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002772:	2306      	movs	r3, #6
 8002774:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002778:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002788:	f7ff fb74 	bl	8001e74 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fc90 	bl	80020b6 <LL_ADC_REG_IsConversionOngoing>
 8002796:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fc9c 	bl	80020dc <LL_ADC_INJ_IsConversionOngoing>
 80027a4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f040 81a4 	bne.w	8002afa <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 819f 	bne.w	8002afa <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	6819      	ldr	r1, [r3, #0]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	461a      	mov	r2, r3
 80027ca:	f7ff fb7f 	bl	8001ecc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	08db      	lsrs	r3, r3, #3
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d00a      	beq.n	8002806 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	6919      	ldr	r1, [r3, #16]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002800:	f7ff fad0 	bl	8001da4 <LL_ADC_SetOffset>
 8002804:	e179      	b.n	8002afa <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2100      	movs	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff faed 	bl	8001dec <LL_ADC_GetOffsetChannel>
 8002812:	4603      	mov	r3, r0
 8002814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x14e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fae2 	bl	8001dec <LL_ADC_GetOffsetChannel>
 8002828:	4603      	mov	r3, r0
 800282a:	0e9b      	lsrs	r3, r3, #26
 800282c:	f003 021f 	and.w	r2, r3, #31
 8002830:	e01e      	b.n	8002870 <HAL_ADC_ConfigChannel+0x18c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fad7 	bl	8001dec <LL_ADC_GetOffsetChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002850:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002854:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002858:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002860:	2320      	movs	r3, #32
 8002862:	e004      	b.n	800286e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002864:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
 800286e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x1a4>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	0e9b      	lsrs	r3, r3, #26
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	e018      	b.n	80028ba <HAL_ADC_ConfigChannel+0x1d6>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800289c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80028a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80028ac:	2320      	movs	r3, #32
 80028ae:	e004      	b.n	80028ba <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80028b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028b4:	fab3 f383 	clz	r3, r3
 80028b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d106      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2200      	movs	r2, #0
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff faa6 	bl	8001e18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2101      	movs	r1, #1
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fa8a 	bl	8001dec <LL_ADC_GetOffsetChannel>
 80028d8:	4603      	mov	r3, r0
 80028da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10a      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x214>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2101      	movs	r1, #1
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fa7f 	bl	8001dec <LL_ADC_GetOffsetChannel>
 80028ee:	4603      	mov	r3, r0
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	f003 021f 	and.w	r2, r3, #31
 80028f6:	e01e      	b.n	8002936 <HAL_ADC_ConfigChannel+0x252>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2101      	movs	r1, #1
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fa74 	bl	8001dec <LL_ADC_GetOffsetChannel>
 8002904:	4603      	mov	r3, r0
 8002906:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002916:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800291a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800291e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002926:	2320      	movs	r3, #32
 8002928:	e004      	b.n	8002934 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800292a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293e:	2b00      	cmp	r3, #0
 8002940:	d105      	bne.n	800294e <HAL_ADC_ConfigChannel+0x26a>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	0e9b      	lsrs	r3, r3, #26
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	e018      	b.n	8002980 <HAL_ADC_ConfigChannel+0x29c>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002962:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002966:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800296a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002972:	2320      	movs	r3, #32
 8002974:	e004      	b.n	8002980 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002976:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002980:	429a      	cmp	r2, r3
 8002982:	d106      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2200      	movs	r2, #0
 800298a:	2101      	movs	r1, #1
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fa43 	bl	8001e18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2102      	movs	r1, #2
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fa27 	bl	8001dec <LL_ADC_GetOffsetChannel>
 800299e:	4603      	mov	r3, r0
 80029a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10a      	bne.n	80029be <HAL_ADC_ConfigChannel+0x2da>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2102      	movs	r1, #2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fa1c 	bl	8001dec <LL_ADC_GetOffsetChannel>
 80029b4:	4603      	mov	r3, r0
 80029b6:	0e9b      	lsrs	r3, r3, #26
 80029b8:	f003 021f 	and.w	r2, r3, #31
 80029bc:	e01e      	b.n	80029fc <HAL_ADC_ConfigChannel+0x318>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2102      	movs	r1, #2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fa11 	bl	8001dec <LL_ADC_GetOffsetChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80029dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80029e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80029ec:	2320      	movs	r3, #32
 80029ee:	e004      	b.n	80029fa <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80029f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d105      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x330>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	0e9b      	lsrs	r3, r3, #26
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	e014      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x35a>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002a22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002a28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002a30:	2320      	movs	r3, #32
 8002a32:	e004      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002a34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d106      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2200      	movs	r2, #0
 8002a48:	2102      	movs	r1, #2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f9e4 	bl	8001e18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2103      	movs	r1, #3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff f9c8 	bl	8001dec <LL_ADC_GetOffsetChannel>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10a      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x398>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2103      	movs	r1, #3
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff f9bd 	bl	8001dec <LL_ADC_GetOffsetChannel>
 8002a72:	4603      	mov	r3, r0
 8002a74:	0e9b      	lsrs	r3, r3, #26
 8002a76:	f003 021f 	and.w	r2, r3, #31
 8002a7a:	e017      	b.n	8002aac <HAL_ADC_ConfigChannel+0x3c8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2103      	movs	r1, #3
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff f9b2 	bl	8001dec <LL_ADC_GetOffsetChannel>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002a94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a96:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002a98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002a9e:	2320      	movs	r3, #32
 8002aa0:	e003      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002aa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aa4:	fab3 f383 	clz	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d105      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x3e0>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0e9b      	lsrs	r3, r3, #26
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	e011      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x404>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002acc:	fa93 f3a3 	rbit	r3, r3
 8002ad0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002ad2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002ad6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002adc:	2320      	movs	r3, #32
 8002ade:	e003      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002ae0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d106      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2200      	movs	r2, #0
 8002af2:	2103      	movs	r1, #3
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff f98f 	bl	8001e18 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fab2 	bl	8002068 <LL_ADC_IsEnabled>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f040 8140 	bne.w	8002d8c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	6819      	ldr	r1, [r3, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	f7ff fa03 	bl	8001f24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	4a8f      	ldr	r2, [pc, #572]	@ (8002d60 <HAL_ADC_ConfigChannel+0x67c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	f040 8131 	bne.w	8002d8c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10b      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x46e>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	0e9b      	lsrs	r3, r3, #26
 8002b40:	3301      	adds	r3, #1
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	2b09      	cmp	r3, #9
 8002b48:	bf94      	ite	ls
 8002b4a:	2301      	movls	r3, #1
 8002b4c:	2300      	movhi	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	e019      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x4a2>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b62:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002b64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	e003      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002b6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	2b09      	cmp	r3, #9
 8002b7e:	bf94      	ite	ls
 8002b80:	2301      	movls	r3, #1
 8002b82:	2300      	movhi	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d079      	beq.n	8002c7e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d107      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x4c2>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	0e9b      	lsrs	r3, r3, #26
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	069b      	lsls	r3, r3, #26
 8002ba0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ba4:	e015      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x4ee>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002bb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bb6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002bb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002bbe:	2320      	movs	r3, #32
 8002bc0:	e003      	b.n	8002bca <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002bc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bc4:	fab3 f383 	clz	r3, r3
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	069b      	lsls	r3, r3, #26
 8002bce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x50e>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	0e9b      	lsrs	r3, r3, #26
 8002be4:	3301      	adds	r3, #1
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	2101      	movs	r1, #1
 8002bec:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf0:	e017      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x53e>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c02:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002c04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002c0a:	2320      	movs	r3, #32
 8002c0c:	e003      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c10:	fab3 f383 	clz	r3, r3
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	3301      	adds	r3, #1
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c22:	ea42 0103 	orr.w	r1, r2, r3
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10a      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x564>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	0e9b      	lsrs	r3, r3, #26
 8002c38:	3301      	adds	r3, #1
 8002c3a:	f003 021f 	and.w	r2, r3, #31
 8002c3e:	4613      	mov	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4413      	add	r3, r2
 8002c44:	051b      	lsls	r3, r3, #20
 8002c46:	e018      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x596>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c58:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002c60:	2320      	movs	r3, #32
 8002c62:	e003      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f003 021f 	and.w	r2, r3, #31
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	e081      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d107      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x5b6>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	0e9b      	lsrs	r3, r3, #26
 8002c90:	3301      	adds	r3, #1
 8002c92:	069b      	lsls	r3, r3, #26
 8002c94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c98:	e015      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x5e2>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	e003      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb8:	fab3 f383 	clz	r3, r3
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	069b      	lsls	r3, r3, #26
 8002cc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x602>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	0e9b      	lsrs	r3, r3, #26
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	2101      	movs	r1, #1
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	e017      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x632>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	61bb      	str	r3, [r7, #24]
  return result;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002cfe:	2320      	movs	r3, #32
 8002d00:	e003      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	fab3 f383 	clz	r3, r3
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	2101      	movs	r1, #1
 8002d12:	fa01 f303 	lsl.w	r3, r1, r3
 8002d16:	ea42 0103 	orr.w	r1, r2, r3
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10d      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x65e>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	0e9b      	lsrs	r3, r3, #26
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	f003 021f 	and.w	r2, r3, #31
 8002d32:	4613      	mov	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4413      	add	r3, r2
 8002d38:	3b1e      	subs	r3, #30
 8002d3a:	051b      	lsls	r3, r3, #20
 8002d3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d40:	e01e      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x69c>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	60fb      	str	r3, [r7, #12]
  return result;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d104      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002d5a:	2320      	movs	r3, #32
 8002d5c:	e006      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x688>
 8002d5e:	bf00      	nop
 8002d60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	f003 021f 	and.w	r2, r3, #31
 8002d72:	4613      	mov	r3, r2
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	4413      	add	r3, r2
 8002d78:	3b1e      	subs	r3, #30
 8002d7a:	051b      	lsls	r3, r3, #20
 8002d7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d80:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d86:	4619      	mov	r1, r3
 8002d88:	f7ff f8a0 	bl	8001ecc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4b44      	ldr	r3, [pc, #272]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d07a      	beq.n	8002e8e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d98:	4843      	ldr	r0, [pc, #268]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d9a:	f7fe fff5 	bl	8001d88 <LL_ADC_GetCommonPathInternalCh>
 8002d9e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a41      	ldr	r2, [pc, #260]	@ (8002eac <HAL_ADC_ConfigChannel+0x7c8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d12c      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002dac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002db0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d126      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a3c      	ldr	r2, [pc, #240]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <HAL_ADC_ConfigChannel+0x6e8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a3b      	ldr	r2, [pc, #236]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d15d      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002dd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4834      	ldr	r0, [pc, #208]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002dd8:	f7fe ffc3 	bl	8001d62 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ddc:	4b36      	ldr	r3, [pc, #216]	@ (8002eb8 <HAL_ADC_ConfigChannel+0x7d4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	099b      	lsrs	r3, r3, #6
 8002de2:	4a36      	ldr	r2, [pc, #216]	@ (8002ebc <HAL_ADC_ConfigChannel+0x7d8>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	099b      	lsrs	r3, r3, #6
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002df6:	e002      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f9      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e04:	e040      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ec0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d118      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d112      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a23      	ldr	r2, [pc, #140]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d004      	beq.n	8002e30 <HAL_ADC_ConfigChannel+0x74c>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a22      	ldr	r2, [pc, #136]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d12d      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e38:	4619      	mov	r1, r3
 8002e3a:	481b      	ldr	r0, [pc, #108]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e3c:	f7fe ff91 	bl	8001d62 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e40:	e024      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d120      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d11a      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a14      	ldr	r2, [pc, #80]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d115      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	480e      	ldr	r0, [pc, #56]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e6e:	f7fe ff78 	bl	8001d62 <LL_ADC_SetCommonPathInternalCh>
 8002e72:	e00c      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e78:	f043 0220 	orr.w	r2, r3, #32
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002e86:	e002      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e88:	bf00      	nop
 8002e8a:	e000      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e96:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	37d8      	adds	r7, #216	@ 0xd8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	80080000 	.word	0x80080000
 8002ea8:	50040300 	.word	0x50040300
 8002eac:	c7520000 	.word	0xc7520000
 8002eb0:	50040000 	.word	0x50040000
 8002eb4:	50040200 	.word	0x50040200
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	053e2d63 	.word	0x053e2d63
 8002ec0:	cb840000 	.word	0xcb840000
 8002ec4:	80000001 	.word	0x80000001

08002ec8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff f8c5 	bl	8002068 <LL_ADC_IsEnabled>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d169      	bne.n	8002fb8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	4b36      	ldr	r3, [pc, #216]	@ (8002fc4 <ADC_Enable+0xfc>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00d      	beq.n	8002f0e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef6:	f043 0210 	orr.w	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f02:	f043 0201 	orr.w	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e055      	b.n	8002fba <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff f894 	bl	8002040 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f18:	482b      	ldr	r0, [pc, #172]	@ (8002fc8 <ADC_Enable+0x100>)
 8002f1a:	f7fe ff35 	bl	8001d88 <LL_ADC_GetCommonPathInternalCh>
 8002f1e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f28:	4b28      	ldr	r3, [pc, #160]	@ (8002fcc <ADC_Enable+0x104>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	4a28      	ldr	r2, [pc, #160]	@ (8002fd0 <ADC_Enable+0x108>)
 8002f30:	fba2 2303 	umull	r2, r3, r2, r3
 8002f34:	099b      	lsrs	r3, r3, #6
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f42:	e002      	b.n	8002f4a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f9      	bne.n	8002f44 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f50:	f7fe fee8 	bl	8001d24 <HAL_GetTick>
 8002f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f56:	e028      	b.n	8002faa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff f883 	bl	8002068 <LL_ADC_IsEnabled>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d104      	bne.n	8002f72 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff f867 	bl	8002040 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f72:	f7fe fed7 	bl	8001d24 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d914      	bls.n	8002faa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d00d      	beq.n	8002faa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f92:	f043 0210 	orr.w	r2, r3, #16
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9e:	f043 0201 	orr.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e007      	b.n	8002fba <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d1cf      	bne.n	8002f58 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	8000003f 	.word	0x8000003f
 8002fc8:	50040300 	.word	0x50040300
 8002fcc:	20000000 	.word	0x20000000
 8002fd0:	053e2d63 	.word	0x053e2d63

08002fd4 <LL_ADC_IsEnabled>:
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <LL_ADC_IsEnabled+0x18>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <LL_ADC_IsEnabled+0x1a>
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <LL_ADC_REG_IsConversionOngoing>:
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b04      	cmp	r3, #4
 800300c:	d101      	bne.n	8003012 <LL_ADC_REG_IsConversionOngoing+0x18>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b09f      	sub	sp, #124	@ 0x7c
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800303a:	2302      	movs	r3, #2
 800303c:	e093      	b.n	8003166 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003046:	2300      	movs	r3, #0
 8003048:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800304a:	2300      	movs	r3, #0
 800304c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a47      	ldr	r2, [pc, #284]	@ (8003170 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d102      	bne.n	800305e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003058:	4b46      	ldr	r3, [pc, #280]	@ (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	e001      	b.n	8003062 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800305e:	2300      	movs	r3, #0
 8003060:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10b      	bne.n	8003080 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306c:	f043 0220 	orr.w	r2, r3, #32
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e072      	b.n	8003166 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff ffb9 	bl	8002ffa <LL_ADC_REG_IsConversionOngoing>
 8003088:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff ffb3 	bl	8002ffa <LL_ADC_REG_IsConversionOngoing>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d154      	bne.n	8003144 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800309a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800309c:	2b00      	cmp	r3, #0
 800309e:	d151      	bne.n	8003144 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030a0:	4b35      	ldr	r3, [pc, #212]	@ (8003178 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80030a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d02c      	beq.n	8003106 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80030ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030be:	035b      	lsls	r3, r3, #13
 80030c0:	430b      	orrs	r3, r1
 80030c2:	431a      	orrs	r2, r3
 80030c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030c8:	4829      	ldr	r0, [pc, #164]	@ (8003170 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030ca:	f7ff ff83 	bl	8002fd4 <LL_ADC_IsEnabled>
 80030ce:	4604      	mov	r4, r0
 80030d0:	4828      	ldr	r0, [pc, #160]	@ (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030d2:	f7ff ff7f 	bl	8002fd4 <LL_ADC_IsEnabled>
 80030d6:	4603      	mov	r3, r0
 80030d8:	431c      	orrs	r4, r3
 80030da:	4828      	ldr	r0, [pc, #160]	@ (800317c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80030dc:	f7ff ff7a 	bl	8002fd4 <LL_ADC_IsEnabled>
 80030e0:	4603      	mov	r3, r0
 80030e2:	4323      	orrs	r3, r4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d137      	bne.n	8003158 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80030f0:	f023 030f 	bic.w	r3, r3, #15
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	6811      	ldr	r1, [r2, #0]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	6892      	ldr	r2, [r2, #8]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	431a      	orrs	r2, r3
 8003100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003102:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003104:	e028      	b.n	8003158 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003106:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800310e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003110:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003112:	4817      	ldr	r0, [pc, #92]	@ (8003170 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003114:	f7ff ff5e 	bl	8002fd4 <LL_ADC_IsEnabled>
 8003118:	4604      	mov	r4, r0
 800311a:	4816      	ldr	r0, [pc, #88]	@ (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800311c:	f7ff ff5a 	bl	8002fd4 <LL_ADC_IsEnabled>
 8003120:	4603      	mov	r3, r0
 8003122:	431c      	orrs	r4, r3
 8003124:	4815      	ldr	r0, [pc, #84]	@ (800317c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003126:	f7ff ff55 	bl	8002fd4 <LL_ADC_IsEnabled>
 800312a:	4603      	mov	r3, r0
 800312c:	4323      	orrs	r3, r4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d112      	bne.n	8003158 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800313a:	f023 030f 	bic.w	r3, r3, #15
 800313e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003140:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003142:	e009      	b.n	8003158 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003148:	f043 0220 	orr.w	r2, r3, #32
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003156:	e000      	b.n	800315a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003158:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003162:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003166:	4618      	mov	r0, r3
 8003168:	377c      	adds	r7, #124	@ 0x7c
 800316a:	46bd      	mov	sp, r7
 800316c:	bd90      	pop	{r4, r7, pc}
 800316e:	bf00      	nop
 8003170:	50040000 	.word	0x50040000
 8003174:	50040100 	.word	0x50040100
 8003178:	50040300 	.word	0x50040300
 800317c:	50040200 	.word	0x50040200

08003180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003190:	4b0c      	ldr	r3, [pc, #48]	@ (80031c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800319c:	4013      	ands	r3, r2
 800319e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031b2:	4a04      	ldr	r2, [pc, #16]	@ (80031c4 <__NVIC_SetPriorityGrouping+0x44>)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	60d3      	str	r3, [r2, #12]
}
 80031b8:	bf00      	nop
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031cc:	4b04      	ldr	r3, [pc, #16]	@ (80031e0 <__NVIC_GetPriorityGrouping+0x18>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	0a1b      	lsrs	r3, r3, #8
 80031d2:	f003 0307 	and.w	r3, r3, #7
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	db0b      	blt.n	800320e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	f003 021f 	and.w	r2, r3, #31
 80031fc:	4907      	ldr	r1, [pc, #28]	@ (800321c <__NVIC_EnableIRQ+0x38>)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	2001      	movs	r0, #1
 8003206:	fa00 f202 	lsl.w	r2, r0, r2
 800320a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	e000e100 	.word	0xe000e100

08003220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	6039      	str	r1, [r7, #0]
 800322a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	2b00      	cmp	r3, #0
 8003232:	db0a      	blt.n	800324a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	490c      	ldr	r1, [pc, #48]	@ (800326c <__NVIC_SetPriority+0x4c>)
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	0112      	lsls	r2, r2, #4
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	440b      	add	r3, r1
 8003244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003248:	e00a      	b.n	8003260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	b2da      	uxtb	r2, r3
 800324e:	4908      	ldr	r1, [pc, #32]	@ (8003270 <__NVIC_SetPriority+0x50>)
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	3b04      	subs	r3, #4
 8003258:	0112      	lsls	r2, r2, #4
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	440b      	add	r3, r1
 800325e:	761a      	strb	r2, [r3, #24]
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000e100 	.word	0xe000e100
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	@ 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f1c3 0307 	rsb	r3, r3, #7
 800328e:	2b04      	cmp	r3, #4
 8003290:	bf28      	it	cs
 8003292:	2304      	movcs	r3, #4
 8003294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3304      	adds	r3, #4
 800329a:	2b06      	cmp	r3, #6
 800329c:	d902      	bls.n	80032a4 <NVIC_EncodePriority+0x30>
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3b03      	subs	r3, #3
 80032a2:	e000      	b.n	80032a6 <NVIC_EncodePriority+0x32>
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	401a      	ands	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032bc:	f04f 31ff 	mov.w	r1, #4294967295
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	43d9      	mvns	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	4313      	orrs	r3, r2
         );
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3724      	adds	r7, #36	@ 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032ec:	d301      	bcc.n	80032f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ee:	2301      	movs	r3, #1
 80032f0:	e00f      	b.n	8003312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032f2:	4a0a      	ldr	r2, [pc, #40]	@ (800331c <SysTick_Config+0x40>)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032fa:	210f      	movs	r1, #15
 80032fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003300:	f7ff ff8e 	bl	8003220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003304:	4b05      	ldr	r3, [pc, #20]	@ (800331c <SysTick_Config+0x40>)
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800330a:	4b04      	ldr	r3, [pc, #16]	@ (800331c <SysTick_Config+0x40>)
 800330c:	2207      	movs	r2, #7
 800330e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	e000e010 	.word	0xe000e010

08003320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff ff29 	bl	8003180 <__NVIC_SetPriorityGrouping>
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b086      	sub	sp, #24
 800333a:	af00      	add	r7, sp, #0
 800333c:	4603      	mov	r3, r0
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003348:	f7ff ff3e 	bl	80031c8 <__NVIC_GetPriorityGrouping>
 800334c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	6978      	ldr	r0, [r7, #20]
 8003354:	f7ff ff8e 	bl	8003274 <NVIC_EncodePriority>
 8003358:	4602      	mov	r2, r0
 800335a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335e:	4611      	mov	r1, r2
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff ff5d 	bl	8003220 <__NVIC_SetPriority>
}
 8003366:	bf00      	nop
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	4603      	mov	r3, r0
 8003376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff31 	bl	80031e4 <__NVIC_EnableIRQ>
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff ffa2 	bl	80032dc <SysTick_Config>
 8003398:	4603      	mov	r3, r0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033b2:	e17f      	b.n	80036b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	2101      	movs	r1, #1
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	fa01 f303 	lsl.w	r3, r1, r3
 80033c0:	4013      	ands	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 8171 	beq.w	80036ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d005      	beq.n	80033e4 <HAL_GPIO_Init+0x40>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d130      	bne.n	8003446 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	2203      	movs	r2, #3
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800341a:	2201      	movs	r2, #1
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4013      	ands	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	f003 0201 	and.w	r2, r3, #1
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	2b03      	cmp	r3, #3
 8003450:	d118      	bne.n	8003484 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003456:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003458:	2201      	movs	r2, #1
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4013      	ands	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	08db      	lsrs	r3, r3, #3
 800346e:	f003 0201 	and.w	r2, r3, #1
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b03      	cmp	r3, #3
 800348e:	d017      	beq.n	80034c0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	2203      	movs	r2, #3
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4013      	ands	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d123      	bne.n	8003514 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	08da      	lsrs	r2, r3, #3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3208      	adds	r2, #8
 80034d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	220f      	movs	r2, #15
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	08da      	lsrs	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3208      	adds	r2, #8
 800350e:	6939      	ldr	r1, [r7, #16]
 8003510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	2203      	movs	r2, #3
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4013      	ands	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0203 	and.w	r2, r3, #3
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80ac 	beq.w	80036ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003556:	4b5f      	ldr	r3, [pc, #380]	@ (80036d4 <HAL_GPIO_Init+0x330>)
 8003558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800355a:	4a5e      	ldr	r2, [pc, #376]	@ (80036d4 <HAL_GPIO_Init+0x330>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	6613      	str	r3, [r2, #96]	@ 0x60
 8003562:	4b5c      	ldr	r3, [pc, #368]	@ (80036d4 <HAL_GPIO_Init+0x330>)
 8003564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800356e:	4a5a      	ldr	r2, [pc, #360]	@ (80036d8 <HAL_GPIO_Init+0x334>)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	089b      	lsrs	r3, r3, #2
 8003574:	3302      	adds	r3, #2
 8003576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	220f      	movs	r2, #15
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4013      	ands	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003598:	d025      	beq.n	80035e6 <HAL_GPIO_Init+0x242>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a4f      	ldr	r2, [pc, #316]	@ (80036dc <HAL_GPIO_Init+0x338>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01f      	beq.n	80035e2 <HAL_GPIO_Init+0x23e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a4e      	ldr	r2, [pc, #312]	@ (80036e0 <HAL_GPIO_Init+0x33c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d019      	beq.n	80035de <HAL_GPIO_Init+0x23a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a4d      	ldr	r2, [pc, #308]	@ (80036e4 <HAL_GPIO_Init+0x340>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d013      	beq.n	80035da <HAL_GPIO_Init+0x236>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a4c      	ldr	r2, [pc, #304]	@ (80036e8 <HAL_GPIO_Init+0x344>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00d      	beq.n	80035d6 <HAL_GPIO_Init+0x232>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a4b      	ldr	r2, [pc, #300]	@ (80036ec <HAL_GPIO_Init+0x348>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d007      	beq.n	80035d2 <HAL_GPIO_Init+0x22e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a4a      	ldr	r2, [pc, #296]	@ (80036f0 <HAL_GPIO_Init+0x34c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d101      	bne.n	80035ce <HAL_GPIO_Init+0x22a>
 80035ca:	2306      	movs	r3, #6
 80035cc:	e00c      	b.n	80035e8 <HAL_GPIO_Init+0x244>
 80035ce:	2307      	movs	r3, #7
 80035d0:	e00a      	b.n	80035e8 <HAL_GPIO_Init+0x244>
 80035d2:	2305      	movs	r3, #5
 80035d4:	e008      	b.n	80035e8 <HAL_GPIO_Init+0x244>
 80035d6:	2304      	movs	r3, #4
 80035d8:	e006      	b.n	80035e8 <HAL_GPIO_Init+0x244>
 80035da:	2303      	movs	r3, #3
 80035dc:	e004      	b.n	80035e8 <HAL_GPIO_Init+0x244>
 80035de:	2302      	movs	r3, #2
 80035e0:	e002      	b.n	80035e8 <HAL_GPIO_Init+0x244>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_GPIO_Init+0x244>
 80035e6:	2300      	movs	r3, #0
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	f002 0203 	and.w	r2, r2, #3
 80035ee:	0092      	lsls	r2, r2, #2
 80035f0:	4093      	lsls	r3, r2
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035f8:	4937      	ldr	r1, [pc, #220]	@ (80036d8 <HAL_GPIO_Init+0x334>)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	089b      	lsrs	r3, r3, #2
 80035fe:	3302      	adds	r3, #2
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003606:	4b3b      	ldr	r3, [pc, #236]	@ (80036f4 <HAL_GPIO_Init+0x350>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	43db      	mvns	r3, r3
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4013      	ands	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800362a:	4a32      	ldr	r2, [pc, #200]	@ (80036f4 <HAL_GPIO_Init+0x350>)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003630:	4b30      	ldr	r3, [pc, #192]	@ (80036f4 <HAL_GPIO_Init+0x350>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	43db      	mvns	r3, r3
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4013      	ands	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003654:	4a27      	ldr	r2, [pc, #156]	@ (80036f4 <HAL_GPIO_Init+0x350>)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800365a:	4b26      	ldr	r3, [pc, #152]	@ (80036f4 <HAL_GPIO_Init+0x350>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	43db      	mvns	r3, r3
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4013      	ands	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800367e:	4a1d      	ldr	r2, [pc, #116]	@ (80036f4 <HAL_GPIO_Init+0x350>)
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003684:	4b1b      	ldr	r3, [pc, #108]	@ (80036f4 <HAL_GPIO_Init+0x350>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	43db      	mvns	r3, r3
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4013      	ands	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036a8:	4a12      	ldr	r2, [pc, #72]	@ (80036f4 <HAL_GPIO_Init+0x350>)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	3301      	adds	r3, #1
 80036b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	fa22 f303 	lsr.w	r3, r2, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f47f ae78 	bne.w	80033b4 <HAL_GPIO_Init+0x10>
  }
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40010000 	.word	0x40010000
 80036dc:	48000400 	.word	0x48000400
 80036e0:	48000800 	.word	0x48000800
 80036e4:	48000c00 	.word	0x48000c00
 80036e8:	48001000 	.word	0x48001000
 80036ec:	48001400 	.word	0x48001400
 80036f0:	48001800 	.word	0x48001800
 80036f4:	40010400 	.word	0x40010400

080036f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
 8003704:	4613      	mov	r3, r2
 8003706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003708:	787b      	ldrb	r3, [r7, #1]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003714:	e002      	b.n	800371c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003716:	887a      	ldrh	r2, [r7, #2]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e08d      	b.n	8003856 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fd feca 	bl	80014e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2224      	movs	r2, #36	@ 0x24
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003778:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003788:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d107      	bne.n	80037a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	e006      	b.n	80037b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80037ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d108      	bne.n	80037ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	e007      	b.n	80037da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80037e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69d9      	ldr	r1, [r3, #28]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1a      	ldr	r2, [r3, #32]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b20      	cmp	r3, #32
 8003872:	d138      	bne.n	80038e6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800387e:	2302      	movs	r3, #2
 8003880:	e032      	b.n	80038e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2224      	movs	r2, #36	@ 0x24
 800388e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0201 	bic.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038b0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6819      	ldr	r1, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0201 	orr.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e000      	b.n	80038e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038e6:	2302      	movs	r3, #2
  }
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b20      	cmp	r3, #32
 8003908:	d139      	bne.n	800397e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003914:	2302      	movs	r3, #2
 8003916:	e033      	b.n	8003980 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2224      	movs	r2, #36	@ 0x24
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003946:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0201 	orr.w	r2, r2, #1
 8003968:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	e000      	b.n	8003980 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800397e:	2302      	movs	r3, #2
  }
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003990:	4b04      	ldr	r3, [pc, #16]	@ (80039a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40007000 	.word	0x40007000

080039a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039b6:	d130      	bne.n	8003a1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039b8:	4b23      	ldr	r3, [pc, #140]	@ (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039c4:	d038      	beq.n	8003a38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039c6:	4b20      	ldr	r3, [pc, #128]	@ (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039d6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2232      	movs	r2, #50	@ 0x32
 80039dc:	fb02 f303 	mul.w	r3, r2, r3
 80039e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003a50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	0c9b      	lsrs	r3, r3, #18
 80039e8:	3301      	adds	r3, #1
 80039ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ec:	e002      	b.n	80039f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039f4:	4b14      	ldr	r3, [pc, #80]	@ (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a00:	d102      	bne.n	8003a08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f2      	bne.n	80039ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a08:	4b0f      	ldr	r3, [pc, #60]	@ (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a14:	d110      	bne.n	8003a38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e00f      	b.n	8003a3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a26:	d007      	beq.n	8003a38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a28:	4b07      	ldr	r3, [pc, #28]	@ (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a30:	4a05      	ldr	r2, [pc, #20]	@ (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	20000000 	.word	0x20000000
 8003a50:	431bde83 	.word	0x431bde83

08003a54 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e3ca      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a66:	4b97      	ldr	r3, [pc, #604]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a70:	4b94      	ldr	r3, [pc, #592]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 80e4 	beq.w	8003c50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d007      	beq.n	8003a9e <HAL_RCC_OscConfig+0x4a>
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	2b0c      	cmp	r3, #12
 8003a92:	f040 808b 	bne.w	8003bac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	f040 8087 	bne.w	8003bac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a9e:	4b89      	ldr	r3, [pc, #548]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x62>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e3a2      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1a      	ldr	r2, [r3, #32]
 8003aba:	4b82      	ldr	r3, [pc, #520]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d004      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x7c>
 8003ac6:	4b7f      	ldr	r3, [pc, #508]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ace:	e005      	b.n	8003adc <HAL_RCC_OscConfig+0x88>
 8003ad0:	4b7c      	ldr	r3, [pc, #496]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ad6:	091b      	lsrs	r3, r3, #4
 8003ad8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d223      	bcs.n	8003b28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fd55 	bl	8004594 <RCC_SetFlashLatencyFromMSIRange>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e383      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003af4:	4b73      	ldr	r3, [pc, #460]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a72      	ldr	r2, [pc, #456]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003afa:	f043 0308 	orr.w	r3, r3, #8
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	4b70      	ldr	r3, [pc, #448]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	496d      	ldr	r1, [pc, #436]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b12:	4b6c      	ldr	r3, [pc, #432]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	021b      	lsls	r3, r3, #8
 8003b20:	4968      	ldr	r1, [pc, #416]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
 8003b26:	e025      	b.n	8003b74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b28:	4b66      	ldr	r3, [pc, #408]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a65      	ldr	r2, [pc, #404]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003b2e:	f043 0308 	orr.w	r3, r3, #8
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	4b63      	ldr	r3, [pc, #396]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	4960      	ldr	r1, [pc, #384]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b46:	4b5f      	ldr	r3, [pc, #380]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	495b      	ldr	r1, [pc, #364]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d109      	bne.n	8003b74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fd15 	bl	8004594 <RCC_SetFlashLatencyFromMSIRange>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e343      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b74:	f000 fc4a 	bl	800440c <HAL_RCC_GetSysClockFreq>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	4b52      	ldr	r3, [pc, #328]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	091b      	lsrs	r3, r3, #4
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	4950      	ldr	r1, [pc, #320]	@ (8003cc8 <HAL_RCC_OscConfig+0x274>)
 8003b86:	5ccb      	ldrb	r3, [r1, r3]
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b90:	4a4e      	ldr	r2, [pc, #312]	@ (8003ccc <HAL_RCC_OscConfig+0x278>)
 8003b92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b94:	4b4e      	ldr	r3, [pc, #312]	@ (8003cd0 <HAL_RCC_OscConfig+0x27c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fe f873 	bl	8001c84 <HAL_InitTick>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d052      	beq.n	8003c4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	e327      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d032      	beq.n	8003c1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003bb4:	4b43      	ldr	r3, [pc, #268]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a42      	ldr	r2, [pc, #264]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bc0:	f7fe f8b0 	bl	8001d24 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bc8:	f7fe f8ac 	bl	8001d24 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e310      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bda:	4b3a      	ldr	r3, [pc, #232]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003be6:	4b37      	ldr	r3, [pc, #220]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a36      	ldr	r2, [pc, #216]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003bec:	f043 0308 	orr.w	r3, r3, #8
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	4b34      	ldr	r3, [pc, #208]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	4931      	ldr	r1, [pc, #196]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c04:	4b2f      	ldr	r3, [pc, #188]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	021b      	lsls	r3, r3, #8
 8003c12:	492c      	ldr	r1, [pc, #176]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	604b      	str	r3, [r1, #4]
 8003c18:	e01a      	b.n	8003c50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a29      	ldr	r2, [pc, #164]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003c20:	f023 0301 	bic.w	r3, r3, #1
 8003c24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c26:	f7fe f87d 	bl	8001d24 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c2e:	f7fe f879 	bl	8001d24 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e2dd      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c40:	4b20      	ldr	r3, [pc, #128]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1f0      	bne.n	8003c2e <HAL_RCC_OscConfig+0x1da>
 8003c4c:	e000      	b.n	8003c50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d074      	beq.n	8003d46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d005      	beq.n	8003c6e <HAL_RCC_OscConfig+0x21a>
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b0c      	cmp	r3, #12
 8003c66:	d10e      	bne.n	8003c86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d10b      	bne.n	8003c86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6e:	4b15      	ldr	r3, [pc, #84]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d064      	beq.n	8003d44 <HAL_RCC_OscConfig+0x2f0>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d160      	bne.n	8003d44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e2ba      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c8e:	d106      	bne.n	8003c9e <HAL_RCC_OscConfig+0x24a>
 8003c90:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a0b      	ldr	r2, [pc, #44]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003c96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	e026      	b.n	8003cec <HAL_RCC_OscConfig+0x298>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ca6:	d115      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x280>
 8003ca8:	4b06      	ldr	r3, [pc, #24]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a05      	ldr	r2, [pc, #20]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003cae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	4b03      	ldr	r3, [pc, #12]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a02      	ldr	r2, [pc, #8]	@ (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cbe:	6013      	str	r3, [r2, #0]
 8003cc0:	e014      	b.n	8003cec <HAL_RCC_OscConfig+0x298>
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	08007180 	.word	0x08007180
 8003ccc:	20000000 	.word	0x20000000
 8003cd0:	20000004 	.word	0x20000004
 8003cd4:	4ba0      	ldr	r3, [pc, #640]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a9f      	ldr	r2, [pc, #636]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003cda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	4b9d      	ldr	r3, [pc, #628]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a9c      	ldr	r2, [pc, #624]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003ce6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d013      	beq.n	8003d1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fe f816 	bl	8001d24 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cfc:	f7fe f812 	bl	8001d24 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b64      	cmp	r3, #100	@ 0x64
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e276      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d0e:	4b92      	ldr	r3, [pc, #584]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x2a8>
 8003d1a:	e014      	b.n	8003d46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fe f802 	bl	8001d24 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d24:	f7fd fffe 	bl	8001d24 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	@ 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e262      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d36:	4b88      	ldr	r3, [pc, #544]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x2d0>
 8003d42:	e000      	b.n	8003d46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d060      	beq.n	8003e14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d005      	beq.n	8003d64 <HAL_RCC_OscConfig+0x310>
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	2b0c      	cmp	r3, #12
 8003d5c:	d119      	bne.n	8003d92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d116      	bne.n	8003d92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d64:	4b7c      	ldr	r3, [pc, #496]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_OscConfig+0x328>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e23f      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7c:	4b76      	ldr	r3, [pc, #472]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	061b      	lsls	r3, r3, #24
 8003d8a:	4973      	ldr	r1, [pc, #460]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d90:	e040      	b.n	8003e14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d023      	beq.n	8003de2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d9a:	4b6f      	ldr	r3, [pc, #444]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a6e      	ldr	r2, [pc, #440]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da6:	f7fd ffbd 	bl	8001d24 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dae:	f7fd ffb9 	bl	8001d24 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e21d      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dc0:	4b65      	ldr	r3, [pc, #404]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dcc:	4b62      	ldr	r3, [pc, #392]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	061b      	lsls	r3, r3, #24
 8003dda:	495f      	ldr	r1, [pc, #380]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	604b      	str	r3, [r1, #4]
 8003de0:	e018      	b.n	8003e14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003de2:	4b5d      	ldr	r3, [pc, #372]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a5c      	ldr	r2, [pc, #368]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003de8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dee:	f7fd ff99 	bl	8001d24 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003df4:	e008      	b.n	8003e08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003df6:	f7fd ff95 	bl	8001d24 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e1f9      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e08:	4b53      	ldr	r3, [pc, #332]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1f0      	bne.n	8003df6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d03c      	beq.n	8003e9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01c      	beq.n	8003e62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e28:	4b4b      	ldr	r3, [pc, #300]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e2e:	4a4a      	ldr	r2, [pc, #296]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e38:	f7fd ff74 	bl	8001d24 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e40:	f7fd ff70 	bl	8001d24 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e1d4      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e52:	4b41      	ldr	r3, [pc, #260]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0ef      	beq.n	8003e40 <HAL_RCC_OscConfig+0x3ec>
 8003e60:	e01b      	b.n	8003e9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e62:	4b3d      	ldr	r3, [pc, #244]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e68:	4a3b      	ldr	r2, [pc, #236]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e72:	f7fd ff57 	bl	8001d24 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e7a:	f7fd ff53 	bl	8001d24 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e1b7      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e8c:	4b32      	ldr	r3, [pc, #200]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1ef      	bne.n	8003e7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 80a6 	beq.w	8003ff4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003eac:	4b2a      	ldr	r3, [pc, #168]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10d      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb8:	4b27      	ldr	r3, [pc, #156]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ebc:	4a26      	ldr	r2, [pc, #152]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ec2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ec4:	4b24      	ldr	r3, [pc, #144]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ed4:	4b21      	ldr	r3, [pc, #132]	@ (8003f5c <HAL_RCC_OscConfig+0x508>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d118      	bne.n	8003f12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8003f5c <HAL_RCC_OscConfig+0x508>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f5c <HAL_RCC_OscConfig+0x508>)
 8003ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eec:	f7fd ff1a 	bl	8001d24 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef4:	f7fd ff16 	bl	8001d24 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e17a      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f06:	4b15      	ldr	r3, [pc, #84]	@ (8003f5c <HAL_RCC_OscConfig+0x508>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d108      	bne.n	8003f2c <HAL_RCC_OscConfig+0x4d8>
 8003f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f20:	4a0d      	ldr	r2, [pc, #52]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f2a:	e029      	b.n	8003f80 <HAL_RCC_OscConfig+0x52c>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b05      	cmp	r3, #5
 8003f32:	d115      	bne.n	8003f60 <HAL_RCC_OscConfig+0x50c>
 8003f34:	4b08      	ldr	r3, [pc, #32]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3a:	4a07      	ldr	r2, [pc, #28]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003f3c:	f043 0304 	orr.w	r3, r3, #4
 8003f40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f44:	4b04      	ldr	r3, [pc, #16]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4a:	4a03      	ldr	r2, [pc, #12]	@ (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f54:	e014      	b.n	8003f80 <HAL_RCC_OscConfig+0x52c>
 8003f56:	bf00      	nop
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40007000 	.word	0x40007000
 8003f60:	4b9c      	ldr	r3, [pc, #624]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f66:	4a9b      	ldr	r2, [pc, #620]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 8003f68:	f023 0301 	bic.w	r3, r3, #1
 8003f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f70:	4b98      	ldr	r3, [pc, #608]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 8003f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f76:	4a97      	ldr	r2, [pc, #604]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 8003f78:	f023 0304 	bic.w	r3, r3, #4
 8003f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d016      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f88:	f7fd fecc 	bl	8001d24 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f90:	f7fd fec8 	bl	8001d24 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e12a      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fa6:	4b8b      	ldr	r3, [pc, #556]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0ed      	beq.n	8003f90 <HAL_RCC_OscConfig+0x53c>
 8003fb4:	e015      	b.n	8003fe2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb6:	f7fd feb5 	bl	8001d24 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fbc:	e00a      	b.n	8003fd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7fd feb1 	bl	8001d24 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e113      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fd4:	4b7f      	ldr	r3, [pc, #508]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1ed      	bne.n	8003fbe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fe2:	7ffb      	ldrb	r3, [r7, #31]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d105      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe8:	4b7a      	ldr	r3, [pc, #488]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 8003fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fec:	4a79      	ldr	r2, [pc, #484]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 8003fee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ff2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80fe 	beq.w	80041fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004002:	2b02      	cmp	r3, #2
 8004004:	f040 80d0 	bne.w	80041a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004008:	4b72      	ldr	r3, [pc, #456]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f003 0203 	and.w	r2, r3, #3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004018:	429a      	cmp	r2, r3
 800401a:	d130      	bne.n	800407e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004026:	3b01      	subs	r3, #1
 8004028:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800402a:	429a      	cmp	r2, r3
 800402c:	d127      	bne.n	800407e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004038:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800403a:	429a      	cmp	r2, r3
 800403c:	d11f      	bne.n	800407e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004048:	2a07      	cmp	r2, #7
 800404a:	bf14      	ite	ne
 800404c:	2201      	movne	r2, #1
 800404e:	2200      	moveq	r2, #0
 8004050:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004052:	4293      	cmp	r3, r2
 8004054:	d113      	bne.n	800407e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004060:	085b      	lsrs	r3, r3, #1
 8004062:	3b01      	subs	r3, #1
 8004064:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004066:	429a      	cmp	r2, r3
 8004068:	d109      	bne.n	800407e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004074:	085b      	lsrs	r3, r3, #1
 8004076:	3b01      	subs	r3, #1
 8004078:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d06e      	beq.n	800415c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	2b0c      	cmp	r3, #12
 8004082:	d069      	beq.n	8004158 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004084:	4b53      	ldr	r3, [pc, #332]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d105      	bne.n	800409c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004090:	4b50      	ldr	r3, [pc, #320]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0ad      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040a0:	4b4c      	ldr	r3, [pc, #304]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a4b      	ldr	r2, [pc, #300]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 80040a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040ac:	f7fd fe3a 	bl	8001d24 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b4:	f7fd fe36 	bl	8001d24 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e09a      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c6:	4b43      	ldr	r3, [pc, #268]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040d2:	4b40      	ldr	r3, [pc, #256]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	4b40      	ldr	r3, [pc, #256]	@ (80041d8 <HAL_RCC_OscConfig+0x784>)
 80040d8:	4013      	ands	r3, r2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80040e2:	3a01      	subs	r2, #1
 80040e4:	0112      	lsls	r2, r2, #4
 80040e6:	4311      	orrs	r1, r2
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80040ec:	0212      	lsls	r2, r2, #8
 80040ee:	4311      	orrs	r1, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040f4:	0852      	lsrs	r2, r2, #1
 80040f6:	3a01      	subs	r2, #1
 80040f8:	0552      	lsls	r2, r2, #21
 80040fa:	4311      	orrs	r1, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004100:	0852      	lsrs	r2, r2, #1
 8004102:	3a01      	subs	r2, #1
 8004104:	0652      	lsls	r2, r2, #25
 8004106:	4311      	orrs	r1, r2
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800410c:	0912      	lsrs	r2, r2, #4
 800410e:	0452      	lsls	r2, r2, #17
 8004110:	430a      	orrs	r2, r1
 8004112:	4930      	ldr	r1, [pc, #192]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 8004114:	4313      	orrs	r3, r2
 8004116:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004118:	4b2e      	ldr	r3, [pc, #184]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a2d      	ldr	r2, [pc, #180]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 800411e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004122:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004124:	4b2b      	ldr	r3, [pc, #172]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4a2a      	ldr	r2, [pc, #168]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 800412a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800412e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004130:	f7fd fdf8 	bl	8001d24 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004138:	f7fd fdf4 	bl	8001d24 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e058      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414a:	4b22      	ldr	r3, [pc, #136]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004156:	e050      	b.n	80041fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e04f      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800415c:	4b1d      	ldr	r3, [pc, #116]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d148      	bne.n	80041fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004168:	4b1a      	ldr	r3, [pc, #104]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a19      	ldr	r2, [pc, #100]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 800416e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004172:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004174:	4b17      	ldr	r3, [pc, #92]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a16      	ldr	r2, [pc, #88]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 800417a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800417e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004180:	f7fd fdd0 	bl	8001d24 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004188:	f7fd fdcc 	bl	8001d24 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e030      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800419a:	4b0e      	ldr	r3, [pc, #56]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCC_OscConfig+0x734>
 80041a6:	e028      	b.n	80041fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b0c      	cmp	r3, #12
 80041ac:	d023      	beq.n	80041f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ae:	4b09      	ldr	r3, [pc, #36]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a08      	ldr	r2, [pc, #32]	@ (80041d4 <HAL_RCC_OscConfig+0x780>)
 80041b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ba:	f7fd fdb3 	bl	8001d24 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c0:	e00c      	b.n	80041dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c2:	f7fd fdaf 	bl	8001d24 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d905      	bls.n	80041dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e013      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
 80041d4:	40021000 	.word	0x40021000
 80041d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041dc:	4b09      	ldr	r3, [pc, #36]	@ (8004204 <HAL_RCC_OscConfig+0x7b0>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1ec      	bne.n	80041c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80041e8:	4b06      	ldr	r3, [pc, #24]	@ (8004204 <HAL_RCC_OscConfig+0x7b0>)
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	4905      	ldr	r1, [pc, #20]	@ (8004204 <HAL_RCC_OscConfig+0x7b0>)
 80041ee:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <HAL_RCC_OscConfig+0x7b4>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	60cb      	str	r3, [r1, #12]
 80041f4:	e001      	b.n	80041fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3720      	adds	r7, #32
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40021000 	.word	0x40021000
 8004208:	feeefffc 	.word	0xfeeefffc

0800420c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0e7      	b.n	80043f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004220:	4b75      	ldr	r3, [pc, #468]	@ (80043f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d910      	bls.n	8004250 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422e:	4b72      	ldr	r3, [pc, #456]	@ (80043f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f023 0207 	bic.w	r2, r3, #7
 8004236:	4970      	ldr	r1, [pc, #448]	@ (80043f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	4313      	orrs	r3, r2
 800423c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800423e:	4b6e      	ldr	r3, [pc, #440]	@ (80043f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0cf      	b.n	80043f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d010      	beq.n	800427e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	4b66      	ldr	r3, [pc, #408]	@ (80043fc <HAL_RCC_ClockConfig+0x1f0>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004268:	429a      	cmp	r2, r3
 800426a:	d908      	bls.n	800427e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800426c:	4b63      	ldr	r3, [pc, #396]	@ (80043fc <HAL_RCC_ClockConfig+0x1f0>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	4960      	ldr	r1, [pc, #384]	@ (80043fc <HAL_RCC_ClockConfig+0x1f0>)
 800427a:	4313      	orrs	r3, r2
 800427c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d04c      	beq.n	8004324 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b03      	cmp	r3, #3
 8004290:	d107      	bne.n	80042a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004292:	4b5a      	ldr	r3, [pc, #360]	@ (80043fc <HAL_RCC_ClockConfig+0x1f0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d121      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e0a6      	b.n	80043f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042aa:	4b54      	ldr	r3, [pc, #336]	@ (80043fc <HAL_RCC_ClockConfig+0x1f0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d115      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e09a      	b.n	80043f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d107      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042c2:	4b4e      	ldr	r3, [pc, #312]	@ (80043fc <HAL_RCC_ClockConfig+0x1f0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d109      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e08e      	b.n	80043f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042d2:	4b4a      	ldr	r3, [pc, #296]	@ (80043fc <HAL_RCC_ClockConfig+0x1f0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e086      	b.n	80043f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042e2:	4b46      	ldr	r3, [pc, #280]	@ (80043fc <HAL_RCC_ClockConfig+0x1f0>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f023 0203 	bic.w	r2, r3, #3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	4943      	ldr	r1, [pc, #268]	@ (80043fc <HAL_RCC_ClockConfig+0x1f0>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f4:	f7fd fd16 	bl	8001d24 <HAL_GetTick>
 80042f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fa:	e00a      	b.n	8004312 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042fc:	f7fd fd12 	bl	8001d24 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430a:	4293      	cmp	r3, r2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e06e      	b.n	80043f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004312:	4b3a      	ldr	r3, [pc, #232]	@ (80043fc <HAL_RCC_ClockConfig+0x1f0>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 020c 	and.w	r2, r3, #12
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	429a      	cmp	r2, r3
 8004322:	d1eb      	bne.n	80042fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d010      	beq.n	8004352 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	4b31      	ldr	r3, [pc, #196]	@ (80043fc <HAL_RCC_ClockConfig+0x1f0>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800433c:	429a      	cmp	r2, r3
 800433e:	d208      	bcs.n	8004352 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004340:	4b2e      	ldr	r3, [pc, #184]	@ (80043fc <HAL_RCC_ClockConfig+0x1f0>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	492b      	ldr	r1, [pc, #172]	@ (80043fc <HAL_RCC_ClockConfig+0x1f0>)
 800434e:	4313      	orrs	r3, r2
 8004350:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004352:	4b29      	ldr	r3, [pc, #164]	@ (80043f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d210      	bcs.n	8004382 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004360:	4b25      	ldr	r3, [pc, #148]	@ (80043f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f023 0207 	bic.w	r2, r3, #7
 8004368:	4923      	ldr	r1, [pc, #140]	@ (80043f8 <HAL_RCC_ClockConfig+0x1ec>)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	4313      	orrs	r3, r2
 800436e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004370:	4b21      	ldr	r3, [pc, #132]	@ (80043f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d001      	beq.n	8004382 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e036      	b.n	80043f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800438e:	4b1b      	ldr	r3, [pc, #108]	@ (80043fc <HAL_RCC_ClockConfig+0x1f0>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	4918      	ldr	r1, [pc, #96]	@ (80043fc <HAL_RCC_ClockConfig+0x1f0>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d009      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ac:	4b13      	ldr	r3, [pc, #76]	@ (80043fc <HAL_RCC_ClockConfig+0x1f0>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	4910      	ldr	r1, [pc, #64]	@ (80043fc <HAL_RCC_ClockConfig+0x1f0>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043c0:	f000 f824 	bl	800440c <HAL_RCC_GetSysClockFreq>
 80043c4:	4602      	mov	r2, r0
 80043c6:	4b0d      	ldr	r3, [pc, #52]	@ (80043fc <HAL_RCC_ClockConfig+0x1f0>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	091b      	lsrs	r3, r3, #4
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	490b      	ldr	r1, [pc, #44]	@ (8004400 <HAL_RCC_ClockConfig+0x1f4>)
 80043d2:	5ccb      	ldrb	r3, [r1, r3]
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	fa22 f303 	lsr.w	r3, r2, r3
 80043dc:	4a09      	ldr	r2, [pc, #36]	@ (8004404 <HAL_RCC_ClockConfig+0x1f8>)
 80043de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043e0:	4b09      	ldr	r3, [pc, #36]	@ (8004408 <HAL_RCC_ClockConfig+0x1fc>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fd fc4d 	bl	8001c84 <HAL_InitTick>
 80043ea:	4603      	mov	r3, r0
 80043ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80043ee:	7afb      	ldrb	r3, [r7, #11]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40022000 	.word	0x40022000
 80043fc:	40021000 	.word	0x40021000
 8004400:	08007180 	.word	0x08007180
 8004404:	20000000 	.word	0x20000000
 8004408:	20000004 	.word	0x20000004

0800440c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800440c:	b480      	push	{r7}
 800440e:	b089      	sub	sp, #36	@ 0x24
 8004410:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
 8004416:	2300      	movs	r3, #0
 8004418:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800441a:	4b3e      	ldr	r3, [pc, #248]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x108>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 030c 	and.w	r3, r3, #12
 8004422:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004424:	4b3b      	ldr	r3, [pc, #236]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x108>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0x34>
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	2b0c      	cmp	r3, #12
 8004438:	d121      	bne.n	800447e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d11e      	bne.n	800447e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004440:	4b34      	ldr	r3, [pc, #208]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x108>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b00      	cmp	r3, #0
 800444a:	d107      	bne.n	800445c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800444c:	4b31      	ldr	r3, [pc, #196]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x108>)
 800444e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004452:	0a1b      	lsrs	r3, r3, #8
 8004454:	f003 030f 	and.w	r3, r3, #15
 8004458:	61fb      	str	r3, [r7, #28]
 800445a:	e005      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800445c:	4b2d      	ldr	r3, [pc, #180]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x108>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004468:	4a2b      	ldr	r2, [pc, #172]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x10c>)
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004470:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10d      	bne.n	8004494 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800447c:	e00a      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b04      	cmp	r3, #4
 8004482:	d102      	bne.n	800448a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004484:	4b25      	ldr	r3, [pc, #148]	@ (800451c <HAL_RCC_GetSysClockFreq+0x110>)
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	e004      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b08      	cmp	r3, #8
 800448e:	d101      	bne.n	8004494 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004490:	4b23      	ldr	r3, [pc, #140]	@ (8004520 <HAL_RCC_GetSysClockFreq+0x114>)
 8004492:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	2b0c      	cmp	r3, #12
 8004498:	d134      	bne.n	8004504 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800449a:	4b1e      	ldr	r3, [pc, #120]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x108>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d003      	beq.n	80044b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b03      	cmp	r3, #3
 80044ae:	d003      	beq.n	80044b8 <HAL_RCC_GetSysClockFreq+0xac>
 80044b0:	e005      	b.n	80044be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044b2:	4b1a      	ldr	r3, [pc, #104]	@ (800451c <HAL_RCC_GetSysClockFreq+0x110>)
 80044b4:	617b      	str	r3, [r7, #20]
      break;
 80044b6:	e005      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044b8:	4b19      	ldr	r3, [pc, #100]	@ (8004520 <HAL_RCC_GetSysClockFreq+0x114>)
 80044ba:	617b      	str	r3, [r7, #20]
      break;
 80044bc:	e002      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	617b      	str	r3, [r7, #20]
      break;
 80044c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044c4:	4b13      	ldr	r3, [pc, #76]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x108>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	091b      	lsrs	r3, r3, #4
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	3301      	adds	r3, #1
 80044d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044d2:	4b10      	ldr	r3, [pc, #64]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x108>)
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	0a1b      	lsrs	r3, r3, #8
 80044d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	fb03 f202 	mul.w	r2, r3, r2
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	0e5b      	lsrs	r3, r3, #25
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	3301      	adds	r3, #1
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004502:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004504:	69bb      	ldr	r3, [r7, #24]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3724      	adds	r7, #36	@ 0x24
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40021000 	.word	0x40021000
 8004518:	08007198 	.word	0x08007198
 800451c:	00f42400 	.word	0x00f42400
 8004520:	017d7840 	.word	0x017d7840

08004524 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004528:	4b03      	ldr	r3, [pc, #12]	@ (8004538 <HAL_RCC_GetHCLKFreq+0x14>)
 800452a:	681b      	ldr	r3, [r3, #0]
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	20000000 	.word	0x20000000

0800453c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004540:	f7ff fff0 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8004544:	4602      	mov	r2, r0
 8004546:	4b06      	ldr	r3, [pc, #24]	@ (8004560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	0a1b      	lsrs	r3, r3, #8
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	4904      	ldr	r1, [pc, #16]	@ (8004564 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004552:	5ccb      	ldrb	r3, [r1, r3]
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800455c:	4618      	mov	r0, r3
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40021000 	.word	0x40021000
 8004564:	08007190 	.word	0x08007190

08004568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800456c:	f7ff ffda 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8004570:	4602      	mov	r2, r0
 8004572:	4b06      	ldr	r3, [pc, #24]	@ (800458c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	0adb      	lsrs	r3, r3, #11
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	4904      	ldr	r1, [pc, #16]	@ (8004590 <HAL_RCC_GetPCLK2Freq+0x28>)
 800457e:	5ccb      	ldrb	r3, [r1, r3]
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004588:	4618      	mov	r0, r3
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40021000 	.word	0x40021000
 8004590:	08007190 	.word	0x08007190

08004594 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800459c:	2300      	movs	r3, #0
 800459e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045a0:	4b2a      	ldr	r3, [pc, #168]	@ (800464c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045ac:	f7ff f9ee 	bl	800398c <HAL_PWREx_GetVoltageRange>
 80045b0:	6178      	str	r0, [r7, #20]
 80045b2:	e014      	b.n	80045de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045b4:	4b25      	ldr	r3, [pc, #148]	@ (800464c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b8:	4a24      	ldr	r2, [pc, #144]	@ (800464c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045be:	6593      	str	r3, [r2, #88]	@ 0x58
 80045c0:	4b22      	ldr	r3, [pc, #136]	@ (800464c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045cc:	f7ff f9de 	bl	800398c <HAL_PWREx_GetVoltageRange>
 80045d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045d2:	4b1e      	ldr	r3, [pc, #120]	@ (800464c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d6:	4a1d      	ldr	r2, [pc, #116]	@ (800464c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e4:	d10b      	bne.n	80045fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b80      	cmp	r3, #128	@ 0x80
 80045ea:	d919      	bls.n	8004620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80045f0:	d902      	bls.n	80045f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045f2:	2302      	movs	r3, #2
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	e013      	b.n	8004620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045f8:	2301      	movs	r3, #1
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	e010      	b.n	8004620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b80      	cmp	r3, #128	@ 0x80
 8004602:	d902      	bls.n	800460a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004604:	2303      	movs	r3, #3
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	e00a      	b.n	8004620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b80      	cmp	r3, #128	@ 0x80
 800460e:	d102      	bne.n	8004616 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004610:	2302      	movs	r3, #2
 8004612:	613b      	str	r3, [r7, #16]
 8004614:	e004      	b.n	8004620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b70      	cmp	r3, #112	@ 0x70
 800461a:	d101      	bne.n	8004620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800461c:	2301      	movs	r3, #1
 800461e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004620:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f023 0207 	bic.w	r2, r3, #7
 8004628:	4909      	ldr	r1, [pc, #36]	@ (8004650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004630:	4b07      	ldr	r3, [pc, #28]	@ (8004650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	429a      	cmp	r2, r3
 800463c:	d001      	beq.n	8004642 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40021000 	.word	0x40021000
 8004650:	40022000 	.word	0x40022000

08004654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800465c:	2300      	movs	r3, #0
 800465e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004660:	2300      	movs	r3, #0
 8004662:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800466c:	2b00      	cmp	r3, #0
 800466e:	d041      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004674:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004678:	d02a      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800467a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800467e:	d824      	bhi.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004680:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004684:	d008      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004686:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800468a:	d81e      	bhi.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004690:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004694:	d010      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004696:	e018      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004698:	4b86      	ldr	r3, [pc, #536]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	4a85      	ldr	r2, [pc, #532]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046a4:	e015      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3304      	adds	r3, #4
 80046aa:	2100      	movs	r1, #0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fa8b 	bl	8004bc8 <RCCEx_PLLSAI1_Config>
 80046b2:	4603      	mov	r3, r0
 80046b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046b6:	e00c      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3320      	adds	r3, #32
 80046bc:	2100      	movs	r1, #0
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fb76 	bl	8004db0 <RCCEx_PLLSAI2_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046c8:	e003      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	74fb      	strb	r3, [r7, #19]
      break;
 80046ce:	e000      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80046d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046d2:	7cfb      	ldrb	r3, [r7, #19]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10b      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046d8:	4b76      	ldr	r3, [pc, #472]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046e6:	4973      	ldr	r1, [pc, #460]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80046ee:	e001      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f0:	7cfb      	ldrb	r3, [r7, #19]
 80046f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d041      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004704:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004708:	d02a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800470a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800470e:	d824      	bhi.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004710:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004714:	d008      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004716:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800471a:	d81e      	bhi.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004720:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004724:	d010      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004726:	e018      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004728:	4b62      	ldr	r3, [pc, #392]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4a61      	ldr	r2, [pc, #388]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004732:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004734:	e015      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3304      	adds	r3, #4
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fa43 	bl	8004bc8 <RCCEx_PLLSAI1_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004746:	e00c      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3320      	adds	r3, #32
 800474c:	2100      	movs	r1, #0
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fb2e 	bl	8004db0 <RCCEx_PLLSAI2_Config>
 8004754:	4603      	mov	r3, r0
 8004756:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004758:	e003      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	74fb      	strb	r3, [r7, #19]
      break;
 800475e:	e000      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004762:	7cfb      	ldrb	r3, [r7, #19]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10b      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004768:	4b52      	ldr	r3, [pc, #328]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004776:	494f      	ldr	r1, [pc, #316]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800477e:	e001      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004780:	7cfb      	ldrb	r3, [r7, #19]
 8004782:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80a0 	beq.w	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004792:	2300      	movs	r3, #0
 8004794:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004796:	4b47      	ldr	r3, [pc, #284]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800479a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80047a6:	2300      	movs	r3, #0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00d      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ac:	4b41      	ldr	r3, [pc, #260]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b0:	4a40      	ldr	r2, [pc, #256]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80047b8:	4b3e      	ldr	r3, [pc, #248]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c4:	2301      	movs	r3, #1
 80047c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047c8:	4b3b      	ldr	r3, [pc, #236]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a3a      	ldr	r2, [pc, #232]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047d4:	f7fd faa6 	bl	8001d24 <HAL_GetTick>
 80047d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047da:	e009      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047dc:	f7fd faa2 	bl	8001d24 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d902      	bls.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	74fb      	strb	r3, [r7, #19]
        break;
 80047ee:	e005      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047f0:	4b31      	ldr	r3, [pc, #196]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0ef      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80047fc:	7cfb      	ldrb	r3, [r7, #19]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d15c      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004802:	4b2c      	ldr	r3, [pc, #176]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004808:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800480c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d01f      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	429a      	cmp	r2, r3
 800481e:	d019      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004820:	4b24      	ldr	r3, [pc, #144]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800482a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800482c:	4b21      	ldr	r3, [pc, #132]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004832:	4a20      	ldr	r2, [pc, #128]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800483c:	4b1d      	ldr	r3, [pc, #116]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004842:	4a1c      	ldr	r2, [pc, #112]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004844:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800484c:	4a19      	ldr	r2, [pc, #100]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d016      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485e:	f7fd fa61 	bl	8001d24 <HAL_GetTick>
 8004862:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004864:	e00b      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004866:	f7fd fa5d 	bl	8001d24 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004874:	4293      	cmp	r3, r2
 8004876:	d902      	bls.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	74fb      	strb	r3, [r7, #19]
            break;
 800487c:	e006      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800487e:	4b0d      	ldr	r3, [pc, #52]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0ec      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800488c:	7cfb      	ldrb	r3, [r7, #19]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10c      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004892:	4b08      	ldr	r3, [pc, #32]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004898:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048a2:	4904      	ldr	r1, [pc, #16]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80048aa:	e009      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048ac:	7cfb      	ldrb	r3, [r7, #19]
 80048ae:	74bb      	strb	r3, [r7, #18]
 80048b0:	e006      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80048b2:	bf00      	nop
 80048b4:	40021000 	.word	0x40021000
 80048b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048bc:	7cfb      	ldrb	r3, [r7, #19]
 80048be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048c0:	7c7b      	ldrb	r3, [r7, #17]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d105      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c6:	4ba1      	ldr	r3, [pc, #644]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80048c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ca:	4aa0      	ldr	r2, [pc, #640]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80048cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048de:	4b9b      	ldr	r3, [pc, #620]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e4:	f023 0203 	bic.w	r2, r3, #3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ec:	4997      	ldr	r1, [pc, #604]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004900:	4b92      	ldr	r3, [pc, #584]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004906:	f023 020c 	bic.w	r2, r3, #12
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800490e:	498f      	ldr	r1, [pc, #572]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004922:	4b8a      	ldr	r3, [pc, #552]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004928:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	4986      	ldr	r1, [pc, #536]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004944:	4b81      	ldr	r3, [pc, #516]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004952:	497e      	ldr	r1, [pc, #504]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004966:	4b79      	ldr	r3, [pc, #484]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004974:	4975      	ldr	r1, [pc, #468]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004988:	4b70      	ldr	r3, [pc, #448]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004996:	496d      	ldr	r1, [pc, #436]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049aa:	4b68      	ldr	r3, [pc, #416]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b8:	4964      	ldr	r1, [pc, #400]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049cc:	4b5f      	ldr	r3, [pc, #380]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049da:	495c      	ldr	r1, [pc, #368]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049ee:	4b57      	ldr	r3, [pc, #348]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80049f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049fc:	4953      	ldr	r1, [pc, #332]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a10:	4b4e      	ldr	r3, [pc, #312]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1e:	494b      	ldr	r1, [pc, #300]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a32:	4b46      	ldr	r3, [pc, #280]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a40:	4942      	ldr	r1, [pc, #264]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d028      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a54:	4b3d      	ldr	r3, [pc, #244]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a62:	493a      	ldr	r1, [pc, #232]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a72:	d106      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a74:	4b35      	ldr	r3, [pc, #212]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	4a34      	ldr	r2, [pc, #208]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004a7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a7e:	60d3      	str	r3, [r2, #12]
 8004a80:	e011      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a8a:	d10c      	bne.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	2101      	movs	r1, #1
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f898 	bl	8004bc8 <RCCEx_PLLSAI1_Config>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a9c:	7cfb      	ldrb	r3, [r7, #19]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 8004aa2:	7cfb      	ldrb	r3, [r7, #19]
 8004aa4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d028      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ab2:	4b26      	ldr	r3, [pc, #152]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac0:	4922      	ldr	r1, [pc, #136]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004acc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ad0:	d106      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004ad8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004adc:	60d3      	str	r3, [r2, #12]
 8004ade:	e011      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ae8:	d10c      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3304      	adds	r3, #4
 8004aee:	2101      	movs	r1, #1
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 f869 	bl	8004bc8 <RCCEx_PLLSAI1_Config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004afa:	7cfb      	ldrb	r3, [r7, #19]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b00:	7cfb      	ldrb	r3, [r7, #19]
 8004b02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d031      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b10:	4b0e      	ldr	r3, [pc, #56]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b1e:	490b      	ldr	r1, [pc, #44]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b2e:	d10f      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3304      	adds	r3, #4
 8004b34:	2102      	movs	r1, #2
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 f846 	bl	8004bc8 <RCCEx_PLLSAI1_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b40:	7cfb      	ldrb	r3, [r7, #19]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d016      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8004b46:	7cfb      	ldrb	r3, [r7, #19]
 8004b48:	74bb      	strb	r3, [r7, #18]
 8004b4a:	e013      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004b4c:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b58:	d10c      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3320      	adds	r3, #32
 8004b5e:	2102      	movs	r1, #2
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 f925 	bl	8004db0 <RCCEx_PLLSAI2_Config>
 8004b66:	4603      	mov	r3, r0
 8004b68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b6a:	7cfb      	ldrb	r3, [r7, #19]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8004b70:	7cfb      	ldrb	r3, [r7, #19]
 8004b72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b80:	4b10      	ldr	r3, [pc, #64]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b86:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b8e:	490d      	ldr	r1, [pc, #52]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ba2:	4b08      	ldr	r3, [pc, #32]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8004ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bb0:	4904      	ldr	r1, [pc, #16]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004bb8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000

08004bc8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bd6:	4b75      	ldr	r3, [pc, #468]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d018      	beq.n	8004c14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004be2:	4b72      	ldr	r3, [pc, #456]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f003 0203 	and.w	r2, r3, #3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d10d      	bne.n	8004c0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
       ||
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d009      	beq.n	8004c0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004bfa:	4b6c      	ldr	r3, [pc, #432]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	091b      	lsrs	r3, r3, #4
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
       ||
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d047      	beq.n	8004c9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	73fb      	strb	r3, [r7, #15]
 8004c12:	e044      	b.n	8004c9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	d018      	beq.n	8004c4e <RCCEx_PLLSAI1_Config+0x86>
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d825      	bhi.n	8004c6c <RCCEx_PLLSAI1_Config+0xa4>
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d002      	beq.n	8004c2a <RCCEx_PLLSAI1_Config+0x62>
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d009      	beq.n	8004c3c <RCCEx_PLLSAI1_Config+0x74>
 8004c28:	e020      	b.n	8004c6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c2a:	4b60      	ldr	r3, [pc, #384]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d11d      	bne.n	8004c72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c3a:	e01a      	b.n	8004c72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c3c:	4b5b      	ldr	r3, [pc, #364]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d116      	bne.n	8004c76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c4c:	e013      	b.n	8004c76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c4e:	4b57      	ldr	r3, [pc, #348]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10f      	bne.n	8004c7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c5a:	4b54      	ldr	r3, [pc, #336]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d109      	bne.n	8004c7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c6a:	e006      	b.n	8004c7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c70:	e004      	b.n	8004c7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c72:	bf00      	nop
 8004c74:	e002      	b.n	8004c7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c76:	bf00      	nop
 8004c78:	e000      	b.n	8004c7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10d      	bne.n	8004c9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c82:	4b4a      	ldr	r3, [pc, #296]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6819      	ldr	r1, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	430b      	orrs	r3, r1
 8004c98:	4944      	ldr	r1, [pc, #272]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d17d      	bne.n	8004da0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ca4:	4b41      	ldr	r3, [pc, #260]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a40      	ldr	r2, [pc, #256]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004caa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004cae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb0:	f7fd f838 	bl	8001d24 <HAL_GetTick>
 8004cb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cb6:	e009      	b.n	8004ccc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cb8:	f7fd f834 	bl	8001d24 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d902      	bls.n	8004ccc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	73fb      	strb	r3, [r7, #15]
        break;
 8004cca:	e005      	b.n	8004cd8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ccc:	4b37      	ldr	r3, [pc, #220]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1ef      	bne.n	8004cb8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d160      	bne.n	8004da0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d111      	bne.n	8004d08 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ce4:	4b31      	ldr	r3, [pc, #196]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004cec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6892      	ldr	r2, [r2, #8]
 8004cf4:	0211      	lsls	r1, r2, #8
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	68d2      	ldr	r2, [r2, #12]
 8004cfa:	0912      	lsrs	r2, r2, #4
 8004cfc:	0452      	lsls	r2, r2, #17
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	492a      	ldr	r1, [pc, #168]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	610b      	str	r3, [r1, #16]
 8004d06:	e027      	b.n	8004d58 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d112      	bne.n	8004d34 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d0e:	4b27      	ldr	r3, [pc, #156]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004d16:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6892      	ldr	r2, [r2, #8]
 8004d1e:	0211      	lsls	r1, r2, #8
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6912      	ldr	r2, [r2, #16]
 8004d24:	0852      	lsrs	r2, r2, #1
 8004d26:	3a01      	subs	r2, #1
 8004d28:	0552      	lsls	r2, r2, #21
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	491f      	ldr	r1, [pc, #124]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	610b      	str	r3, [r1, #16]
 8004d32:	e011      	b.n	8004d58 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d34:	4b1d      	ldr	r3, [pc, #116]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d3c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6892      	ldr	r2, [r2, #8]
 8004d44:	0211      	lsls	r1, r2, #8
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6952      	ldr	r2, [r2, #20]
 8004d4a:	0852      	lsrs	r2, r2, #1
 8004d4c:	3a01      	subs	r2, #1
 8004d4e:	0652      	lsls	r2, r2, #25
 8004d50:	430a      	orrs	r2, r1
 8004d52:	4916      	ldr	r1, [pc, #88]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d58:	4b14      	ldr	r3, [pc, #80]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a13      	ldr	r2, [pc, #76]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d64:	f7fc ffde 	bl	8001d24 <HAL_GetTick>
 8004d68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d6a:	e009      	b.n	8004d80 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d6c:	f7fc ffda 	bl	8001d24 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d902      	bls.n	8004d80 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	73fb      	strb	r3, [r7, #15]
          break;
 8004d7e:	e005      	b.n	8004d8c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d80:	4b0a      	ldr	r3, [pc, #40]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0ef      	beq.n	8004d6c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d92:	4b06      	ldr	r3, [pc, #24]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	4904      	ldr	r1, [pc, #16]	@ (8004dac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40021000 	.word	0x40021000

08004db0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dbe:	4b6a      	ldr	r3, [pc, #424]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d018      	beq.n	8004dfc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004dca:	4b67      	ldr	r3, [pc, #412]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f003 0203 	and.w	r2, r3, #3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d10d      	bne.n	8004df6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
       ||
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004de2:	4b61      	ldr	r3, [pc, #388]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
       ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d047      	beq.n	8004e86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
 8004dfa:	e044      	b.n	8004e86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d018      	beq.n	8004e36 <RCCEx_PLLSAI2_Config+0x86>
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d825      	bhi.n	8004e54 <RCCEx_PLLSAI2_Config+0xa4>
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d002      	beq.n	8004e12 <RCCEx_PLLSAI2_Config+0x62>
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d009      	beq.n	8004e24 <RCCEx_PLLSAI2_Config+0x74>
 8004e10:	e020      	b.n	8004e54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e12:	4b55      	ldr	r3, [pc, #340]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d11d      	bne.n	8004e5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e22:	e01a      	b.n	8004e5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e24:	4b50      	ldr	r3, [pc, #320]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d116      	bne.n	8004e5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e34:	e013      	b.n	8004e5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e36:	4b4c      	ldr	r3, [pc, #304]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10f      	bne.n	8004e62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e42:	4b49      	ldr	r3, [pc, #292]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d109      	bne.n	8004e62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e52:	e006      	b.n	8004e62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	73fb      	strb	r3, [r7, #15]
      break;
 8004e58:	e004      	b.n	8004e64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e5a:	bf00      	nop
 8004e5c:	e002      	b.n	8004e64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e5e:	bf00      	nop
 8004e60:	e000      	b.n	8004e64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e62:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10d      	bne.n	8004e86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6819      	ldr	r1, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	4939      	ldr	r1, [pc, #228]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d167      	bne.n	8004f5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e8c:	4b36      	ldr	r3, [pc, #216]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a35      	ldr	r2, [pc, #212]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e98:	f7fc ff44 	bl	8001d24 <HAL_GetTick>
 8004e9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e9e:	e009      	b.n	8004eb4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ea0:	f7fc ff40 	bl	8001d24 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d902      	bls.n	8004eb4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	73fb      	strb	r3, [r7, #15]
        break;
 8004eb2:	e005      	b.n	8004ec0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1ef      	bne.n	8004ea0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d14a      	bne.n	8004f5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d111      	bne.n	8004ef0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ecc:	4b26      	ldr	r3, [pc, #152]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ed4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6892      	ldr	r2, [r2, #8]
 8004edc:	0211      	lsls	r1, r2, #8
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	68d2      	ldr	r2, [r2, #12]
 8004ee2:	0912      	lsrs	r2, r2, #4
 8004ee4:	0452      	lsls	r2, r2, #17
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	491f      	ldr	r1, [pc, #124]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	614b      	str	r3, [r1, #20]
 8004eee:	e011      	b.n	8004f14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ef8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6892      	ldr	r2, [r2, #8]
 8004f00:	0211      	lsls	r1, r2, #8
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6912      	ldr	r2, [r2, #16]
 8004f06:	0852      	lsrs	r2, r2, #1
 8004f08:	3a01      	subs	r2, #1
 8004f0a:	0652      	lsls	r2, r2, #25
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	4916      	ldr	r1, [pc, #88]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f14:	4b14      	ldr	r3, [pc, #80]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a13      	ldr	r2, [pc, #76]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f20:	f7fc ff00 	bl	8001d24 <HAL_GetTick>
 8004f24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f26:	e009      	b.n	8004f3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f28:	f7fc fefc 	bl	8001d24 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d902      	bls.n	8004f3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	73fb      	strb	r3, [r7, #15]
          break;
 8004f3a:	e005      	b.n	8004f48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0ef      	beq.n	8004f28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f4e:	4b06      	ldr	r3, [pc, #24]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f50:	695a      	ldr	r2, [r3, #20]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	4904      	ldr	r1, [pc, #16]	@ (8004f68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40021000 	.word	0x40021000

08004f6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e095      	b.n	80050aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d108      	bne.n	8004f98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f8e:	d009      	beq.n	8004fa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	61da      	str	r2, [r3, #28]
 8004f96:	e005      	b.n	8004fa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fc faf0 	bl	80015a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fe4:	d902      	bls.n	8004fec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	e002      	b.n	8004ff2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004fec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ff0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004ffa:	d007      	beq.n	800500c <HAL_SPI_Init+0xa0>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005004:	d002      	beq.n	800500c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800504e:	ea42 0103 	orr.w	r1, r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005056:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	0c1b      	lsrs	r3, r3, #16
 8005068:	f003 0204 	and.w	r2, r3, #4
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005070:	f003 0310 	and.w	r3, r3, #16
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005088:	ea42 0103 	orr.w	r1, r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e049      	b.n	8005158 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d106      	bne.n	80050de <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f841 	bl	8005160 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2202      	movs	r2, #2
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3304      	adds	r3, #4
 80050ee:	4619      	mov	r1, r3
 80050f0:	4610      	mov	r0, r2
 80050f2:	f000 fd2b 	bl	8005b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e049      	b.n	800521a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fc fa64 	bl	8001668 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3304      	adds	r3, #4
 80051b0:	4619      	mov	r1, r3
 80051b2:	4610      	mov	r0, r2
 80051b4:	f000 fcca 	bl	8005b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b082      	sub	sp, #8
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e049      	b.n	80052c8 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d106      	bne.n	800524e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7fc faeb 	bl	8001824 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2202      	movs	r2, #2
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3304      	adds	r3, #4
 800525e:	4619      	mov	r1, r3
 8005260:	4610      	mov	r0, r2
 8005262:	f000 fc73 	bl	8005b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e097      	b.n	8005414 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d106      	bne.n	80052fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7fc f9ef 	bl	80016dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2202      	movs	r2, #2
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005314:	f023 0307 	bic.w	r3, r3, #7
 8005318:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3304      	adds	r3, #4
 8005322:	4619      	mov	r1, r3
 8005324:	4610      	mov	r0, r2
 8005326:	f000 fc11 	bl	8005b4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005352:	f023 0303 	bic.w	r3, r3, #3
 8005356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	4313      	orrs	r3, r2
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005370:	f023 030c 	bic.w	r3, r3, #12
 8005374:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800537c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	021b      	lsls	r3, r3, #8
 800538c:	4313      	orrs	r3, r2
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	011a      	lsls	r2, r3, #4
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	031b      	lsls	r3, r3, #12
 80053a0:	4313      	orrs	r3, r2
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	4313      	orrs	r3, r2
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d020      	beq.n	8005480 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01b      	beq.n	8005480 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0202 	mvn.w	r2, #2
 8005450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fb fed4 	bl	8001214 <HAL_TIM_IC_CaptureCallback>
 800546c:	e005      	b.n	800547a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fb4e 	bl	8005b10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fb55 	bl	8005b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b00      	cmp	r3, #0
 8005488:	d020      	beq.n	80054cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01b      	beq.n	80054cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f06f 0204 	mvn.w	r2, #4
 800549c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2202      	movs	r2, #2
 80054a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fb feae 	bl	8001214 <HAL_TIM_IC_CaptureCallback>
 80054b8:	e005      	b.n	80054c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fb28 	bl	8005b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fb2f 	bl	8005b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d020      	beq.n	8005518 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f003 0308 	and.w	r3, r3, #8
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01b      	beq.n	8005518 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0208 	mvn.w	r2, #8
 80054e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2204      	movs	r2, #4
 80054ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7fb fe88 	bl	8001214 <HAL_TIM_IC_CaptureCallback>
 8005504:	e005      	b.n	8005512 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fb02 	bl	8005b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fb09 	bl	8005b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	2b00      	cmp	r3, #0
 8005520:	d020      	beq.n	8005564 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f003 0310 	and.w	r3, r3, #16
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01b      	beq.n	8005564 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0210 	mvn.w	r2, #16
 8005534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2208      	movs	r2, #8
 800553a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fb fe62 	bl	8001214 <HAL_TIM_IC_CaptureCallback>
 8005550:	e005      	b.n	800555e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fadc 	bl	8005b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fae3 	bl	8005b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00c      	beq.n	8005588 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d007      	beq.n	8005588 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0201 	mvn.w	r2, #1
 8005580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 faba 	bl	8005afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00c      	beq.n	80055ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005598:	2b00      	cmp	r3, #0
 800559a:	d007      	beq.n	80055ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f001 f874 	bl	8006694 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00c      	beq.n	80055d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d007      	beq.n	80055d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80055c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f001 f86c 	bl	80066a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00c      	beq.n	80055f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d007      	beq.n	80055f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 faa2 	bl	8005b38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f003 0320 	and.w	r3, r3, #32
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00c      	beq.n	8005618 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0220 	mvn.w	r2, #32
 8005610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f001 f834 	bl	8006680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_TIM_OC_ConfigChannel+0x1e>
 800563a:	2302      	movs	r3, #2
 800563c:	e066      	b.n	800570c <HAL_TIM_OC_ConfigChannel+0xec>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b14      	cmp	r3, #20
 800564a:	d857      	bhi.n	80056fc <HAL_TIM_OC_ConfigChannel+0xdc>
 800564c:	a201      	add	r2, pc, #4	@ (adr r2, 8005654 <HAL_TIM_OC_ConfigChannel+0x34>)
 800564e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005652:	bf00      	nop
 8005654:	080056a9 	.word	0x080056a9
 8005658:	080056fd 	.word	0x080056fd
 800565c:	080056fd 	.word	0x080056fd
 8005660:	080056fd 	.word	0x080056fd
 8005664:	080056b7 	.word	0x080056b7
 8005668:	080056fd 	.word	0x080056fd
 800566c:	080056fd 	.word	0x080056fd
 8005670:	080056fd 	.word	0x080056fd
 8005674:	080056c5 	.word	0x080056c5
 8005678:	080056fd 	.word	0x080056fd
 800567c:	080056fd 	.word	0x080056fd
 8005680:	080056fd 	.word	0x080056fd
 8005684:	080056d3 	.word	0x080056d3
 8005688:	080056fd 	.word	0x080056fd
 800568c:	080056fd 	.word	0x080056fd
 8005690:	080056fd 	.word	0x080056fd
 8005694:	080056e1 	.word	0x080056e1
 8005698:	080056fd 	.word	0x080056fd
 800569c:	080056fd 	.word	0x080056fd
 80056a0:	080056fd 	.word	0x080056fd
 80056a4:	080056ef 	.word	0x080056ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fae6 	bl	8005c80 <TIM_OC1_SetConfig>
      break;
 80056b4:	e025      	b.n	8005702 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68b9      	ldr	r1, [r7, #8]
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fb6f 	bl	8005da0 <TIM_OC2_SetConfig>
      break;
 80056c2:	e01e      	b.n	8005702 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fbf2 	bl	8005eb4 <TIM_OC3_SetConfig>
      break;
 80056d0:	e017      	b.n	8005702 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68b9      	ldr	r1, [r7, #8]
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fc73 	bl	8005fc4 <TIM_OC4_SetConfig>
      break;
 80056de:	e010      	b.n	8005702 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68b9      	ldr	r1, [r7, #8]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fcd6 	bl	8006098 <TIM_OC5_SetConfig>
      break;
 80056ec:	e009      	b.n	8005702 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68b9      	ldr	r1, [r7, #8]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 fd33 	bl	8006160 <TIM_OC6_SetConfig>
      break;
 80056fa:	e002      	b.n	8005702 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005700:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800570a:	7dfb      	ldrb	r3, [r7, #23]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005720:	2300      	movs	r3, #0
 8005722:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800572a:	2b01      	cmp	r3, #1
 800572c:	d101      	bne.n	8005732 <HAL_TIM_IC_ConfigChannel+0x1e>
 800572e:	2302      	movs	r3, #2
 8005730:	e088      	b.n	8005844 <HAL_TIM_IC_ConfigChannel+0x130>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d11b      	bne.n	8005778 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005750:	f000 fd6c 	bl	800622c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699a      	ldr	r2, [r3, #24]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 020c 	bic.w	r2, r2, #12
 8005762:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6999      	ldr	r1, [r3, #24]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	689a      	ldr	r2, [r3, #8]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	619a      	str	r2, [r3, #24]
 8005776:	e060      	b.n	800583a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b04      	cmp	r3, #4
 800577c:	d11c      	bne.n	80057b8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800578e:	f000 fdbb 	bl	8006308 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	699a      	ldr	r2, [r3, #24]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80057a0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6999      	ldr	r1, [r3, #24]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	021a      	lsls	r2, r3, #8
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	619a      	str	r2, [r3, #24]
 80057b6:	e040      	b.n	800583a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	d11b      	bne.n	80057f6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80057ce:	f000 fdd8 	bl	8006382 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69da      	ldr	r2, [r3, #28]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 020c 	bic.w	r2, r2, #12
 80057e0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69d9      	ldr	r1, [r3, #28]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	61da      	str	r2, [r3, #28]
 80057f4:	e021      	b.n	800583a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b0c      	cmp	r3, #12
 80057fa:	d11c      	bne.n	8005836 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800580c:	f000 fdf5 	bl	80063fa <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	69da      	ldr	r2, [r3, #28]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800581e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	69d9      	ldr	r1, [r3, #28]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	021a      	lsls	r2, r3, #8
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	61da      	str	r2, [r3, #28]
 8005834:	e001      	b.n	800583a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005842:	7dfb      	ldrb	r3, [r7, #23]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005862:	2b01      	cmp	r3, #1
 8005864:	d101      	bne.n	800586a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005866:	2302      	movs	r3, #2
 8005868:	e0ff      	b.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b14      	cmp	r3, #20
 8005876:	f200 80f0 	bhi.w	8005a5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800587a:	a201      	add	r2, pc, #4	@ (adr r2, 8005880 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800587c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005880:	080058d5 	.word	0x080058d5
 8005884:	08005a5b 	.word	0x08005a5b
 8005888:	08005a5b 	.word	0x08005a5b
 800588c:	08005a5b 	.word	0x08005a5b
 8005890:	08005915 	.word	0x08005915
 8005894:	08005a5b 	.word	0x08005a5b
 8005898:	08005a5b 	.word	0x08005a5b
 800589c:	08005a5b 	.word	0x08005a5b
 80058a0:	08005957 	.word	0x08005957
 80058a4:	08005a5b 	.word	0x08005a5b
 80058a8:	08005a5b 	.word	0x08005a5b
 80058ac:	08005a5b 	.word	0x08005a5b
 80058b0:	08005997 	.word	0x08005997
 80058b4:	08005a5b 	.word	0x08005a5b
 80058b8:	08005a5b 	.word	0x08005a5b
 80058bc:	08005a5b 	.word	0x08005a5b
 80058c0:	080059d9 	.word	0x080059d9
 80058c4:	08005a5b 	.word	0x08005a5b
 80058c8:	08005a5b 	.word	0x08005a5b
 80058cc:	08005a5b 	.word	0x08005a5b
 80058d0:	08005a19 	.word	0x08005a19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 f9d0 	bl	8005c80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0208 	orr.w	r2, r2, #8
 80058ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0204 	bic.w	r2, r2, #4
 80058fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6999      	ldr	r1, [r3, #24]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	691a      	ldr	r2, [r3, #16]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	619a      	str	r2, [r3, #24]
      break;
 8005912:	e0a5      	b.n	8005a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fa40 	bl	8005da0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800592e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800593e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6999      	ldr	r1, [r3, #24]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	021a      	lsls	r2, r3, #8
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	619a      	str	r2, [r3, #24]
      break;
 8005954:	e084      	b.n	8005a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	4618      	mov	r0, r3
 800595e:	f000 faa9 	bl	8005eb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0208 	orr.w	r2, r2, #8
 8005970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0204 	bic.w	r2, r2, #4
 8005980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69d9      	ldr	r1, [r3, #28]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	61da      	str	r2, [r3, #28]
      break;
 8005994:	e064      	b.n	8005a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68b9      	ldr	r1, [r7, #8]
 800599c:	4618      	mov	r0, r3
 800599e:	f000 fb11 	bl	8005fc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69da      	ldr	r2, [r3, #28]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69d9      	ldr	r1, [r3, #28]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	021a      	lsls	r2, r3, #8
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	61da      	str	r2, [r3, #28]
      break;
 80059d6:	e043      	b.n	8005a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68b9      	ldr	r1, [r7, #8]
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fb5a 	bl	8006098 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0208 	orr.w	r2, r2, #8
 80059f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0204 	bic.w	r2, r2, #4
 8005a02:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	691a      	ldr	r2, [r3, #16]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005a16:	e023      	b.n	8005a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68b9      	ldr	r1, [r7, #8]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fb9e 	bl	8006160 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a32:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a42:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	021a      	lsls	r2, r3, #8
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005a58:	e002      	b.n	8005a60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop

08005a74 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b0c      	cmp	r3, #12
 8005a86:	d831      	bhi.n	8005aec <HAL_TIM_ReadCapturedValue+0x78>
 8005a88:	a201      	add	r2, pc, #4	@ (adr r2, 8005a90 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005ac5 	.word	0x08005ac5
 8005a94:	08005aed 	.word	0x08005aed
 8005a98:	08005aed 	.word	0x08005aed
 8005a9c:	08005aed 	.word	0x08005aed
 8005aa0:	08005acf 	.word	0x08005acf
 8005aa4:	08005aed 	.word	0x08005aed
 8005aa8:	08005aed 	.word	0x08005aed
 8005aac:	08005aed 	.word	0x08005aed
 8005ab0:	08005ad9 	.word	0x08005ad9
 8005ab4:	08005aed 	.word	0x08005aed
 8005ab8:	08005aed 	.word	0x08005aed
 8005abc:	08005aed 	.word	0x08005aed
 8005ac0:	08005ae3 	.word	0x08005ae3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aca:	60fb      	str	r3, [r7, #12]

      break;
 8005acc:	e00f      	b.n	8005aee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad4:	60fb      	str	r3, [r7, #12]

      break;
 8005ad6:	e00a      	b.n	8005aee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ade:	60fb      	str	r3, [r7, #12]

      break;
 8005ae0:	e005      	b.n	8005aee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae8:	60fb      	str	r3, [r7, #12]

      break;
 8005aea:	e000      	b.n	8005aee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005aec:	bf00      	nop
  }

  return tmpreg;
 8005aee:	68fb      	ldr	r3, [r7, #12]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a40      	ldr	r2, [pc, #256]	@ (8005c60 <TIM_Base_SetConfig+0x114>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d013      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b6a:	d00f      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a3d      	ldr	r2, [pc, #244]	@ (8005c64 <TIM_Base_SetConfig+0x118>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00b      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a3c      	ldr	r2, [pc, #240]	@ (8005c68 <TIM_Base_SetConfig+0x11c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d007      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a3b      	ldr	r2, [pc, #236]	@ (8005c6c <TIM_Base_SetConfig+0x120>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a3a      	ldr	r2, [pc, #232]	@ (8005c70 <TIM_Base_SetConfig+0x124>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d108      	bne.n	8005b9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8005c60 <TIM_Base_SetConfig+0x114>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01f      	beq.n	8005be6 <TIM_Base_SetConfig+0x9a>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bac:	d01b      	beq.n	8005be6 <TIM_Base_SetConfig+0x9a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a2c      	ldr	r2, [pc, #176]	@ (8005c64 <TIM_Base_SetConfig+0x118>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d017      	beq.n	8005be6 <TIM_Base_SetConfig+0x9a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a2b      	ldr	r2, [pc, #172]	@ (8005c68 <TIM_Base_SetConfig+0x11c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d013      	beq.n	8005be6 <TIM_Base_SetConfig+0x9a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8005c6c <TIM_Base_SetConfig+0x120>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00f      	beq.n	8005be6 <TIM_Base_SetConfig+0x9a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a29      	ldr	r2, [pc, #164]	@ (8005c70 <TIM_Base_SetConfig+0x124>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00b      	beq.n	8005be6 <TIM_Base_SetConfig+0x9a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a28      	ldr	r2, [pc, #160]	@ (8005c74 <TIM_Base_SetConfig+0x128>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d007      	beq.n	8005be6 <TIM_Base_SetConfig+0x9a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a27      	ldr	r2, [pc, #156]	@ (8005c78 <TIM_Base_SetConfig+0x12c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d003      	beq.n	8005be6 <TIM_Base_SetConfig+0x9a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a26      	ldr	r2, [pc, #152]	@ (8005c7c <TIM_Base_SetConfig+0x130>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d108      	bne.n	8005bf8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a10      	ldr	r2, [pc, #64]	@ (8005c60 <TIM_Base_SetConfig+0x114>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00f      	beq.n	8005c44 <TIM_Base_SetConfig+0xf8>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a12      	ldr	r2, [pc, #72]	@ (8005c70 <TIM_Base_SetConfig+0x124>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d00b      	beq.n	8005c44 <TIM_Base_SetConfig+0xf8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a11      	ldr	r2, [pc, #68]	@ (8005c74 <TIM_Base_SetConfig+0x128>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d007      	beq.n	8005c44 <TIM_Base_SetConfig+0xf8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a10      	ldr	r2, [pc, #64]	@ (8005c78 <TIM_Base_SetConfig+0x12c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d003      	beq.n	8005c44 <TIM_Base_SetConfig+0xf8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a0f      	ldr	r2, [pc, #60]	@ (8005c7c <TIM_Base_SetConfig+0x130>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d103      	bne.n	8005c4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	615a      	str	r2, [r3, #20]
}
 8005c52:	bf00      	nop
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40012c00 	.word	0x40012c00
 8005c64:	40000400 	.word	0x40000400
 8005c68:	40000800 	.word	0x40000800
 8005c6c:	40000c00 	.word	0x40000c00
 8005c70:	40013400 	.word	0x40013400
 8005c74:	40014000 	.word	0x40014000
 8005c78:	40014400 	.word	0x40014400
 8005c7c:	40014800 	.word	0x40014800

08005c80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	f023 0201 	bic.w	r2, r3, #1
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0303 	bic.w	r3, r3, #3
 8005cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f023 0302 	bic.w	r3, r3, #2
 8005ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a2c      	ldr	r2, [pc, #176]	@ (8005d8c <TIM_OC1_SetConfig+0x10c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00f      	beq.n	8005d00 <TIM_OC1_SetConfig+0x80>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a2b      	ldr	r2, [pc, #172]	@ (8005d90 <TIM_OC1_SetConfig+0x110>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00b      	beq.n	8005d00 <TIM_OC1_SetConfig+0x80>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a2a      	ldr	r2, [pc, #168]	@ (8005d94 <TIM_OC1_SetConfig+0x114>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d007      	beq.n	8005d00 <TIM_OC1_SetConfig+0x80>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a29      	ldr	r2, [pc, #164]	@ (8005d98 <TIM_OC1_SetConfig+0x118>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d003      	beq.n	8005d00 <TIM_OC1_SetConfig+0x80>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a28      	ldr	r2, [pc, #160]	@ (8005d9c <TIM_OC1_SetConfig+0x11c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d10c      	bne.n	8005d1a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f023 0308 	bic.w	r3, r3, #8
 8005d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f023 0304 	bic.w	r3, r3, #4
 8005d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8005d8c <TIM_OC1_SetConfig+0x10c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00f      	beq.n	8005d42 <TIM_OC1_SetConfig+0xc2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a1a      	ldr	r2, [pc, #104]	@ (8005d90 <TIM_OC1_SetConfig+0x110>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00b      	beq.n	8005d42 <TIM_OC1_SetConfig+0xc2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a19      	ldr	r2, [pc, #100]	@ (8005d94 <TIM_OC1_SetConfig+0x114>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d007      	beq.n	8005d42 <TIM_OC1_SetConfig+0xc2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a18      	ldr	r2, [pc, #96]	@ (8005d98 <TIM_OC1_SetConfig+0x118>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d003      	beq.n	8005d42 <TIM_OC1_SetConfig+0xc2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a17      	ldr	r2, [pc, #92]	@ (8005d9c <TIM_OC1_SetConfig+0x11c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d111      	bne.n	8005d66 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	621a      	str	r2, [r3, #32]
}
 8005d80:	bf00      	nop
 8005d82:	371c      	adds	r7, #28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	40012c00 	.word	0x40012c00
 8005d90:	40013400 	.word	0x40013400
 8005d94:	40014000 	.word	0x40014000
 8005d98:	40014400 	.word	0x40014400
 8005d9c:	40014800 	.word	0x40014800

08005da0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	f023 0210 	bic.w	r2, r3, #16
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	021b      	lsls	r3, r3, #8
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f023 0320 	bic.w	r3, r3, #32
 8005dee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a28      	ldr	r2, [pc, #160]	@ (8005ea0 <TIM_OC2_SetConfig+0x100>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d003      	beq.n	8005e0c <TIM_OC2_SetConfig+0x6c>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a27      	ldr	r2, [pc, #156]	@ (8005ea4 <TIM_OC2_SetConfig+0x104>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d10d      	bne.n	8005e28 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8005ea0 <TIM_OC2_SetConfig+0x100>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00f      	beq.n	8005e50 <TIM_OC2_SetConfig+0xb0>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea4 <TIM_OC2_SetConfig+0x104>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00b      	beq.n	8005e50 <TIM_OC2_SetConfig+0xb0>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea8 <TIM_OC2_SetConfig+0x108>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d007      	beq.n	8005e50 <TIM_OC2_SetConfig+0xb0>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a1a      	ldr	r2, [pc, #104]	@ (8005eac <TIM_OC2_SetConfig+0x10c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d003      	beq.n	8005e50 <TIM_OC2_SetConfig+0xb0>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a19      	ldr	r2, [pc, #100]	@ (8005eb0 <TIM_OC2_SetConfig+0x110>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d113      	bne.n	8005e78 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	621a      	str	r2, [r3, #32]
}
 8005e92:	bf00      	nop
 8005e94:	371c      	adds	r7, #28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40012c00 	.word	0x40012c00
 8005ea4:	40013400 	.word	0x40013400
 8005ea8:	40014000 	.word	0x40014000
 8005eac:	40014400 	.word	0x40014400
 8005eb0:	40014800 	.word	0x40014800

08005eb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0303 	bic.w	r3, r3, #3
 8005eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	021b      	lsls	r3, r3, #8
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a27      	ldr	r2, [pc, #156]	@ (8005fb0 <TIM_OC3_SetConfig+0xfc>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d003      	beq.n	8005f1e <TIM_OC3_SetConfig+0x6a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a26      	ldr	r2, [pc, #152]	@ (8005fb4 <TIM_OC3_SetConfig+0x100>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d10d      	bne.n	8005f3a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	021b      	lsls	r3, r3, #8
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005fb0 <TIM_OC3_SetConfig+0xfc>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d00f      	beq.n	8005f62 <TIM_OC3_SetConfig+0xae>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a1b      	ldr	r2, [pc, #108]	@ (8005fb4 <TIM_OC3_SetConfig+0x100>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d00b      	beq.n	8005f62 <TIM_OC3_SetConfig+0xae>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a1a      	ldr	r2, [pc, #104]	@ (8005fb8 <TIM_OC3_SetConfig+0x104>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d007      	beq.n	8005f62 <TIM_OC3_SetConfig+0xae>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a19      	ldr	r2, [pc, #100]	@ (8005fbc <TIM_OC3_SetConfig+0x108>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d003      	beq.n	8005f62 <TIM_OC3_SetConfig+0xae>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a18      	ldr	r2, [pc, #96]	@ (8005fc0 <TIM_OC3_SetConfig+0x10c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d113      	bne.n	8005f8a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	011b      	lsls	r3, r3, #4
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	621a      	str	r2, [r3, #32]
}
 8005fa4:	bf00      	nop
 8005fa6:	371c      	adds	r7, #28
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	40012c00 	.word	0x40012c00
 8005fb4:	40013400 	.word	0x40013400
 8005fb8:	40014000 	.word	0x40014000
 8005fbc:	40014400 	.word	0x40014400
 8005fc0:	40014800 	.word	0x40014800

08005fc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	021b      	lsls	r3, r3, #8
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4313      	orrs	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	031b      	lsls	r3, r3, #12
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	4313      	orrs	r3, r2
 800601e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a18      	ldr	r2, [pc, #96]	@ (8006084 <TIM_OC4_SetConfig+0xc0>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d00f      	beq.n	8006048 <TIM_OC4_SetConfig+0x84>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a17      	ldr	r2, [pc, #92]	@ (8006088 <TIM_OC4_SetConfig+0xc4>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d00b      	beq.n	8006048 <TIM_OC4_SetConfig+0x84>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a16      	ldr	r2, [pc, #88]	@ (800608c <TIM_OC4_SetConfig+0xc8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d007      	beq.n	8006048 <TIM_OC4_SetConfig+0x84>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a15      	ldr	r2, [pc, #84]	@ (8006090 <TIM_OC4_SetConfig+0xcc>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d003      	beq.n	8006048 <TIM_OC4_SetConfig+0x84>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a14      	ldr	r2, [pc, #80]	@ (8006094 <TIM_OC4_SetConfig+0xd0>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d109      	bne.n	800605c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800604e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	019b      	lsls	r3, r3, #6
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	4313      	orrs	r3, r2
 800605a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	621a      	str	r2, [r3, #32]
}
 8006076:	bf00      	nop
 8006078:	371c      	adds	r7, #28
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40012c00 	.word	0x40012c00
 8006088:	40013400 	.word	0x40013400
 800608c:	40014000 	.word	0x40014000
 8006090:	40014400 	.word	0x40014400
 8006094:	40014800 	.word	0x40014800

08006098 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80060dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	041b      	lsls	r3, r3, #16
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a17      	ldr	r2, [pc, #92]	@ (800614c <TIM_OC5_SetConfig+0xb4>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d00f      	beq.n	8006112 <TIM_OC5_SetConfig+0x7a>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a16      	ldr	r2, [pc, #88]	@ (8006150 <TIM_OC5_SetConfig+0xb8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00b      	beq.n	8006112 <TIM_OC5_SetConfig+0x7a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a15      	ldr	r2, [pc, #84]	@ (8006154 <TIM_OC5_SetConfig+0xbc>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d007      	beq.n	8006112 <TIM_OC5_SetConfig+0x7a>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a14      	ldr	r2, [pc, #80]	@ (8006158 <TIM_OC5_SetConfig+0xc0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d003      	beq.n	8006112 <TIM_OC5_SetConfig+0x7a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a13      	ldr	r2, [pc, #76]	@ (800615c <TIM_OC5_SetConfig+0xc4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d109      	bne.n	8006126 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006118:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	021b      	lsls	r3, r3, #8
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	621a      	str	r2, [r3, #32]
}
 8006140:	bf00      	nop
 8006142:	371c      	adds	r7, #28
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	40012c00 	.word	0x40012c00
 8006150:	40013400 	.word	0x40013400
 8006154:	40014000 	.word	0x40014000
 8006158:	40014400 	.word	0x40014400
 800615c:	40014800 	.word	0x40014800

08006160 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800618e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80061a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	051b      	lsls	r3, r3, #20
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a18      	ldr	r2, [pc, #96]	@ (8006218 <TIM_OC6_SetConfig+0xb8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00f      	beq.n	80061dc <TIM_OC6_SetConfig+0x7c>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a17      	ldr	r2, [pc, #92]	@ (800621c <TIM_OC6_SetConfig+0xbc>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d00b      	beq.n	80061dc <TIM_OC6_SetConfig+0x7c>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a16      	ldr	r2, [pc, #88]	@ (8006220 <TIM_OC6_SetConfig+0xc0>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d007      	beq.n	80061dc <TIM_OC6_SetConfig+0x7c>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a15      	ldr	r2, [pc, #84]	@ (8006224 <TIM_OC6_SetConfig+0xc4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d003      	beq.n	80061dc <TIM_OC6_SetConfig+0x7c>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a14      	ldr	r2, [pc, #80]	@ (8006228 <TIM_OC6_SetConfig+0xc8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d109      	bne.n	80061f0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	029b      	lsls	r3, r3, #10
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	621a      	str	r2, [r3, #32]
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	40012c00 	.word	0x40012c00
 800621c:	40013400 	.word	0x40013400
 8006220:	40014000 	.word	0x40014000
 8006224:	40014400 	.word	0x40014400
 8006228:	40014800 	.word	0x40014800

0800622c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	f023 0201 	bic.w	r2, r3, #1
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4a26      	ldr	r2, [pc, #152]	@ (80062f0 <TIM_TI1_SetConfig+0xc4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d017      	beq.n	800628a <TIM_TI1_SetConfig+0x5e>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006260:	d013      	beq.n	800628a <TIM_TI1_SetConfig+0x5e>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4a23      	ldr	r2, [pc, #140]	@ (80062f4 <TIM_TI1_SetConfig+0xc8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00f      	beq.n	800628a <TIM_TI1_SetConfig+0x5e>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4a22      	ldr	r2, [pc, #136]	@ (80062f8 <TIM_TI1_SetConfig+0xcc>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00b      	beq.n	800628a <TIM_TI1_SetConfig+0x5e>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4a21      	ldr	r2, [pc, #132]	@ (80062fc <TIM_TI1_SetConfig+0xd0>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d007      	beq.n	800628a <TIM_TI1_SetConfig+0x5e>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4a20      	ldr	r2, [pc, #128]	@ (8006300 <TIM_TI1_SetConfig+0xd4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d003      	beq.n	800628a <TIM_TI1_SetConfig+0x5e>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4a1f      	ldr	r2, [pc, #124]	@ (8006304 <TIM_TI1_SetConfig+0xd8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d101      	bne.n	800628e <TIM_TI1_SetConfig+0x62>
 800628a:	2301      	movs	r3, #1
 800628c:	e000      	b.n	8006290 <TIM_TI1_SetConfig+0x64>
 800628e:	2300      	movs	r3, #0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d008      	beq.n	80062a6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f023 0303 	bic.w	r3, r3, #3
 800629a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	617b      	str	r3, [r7, #20]
 80062a4:	e003      	b.n	80062ae <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f043 0301 	orr.w	r3, r3, #1
 80062ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	4313      	orrs	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f023 030a 	bic.w	r3, r3, #10
 80062c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	f003 030a 	and.w	r3, r3, #10
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	621a      	str	r2, [r3, #32]
}
 80062e2:	bf00      	nop
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40012c00 	.word	0x40012c00
 80062f4:	40000400 	.word	0x40000400
 80062f8:	40000800 	.word	0x40000800
 80062fc:	40000c00 	.word	0x40000c00
 8006300:	40013400 	.word	0x40013400
 8006304:	40014000 	.word	0x40014000

08006308 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
 8006314:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	f023 0210 	bic.w	r2, r3, #16
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006334:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	021b      	lsls	r3, r3, #8
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4313      	orrs	r3, r2
 800633e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	031b      	lsls	r3, r3, #12
 800634c:	b29b      	uxth	r3, r3
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800635a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	011b      	lsls	r3, r3, #4
 8006360:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	4313      	orrs	r3, r2
 8006368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	621a      	str	r2, [r3, #32]
}
 8006376:	bf00      	nop
 8006378:	371c      	adds	r7, #28
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006382:	b480      	push	{r7}
 8006384:	b087      	sub	sp, #28
 8006386:	af00      	add	r7, sp, #0
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	607a      	str	r2, [r7, #4]
 800638e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f023 0303 	bic.w	r3, r3, #3
 80063ae:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063be:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80063d2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	021b      	lsls	r3, r3, #8
 80063d8:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	4313      	orrs	r3, r2
 80063e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	621a      	str	r2, [r3, #32]
}
 80063ee:	bf00      	nop
 80063f0:	371c      	adds	r7, #28
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b087      	sub	sp, #28
 80063fe:	af00      	add	r7, sp, #0
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	607a      	str	r2, [r7, #4]
 8006406:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006426:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	021b      	lsls	r3, r3, #8
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	4313      	orrs	r3, r2
 8006430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006438:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	031b      	lsls	r3, r3, #12
 800643e:	b29b      	uxth	r3, r3
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800644c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	031b      	lsls	r3, r3, #12
 8006452:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	621a      	str	r2, [r3, #32]
}
 8006468:	bf00      	nop
 800646a:	371c      	adds	r7, #28
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006488:	2302      	movs	r3, #2
 800648a:	e068      	b.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a2e      	ldr	r2, [pc, #184]	@ (800656c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d004      	beq.n	80064c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a2d      	ldr	r2, [pc, #180]	@ (8006570 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d108      	bne.n	80064d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a1e      	ldr	r2, [pc, #120]	@ (800656c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d01d      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064fe:	d018      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a1b      	ldr	r2, [pc, #108]	@ (8006574 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d013      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a1a      	ldr	r2, [pc, #104]	@ (8006578 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d00e      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a18      	ldr	r2, [pc, #96]	@ (800657c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d009      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a13      	ldr	r2, [pc, #76]	@ (8006570 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d004      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a14      	ldr	r2, [pc, #80]	@ (8006580 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d10c      	bne.n	800654c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006538:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	4313      	orrs	r3, r2
 8006542:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	40012c00 	.word	0x40012c00
 8006570:	40013400 	.word	0x40013400
 8006574:	40000400 	.word	0x40000400
 8006578:	40000800 	.word	0x40000800
 800657c:	40000c00 	.word	0x40000c00
 8006580:	40014000 	.word	0x40014000

08006584 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800659c:	2302      	movs	r3, #2
 800659e:	e065      	b.n	800666c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	041b      	lsls	r3, r3, #16
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a16      	ldr	r2, [pc, #88]	@ (8006678 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d004      	beq.n	800662e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a14      	ldr	r2, [pc, #80]	@ (800667c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d115      	bne.n	800665a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006638:	051b      	lsls	r3, r3, #20
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	4313      	orrs	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	40012c00 	.word	0x40012c00
 800667c:	40013400 	.word	0x40013400

08006680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e040      	b.n	8006750 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d106      	bne.n	80066e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fb f97c 	bl	80019dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2224      	movs	r2, #36	@ 0x24
 80066e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0201 	bic.w	r2, r2, #1
 80066f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d002      	beq.n	8006708 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fae0 	bl	8006cc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f825 	bl	8006758 <UART_SetConfig>
 800670e:	4603      	mov	r3, r0
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e01b      	b.n	8006750 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006726:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006736:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0201 	orr.w	r2, r2, #1
 8006746:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fb5f 	bl	8006e0c <UART_CheckIdleState>
 800674e:	4603      	mov	r3, r0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800675c:	b08a      	sub	sp, #40	@ 0x28
 800675e:	af00      	add	r7, sp, #0
 8006760:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	431a      	orrs	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	431a      	orrs	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	4313      	orrs	r3, r2
 800677e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	4ba4      	ldr	r3, [pc, #656]	@ (8006a18 <UART_SetConfig+0x2c0>)
 8006788:	4013      	ands	r3, r2
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	6812      	ldr	r2, [r2, #0]
 800678e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006790:	430b      	orrs	r3, r1
 8006792:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a99      	ldr	r2, [pc, #612]	@ (8006a1c <UART_SetConfig+0x2c4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d004      	beq.n	80067c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067c0:	4313      	orrs	r3, r2
 80067c2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d4:	430a      	orrs	r2, r1
 80067d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a90      	ldr	r2, [pc, #576]	@ (8006a20 <UART_SetConfig+0x2c8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d126      	bne.n	8006830 <UART_SetConfig+0xd8>
 80067e2:	4b90      	ldr	r3, [pc, #576]	@ (8006a24 <UART_SetConfig+0x2cc>)
 80067e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067e8:	f003 0303 	and.w	r3, r3, #3
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	d81b      	bhi.n	8006828 <UART_SetConfig+0xd0>
 80067f0:	a201      	add	r2, pc, #4	@ (adr r2, 80067f8 <UART_SetConfig+0xa0>)
 80067f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f6:	bf00      	nop
 80067f8:	08006809 	.word	0x08006809
 80067fc:	08006819 	.word	0x08006819
 8006800:	08006811 	.word	0x08006811
 8006804:	08006821 	.word	0x08006821
 8006808:	2301      	movs	r3, #1
 800680a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800680e:	e116      	b.n	8006a3e <UART_SetConfig+0x2e6>
 8006810:	2302      	movs	r3, #2
 8006812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006816:	e112      	b.n	8006a3e <UART_SetConfig+0x2e6>
 8006818:	2304      	movs	r3, #4
 800681a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800681e:	e10e      	b.n	8006a3e <UART_SetConfig+0x2e6>
 8006820:	2308      	movs	r3, #8
 8006822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006826:	e10a      	b.n	8006a3e <UART_SetConfig+0x2e6>
 8006828:	2310      	movs	r3, #16
 800682a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800682e:	e106      	b.n	8006a3e <UART_SetConfig+0x2e6>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a7c      	ldr	r2, [pc, #496]	@ (8006a28 <UART_SetConfig+0x2d0>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d138      	bne.n	80068ac <UART_SetConfig+0x154>
 800683a:	4b7a      	ldr	r3, [pc, #488]	@ (8006a24 <UART_SetConfig+0x2cc>)
 800683c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006840:	f003 030c 	and.w	r3, r3, #12
 8006844:	2b0c      	cmp	r3, #12
 8006846:	d82d      	bhi.n	80068a4 <UART_SetConfig+0x14c>
 8006848:	a201      	add	r2, pc, #4	@ (adr r2, 8006850 <UART_SetConfig+0xf8>)
 800684a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684e:	bf00      	nop
 8006850:	08006885 	.word	0x08006885
 8006854:	080068a5 	.word	0x080068a5
 8006858:	080068a5 	.word	0x080068a5
 800685c:	080068a5 	.word	0x080068a5
 8006860:	08006895 	.word	0x08006895
 8006864:	080068a5 	.word	0x080068a5
 8006868:	080068a5 	.word	0x080068a5
 800686c:	080068a5 	.word	0x080068a5
 8006870:	0800688d 	.word	0x0800688d
 8006874:	080068a5 	.word	0x080068a5
 8006878:	080068a5 	.word	0x080068a5
 800687c:	080068a5 	.word	0x080068a5
 8006880:	0800689d 	.word	0x0800689d
 8006884:	2300      	movs	r3, #0
 8006886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800688a:	e0d8      	b.n	8006a3e <UART_SetConfig+0x2e6>
 800688c:	2302      	movs	r3, #2
 800688e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006892:	e0d4      	b.n	8006a3e <UART_SetConfig+0x2e6>
 8006894:	2304      	movs	r3, #4
 8006896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800689a:	e0d0      	b.n	8006a3e <UART_SetConfig+0x2e6>
 800689c:	2308      	movs	r3, #8
 800689e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068a2:	e0cc      	b.n	8006a3e <UART_SetConfig+0x2e6>
 80068a4:	2310      	movs	r3, #16
 80068a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068aa:	e0c8      	b.n	8006a3e <UART_SetConfig+0x2e6>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a5e      	ldr	r2, [pc, #376]	@ (8006a2c <UART_SetConfig+0x2d4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d125      	bne.n	8006902 <UART_SetConfig+0x1aa>
 80068b6:	4b5b      	ldr	r3, [pc, #364]	@ (8006a24 <UART_SetConfig+0x2cc>)
 80068b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80068c0:	2b30      	cmp	r3, #48	@ 0x30
 80068c2:	d016      	beq.n	80068f2 <UART_SetConfig+0x19a>
 80068c4:	2b30      	cmp	r3, #48	@ 0x30
 80068c6:	d818      	bhi.n	80068fa <UART_SetConfig+0x1a2>
 80068c8:	2b20      	cmp	r3, #32
 80068ca:	d00a      	beq.n	80068e2 <UART_SetConfig+0x18a>
 80068cc:	2b20      	cmp	r3, #32
 80068ce:	d814      	bhi.n	80068fa <UART_SetConfig+0x1a2>
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <UART_SetConfig+0x182>
 80068d4:	2b10      	cmp	r3, #16
 80068d6:	d008      	beq.n	80068ea <UART_SetConfig+0x192>
 80068d8:	e00f      	b.n	80068fa <UART_SetConfig+0x1a2>
 80068da:	2300      	movs	r3, #0
 80068dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068e0:	e0ad      	b.n	8006a3e <UART_SetConfig+0x2e6>
 80068e2:	2302      	movs	r3, #2
 80068e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068e8:	e0a9      	b.n	8006a3e <UART_SetConfig+0x2e6>
 80068ea:	2304      	movs	r3, #4
 80068ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068f0:	e0a5      	b.n	8006a3e <UART_SetConfig+0x2e6>
 80068f2:	2308      	movs	r3, #8
 80068f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068f8:	e0a1      	b.n	8006a3e <UART_SetConfig+0x2e6>
 80068fa:	2310      	movs	r3, #16
 80068fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006900:	e09d      	b.n	8006a3e <UART_SetConfig+0x2e6>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a4a      	ldr	r2, [pc, #296]	@ (8006a30 <UART_SetConfig+0x2d8>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d125      	bne.n	8006958 <UART_SetConfig+0x200>
 800690c:	4b45      	ldr	r3, [pc, #276]	@ (8006a24 <UART_SetConfig+0x2cc>)
 800690e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006912:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006916:	2bc0      	cmp	r3, #192	@ 0xc0
 8006918:	d016      	beq.n	8006948 <UART_SetConfig+0x1f0>
 800691a:	2bc0      	cmp	r3, #192	@ 0xc0
 800691c:	d818      	bhi.n	8006950 <UART_SetConfig+0x1f8>
 800691e:	2b80      	cmp	r3, #128	@ 0x80
 8006920:	d00a      	beq.n	8006938 <UART_SetConfig+0x1e0>
 8006922:	2b80      	cmp	r3, #128	@ 0x80
 8006924:	d814      	bhi.n	8006950 <UART_SetConfig+0x1f8>
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <UART_SetConfig+0x1d8>
 800692a:	2b40      	cmp	r3, #64	@ 0x40
 800692c:	d008      	beq.n	8006940 <UART_SetConfig+0x1e8>
 800692e:	e00f      	b.n	8006950 <UART_SetConfig+0x1f8>
 8006930:	2300      	movs	r3, #0
 8006932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006936:	e082      	b.n	8006a3e <UART_SetConfig+0x2e6>
 8006938:	2302      	movs	r3, #2
 800693a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800693e:	e07e      	b.n	8006a3e <UART_SetConfig+0x2e6>
 8006940:	2304      	movs	r3, #4
 8006942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006946:	e07a      	b.n	8006a3e <UART_SetConfig+0x2e6>
 8006948:	2308      	movs	r3, #8
 800694a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800694e:	e076      	b.n	8006a3e <UART_SetConfig+0x2e6>
 8006950:	2310      	movs	r3, #16
 8006952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006956:	e072      	b.n	8006a3e <UART_SetConfig+0x2e6>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a35      	ldr	r2, [pc, #212]	@ (8006a34 <UART_SetConfig+0x2dc>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d12a      	bne.n	80069b8 <UART_SetConfig+0x260>
 8006962:	4b30      	ldr	r3, [pc, #192]	@ (8006a24 <UART_SetConfig+0x2cc>)
 8006964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006968:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800696c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006970:	d01a      	beq.n	80069a8 <UART_SetConfig+0x250>
 8006972:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006976:	d81b      	bhi.n	80069b0 <UART_SetConfig+0x258>
 8006978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800697c:	d00c      	beq.n	8006998 <UART_SetConfig+0x240>
 800697e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006982:	d815      	bhi.n	80069b0 <UART_SetConfig+0x258>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <UART_SetConfig+0x238>
 8006988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800698c:	d008      	beq.n	80069a0 <UART_SetConfig+0x248>
 800698e:	e00f      	b.n	80069b0 <UART_SetConfig+0x258>
 8006990:	2300      	movs	r3, #0
 8006992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006996:	e052      	b.n	8006a3e <UART_SetConfig+0x2e6>
 8006998:	2302      	movs	r3, #2
 800699a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800699e:	e04e      	b.n	8006a3e <UART_SetConfig+0x2e6>
 80069a0:	2304      	movs	r3, #4
 80069a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069a6:	e04a      	b.n	8006a3e <UART_SetConfig+0x2e6>
 80069a8:	2308      	movs	r3, #8
 80069aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ae:	e046      	b.n	8006a3e <UART_SetConfig+0x2e6>
 80069b0:	2310      	movs	r3, #16
 80069b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069b6:	e042      	b.n	8006a3e <UART_SetConfig+0x2e6>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a17      	ldr	r2, [pc, #92]	@ (8006a1c <UART_SetConfig+0x2c4>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d13a      	bne.n	8006a38 <UART_SetConfig+0x2e0>
 80069c2:	4b18      	ldr	r3, [pc, #96]	@ (8006a24 <UART_SetConfig+0x2cc>)
 80069c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80069cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069d0:	d01a      	beq.n	8006a08 <UART_SetConfig+0x2b0>
 80069d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069d6:	d81b      	bhi.n	8006a10 <UART_SetConfig+0x2b8>
 80069d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069dc:	d00c      	beq.n	80069f8 <UART_SetConfig+0x2a0>
 80069de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069e2:	d815      	bhi.n	8006a10 <UART_SetConfig+0x2b8>
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d003      	beq.n	80069f0 <UART_SetConfig+0x298>
 80069e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069ec:	d008      	beq.n	8006a00 <UART_SetConfig+0x2a8>
 80069ee:	e00f      	b.n	8006a10 <UART_SetConfig+0x2b8>
 80069f0:	2300      	movs	r3, #0
 80069f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069f6:	e022      	b.n	8006a3e <UART_SetConfig+0x2e6>
 80069f8:	2302      	movs	r3, #2
 80069fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069fe:	e01e      	b.n	8006a3e <UART_SetConfig+0x2e6>
 8006a00:	2304      	movs	r3, #4
 8006a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a06:	e01a      	b.n	8006a3e <UART_SetConfig+0x2e6>
 8006a08:	2308      	movs	r3, #8
 8006a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a0e:	e016      	b.n	8006a3e <UART_SetConfig+0x2e6>
 8006a10:	2310      	movs	r3, #16
 8006a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a16:	e012      	b.n	8006a3e <UART_SetConfig+0x2e6>
 8006a18:	efff69f3 	.word	0xefff69f3
 8006a1c:	40008000 	.word	0x40008000
 8006a20:	40013800 	.word	0x40013800
 8006a24:	40021000 	.word	0x40021000
 8006a28:	40004400 	.word	0x40004400
 8006a2c:	40004800 	.word	0x40004800
 8006a30:	40004c00 	.word	0x40004c00
 8006a34:	40005000 	.word	0x40005000
 8006a38:	2310      	movs	r3, #16
 8006a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a9f      	ldr	r2, [pc, #636]	@ (8006cc0 <UART_SetConfig+0x568>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d17a      	bne.n	8006b3e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d824      	bhi.n	8006a9a <UART_SetConfig+0x342>
 8006a50:	a201      	add	r2, pc, #4	@ (adr r2, 8006a58 <UART_SetConfig+0x300>)
 8006a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a56:	bf00      	nop
 8006a58:	08006a7d 	.word	0x08006a7d
 8006a5c:	08006a9b 	.word	0x08006a9b
 8006a60:	08006a85 	.word	0x08006a85
 8006a64:	08006a9b 	.word	0x08006a9b
 8006a68:	08006a8b 	.word	0x08006a8b
 8006a6c:	08006a9b 	.word	0x08006a9b
 8006a70:	08006a9b 	.word	0x08006a9b
 8006a74:	08006a9b 	.word	0x08006a9b
 8006a78:	08006a93 	.word	0x08006a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a7c:	f7fd fd5e 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8006a80:	61f8      	str	r0, [r7, #28]
        break;
 8006a82:	e010      	b.n	8006aa6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a84:	4b8f      	ldr	r3, [pc, #572]	@ (8006cc4 <UART_SetConfig+0x56c>)
 8006a86:	61fb      	str	r3, [r7, #28]
        break;
 8006a88:	e00d      	b.n	8006aa6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a8a:	f7fd fcbf 	bl	800440c <HAL_RCC_GetSysClockFreq>
 8006a8e:	61f8      	str	r0, [r7, #28]
        break;
 8006a90:	e009      	b.n	8006aa6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a96:	61fb      	str	r3, [r7, #28]
        break;
 8006a98:	e005      	b.n	8006aa6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006aa4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 80fb 	beq.w	8006ca4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	4413      	add	r3, r2
 8006ab8:	69fa      	ldr	r2, [r7, #28]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d305      	bcc.n	8006aca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ac4:	69fa      	ldr	r2, [r7, #28]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d903      	bls.n	8006ad2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006ad0:	e0e8      	b.n	8006ca4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	461c      	mov	r4, r3
 8006ad8:	4615      	mov	r5, r2
 8006ada:	f04f 0200 	mov.w	r2, #0
 8006ade:	f04f 0300 	mov.w	r3, #0
 8006ae2:	022b      	lsls	r3, r5, #8
 8006ae4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006ae8:	0222      	lsls	r2, r4, #8
 8006aea:	68f9      	ldr	r1, [r7, #12]
 8006aec:	6849      	ldr	r1, [r1, #4]
 8006aee:	0849      	lsrs	r1, r1, #1
 8006af0:	2000      	movs	r0, #0
 8006af2:	4688      	mov	r8, r1
 8006af4:	4681      	mov	r9, r0
 8006af6:	eb12 0a08 	adds.w	sl, r2, r8
 8006afa:	eb43 0b09 	adc.w	fp, r3, r9
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	603b      	str	r3, [r7, #0]
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b0c:	4650      	mov	r0, sl
 8006b0e:	4659      	mov	r1, fp
 8006b10:	f7f9 fb5a 	bl	80001c8 <__aeabi_uldivmod>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4613      	mov	r3, r2
 8006b1a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b22:	d308      	bcc.n	8006b36 <UART_SetConfig+0x3de>
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b2a:	d204      	bcs.n	8006b36 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	60da      	str	r2, [r3, #12]
 8006b34:	e0b6      	b.n	8006ca4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b3c:	e0b2      	b.n	8006ca4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b46:	d15e      	bne.n	8006c06 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006b48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d828      	bhi.n	8006ba2 <UART_SetConfig+0x44a>
 8006b50:	a201      	add	r2, pc, #4	@ (adr r2, 8006b58 <UART_SetConfig+0x400>)
 8006b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b56:	bf00      	nop
 8006b58:	08006b7d 	.word	0x08006b7d
 8006b5c:	08006b85 	.word	0x08006b85
 8006b60:	08006b8d 	.word	0x08006b8d
 8006b64:	08006ba3 	.word	0x08006ba3
 8006b68:	08006b93 	.word	0x08006b93
 8006b6c:	08006ba3 	.word	0x08006ba3
 8006b70:	08006ba3 	.word	0x08006ba3
 8006b74:	08006ba3 	.word	0x08006ba3
 8006b78:	08006b9b 	.word	0x08006b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b7c:	f7fd fcde 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8006b80:	61f8      	str	r0, [r7, #28]
        break;
 8006b82:	e014      	b.n	8006bae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b84:	f7fd fcf0 	bl	8004568 <HAL_RCC_GetPCLK2Freq>
 8006b88:	61f8      	str	r0, [r7, #28]
        break;
 8006b8a:	e010      	b.n	8006bae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b8c:	4b4d      	ldr	r3, [pc, #308]	@ (8006cc4 <UART_SetConfig+0x56c>)
 8006b8e:	61fb      	str	r3, [r7, #28]
        break;
 8006b90:	e00d      	b.n	8006bae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b92:	f7fd fc3b 	bl	800440c <HAL_RCC_GetSysClockFreq>
 8006b96:	61f8      	str	r0, [r7, #28]
        break;
 8006b98:	e009      	b.n	8006bae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b9e:	61fb      	str	r3, [r7, #28]
        break;
 8006ba0:	e005      	b.n	8006bae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006bac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d077      	beq.n	8006ca4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	005a      	lsls	r2, r3, #1
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	085b      	lsrs	r3, r3, #1
 8006bbe:	441a      	add	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	2b0f      	cmp	r3, #15
 8006bce:	d916      	bls.n	8006bfe <UART_SetConfig+0x4a6>
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bd6:	d212      	bcs.n	8006bfe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	f023 030f 	bic.w	r3, r3, #15
 8006be0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	085b      	lsrs	r3, r3, #1
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	8afb      	ldrh	r3, [r7, #22]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	8afa      	ldrh	r2, [r7, #22]
 8006bfa:	60da      	str	r2, [r3, #12]
 8006bfc:	e052      	b.n	8006ca4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c04:	e04e      	b.n	8006ca4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c06:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c0a:	2b08      	cmp	r3, #8
 8006c0c:	d827      	bhi.n	8006c5e <UART_SetConfig+0x506>
 8006c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c14 <UART_SetConfig+0x4bc>)
 8006c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c14:	08006c39 	.word	0x08006c39
 8006c18:	08006c41 	.word	0x08006c41
 8006c1c:	08006c49 	.word	0x08006c49
 8006c20:	08006c5f 	.word	0x08006c5f
 8006c24:	08006c4f 	.word	0x08006c4f
 8006c28:	08006c5f 	.word	0x08006c5f
 8006c2c:	08006c5f 	.word	0x08006c5f
 8006c30:	08006c5f 	.word	0x08006c5f
 8006c34:	08006c57 	.word	0x08006c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c38:	f7fd fc80 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8006c3c:	61f8      	str	r0, [r7, #28]
        break;
 8006c3e:	e014      	b.n	8006c6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c40:	f7fd fc92 	bl	8004568 <HAL_RCC_GetPCLK2Freq>
 8006c44:	61f8      	str	r0, [r7, #28]
        break;
 8006c46:	e010      	b.n	8006c6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c48:	4b1e      	ldr	r3, [pc, #120]	@ (8006cc4 <UART_SetConfig+0x56c>)
 8006c4a:	61fb      	str	r3, [r7, #28]
        break;
 8006c4c:	e00d      	b.n	8006c6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c4e:	f7fd fbdd 	bl	800440c <HAL_RCC_GetSysClockFreq>
 8006c52:	61f8      	str	r0, [r7, #28]
        break;
 8006c54:	e009      	b.n	8006c6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c5a:	61fb      	str	r3, [r7, #28]
        break;
 8006c5c:	e005      	b.n	8006c6a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006c68:	bf00      	nop
    }

    if (pclk != 0U)
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d019      	beq.n	8006ca4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	085a      	lsrs	r2, r3, #1
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	441a      	add	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c82:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	2b0f      	cmp	r3, #15
 8006c88:	d909      	bls.n	8006c9e <UART_SetConfig+0x546>
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c90:	d205      	bcs.n	8006c9e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	60da      	str	r2, [r3, #12]
 8006c9c:	e002      	b.n	8006ca4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006cb0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3728      	adds	r7, #40	@ 0x28
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cbe:	bf00      	nop
 8006cc0:	40008000 	.word	0x40008000
 8006cc4:	00f42400 	.word	0x00f42400

08006cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd4:	f003 0308 	and.w	r3, r3, #8
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00a      	beq.n	8006cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00a      	beq.n	8006d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00a      	beq.n	8006d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00a      	beq.n	8006d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00a      	beq.n	8006d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d01a      	beq.n	8006dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dc6:	d10a      	bne.n	8006dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	605a      	str	r2, [r3, #4]
  }
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b098      	sub	sp, #96	@ 0x60
 8006e10:	af02      	add	r7, sp, #8
 8006e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e1c:	f7fa ff82 	bl	8001d24 <HAL_GetTick>
 8006e20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0308 	and.w	r3, r3, #8
 8006e2c:	2b08      	cmp	r3, #8
 8006e2e:	d12e      	bne.n	8006e8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f88c 	bl	8006f5c <UART_WaitOnFlagUntilTimeout>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d021      	beq.n	8006e8e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e6a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e6      	bne.n	8006e4a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e062      	b.n	8006f54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b04      	cmp	r3, #4
 8006e9a:	d149      	bne.n	8006f30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f856 	bl	8006f5c <UART_WaitOnFlagUntilTimeout>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d03c      	beq.n	8006f30 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebe:	e853 3f00 	ldrex	r3, [r3]
 8006ec2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ed4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ed6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006edc:	e841 2300 	strex	r3, r2, [r1]
 8006ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e6      	bne.n	8006eb6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3308      	adds	r3, #8
 8006eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0301 	bic.w	r3, r3, #1
 8006efe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3308      	adds	r3, #8
 8006f06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f08:	61fa      	str	r2, [r7, #28]
 8006f0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	69b9      	ldr	r1, [r7, #24]
 8006f0e:	69fa      	ldr	r2, [r7, #28]
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	617b      	str	r3, [r7, #20]
   return(result);
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e5      	bne.n	8006ee8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e011      	b.n	8006f54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2220      	movs	r2, #32
 8006f34:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3758      	adds	r7, #88	@ 0x58
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	603b      	str	r3, [r7, #0]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f6c:	e049      	b.n	8007002 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f74:	d045      	beq.n	8007002 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f76:	f7fa fed5 	bl	8001d24 <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d302      	bcc.n	8006f8c <UART_WaitOnFlagUntilTimeout+0x30>
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e048      	b.n	8007022 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0304 	and.w	r3, r3, #4
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d031      	beq.n	8007002 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	69db      	ldr	r3, [r3, #28]
 8006fa4:	f003 0308 	and.w	r3, r3, #8
 8006fa8:	2b08      	cmp	r3, #8
 8006faa:	d110      	bne.n	8006fce <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2208      	movs	r2, #8
 8006fb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f000 f838 	bl	800702a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2208      	movs	r2, #8
 8006fbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e029      	b.n	8007022 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	69db      	ldr	r3, [r3, #28]
 8006fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fdc:	d111      	bne.n	8007002 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fe6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 f81e 	bl	800702a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e00f      	b.n	8007022 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	69da      	ldr	r2, [r3, #28]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	4013      	ands	r3, r2
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	429a      	cmp	r2, r3
 8007010:	bf0c      	ite	eq
 8007012:	2301      	moveq	r3, #1
 8007014:	2300      	movne	r3, #0
 8007016:	b2db      	uxtb	r3, r3
 8007018:	461a      	mov	r2, r3
 800701a:	79fb      	ldrb	r3, [r7, #7]
 800701c:	429a      	cmp	r2, r3
 800701e:	d0a6      	beq.n	8006f6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800702a:	b480      	push	{r7}
 800702c:	b095      	sub	sp, #84	@ 0x54
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800703a:	e853 3f00 	ldrex	r3, [r3]
 800703e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007042:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007046:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007050:	643b      	str	r3, [r7, #64]	@ 0x40
 8007052:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007054:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007056:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007058:	e841 2300 	strex	r3, r2, [r1]
 800705c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800705e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e6      	bne.n	8007032 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	3308      	adds	r3, #8
 800706a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	e853 3f00 	ldrex	r3, [r3]
 8007072:	61fb      	str	r3, [r7, #28]
   return(result);
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	f023 0301 	bic.w	r3, r3, #1
 800707a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	3308      	adds	r3, #8
 8007082:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007084:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007086:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007088:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800708a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800708c:	e841 2300 	strex	r3, r2, [r1]
 8007090:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1e5      	bne.n	8007064 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800709c:	2b01      	cmp	r3, #1
 800709e:	d118      	bne.n	80070d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f023 0310 	bic.w	r3, r3, #16
 80070b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070be:	61bb      	str	r3, [r7, #24]
 80070c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	6979      	ldr	r1, [r7, #20]
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	613b      	str	r3, [r7, #16]
   return(result);
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e6      	bne.n	80070a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80070e6:	bf00      	nop
 80070e8:	3754      	adds	r7, #84	@ 0x54
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <memset>:
 80070f2:	4402      	add	r2, r0
 80070f4:	4603      	mov	r3, r0
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d100      	bne.n	80070fc <memset+0xa>
 80070fa:	4770      	bx	lr
 80070fc:	f803 1b01 	strb.w	r1, [r3], #1
 8007100:	e7f9      	b.n	80070f6 <memset+0x4>
	...

08007104 <__libc_init_array>:
 8007104:	b570      	push	{r4, r5, r6, lr}
 8007106:	4d0d      	ldr	r5, [pc, #52]	@ (800713c <__libc_init_array+0x38>)
 8007108:	4c0d      	ldr	r4, [pc, #52]	@ (8007140 <__libc_init_array+0x3c>)
 800710a:	1b64      	subs	r4, r4, r5
 800710c:	10a4      	asrs	r4, r4, #2
 800710e:	2600      	movs	r6, #0
 8007110:	42a6      	cmp	r6, r4
 8007112:	d109      	bne.n	8007128 <__libc_init_array+0x24>
 8007114:	4d0b      	ldr	r5, [pc, #44]	@ (8007144 <__libc_init_array+0x40>)
 8007116:	4c0c      	ldr	r4, [pc, #48]	@ (8007148 <__libc_init_array+0x44>)
 8007118:	f000 f826 	bl	8007168 <_init>
 800711c:	1b64      	subs	r4, r4, r5
 800711e:	10a4      	asrs	r4, r4, #2
 8007120:	2600      	movs	r6, #0
 8007122:	42a6      	cmp	r6, r4
 8007124:	d105      	bne.n	8007132 <__libc_init_array+0x2e>
 8007126:	bd70      	pop	{r4, r5, r6, pc}
 8007128:	f855 3b04 	ldr.w	r3, [r5], #4
 800712c:	4798      	blx	r3
 800712e:	3601      	adds	r6, #1
 8007130:	e7ee      	b.n	8007110 <__libc_init_array+0xc>
 8007132:	f855 3b04 	ldr.w	r3, [r5], #4
 8007136:	4798      	blx	r3
 8007138:	3601      	adds	r6, #1
 800713a:	e7f2      	b.n	8007122 <__libc_init_array+0x1e>
 800713c:	080071d0 	.word	0x080071d0
 8007140:	080071d0 	.word	0x080071d0
 8007144:	080071d0 	.word	0x080071d0
 8007148:	080071d4 	.word	0x080071d4

0800714c <memcpy>:
 800714c:	440a      	add	r2, r1
 800714e:	4291      	cmp	r1, r2
 8007150:	f100 33ff 	add.w	r3, r0, #4294967295
 8007154:	d100      	bne.n	8007158 <memcpy+0xc>
 8007156:	4770      	bx	lr
 8007158:	b510      	push	{r4, lr}
 800715a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800715e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007162:	4291      	cmp	r1, r2
 8007164:	d1f9      	bne.n	800715a <memcpy+0xe>
 8007166:	bd10      	pop	{r4, pc}

08007168 <_init>:
 8007168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716a:	bf00      	nop
 800716c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716e:	bc08      	pop	{r3}
 8007170:	469e      	mov	lr, r3
 8007172:	4770      	bx	lr

08007174 <_fini>:
 8007174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007176:	bf00      	nop
 8007178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717a:	bc08      	pop	{r3}
 800717c:	469e      	mov	lr, r3
 800717e:	4770      	bx	lr
