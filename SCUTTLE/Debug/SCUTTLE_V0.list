
SCUTTLE_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087dc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08008964  08008964  00009964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089ac  080089ac  0000a020  2**0
                  CONTENTS
  4 .ARM          00000008  080089ac  080089ac  000099ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089b4  080089b4  0000a020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089b4  080089b4  000099b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089b8  080089b8  000099b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080089bc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f0  20000020  080089dc  0000a020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  080089dc  0000a610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b113  00000000  00000000  0000a050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e4  00000000  00000000  00025163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001858  00000000  00000000  00028348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001320  00000000  00000000  00029ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282e7  00000000  00000000  0002aec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fc07  00000000  00000000  000531a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f985b  00000000  00000000  00072dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c609  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000683c  00000000  00000000  0016c64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00172e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800894c 	.word	0x0800894c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	0800894c 	.word	0x0800894c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <GETDELTA>:

uint16_t ElapsedTime;
float T_ms;
uint16_t EndTime;

float GETDELTA(TIM_HandleTypeDef Timer,uint16_t StartTime, uint32_t Speed_hz){
 80004b8:	b084      	sub	sp, #16
 80004ba:	b490      	push	{r4, r7}
 80004bc:	af00      	add	r7, sp, #0
 80004be:	f107 0408 	add.w	r4, r7, #8
 80004c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	EndTime = __HAL_TIM_GET_COUNTER(&Timer);//Find EndTime using HAL
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004ca:	b29a      	uxth	r2, r3
 80004cc:	4b19      	ldr	r3, [pc, #100]	@ (8000534 <GETDELTA+0x7c>)
 80004ce:	801a      	strh	r2, [r3, #0]
	// Calculate the elapsed time
	if (EndTime >= StartTime) {
 80004d0:	4b18      	ldr	r3, [pc, #96]	@ (8000534 <GETDELTA+0x7c>)
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 80004d8:	429a      	cmp	r2, r3
 80004da:	d808      	bhi.n	80004ee <GETDELTA+0x36>
	   ElapsedTime = EndTime - StartTime;
 80004dc:	4b15      	ldr	r3, [pc, #84]	@ (8000534 <GETDELTA+0x7c>)
 80004de:	881a      	ldrh	r2, [r3, #0]
 80004e0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80004e4:	1ad3      	subs	r3, r2, r3
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	4b13      	ldr	r3, [pc, #76]	@ (8000538 <GETDELTA+0x80>)
 80004ea:	801a      	strh	r2, [r3, #0]
 80004ec:	e007      	b.n	80004fe <GETDELTA+0x46>
	}
	else {
	    // Handle timer overflow
	    ElapsedTime = (0xFFFFFFFF - StartTime) + EndTime + 1;
 80004ee:	4b11      	ldr	r3, [pc, #68]	@ (8000534 <GETDELTA+0x7c>)
 80004f0:	881a      	ldrh	r2, [r3, #0]
 80004f2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	b29a      	uxth	r2, r3
 80004fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <GETDELTA+0x80>)
 80004fc:	801a      	strh	r2, [r3, #0]
	    }

	T_ms = ElapsedTime/Speed_hz*1000; //Find time in Ms
 80004fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000538 <GETDELTA+0x80>)
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	461a      	mov	r2, r3
 8000504:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000506:	fbb2 f3f3 	udiv	r3, r2, r3
 800050a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800050e:	fb02 f303 	mul.w	r3, r2, r3
 8000512:	ee07 3a90 	vmov	s15, r3
 8000516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800051a:	4b08      	ldr	r3, [pc, #32]	@ (800053c <GETDELTA+0x84>)
 800051c:	edc3 7a00 	vstr	s15, [r3]
	return T_ms;
 8000520:	4b06      	ldr	r3, [pc, #24]	@ (800053c <GETDELTA+0x84>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	ee07 3a90 	vmov	s15, r3

}
 8000528:	eeb0 0a67 	vmov.f32	s0, s15
 800052c:	46bd      	mov	sp, r7
 800052e:	bc90      	pop	{r4, r7}
 8000530:	b004      	add	sp, #16
 8000532:	4770      	bx	lr
 8000534:	20000044 	.word	0x20000044
 8000538:	2000003c 	.word	0x2000003c
 800053c:	20000040 	.word	0x20000040

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000542:	b0a3      	sub	sp, #140	@ 0x8c
 8000544:	af1c      	add	r7, sp, #112	@ 0x70
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f002 f92a 	bl	800279e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f91b 	bl	8000784 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800054e:	f000 f968 	bl	8000822 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 ff43 	bl	80013dc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000556:	f000 fb5b 	bl	8000c10 <MX_TIM1_Init>
  MX_ADC1_Init();
 800055a:	f000 f98d 	bl	8000878 <MX_ADC1_Init>
  MX_ADC2_Init();
 800055e:	f000 fa01 	bl	8000964 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000562:	f000 fa73 	bl	8000a4c <MX_ADC3_Init>
  MX_TIM2_Init();
 8000566:	f000 fc09 	bl	8000d7c <MX_TIM2_Init>
  MX_SPI3_Init();
 800056a:	f000 fb13 	bl	8000b94 <MX_SPI3_Init>
  MX_TIM3_Init();
 800056e:	f000 fc59 	bl	8000e24 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000572:	f000 ff03 	bl	800137c <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8000576:	f000 fcab 	bl	8000ed0 <MX_TIM4_Init>
  MX_TIM5_Init();
 800057a:	f000 fcff 	bl	8000f7c <MX_TIM5_Init>
  MX_I2C2_Init();
 800057e:	f000 fac9 	bl	8000b14 <MX_I2C2_Init>
  MX_TIM8_Init();
 8000582:	f000 fdc7 	bl	8001114 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000586:	f000 fe79 	bl	800127c <MX_TIM15_Init>
  MX_TIM17_Init();
 800058a:	f000 fecf 	bl	800132c <MX_TIM17_Init>
  MX_TIM7_Init();
 800058e:	f000 fd8b 	bl	80010a8 <MX_TIM7_Init>
  MX_TIM6_Init();
 8000592:	f000 fd53 	bl	800103c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //Put timers in correct mode
  ;
  HAL_TIM_Base_Start_IT(&htim6);
 8000596:	486a      	ldr	r0, [pc, #424]	@ (8000740 <main+0x200>)
 8000598:	f006 f882 	bl	80066a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800059c:	4869      	ldr	r0, [pc, #420]	@ (8000744 <main+0x204>)
 800059e:	f006 f87f 	bl	80066a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);
 80005a2:	4869      	ldr	r0, [pc, #420]	@ (8000748 <main+0x208>)
 80005a4:	f006 f87c 	bl	80066a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 80005a8:	2100      	movs	r1, #0
 80005aa:	4868      	ldr	r0, [pc, #416]	@ (800074c <main+0x20c>)
 80005ac:	f006 f996 	bl	80068dc <HAL_TIM_IC_Start_IT>
  //Set ADC in correct mode
  HAL_ADC_Start(&hadc1);
 80005b0:	4867      	ldr	r0, [pc, #412]	@ (8000750 <main+0x210>)
 80005b2:	f002 fc9d 	bl	8002ef0 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 80005b6:	4867      	ldr	r0, [pc, #412]	@ (8000754 <main+0x214>)
 80005b8:	f002 fc9a 	bl	8002ef0 <HAL_ADC_Start>
  //hadc1.Init.EOCSelection = DISABLE; //Apparently important
  //hadc2.Init.EOCSelection = DISABLE; //Apparently important
  HAL_ADC_Start(&hadc3);
 80005bc:	4866      	ldr	r0, [pc, #408]	@ (8000758 <main+0x218>)
 80005be:	f002 fc97 	bl	8002ef0 <HAL_ADC_Start>
  //hadc3.Init.EOCSelection = DISABLE; //Apparently important


  uint8_t task = 0; //State variable for main loop
 80005c2:	2300      	movs	r3, #0
 80005c4:	75fb      	strb	r3, [r7, #23]
  uint8_t T1State = 0; //Task 1 State
 80005c6:	2300      	movs	r3, #0
 80005c8:	75bb      	strb	r3, [r7, #22]
  uint8_t T2State = 0; //Task 2 State
 80005ca:	2300      	movs	r3, #0
 80005cc:	757b      	strb	r3, [r7, #21]
  uint8_t T3State = 0; //Task 3 State
 80005ce:	2300      	movs	r3, #0
 80005d0:	753b      	strb	r3, [r7, #20]
  uint8_t T4State = 0; //Task 4 State
 80005d2:	2300      	movs	r3, #0
 80005d4:	74fb      	strb	r3, [r7, #19]
  uint8_t T5State = 0; //Task 5 State
 80005d6:	2300      	movs	r3, #0
 80005d8:	74bb      	strb	r3, [r7, #18]
  uint8_t T6State = 0; //Task 6 State
 80005da:	2300      	movs	r3, #0
 80005dc:	747b      	strb	r3, [r7, #17]

  //Set motors, metal detector, and camera to ON by default. Will turn off if battery too low or killswitch active
   uint8_t DriveON_Rad = 1; //Radio Drive ON
 80005de:	2301      	movs	r3, #1
 80005e0:	743b      	strb	r3, [r7, #16]
   uint8_t DriveON_MD = 1; //Metal Detector Drive ON
 80005e2:	2301      	movs	r3, #1
 80005e4:	73fb      	strb	r3, [r7, #15]
   uint8_t ArmON = 1;
 80005e6:	2301      	movs	r3, #1
 80005e8:	73bb      	strb	r3, [r7, #14]

   uint8_t OpenMV = 1; //Camera Update On
 80005ea:	2301      	movs	r3, #1
 80005ec:	737b      	strb	r3, [r7, #13]


   uint8_t Follow = 1; //Follow mode
 80005ee:	2301      	movs	r3, #1
 80005f0:	733b      	strb	r3, [r7, #12]



   //Set Kill switch to be off by default
   uint8_t BatKill = 0; //If Kill is 1 then turn everything off
 80005f2:	2300      	movs	r3, #0
 80005f4:	72fb      	strb	r3, [r7, #11]
   uint8_t RadKill = 0; //Radio Kill switch
 80005f6:	2300      	movs	r3, #0
 80005f8:	72bb      	strb	r3, [r7, #10]

   //Initialize a distance and angle setpoint
   float Distance_Target = 0;
 80005fa:	f04f 0300 	mov.w	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
   float Angle_Target = 0;
 8000600:	f04f 0300 	mov.w	r3, #0
 8000604:	603b      	str	r3, [r7, #0]


   //Set timer 6 PSC to impulse
   TIM6->PSC = impuls;
 8000606:	4b55      	ldr	r3, [pc, #340]	@ (800075c <main+0x21c>)
 8000608:	881a      	ldrh	r2, [r3, #0]
 800060a:	4b55      	ldr	r3, [pc, #340]	@ (8000760 <main+0x220>)
 800060c:	629a      	str	r2, [r3, #40]	@ 0x28
   //Set timer 7 PSC to impulse+Delay

   TIM7->PSC = (impuls+Delay_MD);
 800060e:	4b53      	ldr	r3, [pc, #332]	@ (800075c <main+0x21c>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	4b53      	ldr	r3, [pc, #332]	@ (8000764 <main+0x224>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	441a      	add	r2, r3
 800061a:	4b53      	ldr	r3, [pc, #332]	@ (8000768 <main+0x228>)
 800061c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  //Run FSM
	  switch(task){
 800061e:	7dfb      	ldrb	r3, [r7, #23]
 8000620:	2b06      	cmp	r3, #6
 8000622:	d8fc      	bhi.n	800061e <main+0xde>
 8000624:	a201      	add	r2, pc, #4	@ (adr r2, 800062c <main+0xec>)
 8000626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062a:	bf00      	nop
 800062c:	08000649 	.word	0x08000649
 8000630:	0800064f 	.word	0x0800064f
 8000634:	08000679 	.word	0x08000679
 8000638:	080006a7 	.word	0x080006a7
 800063c:	080006db 	.word	0x080006db
 8000640:	080006eb 	.word	0x080006eb
 8000644:	08000717 	.word	0x08000717

	  case 0: //State 0
		  //State 0: INIT
		  //Do not make file for this, just Initialize as necessary
		  task = 1;
 8000648:	2301      	movs	r3, #1
 800064a:	75fb      	strb	r3, [r7, #23]
		  break;
 800064c:	e076      	b.n	800073c <main+0x1fc>

	  case 1: //State 1
		  //State 1: Diagnostics
		  //Check battery and shut off if necessary
		  task1_run(&T1State, hadc2,&BatKill);
 800064e:	4c41      	ldr	r4, [pc, #260]	@ (8000754 <main+0x214>)
 8000650:	f107 0516 	add.w	r5, r7, #22
 8000654:	f107 030b 	add.w	r3, r7, #11
 8000658:	9316      	str	r3, [sp, #88]	@ 0x58
 800065a:	4668      	mov	r0, sp
 800065c:	f104 030c 	add.w	r3, r4, #12
 8000660:	2258      	movs	r2, #88	@ 0x58
 8000662:	4619      	mov	r1, r3
 8000664:	f008 f964 	bl	8008930 <memcpy>
 8000668:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800066c:	4628      	mov	r0, r5
 800066e:	f001 fdb7 	bl	80021e0 <task1_run>
		  task = 2;
 8000672:	2302      	movs	r3, #2
 8000674:	75fb      	strb	r3, [r7, #23]
		  break;
 8000676:	e061      	b.n	800073c <main+0x1fc>

	  case 2: //State 2
		  //State 2: Radio
		  //Check killswitches and radio, act accordingly
		  task2_run(&T2State,&BatKill,&RadKill,&usWidth,&DriveON_Rad,&ArmON,&MDON,&OpenMV);
 8000678:	f107 020a 	add.w	r2, r7, #10
 800067c:	f107 010b 	add.w	r1, r7, #11
 8000680:	f107 0015 	add.w	r0, r7, #21
 8000684:	f107 030d 	add.w	r3, r7, #13
 8000688:	9303      	str	r3, [sp, #12]
 800068a:	4b38      	ldr	r3, [pc, #224]	@ (800076c <main+0x22c>)
 800068c:	9302      	str	r3, [sp, #8]
 800068e:	f107 030e 	add.w	r3, r7, #14
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	4b35      	ldr	r3, [pc, #212]	@ (8000770 <main+0x230>)
 800069c:	f001 fde6 	bl	800226c <task2_run>
	  	  task = 3;
 80006a0:	2303      	movs	r3, #3
 80006a2:	75fb      	strb	r3, [r7, #23]
	  	  break;
 80006a4:	e04a      	b.n	800073c <main+0x1fc>

	  case 3: //State 3
		  //State 3: OpenMV Camera
	  	  task3_run(&T3State,&Distance_Target,&Angle_Target,&SPI_Rec,&Follow,&OpenMV, hspi3);
 80006a6:	463e      	mov	r6, r7
 80006a8:	1d3d      	adds	r5, r7, #4
 80006aa:	f107 0414 	add.w	r4, r7, #20
 80006ae:	4a31      	ldr	r2, [pc, #196]	@ (8000774 <main+0x234>)
 80006b0:	ab02      	add	r3, sp, #8
 80006b2:	4611      	mov	r1, r2
 80006b4:	2264      	movs	r2, #100	@ 0x64
 80006b6:	4618      	mov	r0, r3
 80006b8:	f008 f93a 	bl	8008930 <memcpy>
 80006bc:	f107 030d 	add.w	r3, r7, #13
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000778 <main+0x238>)
 80006ca:	4632      	mov	r2, r6
 80006cc:	4629      	mov	r1, r5
 80006ce:	4620      	mov	r0, r4
 80006d0:	f001 fe1a 	bl	8002308 <task3_run>
		  task = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	75fb      	strb	r3, [r7, #23]
	  	  break;
 80006d8:	e030      	b.n	800073c <main+0x1fc>

	  case 4: //State 4
		  //State 4: Metal Detector
	  	  task4_run(&T4State);
 80006da:	f107 0313 	add.w	r3, r7, #19
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fe8a 	bl	80023f8 <task4_run>
	  	  task = 5;
 80006e4:	2305      	movs	r3, #5
 80006e6:	75fb      	strb	r3, [r7, #23]
	  	  break;
 80006e8:	e028      	b.n	800073c <main+0x1fc>

	  case 5: //State 5
		  //State 5: Arm Motor
	  	  task5_run(&T5State,&ArmON,&Metal_Found,htim17,&sumval);
 80006ea:	4c17      	ldr	r4, [pc, #92]	@ (8000748 <main+0x208>)
 80006ec:	f107 060e 	add.w	r6, r7, #14
 80006f0:	f107 0512 	add.w	r5, r7, #18
 80006f4:	4b21      	ldr	r3, [pc, #132]	@ (800077c <main+0x23c>)
 80006f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80006f8:	4668      	mov	r0, sp
 80006fa:	1d23      	adds	r3, r4, #4
 80006fc:	2248      	movs	r2, #72	@ 0x48
 80006fe:	4619      	mov	r1, r3
 8000700:	f008 f916 	bl	8008930 <memcpy>
 8000704:	6823      	ldr	r3, [r4, #0]
 8000706:	4a1e      	ldr	r2, [pc, #120]	@ (8000780 <main+0x240>)
 8000708:	4631      	mov	r1, r6
 800070a:	4628      	mov	r0, r5
 800070c:	f001 fe82 	bl	8002414 <task5_run>
	  	  task = 6;
 8000710:	2306      	movs	r3, #6
 8000712:	75fb      	strb	r3, [r7, #23]
	  	  break;
 8000714:	e012      	b.n	800073c <main+0x1fc>

	  case 6: //State 6
		  //State 6:
	  	  //Insert State 6 class here
		  task6_run(&T6State, &DriveON_MD, &DriveON_Rad, &Follow,&Distance_Target,&Angle_Target);
 8000716:	f107 040c 	add.w	r4, r7, #12
 800071a:	f107 0210 	add.w	r2, r7, #16
 800071e:	f107 010f 	add.w	r1, r7, #15
 8000722:	f107 0011 	add.w	r0, r7, #17
 8000726:	463b      	mov	r3, r7
 8000728:	9301      	str	r3, [sp, #4]
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	4623      	mov	r3, r4
 8000730:	f001 ffca 	bl	80026c8 <task6_run>
	  	  task = 1; //Do not go back to init
 8000734:	2301      	movs	r3, #1
 8000736:	75fb      	strb	r3, [r7, #23]
	  	  break;
 8000738:	bf00      	nop
 800073a:	e770      	b.n	800061e <main+0xde>
	  switch(task){
 800073c:	e76f      	b.n	800061e <main+0xde>
 800073e:	bf00      	nop
 8000740:	200003a8 	.word	0x200003a8
 8000744:	200003f4 	.word	0x200003f4
 8000748:	200004d8 	.word	0x200004d8
 800074c:	2000048c 	.word	0x2000048c
 8000750:	20000048 	.word	0x20000048
 8000754:	200000ac 	.word	0x200000ac
 8000758:	20000110 	.word	0x20000110
 800075c:	20000002 	.word	0x20000002
 8000760:	40001000 	.word	0x40001000
 8000764:	20000004 	.word	0x20000004
 8000768:	40001400 	.word	0x40001400
 800076c:	20000006 	.word	0x20000006
 8000770:	200005ac 	.word	0x200005ac
 8000774:	200001c8 	.word	0x200001c8
 8000778:	200005cc 	.word	0x200005cc
 800077c:	200005c8 	.word	0x200005c8
 8000780:	200005e2 	.word	0x200005e2

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b096      	sub	sp, #88	@ 0x58
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	2244      	movs	r2, #68	@ 0x44
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f008 f89f 	bl	80088d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	463b      	mov	r3, r7
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007aa:	f003 fea3 	bl	80044f4 <HAL_PWREx_ControlVoltageScaling>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007b4:	f001 f87c 	bl	80018b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	2303      	movs	r3, #3
 80007c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 80007ca:	2305      	movs	r3, #5
 80007cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 80007ce:	2320      	movs	r3, #32
 80007d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007d2:	2307      	movs	r3, #7
 80007d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007da:	2302      	movs	r3, #2
 80007dc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4618      	mov	r0, r3
 80007e4:	f003 fedc 	bl	80045a0 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007ee:	f001 f85f 	bl	80018b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2303      	movs	r3, #3
 80007f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	2104      	movs	r1, #4
 800080a:	4618      	mov	r0, r3
 800080c:	f004 faa4 	bl	8004d58 <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000816:	f001 f84b 	bl	80018b0 <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3758      	adds	r7, #88	@ 0x58
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b0a2      	sub	sp, #136	@ 0x88
 8000826:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2284      	movs	r2, #132	@ 0x84
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f008 f851 	bl	80088d6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000834:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000838:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800083a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800083e:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000840:	2303      	movs	r3, #3
 8000842:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000844:	2305      	movs	r3, #5
 8000846:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000848:	2318      	movs	r3, #24
 800084a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800084c:	2307      	movs	r3, #7
 800084e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000850:	2302      	movs	r3, #2
 8000852:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000854:	2302      	movs	r3, #2
 8000856:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000858:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800085c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4618      	mov	r0, r3
 8000862:	f004 fc9d 	bl	80051a0 <HAL_RCCEx_PeriphCLKConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 800086c:	f001 f820 	bl	80018b0 <Error_Handler>
  }
}
 8000870:	bf00      	nop
 8000872:	3788      	adds	r7, #136	@ 0x88
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	@ 0x28
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
 8000898:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800089a:	4b2f      	ldr	r3, [pc, #188]	@ (8000958 <MX_ADC1_Init+0xe0>)
 800089c:	4a2f      	ldr	r2, [pc, #188]	@ (800095c <MX_ADC1_Init+0xe4>)
 800089e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000958 <MX_ADC1_Init+0xe0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000958 <MX_ADC1_Init+0xe0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000958 <MX_ADC1_Init+0xe0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b2:	4b29      	ldr	r3, [pc, #164]	@ (8000958 <MX_ADC1_Init+0xe0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b8:	4b27      	ldr	r3, [pc, #156]	@ (8000958 <MX_ADC1_Init+0xe0>)
 80008ba:	2204      	movs	r2, #4
 80008bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008be:	4b26      	ldr	r3, [pc, #152]	@ (8000958 <MX_ADC1_Init+0xe0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c4:	4b24      	ldr	r3, [pc, #144]	@ (8000958 <MX_ADC1_Init+0xe0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008ca:	4b23      	ldr	r3, [pc, #140]	@ (8000958 <MX_ADC1_Init+0xe0>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d0:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <MX_ADC1_Init+0xe0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <MX_ADC1_Init+0xe0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008de:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <MX_ADC1_Init+0xe0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <MX_ADC1_Init+0xe0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <MX_ADC1_Init+0xe0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008f2:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <MX_ADC1_Init+0xe0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008fa:	4817      	ldr	r0, [pc, #92]	@ (8000958 <MX_ADC1_Init+0xe0>)
 80008fc:	f002 f9a8 	bl	8002c50 <HAL_ADC_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000906:	f000 ffd3 	bl	80018b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4810      	ldr	r0, [pc, #64]	@ (8000958 <MX_ADC1_Init+0xe0>)
 8000916:	f003 f929 	bl	8003b6c <HAL_ADCEx_MultiModeConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000920:	f000 ffc6 	bl	80018b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000924:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_ADC1_Init+0xe8>)
 8000926:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000928:	2306      	movs	r3, #6
 800092a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000930:	237f      	movs	r3, #127	@ 0x7f
 8000932:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000934:	2304      	movs	r3, #4
 8000936:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	@ (8000958 <MX_ADC1_Init+0xe0>)
 8000942:	f002 fc75 	bl	8003230 <HAL_ADC_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800094c:	f000 ffb0 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	@ 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000048 	.word	0x20000048
 800095c:	50040000 	.word	0x50040000
 8000960:	04300002 	.word	0x04300002

08000964 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800096a:	463b      	mov	r3, r7
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
 8000978:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800097a:	4b30      	ldr	r3, [pc, #192]	@ (8000a3c <MX_ADC2_Init+0xd8>)
 800097c:	4a30      	ldr	r2, [pc, #192]	@ (8000a40 <MX_ADC2_Init+0xdc>)
 800097e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000980:	4b2e      	ldr	r3, [pc, #184]	@ (8000a3c <MX_ADC2_Init+0xd8>)
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000986:	4b2d      	ldr	r3, [pc, #180]	@ (8000a3c <MX_ADC2_Init+0xd8>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800098c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a3c <MX_ADC2_Init+0xd8>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000992:	4b2a      	ldr	r3, [pc, #168]	@ (8000a3c <MX_ADC2_Init+0xd8>)
 8000994:	2201      	movs	r2, #1
 8000996:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000998:	4b28      	ldr	r3, [pc, #160]	@ (8000a3c <MX_ADC2_Init+0xd8>)
 800099a:	2204      	movs	r2, #4
 800099c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800099e:	4b27      	ldr	r3, [pc, #156]	@ (8000a3c <MX_ADC2_Init+0xd8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009a4:	4b25      	ldr	r3, [pc, #148]	@ (8000a3c <MX_ADC2_Init+0xd8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 2;
 80009aa:	4b24      	ldr	r3, [pc, #144]	@ (8000a3c <MX_ADC2_Init+0xd8>)
 80009ac:	2202      	movs	r2, #2
 80009ae:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009b0:	4b22      	ldr	r3, [pc, #136]	@ (8000a3c <MX_ADC2_Init+0xd8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b8:	4b20      	ldr	r3, [pc, #128]	@ (8000a3c <MX_ADC2_Init+0xd8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009be:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <MX_ADC2_Init+0xd8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80009c4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a3c <MX_ADC2_Init+0xd8>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <MX_ADC2_Init+0xd8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a3c <MX_ADC2_Init+0xd8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009da:	4818      	ldr	r0, [pc, #96]	@ (8000a3c <MX_ADC2_Init+0xd8>)
 80009dc:	f002 f938 	bl	8002c50 <HAL_ADC_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80009e6:	f000 ff63 	bl	80018b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009ea:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <MX_ADC2_Init+0xe0>)
 80009ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ee:	2306      	movs	r3, #6
 80009f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009f6:	237f      	movs	r3, #127	@ 0x7f
 80009f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009fa:	2304      	movs	r3, #4
 80009fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a02:	463b      	mov	r3, r7
 8000a04:	4619      	mov	r1, r3
 8000a06:	480d      	ldr	r0, [pc, #52]	@ (8000a3c <MX_ADC2_Init+0xd8>)
 8000a08:	f002 fc12 	bl	8003230 <HAL_ADC_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000a12:	f000 ff4d 	bl	80018b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000a16:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <MX_ADC2_Init+0xe4>)
 8000a18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a1a:	230c      	movs	r3, #12
 8000a1c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a1e:	463b      	mov	r3, r7
 8000a20:	4619      	mov	r1, r3
 8000a22:	4806      	ldr	r0, [pc, #24]	@ (8000a3c <MX_ADC2_Init+0xd8>)
 8000a24:	f002 fc04 	bl	8003230 <HAL_ADC_ConfigChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8000a2e:	f000 ff3f 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000ac 	.word	0x200000ac
 8000a40:	50040100 	.word	0x50040100
 8000a44:	08600004 	.word	0x08600004
 8000a48:	3ef08000 	.word	0x3ef08000

08000a4c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a52:	463b      	mov	r3, r7
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
 8000a60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a62:	4b29      	ldr	r3, [pc, #164]	@ (8000b08 <MX_ADC3_Init+0xbc>)
 8000a64:	4a29      	ldr	r2, [pc, #164]	@ (8000b0c <MX_ADC3_Init+0xc0>)
 8000a66:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a68:	4b27      	ldr	r3, [pc, #156]	@ (8000b08 <MX_ADC3_Init+0xbc>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a6e:	4b26      	ldr	r3, [pc, #152]	@ (8000b08 <MX_ADC3_Init+0xbc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a74:	4b24      	ldr	r3, [pc, #144]	@ (8000b08 <MX_ADC3_Init+0xbc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a7a:	4b23      	ldr	r3, [pc, #140]	@ (8000b08 <MX_ADC3_Init+0xbc>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a80:	4b21      	ldr	r3, [pc, #132]	@ (8000b08 <MX_ADC3_Init+0xbc>)
 8000a82:	2204      	movs	r2, #4
 8000a84:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a86:	4b20      	ldr	r3, [pc, #128]	@ (8000b08 <MX_ADC3_Init+0xbc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b08 <MX_ADC3_Init+0xbc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000a92:	4b1d      	ldr	r3, [pc, #116]	@ (8000b08 <MX_ADC3_Init+0xbc>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	@ (8000b08 <MX_ADC3_Init+0xbc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <MX_ADC3_Init+0xbc>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <MX_ADC3_Init+0xbc>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000aac:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <MX_ADC3_Init+0xbc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <MX_ADC3_Init+0xbc>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000aba:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <MX_ADC3_Init+0xbc>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ac2:	4811      	ldr	r0, [pc, #68]	@ (8000b08 <MX_ADC3_Init+0xbc>)
 8000ac4:	f002 f8c4 	bl	8002c50 <HAL_ADC_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000ace:	f000 feef 	bl	80018b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <MX_ADC3_Init+0xc4>)
 8000ad4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad6:	2306      	movs	r3, #6
 8000ad8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ade:	237f      	movs	r3, #127	@ 0x7f
 8000ae0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000aea:	463b      	mov	r3, r7
 8000aec:	4619      	mov	r1, r3
 8000aee:	4806      	ldr	r0, [pc, #24]	@ (8000b08 <MX_ADC3_Init+0xbc>)
 8000af0:	f002 fb9e 	bl	8003230 <HAL_ADC_ConfigChannel>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000afa:	f000 fed9 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000110 	.word	0x20000110
 8000b0c:	50040200 	.word	0x50040200
 8000b10:	0c900008 	.word	0x0c900008

08000b14 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	@ (8000b88 <MX_I2C2_Init+0x74>)
 8000b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b8c <MX_I2C2_Init+0x78>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <MX_I2C2_Init+0x74>)
 8000b20:	4a1b      	ldr	r2, [pc, #108]	@ (8000b90 <MX_I2C2_Init+0x7c>)
 8000b22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b24:	4b18      	ldr	r3, [pc, #96]	@ (8000b88 <MX_I2C2_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <MX_I2C2_Init+0x74>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b30:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <MX_I2C2_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <MX_I2C2_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <MX_I2C2_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <MX_I2C2_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <MX_I2C2_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b4e:	480e      	ldr	r0, [pc, #56]	@ (8000b88 <MX_I2C2_Init+0x74>)
 8000b50:	f003 fb90 	bl	8004274 <HAL_I2C_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b5a:	f000 fea9 	bl	80018b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4809      	ldr	r0, [pc, #36]	@ (8000b88 <MX_I2C2_Init+0x74>)
 8000b62:	f003 fc22 	bl	80043aa <HAL_I2CEx_ConfigAnalogFilter>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b6c:	f000 fea0 	bl	80018b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b70:	2100      	movs	r1, #0
 8000b72:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <MX_I2C2_Init+0x74>)
 8000b74:	f003 fc64 	bl	8004440 <HAL_I2CEx_ConfigDigitalFilter>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b7e:	f000 fe97 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000174 	.word	0x20000174
 8000b8c:	40005800 	.word	0x40005800
 8000b90:	10909cec 	.word	0x10909cec

08000b94 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <MX_SPI3_Init+0x74>)
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c0c <MX_SPI3_Init+0x78>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <MX_SPI3_Init+0x74>)
 8000ba0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ba4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <MX_SPI3_Init+0x74>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <MX_SPI3_Init+0x74>)
 8000bae:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000bb2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <MX_SPI3_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bba:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <MX_SPI3_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <MX_SPI3_Init+0x74>)
 8000bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bc6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <MX_SPI3_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <MX_SPI3_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <MX_SPI3_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	@ (8000c08 <MX_SPI3_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000be0:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <MX_SPI3_Init+0x74>)
 8000be2:	2207      	movs	r2, #7
 8000be4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000be6:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <MX_SPI3_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bec:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <MX_SPI3_Init+0x74>)
 8000bee:	2208      	movs	r2, #8
 8000bf0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bf2:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <MX_SPI3_Init+0x74>)
 8000bf4:	f004 ff60 	bl	8005ab8 <HAL_SPI_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000bfe:	f000 fe57 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200001c8 	.word	0x200001c8
 8000c0c:	40003c00 	.word	0x40003c00

08000c10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b096      	sub	sp, #88	@ 0x58
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c16:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c22:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]
 8000c32:	615a      	str	r2, [r3, #20]
 8000c34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	222c      	movs	r2, #44	@ 0x2c
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f007 fe4a 	bl	80088d6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c42:	4b4c      	ldr	r3, [pc, #304]	@ (8000d74 <MX_TIM1_Init+0x164>)
 8000c44:	4a4c      	ldr	r2, [pc, #304]	@ (8000d78 <MX_TIM1_Init+0x168>)
 8000c46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c48:	4b4a      	ldr	r3, [pc, #296]	@ (8000d74 <MX_TIM1_Init+0x164>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4e:	4b49      	ldr	r3, [pc, #292]	@ (8000d74 <MX_TIM1_Init+0x164>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8000c54:	4b47      	ldr	r3, [pc, #284]	@ (8000d74 <MX_TIM1_Init+0x164>)
 8000c56:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000c5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5c:	4b45      	ldr	r3, [pc, #276]	@ (8000d74 <MX_TIM1_Init+0x164>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c62:	4b44      	ldr	r3, [pc, #272]	@ (8000d74 <MX_TIM1_Init+0x164>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c68:	4b42      	ldr	r3, [pc, #264]	@ (8000d74 <MX_TIM1_Init+0x164>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c6e:	4841      	ldr	r0, [pc, #260]	@ (8000d74 <MX_TIM1_Init+0x164>)
 8000c70:	f005 fd86 	bl	8006780 <HAL_TIM_PWM_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000c7a:	f000 fe19 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c82:	2300      	movs	r3, #0
 8000c84:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c8a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4838      	ldr	r0, [pc, #224]	@ (8000d74 <MX_TIM1_Init+0x164>)
 8000c92:	f006 ffe1 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c9c:	f000 fe08 	bl	80018b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca0:	2360      	movs	r3, #96	@ 0x60
 8000ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cac:	2300      	movs	r3, #0
 8000cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cbc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	482b      	ldr	r0, [pc, #172]	@ (8000d74 <MX_TIM1_Init+0x164>)
 8000cc6:	f006 f997 	bl	8006ff8 <HAL_TIM_PWM_ConfigChannel>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000cd0:	f000 fdee 	bl	80018b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cd4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cd8:	2204      	movs	r2, #4
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4825      	ldr	r0, [pc, #148]	@ (8000d74 <MX_TIM1_Init+0x164>)
 8000cde:	f006 f98b 	bl	8006ff8 <HAL_TIM_PWM_ConfigChannel>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000ce8:	f000 fde2 	bl	80018b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cf0:	2208      	movs	r2, #8
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	481f      	ldr	r0, [pc, #124]	@ (8000d74 <MX_TIM1_Init+0x164>)
 8000cf6:	f006 f97f 	bl	8006ff8 <HAL_TIM_PWM_ConfigChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000d00:	f000 fdd6 	bl	80018b0 <Error_Handler>
  }
  sConfigOC.Pulse = 29999;
 8000d04:	f247 532f 	movw	r3, #29999	@ 0x752f
 8000d08:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d0a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d0e:	220c      	movs	r2, #12
 8000d10:	4619      	mov	r1, r3
 8000d12:	4818      	ldr	r0, [pc, #96]	@ (8000d74 <MX_TIM1_Init+0x164>)
 8000d14:	f006 f970 	bl	8006ff8 <HAL_TIM_PWM_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000d1e:	f000 fdc7 	bl	80018b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d3a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4619      	mov	r1, r3
 8000d56:	4807      	ldr	r0, [pc, #28]	@ (8000d74 <MX_TIM1_Init+0x164>)
 8000d58:	f007 f806 	bl	8007d68 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8000d62:	f000 fda5 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d66:	4803      	ldr	r0, [pc, #12]	@ (8000d74 <MX_TIM1_Init+0x164>)
 8000d68:	f001 f914 	bl	8001f94 <HAL_TIM_MspPostInit>

}
 8000d6c:	bf00      	nop
 8000d6e:	3758      	adds	r7, #88	@ 0x58
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000022c 	.word	0x2000022c
 8000d78:	40012c00 	.word	0x40012c00

08000d7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08c      	sub	sp, #48	@ 0x30
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	2224      	movs	r2, #36	@ 0x24
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f007 fda3 	bl	80088d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d90:	463b      	mov	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d9a:	4b21      	ldr	r3, [pc, #132]	@ (8000e20 <MX_TIM2_Init+0xa4>)
 8000d9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000da0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000da2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e20 <MX_TIM2_Init+0xa4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e20 <MX_TIM2_Init+0xa4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000dae:	4b1c      	ldr	r3, [pc, #112]	@ (8000e20 <MX_TIM2_Init+0xa4>)
 8000db0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000db4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <MX_TIM2_Init+0xa4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbc:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <MX_TIM2_Init+0xa4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	4619      	mov	r1, r3
 8000dec:	480c      	ldr	r0, [pc, #48]	@ (8000e20 <MX_TIM2_Init+0xa4>)
 8000dee:	f005 febf 	bl	8006b70 <HAL_TIM_Encoder_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000df8:	f000 fd5a 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <MX_TIM2_Init+0xa4>)
 8000e0a:	f006 ff25 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000e14:	f000 fd4c 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3730      	adds	r7, #48	@ 0x30
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000278 	.word	0x20000278

08000e24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08c      	sub	sp, #48	@ 0x30
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	2224      	movs	r2, #36	@ 0x24
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f007 fd4f 	bl	80088d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e42:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <MX_TIM3_Init+0xa4>)
 8000e44:	4a21      	ldr	r2, [pc, #132]	@ (8000ecc <MX_TIM3_Init+0xa8>)
 8000e46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <MX_TIM3_Init+0xa4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec8 <MX_TIM3_Init+0xa4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <MX_TIM3_Init+0xa4>)
 8000e56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <MX_TIM3_Init+0xa4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e62:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <MX_TIM3_Init+0xa4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e70:	2301      	movs	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e80:	2301      	movs	r3, #1
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	480d      	ldr	r0, [pc, #52]	@ (8000ec8 <MX_TIM3_Init+0xa4>)
 8000e94:	f005 fe6c 	bl	8006b70 <HAL_TIM_Encoder_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000e9e:	f000 fd07 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4619      	mov	r1, r3
 8000eae:	4806      	ldr	r0, [pc, #24]	@ (8000ec8 <MX_TIM3_Init+0xa4>)
 8000eb0:	f006 fed2 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000eba:	f000 fcf9 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	3730      	adds	r7, #48	@ 0x30
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200002c4 	.word	0x200002c4
 8000ecc:	40000400 	.word	0x40000400

08000ed0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08c      	sub	sp, #48	@ 0x30
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	2224      	movs	r2, #36	@ 0x24
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f007 fcf9 	bl	80088d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eee:	4b21      	ldr	r3, [pc, #132]	@ (8000f74 <MX_TIM4_Init+0xa4>)
 8000ef0:	4a21      	ldr	r2, [pc, #132]	@ (8000f78 <MX_TIM4_Init+0xa8>)
 8000ef2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f74 <MX_TIM4_Init+0xa4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	@ (8000f74 <MX_TIM4_Init+0xa4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f00:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <MX_TIM4_Init+0xa4>)
 8000f02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f08:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <MX_TIM4_Init+0xa4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0e:	4b19      	ldr	r3, [pc, #100]	@ (8000f74 <MX_TIM4_Init+0xa4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f14:	2301      	movs	r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <MX_TIM4_Init+0xa4>)
 8000f40:	f005 fe16 	bl	8006b70 <HAL_TIM_Encoder_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000f4a:	f000 fcb1 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f56:	463b      	mov	r3, r7
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	@ (8000f74 <MX_TIM4_Init+0xa4>)
 8000f5c:	f006 fe7c 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000f66:	f000 fca3 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	3730      	adds	r7, #48	@ 0x30
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000310 	.word	0x20000310
 8000f78:	40000800 	.word	0x40000800

08000f7c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f9a:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <MX_TIM5_Init+0xb8>)
 8000f9c:	4a26      	ldr	r2, [pc, #152]	@ (8001038 <MX_TIM5_Init+0xbc>)
 8000f9e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000fa0:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <MX_TIM5_Init+0xb8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa6:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <MX_TIM5_Init+0xb8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000fac:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <MX_TIM5_Init+0xb8>)
 8000fae:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <MX_TIM5_Init+0xb8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fba:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <MX_TIM5_Init+0xb8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000fc0:	481c      	ldr	r0, [pc, #112]	@ (8001034 <MX_TIM5_Init+0xb8>)
 8000fc2:	f005 fc34 	bl	800682e <HAL_TIM_IC_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000fcc:	f000 fc70 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4815      	ldr	r0, [pc, #84]	@ (8001034 <MX_TIM5_Init+0xb8>)
 8000fe0:	f006 fe3a 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8000fea:	f000 fc61 	bl	80018b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2208      	movs	r2, #8
 8001002:	4619      	mov	r1, r3
 8001004:	480b      	ldr	r0, [pc, #44]	@ (8001034 <MX_TIM5_Init+0xb8>)
 8001006:	f005 ff5b 	bl	8006ec0 <HAL_TIM_IC_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001010:	f000 fc4e 	bl	80018b0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	220c      	movs	r2, #12
 8001018:	4619      	mov	r1, r3
 800101a:	4806      	ldr	r0, [pc, #24]	@ (8001034 <MX_TIM5_Init+0xb8>)
 800101c:	f005 ff50 	bl	8006ec0 <HAL_TIM_IC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8001026:	f000 fc43 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	3720      	adds	r7, #32
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000035c 	.word	0x2000035c
 8001038:	40000c00 	.word	0x40000c00

0800103c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800104c:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <MX_TIM6_Init+0x64>)
 800104e:	4a15      	ldr	r2, [pc, #84]	@ (80010a4 <MX_TIM6_Init+0x68>)
 8001050:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001052:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <MX_TIM6_Init+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <MX_TIM6_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 79;
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <MX_TIM6_Init+0x64>)
 8001060:	224f      	movs	r2, #79	@ 0x4f
 8001062:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001064:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <MX_TIM6_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800106a:	480d      	ldr	r0, [pc, #52]	@ (80010a0 <MX_TIM6_Init+0x64>)
 800106c:	f005 fac0 	bl	80065f0 <HAL_TIM_Base_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001076:	f000 fc1b 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4619      	mov	r1, r3
 8001086:	4806      	ldr	r0, [pc, #24]	@ (80010a0 <MX_TIM6_Init+0x64>)
 8001088:	f006 fde6 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001092:	f000 fc0d 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200003a8 	.word	0x200003a8
 80010a4:	40001000 	.word	0x40001000

080010a8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80010b8:	4b14      	ldr	r3, [pc, #80]	@ (800110c <MX_TIM7_Init+0x64>)
 80010ba:	4a15      	ldr	r2, [pc, #84]	@ (8001110 <MX_TIM7_Init+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80010be:	4b13      	ldr	r3, [pc, #76]	@ (800110c <MX_TIM7_Init+0x64>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c4:	4b11      	ldr	r3, [pc, #68]	@ (800110c <MX_TIM7_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 79;
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <MX_TIM7_Init+0x64>)
 80010cc:	224f      	movs	r2, #79	@ 0x4f
 80010ce:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d0:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <MX_TIM7_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80010d6:	480d      	ldr	r0, [pc, #52]	@ (800110c <MX_TIM7_Init+0x64>)
 80010d8:	f005 fa8a 	bl	80065f0 <HAL_TIM_Base_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80010e2:	f000 fbe5 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	4806      	ldr	r0, [pc, #24]	@ (800110c <MX_TIM7_Init+0x64>)
 80010f4:	f006 fdb0 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80010fe:	f000 fbd7 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200003f4 	.word	0x200003f4
 8001110:	40001400 	.word	0x40001400

08001114 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b096      	sub	sp, #88	@ 0x58
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001126:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]
 8001136:	615a      	str	r2, [r3, #20]
 8001138:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	222c      	movs	r2, #44	@ 0x2c
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f007 fbc8 	bl	80088d6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001146:	4b4b      	ldr	r3, [pc, #300]	@ (8001274 <MX_TIM8_Init+0x160>)
 8001148:	4a4b      	ldr	r2, [pc, #300]	@ (8001278 <MX_TIM8_Init+0x164>)
 800114a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800114c:	4b49      	ldr	r3, [pc, #292]	@ (8001274 <MX_TIM8_Init+0x160>)
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001152:	4b48      	ldr	r3, [pc, #288]	@ (8001274 <MX_TIM8_Init+0x160>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001158:	4b46      	ldr	r3, [pc, #280]	@ (8001274 <MX_TIM8_Init+0x160>)
 800115a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800115e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001160:	4b44      	ldr	r3, [pc, #272]	@ (8001274 <MX_TIM8_Init+0x160>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001166:	4b43      	ldr	r3, [pc, #268]	@ (8001274 <MX_TIM8_Init+0x160>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116c:	4b41      	ldr	r3, [pc, #260]	@ (8001274 <MX_TIM8_Init+0x160>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001172:	4840      	ldr	r0, [pc, #256]	@ (8001274 <MX_TIM8_Init+0x160>)
 8001174:	f005 fb04 	bl	8006780 <HAL_TIM_PWM_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800117e:	f000 fb97 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001182:	2300      	movs	r3, #0
 8001184:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800118e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001192:	4619      	mov	r1, r3
 8001194:	4837      	ldr	r0, [pc, #220]	@ (8001274 <MX_TIM8_Init+0x160>)
 8001196:	f006 fd5f 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80011a0:	f000 fb86 	bl	80018b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a4:	2360      	movs	r3, #96	@ 0x60
 80011a6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ac:	2300      	movs	r3, #0
 80011ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011b0:	2300      	movs	r3, #0
 80011b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011c4:	2200      	movs	r2, #0
 80011c6:	4619      	mov	r1, r3
 80011c8:	482a      	ldr	r0, [pc, #168]	@ (8001274 <MX_TIM8_Init+0x160>)
 80011ca:	f005 ff15 	bl	8006ff8 <HAL_TIM_PWM_ConfigChannel>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80011d4:	f000 fb6c 	bl	80018b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011dc:	2204      	movs	r2, #4
 80011de:	4619      	mov	r1, r3
 80011e0:	4824      	ldr	r0, [pc, #144]	@ (8001274 <MX_TIM8_Init+0x160>)
 80011e2:	f005 ff09 	bl	8006ff8 <HAL_TIM_PWM_ConfigChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 80011ec:	f000 fb60 	bl	80018b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011f4:	2208      	movs	r2, #8
 80011f6:	4619      	mov	r1, r3
 80011f8:	481e      	ldr	r0, [pc, #120]	@ (8001274 <MX_TIM8_Init+0x160>)
 80011fa:	f005 fefd 	bl	8006ff8 <HAL_TIM_PWM_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8001204:	f000 fb54 	bl	80018b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001208:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800120c:	220c      	movs	r2, #12
 800120e:	4619      	mov	r1, r3
 8001210:	4818      	ldr	r0, [pc, #96]	@ (8001274 <MX_TIM8_Init+0x160>)
 8001212:	f005 fef1 	bl	8006ff8 <HAL_TIM_PWM_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 800121c:	f000 fb48 	bl	80018b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001234:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001238:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001242:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001246:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	4619      	mov	r1, r3
 8001254:	4807      	ldr	r0, [pc, #28]	@ (8001274 <MX_TIM8_Init+0x160>)
 8001256:	f006 fd87 	bl	8007d68 <HAL_TIMEx_ConfigBreakDeadTime>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM8_Init+0x150>
  {
    Error_Handler();
 8001260:	f000 fb26 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001264:	4803      	ldr	r0, [pc, #12]	@ (8001274 <MX_TIM8_Init+0x160>)
 8001266:	f000 fe95 	bl	8001f94 <HAL_TIM_MspPostInit>

}
 800126a:	bf00      	nop
 800126c:	3758      	adds	r7, #88	@ 0x58
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000440 	.word	0x20000440
 8001278:	40013400 	.word	0x40013400

0800127c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800129a:	4b22      	ldr	r3, [pc, #136]	@ (8001324 <MX_TIM15_Init+0xa8>)
 800129c:	4a22      	ldr	r2, [pc, #136]	@ (8001328 <MX_TIM15_Init+0xac>)
 800129e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 79;
 80012a0:	4b20      	ldr	r3, [pc, #128]	@ (8001324 <MX_TIM15_Init+0xa8>)
 80012a2:	224f      	movs	r2, #79	@ 0x4f
 80012a4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001324 <MX_TIM15_Init+0xa8>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <MX_TIM15_Init+0xa8>)
 80012ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012b2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <MX_TIM15_Init+0xa8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <MX_TIM15_Init+0xa8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c0:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <MX_TIM15_Init+0xa8>)
 80012c2:	2280      	movs	r2, #128	@ 0x80
 80012c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80012c6:	4817      	ldr	r0, [pc, #92]	@ (8001324 <MX_TIM15_Init+0xa8>)
 80012c8:	f005 fab1 	bl	800682e <HAL_TIM_IC_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80012d2:	f000 faed 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	480f      	ldr	r0, [pc, #60]	@ (8001324 <MX_TIM15_Init+0xa8>)
 80012e6:	f006 fcb7 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80012f0:	f000 fade 	bl	80018b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80012f4:	230a      	movs	r3, #10
 80012f6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012f8:	2301      	movs	r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	4619      	mov	r1, r3
 800130a:	4806      	ldr	r0, [pc, #24]	@ (8001324 <MX_TIM15_Init+0xa8>)
 800130c:	f005 fdd8 	bl	8006ec0 <HAL_TIM_IC_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 8001316:	f000 facb 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2000048c 	.word	0x2000048c
 8001328:	40014000 	.word	0x40014000

0800132c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001330:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <MX_TIM17_Init+0x48>)
 8001332:	4a11      	ldr	r2, [pc, #68]	@ (8001378 <MX_TIM17_Init+0x4c>)
 8001334:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 7999;
 8001336:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <MX_TIM17_Init+0x48>)
 8001338:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800133c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133e:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <MX_TIM17_Init+0x48>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <MX_TIM17_Init+0x48>)
 8001346:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800134a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134c:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <MX_TIM17_Init+0x48>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001352:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <MX_TIM17_Init+0x48>)
 8001354:	2200      	movs	r2, #0
 8001356:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <MX_TIM17_Init+0x48>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800135e:	4805      	ldr	r0, [pc, #20]	@ (8001374 <MX_TIM17_Init+0x48>)
 8001360:	f005 f946 	bl	80065f0 <HAL_TIM_Base_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 800136a:	f000 faa1 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200004d8 	.word	0x200004d8
 8001378:	40014800 	.word	0x40014800

0800137c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001380:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <MX_USART3_UART_Init+0x58>)
 8001382:	4a15      	ldr	r2, [pc, #84]	@ (80013d8 <MX_USART3_UART_Init+0x5c>)
 8001384:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001386:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <MX_USART3_UART_Init+0x58>)
 8001388:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800138c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <MX_USART3_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <MX_USART3_UART_Init+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <MX_USART3_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_USART3_UART_Init+0x58>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <MX_USART3_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <MX_USART3_UART_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <MX_USART3_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <MX_USART3_UART_Init+0x58>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <MX_USART3_UART_Init+0x58>)
 80013c0:	f006 fd6e 	bl	8007ea0 <HAL_UART_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80013ca:	f000 fa71 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000524 	.word	0x20000524
 80013d8:	40004800 	.word	0x40004800

080013dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	@ 0x28
 80013e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f2:	4b39      	ldr	r3, [pc, #228]	@ (80014d8 <MX_GPIO_Init+0xfc>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	4a38      	ldr	r2, [pc, #224]	@ (80014d8 <MX_GPIO_Init+0xfc>)
 80013f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fe:	4b36      	ldr	r3, [pc, #216]	@ (80014d8 <MX_GPIO_Init+0xfc>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	4b33      	ldr	r3, [pc, #204]	@ (80014d8 <MX_GPIO_Init+0xfc>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	4a32      	ldr	r2, [pc, #200]	@ (80014d8 <MX_GPIO_Init+0xfc>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001416:	4b30      	ldr	r3, [pc, #192]	@ (80014d8 <MX_GPIO_Init+0xfc>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	4b2d      	ldr	r3, [pc, #180]	@ (80014d8 <MX_GPIO_Init+0xfc>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	4a2c      	ldr	r2, [pc, #176]	@ (80014d8 <MX_GPIO_Init+0xfc>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142e:	4b2a      	ldr	r3, [pc, #168]	@ (80014d8 <MX_GPIO_Init+0xfc>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	4b27      	ldr	r3, [pc, #156]	@ (80014d8 <MX_GPIO_Init+0xfc>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	4a26      	ldr	r2, [pc, #152]	@ (80014d8 <MX_GPIO_Init+0xfc>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001446:	4b24      	ldr	r3, [pc, #144]	@ (80014d8 <MX_GPIO_Init+0xfc>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	2108      	movs	r1, #8
 8001456:	4821      	ldr	r0, [pc, #132]	@ (80014dc <MX_GPIO_Init+0x100>)
 8001458:	f002 fef4 	bl	8004244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8001462:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001466:	f002 feed 	bl	8004244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	f243 0106 	movw	r1, #12294	@ 0x3006
 8001470:	481b      	ldr	r0, [pc, #108]	@ (80014e0 <MX_GPIO_Init+0x104>)
 8001472:	f002 fee7 	bl	8004244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001476:	2308      	movs	r3, #8
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4813      	ldr	r0, [pc, #76]	@ (80014dc <MX_GPIO_Init+0x100>)
 800148e:	f002 fd2f 	bl	8003ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 8001492:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ae:	f002 fd1f 	bl	8003ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13;
 80014b2:	f243 0306 	movw	r3, #12294	@ 0x3006
 80014b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <MX_GPIO_Init+0x104>)
 80014cc:	f002 fd10 	bl	8003ef0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	@ 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40021000 	.word	0x40021000
 80014dc:	48000800 	.word	0x48000800
 80014e0:	48000400 	.word	0x48000400

080014e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//Metal Detector Interrupt Functions
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e6:	b095      	sub	sp, #84	@ 0x54
 80014e8:	af12      	add	r7, sp, #72	@ 0x48
 80014ea:	6078      	str	r0, [r7, #4]

	if (MDON ==1){
 80014ec:	4b96      	ldr	r3, [pc, #600]	@ (8001748 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	f040 811a 	bne.w	800172a <HAL_TIM_PeriodElapsedCallback+0x246>
		// Check which version of the timer triggered this callback
		//Turn on metal detector BJT
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001500:	f002 fea0 	bl	8004244 <HAL_GPIO_WritePin>

		if (htim == &htim6 ){
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a91      	ldr	r2, [pc, #580]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d154      	bne.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0xd2>
			switch(TIM6_Stage){
 800150c:	4b90      	ldr	r3, [pc, #576]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b0a      	cmp	r3, #10
 8001512:	d047      	beq.n	80015a4 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8001514:	2b0a      	cmp	r3, #10
 8001516:	dc4e      	bgt.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0xd2>
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_TIM_PeriodElapsedCallback+0x44>
 800151c:	2b00      	cmp	r3, #0
 800151e:	db4a      	blt.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0xd2>
 8001520:	3b01      	subs	r3, #1
 8001522:	2b08      	cmp	r3, #8
 8001524:	d847      	bhi.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0xd2>
 8001526:	e032      	b.n	800158e <HAL_TIM_PeriodElapsedCallback+0xaa>

			case 0:
				TIM7->CR1 &= ~TIM_CR1_CEN; //Disable timer 7
 8001528:	4b8a      	ldr	r3, [pc, #552]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a89      	ldr	r2, [pc, #548]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800152e:	f023 0301 	bic.w	r3, r3, #1
 8001532:	6013      	str	r3, [r2, #0]
				//Read Potentiometer to find delay
				if (HAL_ADC_PollForConversion(&hadc3, 10000) == HAL_OK){
 8001534:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001538:	4887      	ldr	r0, [pc, #540]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800153a:	f001 fd93 	bl	8003064 <HAL_ADC_PollForConversion>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d120      	bne.n	8001586 <HAL_TIM_PeriodElapsedCallback+0xa2>
					Delay_MD = HAL_ADC_GetValue(&hadc3);
 8001544:	4884      	ldr	r0, [pc, #528]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001546:	f001 fe65 	bl	8003214 <HAL_ADC_GetValue>
 800154a:	4603      	mov	r3, r0
 800154c:	b29a      	uxth	r2, r3
 800154e:	4b83      	ldr	r3, [pc, #524]	@ (800175c <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001550:	801a      	strh	r2, [r3, #0]
					HAL_ADC_Start(&hadc3);
 8001552:	4881      	ldr	r0, [pc, #516]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001554:	f001 fccc 	bl	8002ef0 <HAL_ADC_Start>
				}


				//Use this delay to Set Timer 7 delay

				TIM7->PSC = (impuls+Delay_MD);
 8001558:	4b81      	ldr	r3, [pc, #516]	@ (8001760 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b7f      	ldr	r3, [pc, #508]	@ (800175c <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	441a      	add	r2, r3
 8001564:	4b7b      	ldr	r3, [pc, #492]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001566:	629a      	str	r2, [r3, #40]	@ 0x28
				TIM7->CR1 |= TIM_CR1_CEN; //Re-Enable
 8001568:	4b7a      	ldr	r3, [pc, #488]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a79      	ldr	r2, [pc, #484]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6013      	str	r3, [r2, #0]

				//Go to next statge
				TIM6_Stage = 1;
 8001574:	4b76      	ldr	r3, [pc, #472]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]

				//Finally, set metal detector ON
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800157a:	2201      	movs	r2, #1
 800157c:	2108      	movs	r1, #8
 800157e:	4879      	ldr	r0, [pc, #484]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001580:	f002 fe60 	bl	8004244 <HAL_GPIO_WritePin>

				break;
 8001584:	e017      	b.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0xd2>
					TIM6_Stage = 0;
 8001586:	4b72      	ldr	r3, [pc, #456]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
					break;
 800158c:	e013      	b.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0xd2>
			case 6:
			case 7:
			case 8:
			case 9:
				//Set Pin low and go to next stage
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2108      	movs	r1, #8
 8001592:	4874      	ldr	r0, [pc, #464]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001594:	f002 fe56 	bl	8004244 <HAL_GPIO_WritePin>
				TIM6_Stage = TIM6_Stage + 1;
 8001598:	4b6d      	ldr	r3, [pc, #436]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80015a2:	701a      	strb	r2, [r3, #0]
			case 10:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2108      	movs	r1, #8
 80015a8:	486e      	ldr	r0, [pc, #440]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80015aa:	f002 fe4b 	bl	8004244 <HAL_GPIO_WritePin>
				TIM6_Stage = 0; //Go back to beginning
 80015ae:	4b68      	ldr	r3, [pc, #416]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
				break;
 80015b4:	bf00      	nop

			}


		}
		if (htim == &htim7){
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a6b      	ldr	r2, [pc, #428]	@ (8001768 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	f040 80c0 	bne.w	8001740 <HAL_TIM_PeriodElapsedCallback+0x25c>
			switch(TIM7_Stage){
 80015c0:	4b6a      	ldr	r3, [pc, #424]	@ (800176c <HAL_TIM_PeriodElapsedCallback+0x288>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b09      	cmp	r3, #9
 80015c6:	dc02      	bgt.n	80015ce <HAL_TIM_PeriodElapsedCallback+0xea>
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	dc03      	bgt.n	80015d4 <HAL_TIM_PeriodElapsedCallback+0xf0>
	else{
		sumval = 0;
		//Turn off metal detector module
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
	}
}
 80015cc:	e0b8      	b.n	8001740 <HAL_TIM_PeriodElapsedCallback+0x25c>
			switch(TIM7_Stage){
 80015ce:	2b0a      	cmp	r3, #10
 80015d0:	d01a      	beq.n	8001608 <HAL_TIM_PeriodElapsedCallback+0x124>
}
 80015d2:	e0b5      	b.n	8001740 <HAL_TIM_PeriodElapsedCallback+0x25c>
				val[TIM7_Stage-1] = HAL_ADC_GetValue(&hadc1);
 80015d4:	4866      	ldr	r0, [pc, #408]	@ (8001770 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80015d6:	f001 fe1d 	bl	8003214 <HAL_ADC_GetValue>
 80015da:	4602      	mov	r2, r0
 80015dc:	4b63      	ldr	r3, [pc, #396]	@ (800176c <HAL_TIM_PeriodElapsedCallback+0x288>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	b291      	uxth	r1, r2
 80015e4:	4a63      	ldr	r2, [pc, #396]	@ (8001774 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80015e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				HAL_ADC_Start(&hadc1);
 80015ea:	4861      	ldr	r0, [pc, #388]	@ (8001770 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80015ec:	f001 fc80 	bl	8002ef0 <HAL_ADC_Start>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	2108      	movs	r1, #8
 80015f4:	485b      	ldr	r0, [pc, #364]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80015f6:	f002 fe25 	bl	8004244 <HAL_GPIO_WritePin>
				TIM7_Stage = TIM7_Stage + 1;
 80015fa:	4b5c      	ldr	r3, [pc, #368]	@ (800176c <HAL_TIM_PeriodElapsedCallback+0x288>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b5a      	ldr	r3, [pc, #360]	@ (800176c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001604:	701a      	strb	r2, [r3, #0]
				break;
 8001606:	e09b      	b.n	8001740 <HAL_TIM_PeriodElapsedCallback+0x25c>
				val[TIM7_Stage-1] = HAL_ADC_GetValue(&hadc1);
 8001608:	4859      	ldr	r0, [pc, #356]	@ (8001770 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800160a:	f001 fe03 	bl	8003214 <HAL_ADC_GetValue>
 800160e:	4602      	mov	r2, r0
 8001610:	4b56      	ldr	r3, [pc, #344]	@ (800176c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	3b01      	subs	r3, #1
 8001616:	b291      	uxth	r1, r2
 8001618:	4a56      	ldr	r2, [pc, #344]	@ (8001774 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800161a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				sumval = val[0]+val[1]+val[2]+val[3]+val[4]+val[5]+val[6]+val[7]+val[8]+val[9];
 800161e:	4b55      	ldr	r3, [pc, #340]	@ (8001774 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	4b53      	ldr	r3, [pc, #332]	@ (8001774 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001626:	885b      	ldrh	r3, [r3, #2]
 8001628:	4413      	add	r3, r2
 800162a:	4a52      	ldr	r2, [pc, #328]	@ (8001774 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800162c:	8892      	ldrh	r2, [r2, #4]
 800162e:	4413      	add	r3, r2
 8001630:	4a50      	ldr	r2, [pc, #320]	@ (8001774 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001632:	88d2      	ldrh	r2, [r2, #6]
 8001634:	4413      	add	r3, r2
 8001636:	4a4f      	ldr	r2, [pc, #316]	@ (8001774 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001638:	8912      	ldrh	r2, [r2, #8]
 800163a:	4413      	add	r3, r2
 800163c:	4a4d      	ldr	r2, [pc, #308]	@ (8001774 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800163e:	8952      	ldrh	r2, [r2, #10]
 8001640:	4413      	add	r3, r2
 8001642:	4a4c      	ldr	r2, [pc, #304]	@ (8001774 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001644:	8992      	ldrh	r2, [r2, #12]
 8001646:	4413      	add	r3, r2
 8001648:	4a4a      	ldr	r2, [pc, #296]	@ (8001774 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800164a:	89d2      	ldrh	r2, [r2, #14]
 800164c:	4413      	add	r3, r2
 800164e:	4a49      	ldr	r2, [pc, #292]	@ (8001774 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001650:	8a12      	ldrh	r2, [r2, #16]
 8001652:	4413      	add	r3, r2
 8001654:	4a47      	ldr	r2, [pc, #284]	@ (8001774 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001656:	8a52      	ldrh	r2, [r2, #18]
 8001658:	4413      	add	r3, r2
 800165a:	461a      	mov	r2, r3
 800165c:	4b46      	ldr	r3, [pc, #280]	@ (8001778 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800165e:	601a      	str	r2, [r3, #0]
				sumval = sumval/5;
 8001660:	4b45      	ldr	r3, [pc, #276]	@ (8001778 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a45      	ldr	r2, [pc, #276]	@ (800177c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	4a42      	ldr	r2, [pc, #264]	@ (8001778 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800166e:	6013      	str	r3, [r2, #0]
				base = HAL_ADC_GetValue(&hadc2);
 8001670:	4843      	ldr	r0, [pc, #268]	@ (8001780 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001672:	f001 fdcf 	bl	8003214 <HAL_ADC_GetValue>
 8001676:	4603      	mov	r3, r0
 8001678:	b29a      	uxth	r2, r3
 800167a:	4b42      	ldr	r3, [pc, #264]	@ (8001784 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800167c:	801a      	strh	r2, [r3, #0]
				HAL_ADC_Start(&hadc2);
 800167e:	4840      	ldr	r0, [pc, #256]	@ (8001780 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001680:	f001 fc36 	bl	8002ef0 <HAL_ADC_Start>
				if (sumval > base){
 8001684:	4b3f      	ldr	r3, [pc, #252]	@ (8001784 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	4b3b      	ldr	r3, [pc, #236]	@ (8001778 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d211      	bcs.n	80016b6 <HAL_TIM_PeriodElapsedCallback+0x1d2>
					Metal_Found = 1;
 8001692:	4b3d      	ldr	r3, [pc, #244]	@ (8001788 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]
					Countdown_Start = 1;
 8001698:	4b3c      	ldr	r3, [pc, #240]	@ (800178c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
					Countdown_Time = __HAL_TIM_GET_COUNTER(&htim17);//Find EndTime using HAL
 800169e:	4b3c      	ldr	r3, [pc, #240]	@ (8001790 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001794 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80016a8:	801a      	strh	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80016aa:	2201      	movs	r2, #1
 80016ac:	2108      	movs	r1, #8
 80016ae:	482d      	ldr	r0, [pc, #180]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80016b0:	f002 fdc8 	bl	8004244 <HAL_GPIO_WritePin>
 80016b4:	e035      	b.n	8001722 <HAL_TIM_PeriodElapsedCallback+0x23e>
					if (Countdown_Start == 1){
 80016b6:	4b35      	ldr	r3, [pc, #212]	@ (800178c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d12c      	bne.n	8001718 <HAL_TIM_PeriodElapsedCallback+0x234>
						if (GETDELTA(htim17, Countdown_Start, 80000)>3000){
 80016be:	4b33      	ldr	r3, [pc, #204]	@ (800178c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	4e32      	ldr	r6, [pc, #200]	@ (8001790 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80016c6:	4b34      	ldr	r3, [pc, #208]	@ (8001798 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80016c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80016ca:	920f      	str	r2, [sp, #60]	@ 0x3c
 80016cc:	466d      	mov	r5, sp
 80016ce:	f106 0410 	add.w	r4, r6, #16
 80016d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016de:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80016e2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80016e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016ea:	f7fe fee5 	bl	80004b8 <GETDELTA>
 80016ee:	eef0 7a40 	vmov.f32	s15, s0
 80016f2:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800179c <HAL_TIM_PeriodElapsedCallback+0x2b8>
 80016f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	dd10      	ble.n	8001722 <HAL_TIM_PeriodElapsedCallback+0x23e>
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	2108      	movs	r1, #8
 8001704:	4817      	ldr	r0, [pc, #92]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001706:	f002 fd9d 	bl	8004244 <HAL_GPIO_WritePin>
							Metal_Found = 0;
 800170a:	4b1f      	ldr	r3, [pc, #124]	@ (8001788 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
							Countdown_Start = 0;
 8001710:	4b1e      	ldr	r3, [pc, #120]	@ (800178c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
 8001716:	e004      	b.n	8001722 <HAL_TIM_PeriodElapsedCallback+0x23e>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	2108      	movs	r1, #8
 800171c:	4811      	ldr	r0, [pc, #68]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800171e:	f002 fd91 	bl	8004244 <HAL_GPIO_WritePin>
				TIM7_Stage = 1;
 8001722:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
				break;
 8001728:	e00a      	b.n	8001740 <HAL_TIM_PeriodElapsedCallback+0x25c>
		sumval = 0;
 800172a:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001736:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800173a:	f002 fd83 	bl	8004244 <HAL_GPIO_WritePin>
}
 800173e:	e7ff      	b.n	8001740 <HAL_TIM_PeriodElapsedCallback+0x25c>
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001748:	20000006 	.word	0x20000006
 800174c:	200003a8 	.word	0x200003a8
 8001750:	200005cd 	.word	0x200005cd
 8001754:	40001400 	.word	0x40001400
 8001758:	20000110 	.word	0x20000110
 800175c:	20000004 	.word	0x20000004
 8001760:	20000002 	.word	0x20000002
 8001764:	48000800 	.word	0x48000800
 8001768:	200003f4 	.word	0x200003f4
 800176c:	20000000 	.word	0x20000000
 8001770:	20000048 	.word	0x20000048
 8001774:	200005d0 	.word	0x200005d0
 8001778:	200005c8 	.word	0x200005c8
 800177c:	cccccccd 	.word	0xcccccccd
 8001780:	200000ac 	.word	0x200000ac
 8001784:	200005c0 	.word	0x200005c0
 8001788:	200005e2 	.word	0x200005e2
 800178c:	200005c2 	.word	0x200005c2
 8001790:	200004d8 	.word	0x200004d8
 8001794:	200005c4 	.word	0x200005c4
 8001798:	00013880 	.word	0x00013880
 800179c:	453b8000 	.word	0x453b8000

080017a0 <HAL_SPI_RxCpltCallback>:



//Callback function for receiving SPI data. Called when receive is done
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI3) {
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a05      	ldr	r2, [pc, #20]	@ (80017c4 <HAL_SPI_RxCpltCallback+0x24>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d102      	bne.n	80017b8 <HAL_SPI_RxCpltCallback+0x18>
        // Set the data received flag if SPI3 receives data
        SPI_Rec = 1;
 80017b2:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <HAL_SPI_RxCpltCallback+0x28>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
    }
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	40003c00 	.word	0x40003c00
 80017c8:	200005cc 	.word	0x200005cc

080017cc <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) //Function from https://controllerstech.com/input-capture-in-stm32/
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7f1b      	ldrb	r3, [r3, #28]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d156      	bne.n	800188a <HAL_TIM_IC_CaptureCallback+0xbe>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80017dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001894 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10b      	bne.n	80017fc <HAL_TIM_IC_CaptureCallback+0x30>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80017e4:	2100      	movs	r1, #0
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f005 fd1a 	bl	8007220 <HAL_TIM_ReadCapturedValue>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b29      	ldr	r3, [pc, #164]	@ (8001898 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80017f2:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80017f4:	4b27      	ldr	r3, [pc, #156]	@ (8001894 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
 80017fa:	e046      	b.n	800188a <HAL_TIM_IC_CaptureCallback+0xbe>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80017fc:	2100      	movs	r1, #0
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f005 fd0e 	bl	8007220 <HAL_TIM_ReadCapturedValue>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	4b24      	ldr	r3, [pc, #144]	@ (800189c <HAL_TIM_IC_CaptureCallback+0xd0>)
 800180a:	601a      	str	r2, [r3, #0]
			if (IC_Val2 > IC_Val1)
 800180c:	4b23      	ldr	r3, [pc, #140]	@ (800189c <HAL_TIM_IC_CaptureCallback+0xd0>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	dd07      	ble.n	8001828 <HAL_TIM_IC_CaptureCallback+0x5c>
				Difference = IC_Val2-IC_Val1;
 8001818:	4b20      	ldr	r3, [pc, #128]	@ (800189c <HAL_TIM_IC_CaptureCallback+0xd0>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b1e      	ldr	r3, [pc, #120]	@ (8001898 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	4a1f      	ldr	r2, [pc, #124]	@ (80018a0 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e00f      	b.n	8001848 <HAL_TIM_IC_CaptureCallback+0x7c>
			else if (IC_Val1 > IC_Val2)
 8001828:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b1b      	ldr	r3, [pc, #108]	@ (800189c <HAL_TIM_IC_CaptureCallback+0xd0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	dd09      	ble.n	8001848 <HAL_TIM_IC_CaptureCallback+0x7c>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001834:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 800183c:	33ff      	adds	r3, #255	@ 0xff
 800183e:	4a17      	ldr	r2, [pc, #92]	@ (800189c <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a16      	ldr	r2, [pc, #88]	@ (80018a0 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001846:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 8001848:	4b16      	ldr	r3, [pc, #88]	@ (80018a4 <HAL_TIM_IC_CaptureCallback+0xd8>)
 800184a:	60fb      	str	r3, [r7, #12]
			float mFactor = 1000000/refClock;
 800184c:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80018a8 <HAL_TIM_IC_CaptureCallback+0xdc>
 8001850:	ed97 7a03 	vldr	s14, [r7, #12]
 8001854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001858:	edc7 7a02 	vstr	s15, [r7, #8]
			usWidth = Difference*mFactor;
 800185c:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001868:	edd7 7a02 	vldr	s15, [r7, #8]
 800186c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001874:	ee17 2a90 	vmov	r2, s15
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <HAL_TIM_IC_CaptureCallback+0xe0>)
 800187a:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2200      	movs	r2, #0
 8001882:	625a      	str	r2, [r3, #36]	@ 0x24
			Is_First_Captured = 0; // set it back to false
 8001884:	4b03      	ldr	r3, [pc, #12]	@ (8001894 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200005bc 	.word	0x200005bc
 8001898:	200005b0 	.word	0x200005b0
 800189c:	200005b4 	.word	0x200005b4
 80018a0:	200005b8 	.word	0x200005b8
 80018a4:	49742400 	.word	0x49742400
 80018a8:	49742400 	.word	0x49742400
 80018ac:	200005ac 	.word	0x200005ac

080018b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <HAL_MspInit+0x50>)
 80018c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ca:	4a11      	ldr	r2, [pc, #68]	@ (8001910 <HAL_MspInit+0x50>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80018d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <HAL_MspInit+0x50>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <HAL_MspInit+0x50>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001910 <HAL_MspInit+0x50>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_MspInit+0x50>)
 80018ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2005      	movs	r0, #5
 80018fc:	f002 fac1 	bl	8003e82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001900:	2005      	movs	r0, #5
 8001902:	f002 fada 	bl	8003eba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000

08001914 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08e      	sub	sp, #56	@ 0x38
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a58      	ldr	r2, [pc, #352]	@ (8001a94 <HAL_ADC_MspInit+0x180>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d12d      	bne.n	8001992 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001936:	4b58      	ldr	r3, [pc, #352]	@ (8001a98 <HAL_ADC_MspInit+0x184>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	4a56      	ldr	r2, [pc, #344]	@ (8001a98 <HAL_ADC_MspInit+0x184>)
 800193e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001940:	4b55      	ldr	r3, [pc, #340]	@ (8001a98 <HAL_ADC_MspInit+0x184>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d10b      	bne.n	8001960 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001948:	4b54      	ldr	r3, [pc, #336]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 800194a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194c:	4a53      	ldr	r2, [pc, #332]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 800194e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001952:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001954:	4b51      	ldr	r3, [pc, #324]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 8001956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001958:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800195c:	623b      	str	r3, [r7, #32]
 800195e:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001960:	4b4e      	ldr	r3, [pc, #312]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 8001962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001964:	4a4d      	ldr	r2, [pc, #308]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800196c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 800196e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	61fb      	str	r3, [r7, #28]
 8001976:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001978:	2303      	movs	r3, #3
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800197c:	2303      	movs	r3, #3
 800197e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001988:	4619      	mov	r1, r3
 800198a:	4845      	ldr	r0, [pc, #276]	@ (8001aa0 <HAL_ADC_MspInit+0x18c>)
 800198c:	f002 fab0 	bl	8003ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001990:	e07c      	b.n	8001a8c <HAL_ADC_MspInit+0x178>
  else if(hadc->Instance==ADC2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a43      	ldr	r2, [pc, #268]	@ (8001aa4 <HAL_ADC_MspInit+0x190>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d145      	bne.n	8001a28 <HAL_ADC_MspInit+0x114>
    HAL_RCC_ADC_CLK_ENABLED++;
 800199c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a98 <HAL_ADC_MspInit+0x184>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	4a3d      	ldr	r2, [pc, #244]	@ (8001a98 <HAL_ADC_MspInit+0x184>)
 80019a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80019a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001a98 <HAL_ADC_MspInit+0x184>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d10b      	bne.n	80019c6 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80019ae:	4b3b      	ldr	r3, [pc, #236]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	4a3a      	ldr	r2, [pc, #232]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 80019b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ba:	4b38      	ldr	r3, [pc, #224]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019c2:	61bb      	str	r3, [r7, #24]
 80019c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c6:	4b35      	ldr	r3, [pc, #212]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ca:	4a34      	ldr	r2, [pc, #208]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019d2:	4b32      	ldr	r3, [pc, #200]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019de:	4b2f      	ldr	r3, [pc, #188]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e2:	4a2e      	ldr	r2, [pc, #184]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ea:	4b2c      	ldr	r3, [pc, #176]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80019f6:	2306      	movs	r3, #6
 80019f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fa:	2303      	movs	r3, #3
 80019fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a06:	4619      	mov	r1, r3
 8001a08:	4825      	ldr	r0, [pc, #148]	@ (8001aa0 <HAL_ADC_MspInit+0x18c>)
 8001a0a:	f002 fa71 	bl	8003ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a12:	230b      	movs	r3, #11
 8001a14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4821      	ldr	r0, [pc, #132]	@ (8001aa8 <HAL_ADC_MspInit+0x194>)
 8001a22:	f002 fa65 	bl	8003ef0 <HAL_GPIO_Init>
}
 8001a26:	e031      	b.n	8001a8c <HAL_ADC_MspInit+0x178>
  else if(hadc->Instance==ADC3)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8001aac <HAL_ADC_MspInit+0x198>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d12c      	bne.n	8001a8c <HAL_ADC_MspInit+0x178>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001a32:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <HAL_ADC_MspInit+0x184>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	3301      	adds	r3, #1
 8001a38:	4a17      	ldr	r2, [pc, #92]	@ (8001a98 <HAL_ADC_MspInit+0x184>)
 8001a3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001a3c:	4b16      	ldr	r3, [pc, #88]	@ (8001a98 <HAL_ADC_MspInit+0x184>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d10b      	bne.n	8001a5c <HAL_ADC_MspInit+0x148>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001a44:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a48:	4a14      	ldr	r2, [pc, #80]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 8001a4a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a50:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a60:	4a0e      	ldr	r2, [pc, #56]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a68:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <HAL_ADC_MspInit+0x188>)
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a74:	2304      	movs	r3, #4
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a84:	4619      	mov	r1, r3
 8001a86:	4806      	ldr	r0, [pc, #24]	@ (8001aa0 <HAL_ADC_MspInit+0x18c>)
 8001a88:	f002 fa32 	bl	8003ef0 <HAL_GPIO_Init>
}
 8001a8c:	bf00      	nop
 8001a8e:	3738      	adds	r7, #56	@ 0x38
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	50040000 	.word	0x50040000
 8001a98:	200005e4 	.word	0x200005e4
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	48000800 	.word	0x48000800
 8001aa4:	50040100 	.word	0x50040100
 8001aa8:	48000400 	.word	0x48000400
 8001aac:	50040200 	.word	0x50040200

08001ab0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b0aa      	sub	sp, #168	@ 0xa8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	2284      	movs	r2, #132	@ 0x84
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f006 ff00 	bl	80088d6 <memset>
  if(hi2c->Instance==I2C2)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a21      	ldr	r2, [pc, #132]	@ (8001b60 <HAL_I2C_MspInit+0xb0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d13b      	bne.n	8001b58 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ae0:	2380      	movs	r3, #128	@ 0x80
 8001ae2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	4618      	mov	r0, r3
 8001aee:	f003 fb57 	bl	80051a0 <HAL_RCCEx_PeriphCLKConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001af8:	f7ff feda 	bl	80018b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afc:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <HAL_I2C_MspInit+0xb4>)
 8001afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b00:	4a18      	ldr	r2, [pc, #96]	@ (8001b64 <HAL_I2C_MspInit+0xb4>)
 8001b02:	f043 0302 	orr.w	r3, r3, #2
 8001b06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b08:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <HAL_I2C_MspInit+0xb4>)
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b14:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b1c:	2312      	movs	r3, #18
 8001b1e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b34:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480b      	ldr	r0, [pc, #44]	@ (8001b68 <HAL_I2C_MspInit+0xb8>)
 8001b3c:	f002 f9d8 	bl	8003ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b40:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <HAL_I2C_MspInit+0xb4>)
 8001b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b44:	4a07      	ldr	r2, [pc, #28]	@ (8001b64 <HAL_I2C_MspInit+0xb4>)
 8001b46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b4c:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <HAL_I2C_MspInit+0xb4>)
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b58:	bf00      	nop
 8001b5a:	37a8      	adds	r7, #168	@ 0xa8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40005800 	.word	0x40005800
 8001b64:	40021000 	.word	0x40021000
 8001b68:	48000400 	.word	0x48000400

08001b6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	@ 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a26      	ldr	r2, [pc, #152]	@ (8001c24 <HAL_SPI_MspInit+0xb8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d145      	bne.n	8001c1a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b8e:	4b26      	ldr	r3, [pc, #152]	@ (8001c28 <HAL_SPI_MspInit+0xbc>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b92:	4a25      	ldr	r2, [pc, #148]	@ (8001c28 <HAL_SPI_MspInit+0xbc>)
 8001b94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b98:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b9a:	4b23      	ldr	r3, [pc, #140]	@ (8001c28 <HAL_SPI_MspInit+0xbc>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <HAL_SPI_MspInit+0xbc>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001baa:	4a1f      	ldr	r2, [pc, #124]	@ (8001c28 <HAL_SPI_MspInit+0xbc>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c28 <HAL_SPI_MspInit+0xbc>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <HAL_SPI_MspInit+0xbc>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc2:	4a19      	ldr	r2, [pc, #100]	@ (8001c28 <HAL_SPI_MspInit+0xbc>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bca:	4b17      	ldr	r3, [pc, #92]	@ (8001c28 <HAL_SPI_MspInit+0xbc>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bd6:	2310      	movs	r3, #16
 8001bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001be6:	2306      	movs	r3, #6
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bf4:	f002 f97c 	bl	8003ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001bf8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c06:	2303      	movs	r3, #3
 8001c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c0a:	2306      	movs	r3, #6
 8001c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0e:	f107 0314 	add.w	r3, r7, #20
 8001c12:	4619      	mov	r1, r3
 8001c14:	4805      	ldr	r0, [pc, #20]	@ (8001c2c <HAL_SPI_MspInit+0xc0>)
 8001c16:	f002 f96b 	bl	8003ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c1a:	bf00      	nop
 8001c1c:	3728      	adds	r7, #40	@ 0x28
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40003c00 	.word	0x40003c00
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	48000800 	.word	0x48000800

08001c30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a16      	ldr	r2, [pc, #88]	@ (8001c98 <HAL_TIM_PWM_MspInit+0x68>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d114      	bne.n	8001c6c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c42:	4b16      	ldr	r3, [pc, #88]	@ (8001c9c <HAL_TIM_PWM_MspInit+0x6c>)
 8001c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c46:	4a15      	ldr	r2, [pc, #84]	@ (8001c9c <HAL_TIM_PWM_MspInit+0x6c>)
 8001c48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c4e:	4b13      	ldr	r3, [pc, #76]	@ (8001c9c <HAL_TIM_PWM_MspInit+0x6c>)
 8001c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	2018      	movs	r0, #24
 8001c60:	f002 f90f 	bl	8003e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001c64:	2018      	movs	r0, #24
 8001c66:	f002 f928 	bl	8003eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001c6a:	e010      	b.n	8001c8e <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM8)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0b      	ldr	r2, [pc, #44]	@ (8001ca0 <HAL_TIM_PWM_MspInit+0x70>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d10b      	bne.n	8001c8e <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c76:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <HAL_TIM_PWM_MspInit+0x6c>)
 8001c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c7a:	4a08      	ldr	r2, [pc, #32]	@ (8001c9c <HAL_TIM_PWM_MspInit+0x6c>)
 8001c7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c80:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c82:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <HAL_TIM_PWM_MspInit+0x6c>)
 8001c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
}
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40012c00 	.word	0x40012c00
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40013400 	.word	0x40013400

08001ca4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08e      	sub	sp, #56	@ 0x38
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cc4:	d129      	bne.n	8001d1a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cc6:	4b45      	ldr	r3, [pc, #276]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x138>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cca:	4a44      	ldr	r2, [pc, #272]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x138>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd2:	4b42      	ldr	r3, [pc, #264]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x138>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	4b3f      	ldr	r3, [pc, #252]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x138>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce2:	4a3e      	ldr	r2, [pc, #248]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x138>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cea:	4b3c      	ldr	r3, [pc, #240]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x138>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d06:	2301      	movs	r3, #1
 8001d08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d14:	f002 f8ec 	bl	8003ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d18:	e05b      	b.n	8001dd2 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a30      	ldr	r2, [pc, #192]	@ (8001de0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d129      	bne.n	8001d78 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d24:	4b2d      	ldr	r3, [pc, #180]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x138>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d28:	4a2c      	ldr	r2, [pc, #176]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x138>)
 8001d2a:	f043 0302 	orr.w	r3, r3, #2
 8001d2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d30:	4b2a      	ldr	r3, [pc, #168]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x138>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	4b27      	ldr	r3, [pc, #156]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x138>)
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d40:	4a26      	ldr	r2, [pc, #152]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x138>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d48:	4b24      	ldr	r3, [pc, #144]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x138>)
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d54:	23c0      	movs	r3, #192	@ 0xc0
 8001d56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d64:	2302      	movs	r3, #2
 8001d66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d72:	f002 f8bd 	bl	8003ef0 <HAL_GPIO_Init>
}
 8001d76:	e02c      	b.n	8001dd2 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a19      	ldr	r2, [pc, #100]	@ (8001de4 <HAL_TIM_Encoder_MspInit+0x140>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d127      	bne.n	8001dd2 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d82:	4b16      	ldr	r3, [pc, #88]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x138>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d86:	4a15      	ldr	r2, [pc, #84]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x138>)
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d8e:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x138>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	4b10      	ldr	r3, [pc, #64]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x138>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x138>)
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x138>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001db2:	23c0      	movs	r3, #192	@ 0xc0
 8001db4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4806      	ldr	r0, [pc, #24]	@ (8001de8 <HAL_TIM_Encoder_MspInit+0x144>)
 8001dce:	f002 f88f 	bl	8003ef0 <HAL_GPIO_Init>
}
 8001dd2:	bf00      	nop
 8001dd4:	3738      	adds	r7, #56	@ 0x38
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40000400 	.word	0x40000400
 8001de4:	40000800 	.word	0x40000800
 8001de8:	48000400 	.word	0x48000400

08001dec <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08c      	sub	sp, #48	@ 0x30
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 031c 	add.w	r3, r7, #28
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a33      	ldr	r2, [pc, #204]	@ (8001ed8 <HAL_TIM_IC_MspInit+0xec>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d129      	bne.n	8001e62 <HAL_TIM_IC_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e0e:	4b33      	ldr	r3, [pc, #204]	@ (8001edc <HAL_TIM_IC_MspInit+0xf0>)
 8001e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e12:	4a32      	ldr	r2, [pc, #200]	@ (8001edc <HAL_TIM_IC_MspInit+0xf0>)
 8001e14:	f043 0308 	orr.w	r3, r3, #8
 8001e18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e1a:	4b30      	ldr	r3, [pc, #192]	@ (8001edc <HAL_TIM_IC_MspInit+0xf0>)
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	61bb      	str	r3, [r7, #24]
 8001e24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	4b2d      	ldr	r3, [pc, #180]	@ (8001edc <HAL_TIM_IC_MspInit+0xf0>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8001edc <HAL_TIM_IC_MspInit+0xf0>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e32:	4b2a      	ldr	r3, [pc, #168]	@ (8001edc <HAL_TIM_IC_MspInit+0xf0>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e3e:	230c      	movs	r3, #12
 8001e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f107 031c 	add.w	r3, r7, #28
 8001e56:	4619      	mov	r1, r3
 8001e58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e5c:	f002 f848 	bl	8003ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001e60:	e035      	b.n	8001ece <HAL_TIM_IC_MspInit+0xe2>
  else if(htim_ic->Instance==TIM15)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1e      	ldr	r2, [pc, #120]	@ (8001ee0 <HAL_TIM_IC_MspInit+0xf4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d130      	bne.n	8001ece <HAL_TIM_IC_MspInit+0xe2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <HAL_TIM_IC_MspInit+0xf0>)
 8001e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e70:	4a1a      	ldr	r2, [pc, #104]	@ (8001edc <HAL_TIM_IC_MspInit+0xf0>)
 8001e72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e76:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e78:	4b18      	ldr	r3, [pc, #96]	@ (8001edc <HAL_TIM_IC_MspInit+0xf0>)
 8001e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e84:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <HAL_TIM_IC_MspInit+0xf0>)
 8001e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e88:	4a14      	ldr	r2, [pc, #80]	@ (8001edc <HAL_TIM_IC_MspInit+0xf0>)
 8001e8a:	f043 0302 	orr.w	r3, r3, #2
 8001e8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e90:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <HAL_TIM_IC_MspInit+0xf0>)
 8001e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001e9c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001eae:	230e      	movs	r3, #14
 8001eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb2:	f107 031c 	add.w	r3, r7, #28
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	480a      	ldr	r0, [pc, #40]	@ (8001ee4 <HAL_TIM_IC_MspInit+0xf8>)
 8001eba:	f002 f819 	bl	8003ef0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2018      	movs	r0, #24
 8001ec4:	f001 ffdd 	bl	8003e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001ec8:	2018      	movs	r0, #24
 8001eca:	f001 fff6 	bl	8003eba <HAL_NVIC_EnableIRQ>
}
 8001ece:	bf00      	nop
 8001ed0:	3730      	adds	r7, #48	@ 0x30
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40000c00 	.word	0x40000c00
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40014000 	.word	0x40014000
 8001ee4:	48000400 	.word	0x48000400

08001ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a23      	ldr	r2, [pc, #140]	@ (8001f84 <HAL_TIM_Base_MspInit+0x9c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d114      	bne.n	8001f24 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001efa:	4b23      	ldr	r3, [pc, #140]	@ (8001f88 <HAL_TIM_Base_MspInit+0xa0>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efe:	4a22      	ldr	r2, [pc, #136]	@ (8001f88 <HAL_TIM_Base_MspInit+0xa0>)
 8001f00:	f043 0310 	orr.w	r3, r3, #16
 8001f04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f06:	4b20      	ldr	r3, [pc, #128]	@ (8001f88 <HAL_TIM_Base_MspInit+0xa0>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	2036      	movs	r0, #54	@ 0x36
 8001f18:	f001 ffb3 	bl	8003e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f1c:	2036      	movs	r0, #54	@ 0x36
 8001f1e:	f001 ffcc 	bl	8003eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001f22:	e02a      	b.n	8001f7a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a18      	ldr	r2, [pc, #96]	@ (8001f8c <HAL_TIM_Base_MspInit+0xa4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d114      	bne.n	8001f58 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f2e:	4b16      	ldr	r3, [pc, #88]	@ (8001f88 <HAL_TIM_Base_MspInit+0xa0>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f32:	4a15      	ldr	r2, [pc, #84]	@ (8001f88 <HAL_TIM_Base_MspInit+0xa0>)
 8001f34:	f043 0320 	orr.w	r3, r3, #32
 8001f38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f3a:	4b13      	ldr	r3, [pc, #76]	@ (8001f88 <HAL_TIM_Base_MspInit+0xa0>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2037      	movs	r0, #55	@ 0x37
 8001f4c:	f001 ff99 	bl	8003e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f50:	2037      	movs	r0, #55	@ 0x37
 8001f52:	f001 ffb2 	bl	8003eba <HAL_NVIC_EnableIRQ>
}
 8001f56:	e010      	b.n	8001f7a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM17)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f90 <HAL_TIM_Base_MspInit+0xa8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d10b      	bne.n	8001f7a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001f62:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <HAL_TIM_Base_MspInit+0xa0>)
 8001f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f66:	4a08      	ldr	r2, [pc, #32]	@ (8001f88 <HAL_TIM_Base_MspInit+0xa0>)
 8001f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f6e:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <HAL_TIM_Base_MspInit+0xa0>)
 8001f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40001000 	.word	0x40001000
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40001400 	.word	0x40001400
 8001f90:	40014800 	.word	0x40014800

08001f94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	@ 0x28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a23      	ldr	r2, [pc, #140]	@ (8002040 <HAL_TIM_MspPostInit+0xac>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d11e      	bne.n	8001ff4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	4b23      	ldr	r3, [pc, #140]	@ (8002044 <HAL_TIM_MspPostInit+0xb0>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fba:	4a22      	ldr	r2, [pc, #136]	@ (8002044 <HAL_TIM_MspPostInit+0xb0>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fc2:	4b20      	ldr	r3, [pc, #128]	@ (8002044 <HAL_TIM_MspPostInit+0xb0>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001fce:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fee:	f001 ff7f 	bl	8003ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001ff2:	e021      	b.n	8002038 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM8)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a13      	ldr	r2, [pc, #76]	@ (8002048 <HAL_TIM_MspPostInit+0xb4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d11c      	bne.n	8002038 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffe:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <HAL_TIM_MspPostInit+0xb0>)
 8002000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002002:	4a10      	ldr	r2, [pc, #64]	@ (8002044 <HAL_TIM_MspPostInit+0xb0>)
 8002004:	f043 0304 	orr.w	r3, r3, #4
 8002008:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800200a:	4b0e      	ldr	r3, [pc, #56]	@ (8002044 <HAL_TIM_MspPostInit+0xb0>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002016:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800201a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002028:	2303      	movs	r3, #3
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4619      	mov	r1, r3
 8002032:	4806      	ldr	r0, [pc, #24]	@ (800204c <HAL_TIM_MspPostInit+0xb8>)
 8002034:	f001 ff5c 	bl	8003ef0 <HAL_GPIO_Init>
}
 8002038:	bf00      	nop
 800203a:	3728      	adds	r7, #40	@ 0x28
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40012c00 	.word	0x40012c00
 8002044:	40021000 	.word	0x40021000
 8002048:	40013400 	.word	0x40013400
 800204c:	48000800 	.word	0x48000800

08002050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b0aa      	sub	sp, #168	@ 0xa8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002068:	f107 0310 	add.w	r3, r7, #16
 800206c:	2284      	movs	r2, #132	@ 0x84
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f006 fc30 	bl	80088d6 <memset>
  if(huart->Instance==USART3)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a21      	ldr	r2, [pc, #132]	@ (8002100 <HAL_UART_MspInit+0xb0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d13a      	bne.n	80020f6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002080:	2304      	movs	r3, #4
 8002082:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002084:	2300      	movs	r3, #0
 8002086:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002088:	f107 0310 	add.w	r3, r7, #16
 800208c:	4618      	mov	r0, r3
 800208e:	f003 f887 	bl	80051a0 <HAL_RCCEx_PeriphCLKConfig>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002098:	f7ff fc0a 	bl	80018b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800209c:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <HAL_UART_MspInit+0xb4>)
 800209e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a0:	4a18      	ldr	r2, [pc, #96]	@ (8002104 <HAL_UART_MspInit+0xb4>)
 80020a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80020a8:	4b16      	ldr	r3, [pc, #88]	@ (8002104 <HAL_UART_MspInit+0xb4>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b4:	4b13      	ldr	r3, [pc, #76]	@ (8002104 <HAL_UART_MspInit+0xb4>)
 80020b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b8:	4a12      	ldr	r2, [pc, #72]	@ (8002104 <HAL_UART_MspInit+0xb4>)
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020c0:	4b10      	ldr	r3, [pc, #64]	@ (8002104 <HAL_UART_MspInit+0xb4>)
 80020c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020cc:	2330      	movs	r3, #48	@ 0x30
 80020ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020de:	2303      	movs	r3, #3
 80020e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020e4:	2307      	movs	r3, #7
 80020e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ea:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80020ee:	4619      	mov	r1, r3
 80020f0:	4805      	ldr	r0, [pc, #20]	@ (8002108 <HAL_UART_MspInit+0xb8>)
 80020f2:	f001 fefd 	bl	8003ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020f6:	bf00      	nop
 80020f8:	37a8      	adds	r7, #168	@ 0xa8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40004800 	.word	0x40004800
 8002104:	40021000 	.word	0x40021000
 8002108:	48000800 	.word	0x48000800

0800210c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <NMI_Handler+0x4>

08002114 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <HardFault_Handler+0x4>

0800211c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <MemManage_Handler+0x4>

08002124 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <BusFault_Handler+0x4>

0800212c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <UsageFault_Handler+0x4>

08002134 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002162:	f000 fb71 	bl	8002848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}

0800216a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800217c:	4803      	ldr	r0, [pc, #12]	@ (800218c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800217e:	f004 fd9d 	bl	8006cbc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002182:	4803      	ldr	r0, [pc, #12]	@ (8002190 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002184:	f004 fd9a 	bl	8006cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}
 800218c:	2000022c 	.word	0x2000022c
 8002190:	2000048c 	.word	0x2000048c

08002194 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002198:	4802      	ldr	r0, [pc, #8]	@ (80021a4 <TIM6_DAC_IRQHandler+0x10>)
 800219a:	f004 fd8f 	bl	8006cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200003a8 	.word	0x200003a8

080021a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80021ac:	4802      	ldr	r0, [pc, #8]	@ (80021b8 <TIM7_IRQHandler+0x10>)
 80021ae:	f004 fd85 	bl	8006cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200003f4 	.word	0x200003f4

080021bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <SystemInit+0x20>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c6:	4a05      	ldr	r2, [pc, #20]	@ (80021dc <SystemInit+0x20>)
 80021c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <task1_run>:


#include "task1.h"


void task1_run(uint8_t* State, ADC_HandleTypeDef Analog2,uint8_t* Kill) {
 80021e0:	b084      	sub	sp, #16
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	f107 001c 	add.w	r0, r7, #28
 80021ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    // Task 1 implementation
	while(1){
		switch(*State){
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <task1_run+0x20>
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d00b      	beq.n	8002216 <task1_run+0x36>
 80021fe:	e7f8      	b.n	80021f2 <task1_run+0x12>

		case 0:
			//State 0: INIT
			//Initialize ADC
			HAL_ADC_Start(&Analog2);
 8002200:	f107 031c 	add.w	r3, r7, #28
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fe73 	bl	8002ef0 <HAL_ADC_Start>
			//Analog2.Init.EOCSelection = DISABLE; //Apparently important
			//Set Variables
			uint16_t Bat_Res = 0; //Battery reading, should not be below 3303
 800220a:	2300      	movs	r3, #0
 800220c:	81fb      	strh	r3, [r7, #14]
			*State = 1;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]

			break;
 8002214:	e029      	b.n	800226a <task1_run+0x8a>

		case 1:
			//State 1: Check Battery
			//Read ADC, make sure good for conversion first
			if (HAL_ADC_PollForConversion(&Analog2, 10000) == HAL_OK)
 8002216:	f107 031c 	add.w	r3, r7, #28
 800221a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800221e:	4618      	mov	r0, r3
 8002220:	f000 ff20 	bl	8003064 <HAL_ADC_PollForConversion>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d112      	bne.n	8002250 <task1_run+0x70>
			        {
			            Bat_Res = HAL_ADC_GetValue(&Analog2);
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fff0 	bl	8003214 <HAL_ADC_GetValue>
 8002234:	4603      	mov	r3, r0
 8002236:	81fb      	strh	r3, [r7, #14]
			            Bat_Res = HAL_ADC_GetValue(&Analog2); //Have to do it twice i think
 8002238:	f107 031c 	add.w	r3, r7, #28
 800223c:	4618      	mov	r0, r3
 800223e:	f000 ffe9 	bl	8003214 <HAL_ADC_GetValue>
 8002242:	4603      	mov	r3, r0
 8002244:	81fb      	strh	r3, [r7, #14]
			            HAL_ADC_Start(&Analog2);
 8002246:	f107 031c 	add.w	r3, r7, #28
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fe50 	bl	8002ef0 <HAL_ADC_Start>
			        }
			if (Bat_Res <3303) {
 8002250:	89fb      	ldrh	r3, [r7, #14]
 8002252:	f640 42e6 	movw	r2, #3302	@ 0xce6
 8002256:	4293      	cmp	r3, r2
 8002258:	d803      	bhi.n	8002262 <task1_run+0x82>
				//If battery too low, turn everything off, they should be on by default
				*Kill = 1; //Kill if battery too low
 800225a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]

			}

			*State = 1; //Always return to state 1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]

			break;
 8002268:	bf00      	nop
		switch(*State){
 800226a:	e7c2      	b.n	80021f2 <task1_run+0x12>

0800226c <task2_run>:
#include "task2.h"
#include <stdlib.h>


void task2_run(uint8_t* State, uint8_t* BatKill,uint8_t* RadKill,int* usWidth,uint8_t* DriveON,uint8_t* ArmON,uint8_t* MDON,uint8_t* OPENMV)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]
    // Task 2 implementation
	while(1){
		switch(*State){
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <task2_run+0x1c>
 8002282:	2b01      	cmp	r3, #1
 8002284:	d004      	beq.n	8002290 <task2_run+0x24>
 8002286:	e7f8      	b.n	800227a <task2_run+0xe>

		case 0:
			//State 0: INIT

			*State = 1;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]

			break;
 800228e:	e039      	b.n	8002304 <task2_run+0x98>

		case 1:
			//State 1: Check Battery
			//Check Radio First, then Battery
			if(abs(*usWidth-1500)<200) //If Pulse width within 200 microseconds, then kill
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8002298:	f113 0fc7 	cmn.w	r3, #199	@ 0xc7
 800229c:	db12      	blt.n	80022c4 <task2_run+0x58>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80022a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80022a8:	dc0c      	bgt.n	80022c4 <task2_run+0x58>
			{
				*RadKill = 1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
				//Kill all motors and metal detector
				*DriveON = 0;
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
				*ArmON = 0;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
				*MDON = 0;
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
 80022c2:	e00b      	b.n	80022dc <task2_run+0x70>
			}
			else {
				*RadKill = 0;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
				//Turn on Metal Detector, motors
				*DriveON = 1;
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
				*ArmON = 1;
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
				*MDON = 1;
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
				}

			if (*BatKill == 1){
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d10b      	bne.n	80022fc <task2_run+0x90>
				//Kill Everything
				*DriveON = 0;
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]
			    *ArmON = 0;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
				*MDON = 0;
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
				*OPENMV = 0;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]

			}
			*State = 1; //Always return to state 1
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	701a      	strb	r2, [r3, #0]
			break;
 8002302:	bf00      	nop
		switch(*State){
 8002304:	e7b9      	b.n	800227a <task2_run+0xe>
	...

08002308 <task3_run>:
int16_t Distance_Int; //Distance received
int16_t Angle_Int; //Angle received

//Task 3 state machine: OPENMV Camera
void task3_run(uint8_t* State,float* Distance_Target,float* Angle_Target,uint8_t* SPI_Rec,
		uint8_t* Follow,uint8_t* OpenMV,SPI_HandleTypeDef SPI_3){
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	603b      	str	r3, [r7, #0]

	while(1){
			switch(*State){
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d8fb      	bhi.n	8002316 <task3_run+0xe>
 800231e:	a201      	add	r2, pc, #4	@ (adr r2, 8002324 <task3_run+0x1c>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	08002335 	.word	0x08002335
 8002328:	0800233d 	.word	0x0800233d
 800232c:	0800236f 	.word	0x0800236f
 8002330:	08002385 	.word	0x08002385

			case 0:
				//State 0: INIT

				*State = 1;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
				break;
 800233a:	e055      	b.n	80023e8 <task3_run+0xe0>

			case 1:
				//State 1: Flag Check

				//If we are in follow mode and OpenMV mode, then
				if((*Follow==1)&&(*OpenMV==1)){
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d10f      	bne.n	8002364 <task3_run+0x5c>
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d10b      	bne.n	8002364 <task3_run+0x5c>
					if(*SPI_Rec==0){
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d103      	bne.n	800235c <task3_run+0x54>
						*State = 2; //Next State Receive Data
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2202      	movs	r2, #2
 8002358:	701a      	strb	r2, [r3, #0]
					if(*SPI_Rec==0){
 800235a:	e007      	b.n	800236c <task3_run+0x64>
					}
					else{
						*State = 3; //If we already received data, process it
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2203      	movs	r2, #3
 8002360:	701a      	strb	r2, [r3, #0]
					if(*SPI_Rec==0){
 8002362:	e003      	b.n	800236c <task3_run+0x64>
					}
				}
				else{
					*State = 1;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
				}

				break;
 800236a:	e03d      	b.n	80023e8 <task3_run+0xe0>
 800236c:	e03c      	b.n	80023e8 <task3_run+0xe0>

			case 2:
				//State 2: Receive Data
				HAL_SPI_Receive_IT(&SPI_3, Buffer, 4);
 800236e:	f107 0320 	add.w	r3, r7, #32
 8002372:	2204      	movs	r2, #4
 8002374:	491d      	ldr	r1, [pc, #116]	@ (80023ec <task3_run+0xe4>)
 8002376:	4618      	mov	r0, r3
 8002378:	f003 fc42 	bl	8005c00 <HAL_SPI_Receive_IT>

				*State = 1; //Go back to flag check and wait for receive
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]

				break;
 8002382:	e031      	b.n	80023e8 <task3_run+0xe0>


			case 3:
				//State 3: Process Data
				//Convert buffer data to ints. First part of buffer should be distance, second part angle
				Distance_Int = (int16_t)(Buffer[0] << 8 | Buffer[1]);
 8002384:	4b19      	ldr	r3, [pc, #100]	@ (80023ec <task3_run+0xe4>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	b21a      	sxth	r2, r3
 800238c:	4b17      	ldr	r3, [pc, #92]	@ (80023ec <task3_run+0xe4>)
 800238e:	785b      	ldrb	r3, [r3, #1]
 8002390:	b21b      	sxth	r3, r3
 8002392:	4313      	orrs	r3, r2
 8002394:	b21a      	sxth	r2, r3
 8002396:	4b16      	ldr	r3, [pc, #88]	@ (80023f0 <task3_run+0xe8>)
 8002398:	801a      	strh	r2, [r3, #0]
			    Angle_Int = (int16_t)(Buffer[2] << 8 | Buffer[3]);
 800239a:	4b14      	ldr	r3, [pc, #80]	@ (80023ec <task3_run+0xe4>)
 800239c:	789b      	ldrb	r3, [r3, #2]
 800239e:	021b      	lsls	r3, r3, #8
 80023a0:	b21a      	sxth	r2, r3
 80023a2:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <task3_run+0xe4>)
 80023a4:	78db      	ldrb	r3, [r3, #3]
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	4313      	orrs	r3, r2
 80023aa:	b21a      	sxth	r2, r3
 80023ac:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <task3_run+0xec>)
 80023ae:	801a      	strh	r2, [r3, #0]

				// Convert to float (assuming the data was sent as 16-bit floats)
				*Distance_Target = (float)Distance_Int;
 80023b0:	4b0f      	ldr	r3, [pc, #60]	@ (80023f0 <task3_run+0xe8>)
 80023b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023b6:	ee07 3a90 	vmov	s15, r3
 80023ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	edc3 7a00 	vstr	s15, [r3]
				*Angle_Target = (float)Angle_Int;
 80023c4:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <task3_run+0xec>)
 80023c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	edc3 7a00 	vstr	s15, [r3]

				//Once data is fully processed, return to state 1 and reset recieve flag
				*SPI_Rec = 0;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
				*State = 1;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]

				break;
 80023e4:	bf00      	nop
 80023e6:	e796      	b.n	8002316 <task3_run+0xe>
			switch(*State){
 80023e8:	e795      	b.n	8002316 <task3_run+0xe>
 80023ea:	bf00      	nop
 80023ec:	200005e8 	.word	0x200005e8
 80023f0:	200005ec 	.word	0x200005ec
 80023f4:	200005ee 	.word	0x200005ee

080023f8 <task4_run>:
#include "task4.h"
#include <stdlib.h>


//Task 4 state machine: Metal Detector
void task4_run(uint8_t* State){
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

	while(1){
			switch(*State){
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1fb      	bne.n	8002400 <task4_run+0x8>

			case 0:
				//State 0: INIT

				*State = 1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]

				break;
 800240e:	bf00      	nop
			switch(*State){
 8002410:	e7f6      	b.n	8002400 <task4_run+0x8>
	...

08002414 <task5_run>:
uint32_t Metal_Delta; //Difference between old and new metal detector reading

float K_arm = 1; //Arm control Gain value

//Task 5 state machine: Arm Motor
void task5_run(uint8_t* State, uint8_t* ArmON,uint8_t* Metal_Found, TIM_HandleTypeDef Timer, uint32_t* sumval){
 8002414:	b082      	sub	sp, #8
 8002416:	b5b0      	push	{r4, r5, r7, lr}
 8002418:	b096      	sub	sp, #88	@ 0x58
 800241a:	af12      	add	r7, sp, #72	@ 0x48
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	627b      	str	r3, [r7, #36]	@ 0x24

	while(1){
			switch(*State){
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b03      	cmp	r3, #3
 800242a:	f200 8125 	bhi.w	8002678 <task5_run+0x264>
 800242e:	a201      	add	r2, pc, #4	@ (adr r2, 8002434 <task5_run+0x20>)
 8002430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002434:	08002445 	.word	0x08002445
 8002438:	08002463 	.word	0x08002463
 800243c:	080024ad 	.word	0x080024ad
 8002440:	08002569 	.word	0x08002569
			case 0:
				//State 0: INIT

				//ZERO ARM ENCODER

				Arm_Pos_Target = 0; //Set passive sweep target to 0
 8002444:	4b90      	ldr	r3, [pc, #576]	@ (8002688 <task5_run+0x274>)
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
				Arm_Deg_Target = 0; //Set passive sweep target to 0
 800244c:	4b8f      	ldr	r3, [pc, #572]	@ (800268c <task5_run+0x278>)
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
				Deg_inc = .01; //Set degree increment
 8002454:	4b8e      	ldr	r3, [pc, #568]	@ (8002690 <task5_run+0x27c>)
 8002456:	4a8f      	ldr	r2, [pc, #572]	@ (8002694 <task5_run+0x280>)
 8002458:	601a      	str	r2, [r3, #0]

				*State = 1;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	701a      	strb	r2, [r3, #0]

				break;
 8002460:	e10a      	b.n	8002678 <task5_run+0x264>

			case 1:
				//State 1: Flag check
				if(*ArmON == 1){
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d11c      	bne.n	80024a4 <task5_run+0x90>

					if(*Metal_Found == 1){
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d103      	bne.n	800247a <task5_run+0x66>
						//If metal found, go to state 3
						*State = 3;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2203      	movs	r2, #3
 8002476:	701a      	strb	r2, [r3, #0]
					//SET ARM MOTOR TO ZERO DUTY CYCLE

					*State = 1;
				}

				break;
 8002478:	e0fd      	b.n	8002676 <task5_run+0x262>
						*State = 2;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2202      	movs	r2, #2
 800247e:	701a      	strb	r2, [r3, #0]
						sumval_old = *sumval; //Reset metal detector sumval
 8002480:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a84      	ldr	r2, [pc, #528]	@ (8002698 <task5_run+0x284>)
 8002486:	6013      	str	r3, [r2, #0]
						if (TimerStarted == 0){
 8002488:	4b84      	ldr	r3, [pc, #528]	@ (800269c <task5_run+0x288>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	f040 80f2 	bne.w	8002676 <task5_run+0x262>
							Time_Start = __HAL_TIM_GET_COUNTER(&Timer);//Find EndTime using HAL
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	b29a      	uxth	r2, r3
 8002498:	4b81      	ldr	r3, [pc, #516]	@ (80026a0 <task5_run+0x28c>)
 800249a:	801a      	strh	r2, [r3, #0]
							TimerStarted = 1;
 800249c:	4b7f      	ldr	r3, [pc, #508]	@ (800269c <task5_run+0x288>)
 800249e:	2201      	movs	r2, #1
 80024a0:	701a      	strb	r2, [r3, #0]
				break;
 80024a2:	e0e8      	b.n	8002676 <task5_run+0x262>
					*State = 1;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2201      	movs	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]
				break;
 80024aa:	e0e4      	b.n	8002676 <task5_run+0x262>

				//SET TARGET ENCODER VALUE


				//Get current time difference, if it is greater than or equal to 10ms, then set new arm target.
				TimeDiff = GETDELTA(Timer, Time_Start, 80000);
 80024ac:	4b7c      	ldr	r3, [pc, #496]	@ (80026a0 <task5_run+0x28c>)
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	4a7c      	ldr	r2, [pc, #496]	@ (80026a4 <task5_run+0x290>)
 80024b2:	9210      	str	r2, [sp, #64]	@ 0x40
 80024b4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80024b6:	466d      	mov	r5, sp
 80024b8:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80024bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80024cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80024d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024d6:	f7fd ffef 	bl	80004b8 <GETDELTA>
 80024da:	eef0 7a40 	vmov.f32	s15, s0
 80024de:	4b72      	ldr	r3, [pc, #456]	@ (80026a8 <task5_run+0x294>)
 80024e0:	edc3 7a00 	vstr	s15, [r3]
				if (TimeDiff >= 10){
 80024e4:	4b70      	ldr	r3, [pc, #448]	@ (80026a8 <task5_run+0x294>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80024ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f6:	db33      	blt.n	8002560 <task5_run+0x14c>
					//If 10ms have passed, update arm position target

					if (abs(Arm_Deg_Target) >= SweepDeg){
 80024f8:	4b64      	ldr	r3, [pc, #400]	@ (800268c <task5_run+0x278>)
 80024fa:	edd3 7a00 	vldr	s15, [r3]
 80024fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002502:	ee17 3a90 	vmov	r3, s15
 8002506:	2b00      	cmp	r3, #0
 8002508:	bfb8      	it	lt
 800250a:	425b      	neglt	r3, r3
 800250c:	4a67      	ldr	r2, [pc, #412]	@ (80026ac <task5_run+0x298>)
 800250e:	f992 2000 	ldrsb.w	r2, [r2]
 8002512:	4293      	cmp	r3, r2
 8002514:	db07      	blt.n	8002526 <task5_run+0x112>
						//If we have gone past our max degrees, then change direction
						Deg_inc = -Deg_inc;
 8002516:	4b5e      	ldr	r3, [pc, #376]	@ (8002690 <task5_run+0x27c>)
 8002518:	edd3 7a00 	vldr	s15, [r3]
 800251c:	eef1 7a67 	vneg.f32	s15, s15
 8002520:	4b5b      	ldr	r3, [pc, #364]	@ (8002690 <task5_run+0x27c>)
 8002522:	edc3 7a00 	vstr	s15, [r3]
					}

					//Set new Target in degrees
					Arm_Deg_Target = Arm_Deg_Target + Deg_inc;
 8002526:	4b59      	ldr	r3, [pc, #356]	@ (800268c <task5_run+0x278>)
 8002528:	ed93 7a00 	vldr	s14, [r3]
 800252c:	4b58      	ldr	r3, [pc, #352]	@ (8002690 <task5_run+0x27c>)
 800252e:	edd3 7a00 	vldr	s15, [r3]
 8002532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002536:	4b55      	ldr	r3, [pc, #340]	@ (800268c <task5_run+0x278>)
 8002538:	edc3 7a00 	vstr	s15, [r3]

							//Convert to desired encoder position
					Arm_Pos_Target = Arm_Deg_Target/360*Arm_Encoder_CPR;
 800253c:	4b53      	ldr	r3, [pc, #332]	@ (800268c <task5_run+0x278>)
 800253e:	edd3 7a00 	vldr	s15, [r3]
 8002542:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 80026b0 <task5_run+0x29c>
 8002546:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800254a:	4b5a      	ldr	r3, [pc, #360]	@ (80026b4 <task5_run+0x2a0>)
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002554:	4b4c      	ldr	r3, [pc, #304]	@ (8002688 <task5_run+0x274>)
 8002556:	edc3 7a00 	vstr	s15, [r3]

					TimerStarted = 0; //Reset Timer
 800255a:	4b50      	ldr	r3, [pc, #320]	@ (800269c <task5_run+0x288>)
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]

				//if (abs(reading/Arm_Encoder_CPR*360)>=90)   {
					//*ArmON = 0;
					//}

				*State = 1; //Always return to state 1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]

				break;
 8002566:	e087      	b.n	8002678 <task5_run+0x264>

			case 3:
				//State 3: Control algorithm to find metal.
				if (S3_First == 1){
 8002568:	4b53      	ldr	r3, [pc, #332]	@ (80026b8 <task5_run+0x2a4>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d126      	bne.n	80025be <task5_run+0x1aa>
					S3_First = 0; //Dont go through this loop again
 8002570:	4b51      	ldr	r3, [pc, #324]	@ (80026b8 <task5_run+0x2a4>)
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
					Arm_Deg_Target = Arm_Deg_Target + Deg_inc; //Try going one way first
 8002576:	4b45      	ldr	r3, [pc, #276]	@ (800268c <task5_run+0x278>)
 8002578:	ed93 7a00 	vldr	s14, [r3]
 800257c:	4b44      	ldr	r3, [pc, #272]	@ (8002690 <task5_run+0x27c>)
 800257e:	edd3 7a00 	vldr	s15, [r3]
 8002582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002586:	4b41      	ldr	r3, [pc, #260]	@ (800268c <task5_run+0x278>)
 8002588:	edc3 7a00 	vstr	s15, [r3]
					Arm_Pos_Target = Arm_Deg_Target/360*Arm_Encoder_CPR;
 800258c:	4b3f      	ldr	r3, [pc, #252]	@ (800268c <task5_run+0x278>)
 800258e:	edd3 7a00 	vldr	s15, [r3]
 8002592:	eddf 6a47 	vldr	s13, [pc, #284]	@ 80026b0 <task5_run+0x29c>
 8002596:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800259a:	4b46      	ldr	r3, [pc, #280]	@ (80026b4 <task5_run+0x2a0>)
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a4:	4b38      	ldr	r3, [pc, #224]	@ (8002688 <task5_run+0x274>)
 80025a6:	edc3 7a00 	vstr	s15, [r3]
					Time_Start = __HAL_TIM_GET_COUNTER(&Timer);//Find EndTime using HAL
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	4b3b      	ldr	r3, [pc, #236]	@ (80026a0 <task5_run+0x28c>)
 80025b2:	801a      	strh	r2, [r3, #0]
					sumval_old = *sumval;
 80025b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a37      	ldr	r2, [pc, #220]	@ (8002698 <task5_run+0x284>)
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	e053      	b.n	8002666 <task5_run+0x252>
				}

				else{
					TimeDiff = GETDELTA(Timer, Time_Start, 80000);
 80025be:	4b38      	ldr	r3, [pc, #224]	@ (80026a0 <task5_run+0x28c>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	4a38      	ldr	r2, [pc, #224]	@ (80026a4 <task5_run+0x290>)
 80025c4:	9210      	str	r2, [sp, #64]	@ 0x40
 80025c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80025c8:	466d      	mov	r5, sp
 80025ca:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80025ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025da:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80025de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80025e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025e8:	f7fd ff66 	bl	80004b8 <GETDELTA>
 80025ec:	eef0 7a40 	vmov.f32	s15, s0
 80025f0:	4b2d      	ldr	r3, [pc, #180]	@ (80026a8 <task5_run+0x294>)
 80025f2:	edc3 7a00 	vstr	s15, [r3]
					if (TimeDiff >= 10){
 80025f6:	4b2c      	ldr	r3, [pc, #176]	@ (80026a8 <task5_run+0x294>)
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002608:	db2d      	blt.n	8002666 <task5_run+0x252>
						//If 10ms have passed, update arm position target
						Metal_Delta = *sumval-sumval_old;
 800260a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	4b22      	ldr	r3, [pc, #136]	@ (8002698 <task5_run+0x284>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	4a29      	ldr	r2, [pc, #164]	@ (80026bc <task5_run+0x2a8>)
 8002616:	6013      	str	r3, [r2, #0]
						Time_Start = __HAL_TIM_GET_COUNTER(&Timer);//Find EndTime using HAL
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	b29a      	uxth	r2, r3
 800261e:	4b20      	ldr	r3, [pc, #128]	@ (80026a0 <task5_run+0x28c>)
 8002620:	801a      	strh	r2, [r3, #0]
						if (Metal_Delta < 0){
							//If we moved away from the metal detection, reverse direction
							ArmDir = -ArmDir; //Reverse arm direction
						}
						//I think this code tries to make the Delta = 0
						Arm_Pos_Target = Arm_Pos_Target + K_arm*ArmDir*abs(Metal_Delta);
 8002622:	4b27      	ldr	r3, [pc, #156]	@ (80026c0 <task5_run+0x2ac>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800262e:	4b25      	ldr	r3, [pc, #148]	@ (80026c4 <task5_run+0x2b0>)
 8002630:	edd3 7a00 	vldr	s15, [r3]
 8002634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002638:	4b20      	ldr	r3, [pc, #128]	@ (80026bc <task5_run+0x2a8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	bfb8      	it	lt
 8002640:	425b      	neglt	r3, r3
 8002642:	ee07 3a90 	vmov	s15, r3
 8002646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800264a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800264e:	4b0e      	ldr	r3, [pc, #56]	@ (8002688 <task5_run+0x274>)
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002658:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <task5_run+0x274>)
 800265a:	edc3 7a00 	vstr	s15, [r3]
						sumval_old = *sumval;
 800265e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a0d      	ldr	r2, [pc, #52]	@ (8002698 <task5_run+0x284>)
 8002664:	6013      	str	r3, [r2, #0]
						//Arm_Pos_Target = Arm_Deg_Target/360*Arm_Encoder_CPR;
					//}

				//SET ENCODER TARGET VALUE

				if(*Metal_Found == 0){
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d104      	bne.n	8002678 <task5_run+0x264>
					//Arm_Dir = 1; //Reset Arm Direction
					*State = 1; //Return to State 1
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
				}

			}

				break;
 8002674:	e000      	b.n	8002678 <task5_run+0x264>
				break;
 8002676:	bf00      	nop
				break;
 8002678:	bf00      	nop
	}
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002684:	b002      	add	sp, #8
 8002686:	4770      	bx	lr
 8002688:	200005f0 	.word	0x200005f0
 800268c:	200005f4 	.word	0x200005f4
 8002690:	200005f8 	.word	0x200005f8
 8002694:	3c23d70a 	.word	0x3c23d70a
 8002698:	20000604 	.word	0x20000604
 800269c:	200005fe 	.word	0x200005fe
 80026a0:	200005fc 	.word	0x200005fc
 80026a4:	00013880 	.word	0x00013880
 80026a8:	20000600 	.word	0x20000600
 80026ac:	20000010 	.word	0x20000010
 80026b0:	43b40000 	.word	0x43b40000
 80026b4:	2000000c 	.word	0x2000000c
 80026b8:	200005ff 	.word	0x200005ff
 80026bc:	20000608 	.word	0x20000608
 80026c0:	20000011 	.word	0x20000011
 80026c4:	20000014 	.word	0x20000014

080026c8 <task6_run>:
 */
#include "task6.h"
#include <stdlib.h>

//Task 6 state machine: Drive Motors
void task6_run(uint8_t* State, uint8_t* DriveON_MD,uint8_t* DriveON_Rad,uint8_t* Follow, float* Distance_Target, float* Angle_Target){
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	603b      	str	r3, [r7, #0]

	while(1){
			switch(*State){
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d8fb      	bhi.n	80026d6 <task6_run+0xe>
 80026de:	a201      	add	r2, pc, #4	@ (adr r2, 80026e4 <task6_run+0x1c>)
 80026e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e4:	080026f9 	.word	0x080026f9
 80026e8:	08002701 	.word	0x08002701
 80026ec:	080026d7 	.word	0x080026d7
 80026f0:	08002739 	.word	0x08002739
 80026f4:	08002741 	.word	0x08002741

			case 0:
				//State 0: INIT

				*State = 1;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]

				break;
 80026fe:	e024      	b.n	800274a <task6_run+0x82>


			case 1:
				//State 1: Flag check
				if (*DriveON_Rad == 1){
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d113      	bne.n	8002730 <task6_run+0x68>
					//If radio triggered, run rest of code
					if (*DriveON_MD == 0){
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d103      	bne.n	8002718 <task6_run+0x50>
						//If Metal Detected, Go to state 3
						*State = 3;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2203      	movs	r2, #3
 8002714:	701a      	strb	r2, [r3, #0]
					*State = 1; //Else, return to state 1

					//SET DRIVE MOTORS TO 0;
				}

				break;
 8002716:	e018      	b.n	800274a <task6_run+0x82>
						if (*Follow == 1){
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d103      	bne.n	8002728 <task6_run+0x60>
							*State = 2;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2202      	movs	r2, #2
 8002724:	701a      	strb	r2, [r3, #0]
				break;
 8002726:	e010      	b.n	800274a <task6_run+0x82>
							*State = 4;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2204      	movs	r2, #4
 800272c:	701a      	strb	r2, [r3, #0]
				break;
 800272e:	e00c      	b.n	800274a <task6_run+0x82>
					*State = 1; //Else, return to state 1
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	701a      	strb	r2, [r3, #0]
				break;
 8002736:	e008      	b.n	800274a <task6_run+0x82>
				//SET ALL MOTORS TO BRAKE MODE

				//Could add additional drive forward and backward functionality here
				//But for demo, we have simplified the design

				*State = 1; //Always return to State 1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]

				break;
 800273e:	e004      	b.n	800274a <task6_run+0x82>



			case 4:
				//State 4: DEBUG Testing, should be empty on final code
				*State = 1; //Always return to State 1
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]

				break;
 8002746:	bf00      	nop
 8002748:	e7c5      	b.n	80026d6 <task6_run+0xe>
			switch(*State){
 800274a:	e7c4      	b.n	80026d6 <task6_run+0xe>

0800274c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800274c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002784 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002750:	f7ff fd34 	bl	80021bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002754:	480c      	ldr	r0, [pc, #48]	@ (8002788 <LoopForever+0x6>)
  ldr r1, =_edata
 8002756:	490d      	ldr	r1, [pc, #52]	@ (800278c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002758:	4a0d      	ldr	r2, [pc, #52]	@ (8002790 <LoopForever+0xe>)
  movs r3, #0
 800275a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800275c:	e002      	b.n	8002764 <LoopCopyDataInit>

0800275e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800275e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002762:	3304      	adds	r3, #4

08002764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002768:	d3f9      	bcc.n	800275e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800276a:	4a0a      	ldr	r2, [pc, #40]	@ (8002794 <LoopForever+0x12>)
  ldr r4, =_ebss
 800276c:	4c0a      	ldr	r4, [pc, #40]	@ (8002798 <LoopForever+0x16>)
  movs r3, #0
 800276e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002770:	e001      	b.n	8002776 <LoopFillZerobss>

08002772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002774:	3204      	adds	r2, #4

08002776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002778:	d3fb      	bcc.n	8002772 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800277a:	f006 f8b5 	bl	80088e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800277e:	f7fd fedf 	bl	8000540 <main>

08002782 <LoopForever>:

LoopForever:
    b LoopForever
 8002782:	e7fe      	b.n	8002782 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002784:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800278c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8002790:	080089bc 	.word	0x080089bc
  ldr r2, =_sbss
 8002794:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8002798:	20000610 	.word	0x20000610

0800279c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800279c:	e7fe      	b.n	800279c <ADC1_2_IRQHandler>

0800279e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a8:	2003      	movs	r0, #3
 80027aa:	f001 fb5f 	bl	8003e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027ae:	200f      	movs	r0, #15
 80027b0:	f000 f80e 	bl	80027d0 <HAL_InitTick>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	71fb      	strb	r3, [r7, #7]
 80027be:	e001      	b.n	80027c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027c0:	f7ff f87e 	bl	80018c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027c4:	79fb      	ldrb	r3, [r7, #7]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027dc:	4b17      	ldr	r3, [pc, #92]	@ (800283c <HAL_InitTick+0x6c>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d023      	beq.n	800282c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027e4:	4b16      	ldr	r3, [pc, #88]	@ (8002840 <HAL_InitTick+0x70>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b14      	ldr	r3, [pc, #80]	@ (800283c <HAL_InitTick+0x6c>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	4619      	mov	r1, r3
 80027ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 fb6b 	bl	8003ed6 <HAL_SYSTICK_Config>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b0f      	cmp	r3, #15
 800280a:	d809      	bhi.n	8002820 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800280c:	2200      	movs	r2, #0
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	f04f 30ff 	mov.w	r0, #4294967295
 8002814:	f001 fb35 	bl	8003e82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002818:	4a0a      	ldr	r2, [pc, #40]	@ (8002844 <HAL_InitTick+0x74>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	e007      	b.n	8002830 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
 8002824:	e004      	b.n	8002830 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
 800282a:	e001      	b.n	8002830 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002830:	7bfb      	ldrb	r3, [r7, #15]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	2000001c 	.word	0x2000001c
 8002840:	20000008 	.word	0x20000008
 8002844:	20000018 	.word	0x20000018

08002848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800284c:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <HAL_IncTick+0x20>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	4b06      	ldr	r3, [pc, #24]	@ (800286c <HAL_IncTick+0x24>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4413      	add	r3, r2
 8002858:	4a04      	ldr	r2, [pc, #16]	@ (800286c <HAL_IncTick+0x24>)
 800285a:	6013      	str	r3, [r2, #0]
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	2000001c 	.word	0x2000001c
 800286c:	2000060c 	.word	0x2000060c

08002870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return uwTick;
 8002874:	4b03      	ldr	r3, [pc, #12]	@ (8002884 <HAL_GetTick+0x14>)
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	2000060c 	.word	0x2000060c

08002888 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	609a      	str	r2, [r3, #8]
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	609a      	str	r2, [r3, #8]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3360      	adds	r3, #96	@ 0x60
 8002902:	461a      	mov	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b08      	ldr	r3, [pc, #32]	@ (8002934 <LL_ADC_SetOffset+0x44>)
 8002912:	4013      	ands	r3, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	4313      	orrs	r3, r2
 8002920:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002928:	bf00      	nop
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	03fff000 	.word	0x03fff000

08002938 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3360      	adds	r3, #96	@ 0x60
 8002946:	461a      	mov	r2, r3
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	3360      	adds	r3, #96	@ 0x60
 8002974:	461a      	mov	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	431a      	orrs	r2, r3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3330      	adds	r3, #48	@ 0x30
 80029d0:	461a      	mov	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	0a1b      	lsrs	r3, r3, #8
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	f003 030c 	and.w	r3, r3, #12
 80029dc:	4413      	add	r3, r2
 80029de:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	211f      	movs	r1, #31
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	401a      	ands	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	0e9b      	lsrs	r3, r3, #26
 80029f8:	f003 011f 	and.w	r1, r3, #31
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	431a      	orrs	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a0c:	bf00      	nop
 8002a0e:	371c      	adds	r7, #28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	3314      	adds	r3, #20
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	0e5b      	lsrs	r3, r3, #25
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	4413      	add	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	0d1b      	lsrs	r3, r3, #20
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	2107      	movs	r1, #7
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	401a      	ands	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	0d1b      	lsrs	r3, r3, #20
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a62:	bf00      	nop
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f003 0318 	and.w	r3, r3, #24
 8002a92:	4908      	ldr	r1, [pc, #32]	@ (8002ab4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a94:	40d9      	lsrs	r1, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	400b      	ands	r3, r1
 8002a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	0007ffff 	.word	0x0007ffff

08002ab8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 031f 	and.w	r3, r3, #31
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002b00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6093      	str	r3, [r2, #8]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b28:	d101      	bne.n	8002b2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002b4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b50:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b78:	d101      	bne.n	8002b7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ba0:	f043 0201 	orr.w	r2, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <LL_ADC_IsEnabled+0x18>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <LL_ADC_IsEnabled+0x1a>
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bee:	f043 0204 	orr.w	r2, r3, #4
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d101      	bne.n	8002c1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d101      	bne.n	8002c40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b089      	sub	sp, #36	@ 0x24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e130      	b.n	8002ecc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d109      	bne.n	8002c8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7fe fe4b 	bl	8001914 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff3f 	bl	8002b14 <LL_ADC_IsDeepPowerDownEnabled>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d004      	beq.n	8002ca6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff25 	bl	8002af0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff ff5a 	bl	8002b64 <LL_ADC_IsInternalRegulatorEnabled>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d115      	bne.n	8002ce2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff ff3e 	bl	8002b3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cc0:	4b84      	ldr	r3, [pc, #528]	@ (8002ed4 <HAL_ADC_Init+0x284>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	099b      	lsrs	r3, r3, #6
 8002cc6:	4a84      	ldr	r2, [pc, #528]	@ (8002ed8 <HAL_ADC_Init+0x288>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	099b      	lsrs	r3, r3, #6
 8002cce:	3301      	adds	r3, #1
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cd4:	e002      	b.n	8002cdc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f9      	bne.n	8002cd6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff ff3c 	bl	8002b64 <LL_ADC_IsInternalRegulatorEnabled>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10d      	bne.n	8002d0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf6:	f043 0210 	orr.w	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d02:	f043 0201 	orr.w	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ff75 	bl	8002c02 <LL_ADC_REG_IsConversionOngoing>
 8002d18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f040 80c9 	bne.w	8002eba <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 80c5 	bne.w	8002eba <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d34:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d38:	f043 0202 	orr.w	r2, r3, #2
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff ff35 	bl	8002bb4 <LL_ADC_IsEnabled>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d115      	bne.n	8002d7c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d50:	4862      	ldr	r0, [pc, #392]	@ (8002edc <HAL_ADC_Init+0x28c>)
 8002d52:	f7ff ff2f 	bl	8002bb4 <LL_ADC_IsEnabled>
 8002d56:	4604      	mov	r4, r0
 8002d58:	4861      	ldr	r0, [pc, #388]	@ (8002ee0 <HAL_ADC_Init+0x290>)
 8002d5a:	f7ff ff2b 	bl	8002bb4 <LL_ADC_IsEnabled>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	431c      	orrs	r4, r3
 8002d62:	4860      	ldr	r0, [pc, #384]	@ (8002ee4 <HAL_ADC_Init+0x294>)
 8002d64:	f7ff ff26 	bl	8002bb4 <LL_ADC_IsEnabled>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4323      	orrs	r3, r4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4619      	mov	r1, r3
 8002d76:	485c      	ldr	r0, [pc, #368]	@ (8002ee8 <HAL_ADC_Init+0x298>)
 8002d78:	f7ff fd86 	bl	8002888 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	7e5b      	ldrb	r3, [r3, #25]
 8002d80:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d86:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002d8c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002d92:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d9a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d106      	bne.n	8002db8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dae:	3b01      	subs	r3, #1
 8002db0:	045b      	lsls	r3, r3, #17
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d009      	beq.n	8002dd4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dcc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	4b44      	ldr	r3, [pc, #272]	@ (8002eec <HAL_ADC_Init+0x29c>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	69b9      	ldr	r1, [r7, #24]
 8002de4:	430b      	orrs	r3, r1
 8002de6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff1b 	bl	8002c28 <LL_ADC_INJ_IsConversionOngoing>
 8002df2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d13d      	bne.n	8002e76 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d13a      	bne.n	8002e76 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e04:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e0c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e1c:	f023 0302 	bic.w	r3, r3, #2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	69b9      	ldr	r1, [r7, #24]
 8002e26:	430b      	orrs	r3, r1
 8002e28:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d118      	bne.n	8002e66 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002e3e:	f023 0304 	bic.w	r3, r3, #4
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e4a:	4311      	orrs	r1, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002e50:	4311      	orrs	r1, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e56:	430a      	orrs	r2, r1
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	611a      	str	r2, [r3, #16]
 8002e64:	e007      	b.n	8002e76 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d10c      	bne.n	8002e98 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e84:	f023 010f 	bic.w	r1, r3, #15
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	1e5a      	subs	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e96:	e007      	b.n	8002ea8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 020f 	bic.w	r2, r2, #15
 8002ea6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eac:	f023 0303 	bic.w	r3, r3, #3
 8002eb0:	f043 0201 	orr.w	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	655a      	str	r2, [r3, #84]	@ 0x54
 8002eb8:	e007      	b.n	8002eca <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ebe:	f043 0210 	orr.w	r2, r3, #16
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002eca:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3724      	adds	r7, #36	@ 0x24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd90      	pop	{r4, r7, pc}
 8002ed4:	20000008 	.word	0x20000008
 8002ed8:	053e2d63 	.word	0x053e2d63
 8002edc:	50040000 	.word	0x50040000
 8002ee0:	50040100 	.word	0x50040100
 8002ee4:	50040200 	.word	0x50040200
 8002ee8:	50040300 	.word	0x50040300
 8002eec:	fff0c007 	.word	0xfff0c007

08002ef0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ef8:	4857      	ldr	r0, [pc, #348]	@ (8003058 <HAL_ADC_Start+0x168>)
 8002efa:	f7ff fddd 	bl	8002ab8 <LL_ADC_GetMultimode>
 8002efe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fe7c 	bl	8002c02 <LL_ADC_REG_IsConversionOngoing>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f040 809c 	bne.w	800304a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_ADC_Start+0x30>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e097      	b.n	8003050 <HAL_ADC_Start+0x160>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fd73 	bl	8003a14 <ADC_Enable>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f040 8083 	bne.w	8003040 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a42      	ldr	r2, [pc, #264]	@ (800305c <HAL_ADC_Start+0x16c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d002      	beq.n	8002f5e <HAL_ADC_Start+0x6e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	e000      	b.n	8002f60 <HAL_ADC_Start+0x70>
 8002f5e:	4b40      	ldr	r3, [pc, #256]	@ (8003060 <HAL_ADC_Start+0x170>)
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d002      	beq.n	8002f6e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d105      	bne.n	8002f7a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f72:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f86:	d106      	bne.n	8002f96 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8c:	f023 0206 	bic.w	r2, r3, #6
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f94:	e002      	b.n	8002f9c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	221c      	movs	r2, #28
 8002fa2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a2a      	ldr	r2, [pc, #168]	@ (800305c <HAL_ADC_Start+0x16c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d002      	beq.n	8002fbc <HAL_ADC_Start+0xcc>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	e000      	b.n	8002fbe <HAL_ADC_Start+0xce>
 8002fbc:	4b28      	ldr	r3, [pc, #160]	@ (8003060 <HAL_ADC_Start+0x170>)
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d008      	beq.n	8002fd8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b05      	cmp	r3, #5
 8002fd0:	d002      	beq.n	8002fd8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b09      	cmp	r3, #9
 8002fd6:	d114      	bne.n	8003002 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d007      	beq.n	8002ff6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002fee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fded 	bl	8002bda <LL_ADC_REG_StartConversion>
 8003000:	e025      	b.n	800304e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003006:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a12      	ldr	r2, [pc, #72]	@ (800305c <HAL_ADC_Start+0x16c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d002      	beq.n	800301e <HAL_ADC_Start+0x12e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	e000      	b.n	8003020 <HAL_ADC_Start+0x130>
 800301e:	4b10      	ldr	r3, [pc, #64]	@ (8003060 <HAL_ADC_Start+0x170>)
 8003020:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00f      	beq.n	800304e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003032:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003036:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	655a      	str	r2, [r3, #84]	@ 0x54
 800303e:	e006      	b.n	800304e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003048:	e001      	b.n	800304e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800304a:	2302      	movs	r3, #2
 800304c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800304e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	50040300 	.word	0x50040300
 800305c:	50040100 	.word	0x50040100
 8003060:	50040000 	.word	0x50040000

08003064 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800306e:	4866      	ldr	r0, [pc, #408]	@ (8003208 <HAL_ADC_PollForConversion+0x1a4>)
 8003070:	f7ff fd22 	bl	8002ab8 <LL_ADC_GetMultimode>
 8003074:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	2b08      	cmp	r3, #8
 800307c:	d102      	bne.n	8003084 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800307e:	2308      	movs	r3, #8
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	e02a      	b.n	80030da <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b05      	cmp	r3, #5
 800308e:	d002      	beq.n	8003096 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2b09      	cmp	r3, #9
 8003094:	d111      	bne.n	80030ba <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0a4      	b.n	80031fe <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80030b4:	2304      	movs	r3, #4
 80030b6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80030b8:	e00f      	b.n	80030da <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80030ba:	4853      	ldr	r0, [pc, #332]	@ (8003208 <HAL_ADC_PollForConversion+0x1a4>)
 80030bc:	f7ff fd0a 	bl	8002ad4 <LL_ADC_GetMultiDMATransfer>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ca:	f043 0220 	orr.w	r2, r3, #32
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e093      	b.n	80031fe <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80030d6:	2304      	movs	r3, #4
 80030d8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80030da:	f7ff fbc9 	bl	8002870 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80030e0:	e021      	b.n	8003126 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d01d      	beq.n	8003126 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80030ea:	f7ff fbc1 	bl	8002870 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <HAL_ADC_PollForConversion+0x9c>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d112      	bne.n	8003126 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	4013      	ands	r3, r2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10b      	bne.n	8003126 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003112:	f043 0204 	orr.w	r2, r3, #4
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e06b      	b.n	80031fe <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	4013      	ands	r3, r2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0d6      	beq.n	80030e2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003138:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fc28 	bl	800299a <LL_ADC_REG_IsTriggerSourceSWStart>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01c      	beq.n	800318a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	7e5b      	ldrb	r3, [r3, #25]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d118      	bne.n	800318a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b08      	cmp	r3, #8
 8003164:	d111      	bne.n	800318a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003176:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d105      	bne.n	800318a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003182:	f043 0201 	orr.w	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a1f      	ldr	r2, [pc, #124]	@ (800320c <HAL_ADC_PollForConversion+0x1a8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d002      	beq.n	800319a <HAL_ADC_PollForConversion+0x136>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	e000      	b.n	800319c <HAL_ADC_PollForConversion+0x138>
 800319a:	4b1d      	ldr	r3, [pc, #116]	@ (8003210 <HAL_ADC_PollForConversion+0x1ac>)
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d008      	beq.n	80031b6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b05      	cmp	r3, #5
 80031ae:	d002      	beq.n	80031b6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b09      	cmp	r3, #9
 80031b4:	d104      	bne.n	80031c0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	e00c      	b.n	80031da <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a11      	ldr	r2, [pc, #68]	@ (800320c <HAL_ADC_PollForConversion+0x1a8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d002      	beq.n	80031d0 <HAL_ADC_PollForConversion+0x16c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	e000      	b.n	80031d2 <HAL_ADC_PollForConversion+0x16e>
 80031d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003210 <HAL_ADC_PollForConversion+0x1ac>)
 80031d2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d104      	bne.n	80031ea <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2208      	movs	r2, #8
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	e008      	b.n	80031fc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d103      	bne.n	80031fc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	220c      	movs	r2, #12
 80031fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3720      	adds	r7, #32
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	50040300 	.word	0x50040300
 800320c:	50040100 	.word	0x50040100
 8003210:	50040000 	.word	0x50040000

08003214 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b0b6      	sub	sp, #216	@ 0xd8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003240:	2300      	movs	r3, #0
 8003242:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x22>
 800324e:	2302      	movs	r3, #2
 8003250:	e3c9      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x7b6>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fccf 	bl	8002c02 <LL_ADC_REG_IsConversionOngoing>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	f040 83aa 	bne.w	80039c0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b05      	cmp	r3, #5
 800327a:	d824      	bhi.n	80032c6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	3b02      	subs	r3, #2
 8003282:	2b03      	cmp	r3, #3
 8003284:	d81b      	bhi.n	80032be <HAL_ADC_ConfigChannel+0x8e>
 8003286:	a201      	add	r2, pc, #4	@ (adr r2, 800328c <HAL_ADC_ConfigChannel+0x5c>)
 8003288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328c:	0800329d 	.word	0x0800329d
 8003290:	080032a5 	.word	0x080032a5
 8003294:	080032ad 	.word	0x080032ad
 8003298:	080032b5 	.word	0x080032b5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800329c:	230c      	movs	r3, #12
 800329e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80032a2:	e010      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80032a4:	2312      	movs	r3, #18
 80032a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80032aa:	e00c      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80032ac:	2318      	movs	r3, #24
 80032ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80032b2:	e008      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80032b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80032bc:	e003      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80032be:	2306      	movs	r3, #6
 80032c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80032c4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80032d4:	f7ff fb74 	bl	80029c0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fc90 	bl	8002c02 <LL_ADC_REG_IsConversionOngoing>
 80032e2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff fc9c 	bl	8002c28 <LL_ADC_INJ_IsConversionOngoing>
 80032f0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f040 81a4 	bne.w	8003646 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003302:	2b00      	cmp	r3, #0
 8003304:	f040 819f 	bne.w	8003646 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	6819      	ldr	r1, [r3, #0]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	461a      	mov	r2, r3
 8003316:	f7ff fb7f 	bl	8002a18 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695a      	ldr	r2, [r3, #20]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	08db      	lsrs	r3, r3, #3
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	2b04      	cmp	r3, #4
 800333a:	d00a      	beq.n	8003352 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6919      	ldr	r1, [r3, #16]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800334c:	f7ff fad0 	bl	80028f0 <LL_ADC_SetOffset>
 8003350:	e179      	b.n	8003646 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff faed 	bl	8002938 <LL_ADC_GetOffsetChannel>
 800335e:	4603      	mov	r3, r0
 8003360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10a      	bne.n	800337e <HAL_ADC_ConfigChannel+0x14e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fae2 	bl	8002938 <LL_ADC_GetOffsetChannel>
 8003374:	4603      	mov	r3, r0
 8003376:	0e9b      	lsrs	r3, r3, #26
 8003378:	f003 021f 	and.w	r2, r3, #31
 800337c:	e01e      	b.n	80033bc <HAL_ADC_ConfigChannel+0x18c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fad7 	bl	8002938 <LL_ADC_GetOffsetChannel>
 800338a:	4603      	mov	r3, r0
 800338c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800339c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80033ac:	2320      	movs	r3, #32
 80033ae:	e004      	b.n	80033ba <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80033b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80033b4:	fab3 f383 	clz	r3, r3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d105      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x1a4>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	0e9b      	lsrs	r3, r3, #26
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	e018      	b.n	8003406 <HAL_ADC_ConfigChannel+0x1d6>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033e0:	fa93 f3a3 	rbit	r3, r3
 80033e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80033e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80033f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80033f8:	2320      	movs	r3, #32
 80033fa:	e004      	b.n	8003406 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80033fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003400:	fab3 f383 	clz	r3, r3
 8003404:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003406:	429a      	cmp	r2, r3
 8003408:	d106      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2200      	movs	r2, #0
 8003410:	2100      	movs	r1, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff faa6 	bl	8002964 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2101      	movs	r1, #1
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fa8a 	bl	8002938 <LL_ADC_GetOffsetChannel>
 8003424:	4603      	mov	r3, r0
 8003426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10a      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x214>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2101      	movs	r1, #1
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fa7f 	bl	8002938 <LL_ADC_GetOffsetChannel>
 800343a:	4603      	mov	r3, r0
 800343c:	0e9b      	lsrs	r3, r3, #26
 800343e:	f003 021f 	and.w	r2, r3, #31
 8003442:	e01e      	b.n	8003482 <HAL_ADC_ConfigChannel+0x252>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2101      	movs	r1, #1
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff fa74 	bl	8002938 <LL_ADC_GetOffsetChannel>
 8003450:	4603      	mov	r3, r0
 8003452:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800345a:	fa93 f3a3 	rbit	r3, r3
 800345e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003462:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003466:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800346a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003472:	2320      	movs	r3, #32
 8003474:	e004      	b.n	8003480 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003476:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800347a:	fab3 f383 	clz	r3, r3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348a:	2b00      	cmp	r3, #0
 800348c:	d105      	bne.n	800349a <HAL_ADC_ConfigChannel+0x26a>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	0e9b      	lsrs	r3, r3, #26
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	e018      	b.n	80034cc <HAL_ADC_ConfigChannel+0x29c>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80034ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80034b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80034be:	2320      	movs	r3, #32
 80034c0:	e004      	b.n	80034cc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80034c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d106      	bne.n	80034de <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2200      	movs	r2, #0
 80034d6:	2101      	movs	r1, #1
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fa43 	bl	8002964 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2102      	movs	r1, #2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fa27 	bl	8002938 <LL_ADC_GetOffsetChannel>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <HAL_ADC_ConfigChannel+0x2da>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2102      	movs	r1, #2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fa1c 	bl	8002938 <LL_ADC_GetOffsetChannel>
 8003500:	4603      	mov	r3, r0
 8003502:	0e9b      	lsrs	r3, r3, #26
 8003504:	f003 021f 	and.w	r2, r3, #31
 8003508:	e01e      	b.n	8003548 <HAL_ADC_ConfigChannel+0x318>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2102      	movs	r1, #2
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff fa11 	bl	8002938 <LL_ADC_GetOffsetChannel>
 8003516:	4603      	mov	r3, r0
 8003518:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003520:	fa93 f3a3 	rbit	r3, r3
 8003524:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003528:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800352c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003530:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003538:	2320      	movs	r3, #32
 800353a:	e004      	b.n	8003546 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800353c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003550:	2b00      	cmp	r3, #0
 8003552:	d105      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x330>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	0e9b      	lsrs	r3, r3, #26
 800355a:	f003 031f 	and.w	r3, r3, #31
 800355e:	e014      	b.n	800358a <HAL_ADC_ConfigChannel+0x35a>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003568:	fa93 f3a3 	rbit	r3, r3
 800356c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800356e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003570:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003574:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800357c:	2320      	movs	r3, #32
 800357e:	e004      	b.n	800358a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003580:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003584:	fab3 f383 	clz	r3, r3
 8003588:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800358a:	429a      	cmp	r2, r3
 800358c:	d106      	bne.n	800359c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2200      	movs	r2, #0
 8003594:	2102      	movs	r1, #2
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff f9e4 	bl	8002964 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2103      	movs	r1, #3
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff f9c8 	bl	8002938 <LL_ADC_GetOffsetChannel>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x398>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2103      	movs	r1, #3
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff f9bd 	bl	8002938 <LL_ADC_GetOffsetChannel>
 80035be:	4603      	mov	r3, r0
 80035c0:	0e9b      	lsrs	r3, r3, #26
 80035c2:	f003 021f 	and.w	r2, r3, #31
 80035c6:	e017      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x3c8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2103      	movs	r1, #3
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff f9b2 	bl	8002938 <LL_ADC_GetOffsetChannel>
 80035d4:	4603      	mov	r3, r0
 80035d6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035da:	fa93 f3a3 	rbit	r3, r3
 80035de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80035e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035e2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80035e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80035ea:	2320      	movs	r3, #32
 80035ec:	e003      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80035ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035f0:	fab3 f383 	clz	r3, r3
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003600:	2b00      	cmp	r3, #0
 8003602:	d105      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x3e0>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	0e9b      	lsrs	r3, r3, #26
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	e011      	b.n	8003634 <HAL_ADC_ConfigChannel+0x404>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800361e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003620:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003622:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003628:	2320      	movs	r3, #32
 800362a:	e003      	b.n	8003634 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800362c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003634:	429a      	cmp	r2, r3
 8003636:	d106      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2200      	movs	r2, #0
 800363e:	2103      	movs	r1, #3
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff f98f 	bl	8002964 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff fab2 	bl	8002bb4 <LL_ADC_IsEnabled>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	f040 8140 	bne.w	80038d8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	6819      	ldr	r1, [r3, #0]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	461a      	mov	r2, r3
 8003666:	f7ff fa03 	bl	8002a70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	4a8f      	ldr	r2, [pc, #572]	@ (80038ac <HAL_ADC_ConfigChannel+0x67c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	f040 8131 	bne.w	80038d8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10b      	bne.n	800369e <HAL_ADC_ConfigChannel+0x46e>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	0e9b      	lsrs	r3, r3, #26
 800368c:	3301      	adds	r3, #1
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2b09      	cmp	r3, #9
 8003694:	bf94      	ite	ls
 8003696:	2301      	movls	r3, #1
 8003698:	2300      	movhi	r3, #0
 800369a:	b2db      	uxtb	r3, r3
 800369c:	e019      	b.n	80036d2 <HAL_ADC_ConfigChannel+0x4a2>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80036ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80036b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80036b6:	2320      	movs	r3, #32
 80036b8:	e003      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80036ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036bc:	fab3 f383 	clz	r3, r3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	3301      	adds	r3, #1
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	2b09      	cmp	r3, #9
 80036ca:	bf94      	ite	ls
 80036cc:	2301      	movls	r3, #1
 80036ce:	2300      	movhi	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d079      	beq.n	80037ca <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d107      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x4c2>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	0e9b      	lsrs	r3, r3, #26
 80036e8:	3301      	adds	r3, #1
 80036ea:	069b      	lsls	r3, r3, #26
 80036ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036f0:	e015      	b.n	800371e <HAL_ADC_ConfigChannel+0x4ee>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036fa:	fa93 f3a3 	rbit	r3, r3
 80036fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003702:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800370a:	2320      	movs	r3, #32
 800370c:	e003      	b.n	8003716 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800370e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003710:	fab3 f383 	clz	r3, r3
 8003714:	b2db      	uxtb	r3, r3
 8003716:	3301      	adds	r3, #1
 8003718:	069b      	lsls	r3, r3, #26
 800371a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003726:	2b00      	cmp	r3, #0
 8003728:	d109      	bne.n	800373e <HAL_ADC_ConfigChannel+0x50e>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	0e9b      	lsrs	r3, r3, #26
 8003730:	3301      	adds	r3, #1
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	2101      	movs	r1, #1
 8003738:	fa01 f303 	lsl.w	r3, r1, r3
 800373c:	e017      	b.n	800376e <HAL_ADC_ConfigChannel+0x53e>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800374c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800374e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003756:	2320      	movs	r3, #32
 8003758:	e003      	b.n	8003762 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800375a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800375c:	fab3 f383 	clz	r3, r3
 8003760:	b2db      	uxtb	r3, r3
 8003762:	3301      	adds	r3, #1
 8003764:	f003 031f 	and.w	r3, r3, #31
 8003768:	2101      	movs	r1, #1
 800376a:	fa01 f303 	lsl.w	r3, r1, r3
 800376e:	ea42 0103 	orr.w	r1, r2, r3
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10a      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x564>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	0e9b      	lsrs	r3, r3, #26
 8003784:	3301      	adds	r3, #1
 8003786:	f003 021f 	and.w	r2, r3, #31
 800378a:	4613      	mov	r3, r2
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	4413      	add	r3, r2
 8003790:	051b      	lsls	r3, r3, #20
 8003792:	e018      	b.n	80037c6 <HAL_ADC_ConfigChannel+0x596>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800379c:	fa93 f3a3 	rbit	r3, r3
 80037a0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80037a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80037a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80037ac:	2320      	movs	r3, #32
 80037ae:	e003      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80037b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b2:	fab3 f383 	clz	r3, r3
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	3301      	adds	r3, #1
 80037ba:	f003 021f 	and.w	r2, r3, #31
 80037be:	4613      	mov	r3, r2
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	4413      	add	r3, r2
 80037c4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037c6:	430b      	orrs	r3, r1
 80037c8:	e081      	b.n	80038ce <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d107      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x5b6>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	0e9b      	lsrs	r3, r3, #26
 80037dc:	3301      	adds	r3, #1
 80037de:	069b      	lsls	r3, r3, #26
 80037e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037e4:	e015      	b.n	8003812 <HAL_ADC_ConfigChannel+0x5e2>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80037f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80037f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80037fe:	2320      	movs	r3, #32
 8003800:	e003      	b.n	800380a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003804:	fab3 f383 	clz	r3, r3
 8003808:	b2db      	uxtb	r3, r3
 800380a:	3301      	adds	r3, #1
 800380c:	069b      	lsls	r3, r3, #26
 800380e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <HAL_ADC_ConfigChannel+0x602>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	0e9b      	lsrs	r3, r3, #26
 8003824:	3301      	adds	r3, #1
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	2101      	movs	r1, #1
 800382c:	fa01 f303 	lsl.w	r3, r1, r3
 8003830:	e017      	b.n	8003862 <HAL_ADC_ConfigChannel+0x632>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	61bb      	str	r3, [r7, #24]
  return result;
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800384a:	2320      	movs	r3, #32
 800384c:	e003      	b.n	8003856 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	fab3 f383 	clz	r3, r3
 8003854:	b2db      	uxtb	r3, r3
 8003856:	3301      	adds	r3, #1
 8003858:	f003 031f 	and.w	r3, r3, #31
 800385c:	2101      	movs	r1, #1
 800385e:	fa01 f303 	lsl.w	r3, r1, r3
 8003862:	ea42 0103 	orr.w	r1, r2, r3
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10d      	bne.n	800388e <HAL_ADC_ConfigChannel+0x65e>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	0e9b      	lsrs	r3, r3, #26
 8003878:	3301      	adds	r3, #1
 800387a:	f003 021f 	and.w	r2, r3, #31
 800387e:	4613      	mov	r3, r2
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	4413      	add	r3, r2
 8003884:	3b1e      	subs	r3, #30
 8003886:	051b      	lsls	r3, r3, #20
 8003888:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800388c:	e01e      	b.n	80038cc <HAL_ADC_ConfigChannel+0x69c>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	60fb      	str	r3, [r7, #12]
  return result;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d104      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80038a6:	2320      	movs	r3, #32
 80038a8:	e006      	b.n	80038b8 <HAL_ADC_ConfigChannel+0x688>
 80038aa:	bf00      	nop
 80038ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	fab3 f383 	clz	r3, r3
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	3301      	adds	r3, #1
 80038ba:	f003 021f 	and.w	r2, r3, #31
 80038be:	4613      	mov	r3, r2
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	4413      	add	r3, r2
 80038c4:	3b1e      	subs	r3, #30
 80038c6:	051b      	lsls	r3, r3, #20
 80038c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038d2:	4619      	mov	r1, r3
 80038d4:	f7ff f8a0 	bl	8002a18 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4b44      	ldr	r3, [pc, #272]	@ (80039f0 <HAL_ADC_ConfigChannel+0x7c0>)
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d07a      	beq.n	80039da <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038e4:	4843      	ldr	r0, [pc, #268]	@ (80039f4 <HAL_ADC_ConfigChannel+0x7c4>)
 80038e6:	f7fe fff5 	bl	80028d4 <LL_ADC_GetCommonPathInternalCh>
 80038ea:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a41      	ldr	r2, [pc, #260]	@ (80039f8 <HAL_ADC_ConfigChannel+0x7c8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d12c      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d126      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a3c      	ldr	r2, [pc, #240]	@ (80039fc <HAL_ADC_ConfigChannel+0x7cc>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d004      	beq.n	8003918 <HAL_ADC_ConfigChannel+0x6e8>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a3b      	ldr	r2, [pc, #236]	@ (8003a00 <HAL_ADC_ConfigChannel+0x7d0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d15d      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003918:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800391c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003920:	4619      	mov	r1, r3
 8003922:	4834      	ldr	r0, [pc, #208]	@ (80039f4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003924:	f7fe ffc3 	bl	80028ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003928:	4b36      	ldr	r3, [pc, #216]	@ (8003a04 <HAL_ADC_ConfigChannel+0x7d4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	099b      	lsrs	r3, r3, #6
 800392e:	4a36      	ldr	r2, [pc, #216]	@ (8003a08 <HAL_ADC_ConfigChannel+0x7d8>)
 8003930:	fba2 2303 	umull	r2, r3, r2, r3
 8003934:	099b      	lsrs	r3, r3, #6
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	4613      	mov	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003942:	e002      	b.n	800394a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	3b01      	subs	r3, #1
 8003948:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f9      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003950:	e040      	b.n	80039d4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a2d      	ldr	r2, [pc, #180]	@ (8003a0c <HAL_ADC_ConfigChannel+0x7dc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d118      	bne.n	800398e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800395c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003960:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d112      	bne.n	800398e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a23      	ldr	r2, [pc, #140]	@ (80039fc <HAL_ADC_ConfigChannel+0x7cc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d004      	beq.n	800397c <HAL_ADC_ConfigChannel+0x74c>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a22      	ldr	r2, [pc, #136]	@ (8003a00 <HAL_ADC_ConfigChannel+0x7d0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d12d      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800397c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003980:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003984:	4619      	mov	r1, r3
 8003986:	481b      	ldr	r0, [pc, #108]	@ (80039f4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003988:	f7fe ff91 	bl	80028ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800398c:	e024      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1f      	ldr	r2, [pc, #124]	@ (8003a10 <HAL_ADC_ConfigChannel+0x7e0>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d120      	bne.n	80039da <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003998:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800399c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d11a      	bne.n	80039da <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a14      	ldr	r2, [pc, #80]	@ (80039fc <HAL_ADC_ConfigChannel+0x7cc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d115      	bne.n	80039da <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80039b6:	4619      	mov	r1, r3
 80039b8:	480e      	ldr	r0, [pc, #56]	@ (80039f4 <HAL_ADC_ConfigChannel+0x7c4>)
 80039ba:	f7fe ff78 	bl	80028ae <LL_ADC_SetCommonPathInternalCh>
 80039be:	e00c      	b.n	80039da <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c4:	f043 0220 	orr.w	r2, r3, #32
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80039d2:	e002      	b.n	80039da <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039d4:	bf00      	nop
 80039d6:	e000      	b.n	80039da <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80039e2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	37d8      	adds	r7, #216	@ 0xd8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	80080000 	.word	0x80080000
 80039f4:	50040300 	.word	0x50040300
 80039f8:	c7520000 	.word	0xc7520000
 80039fc:	50040000 	.word	0x50040000
 8003a00:	50040200 	.word	0x50040200
 8003a04:	20000008 	.word	0x20000008
 8003a08:	053e2d63 	.word	0x053e2d63
 8003a0c:	cb840000 	.word	0xcb840000
 8003a10:	80000001 	.word	0x80000001

08003a14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff f8c5 	bl	8002bb4 <LL_ADC_IsEnabled>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d169      	bne.n	8003b04 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	4b36      	ldr	r3, [pc, #216]	@ (8003b10 <ADC_Enable+0xfc>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00d      	beq.n	8003a5a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a42:	f043 0210 	orr.w	r2, r3, #16
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a4e:	f043 0201 	orr.w	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e055      	b.n	8003b06 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff f894 	bl	8002b8c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a64:	482b      	ldr	r0, [pc, #172]	@ (8003b14 <ADC_Enable+0x100>)
 8003a66:	f7fe ff35 	bl	80028d4 <LL_ADC_GetCommonPathInternalCh>
 8003a6a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d013      	beq.n	8003a9c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a74:	4b28      	ldr	r3, [pc, #160]	@ (8003b18 <ADC_Enable+0x104>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	099b      	lsrs	r3, r3, #6
 8003a7a:	4a28      	ldr	r2, [pc, #160]	@ (8003b1c <ADC_Enable+0x108>)
 8003a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a80:	099b      	lsrs	r3, r3, #6
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	4613      	mov	r3, r2
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a8e:	e002      	b.n	8003a96 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1f9      	bne.n	8003a90 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a9c:	f7fe fee8 	bl	8002870 <HAL_GetTick>
 8003aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aa2:	e028      	b.n	8003af6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff f883 	bl	8002bb4 <LL_ADC_IsEnabled>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d104      	bne.n	8003abe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff f867 	bl	8002b8c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003abe:	f7fe fed7 	bl	8002870 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d914      	bls.n	8003af6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d00d      	beq.n	8003af6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ade:	f043 0210 	orr.w	r2, r3, #16
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aea:	f043 0201 	orr.w	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e007      	b.n	8003b06 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d1cf      	bne.n	8003aa4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	8000003f 	.word	0x8000003f
 8003b14:	50040300 	.word	0x50040300
 8003b18:	20000008 	.word	0x20000008
 8003b1c:	053e2d63 	.word	0x053e2d63

08003b20 <LL_ADC_IsEnabled>:
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <LL_ADC_IsEnabled+0x18>
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <LL_ADC_IsEnabled+0x1a>
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <LL_ADC_REG_IsConversionOngoing>:
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d101      	bne.n	8003b5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b09f      	sub	sp, #124	@ 0x7c
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e093      	b.n	8003cb2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003b92:	2300      	movs	r3, #0
 8003b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003b96:	2300      	movs	r3, #0
 8003b98:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a47      	ldr	r2, [pc, #284]	@ (8003cbc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d102      	bne.n	8003baa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ba4:	4b46      	ldr	r3, [pc, #280]	@ (8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003ba6:	60bb      	str	r3, [r7, #8]
 8003ba8:	e001      	b.n	8003bae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003baa:	2300      	movs	r3, #0
 8003bac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10b      	bne.n	8003bcc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb8:	f043 0220 	orr.w	r2, r3, #32
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e072      	b.n	8003cb2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff ffb9 	bl	8003b46 <LL_ADC_REG_IsConversionOngoing>
 8003bd4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff ffb3 	bl	8003b46 <LL_ADC_REG_IsConversionOngoing>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d154      	bne.n	8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003be6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d151      	bne.n	8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bec:	4b35      	ldr	r3, [pc, #212]	@ (8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003bee:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d02c      	beq.n	8003c52 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003bf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	6859      	ldr	r1, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003c0a:	035b      	lsls	r3, r3, #13
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c12:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c14:	4829      	ldr	r0, [pc, #164]	@ (8003cbc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003c16:	f7ff ff83 	bl	8003b20 <LL_ADC_IsEnabled>
 8003c1a:	4604      	mov	r4, r0
 8003c1c:	4828      	ldr	r0, [pc, #160]	@ (8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c1e:	f7ff ff7f 	bl	8003b20 <LL_ADC_IsEnabled>
 8003c22:	4603      	mov	r3, r0
 8003c24:	431c      	orrs	r4, r3
 8003c26:	4828      	ldr	r0, [pc, #160]	@ (8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003c28:	f7ff ff7a 	bl	8003b20 <LL_ADC_IsEnabled>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	4323      	orrs	r3, r4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d137      	bne.n	8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c3c:	f023 030f 	bic.w	r3, r3, #15
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	6811      	ldr	r1, [r2, #0]
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	6892      	ldr	r2, [r2, #8]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c4e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c50:	e028      	b.n	8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c5c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c5e:	4817      	ldr	r0, [pc, #92]	@ (8003cbc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003c60:	f7ff ff5e 	bl	8003b20 <LL_ADC_IsEnabled>
 8003c64:	4604      	mov	r4, r0
 8003c66:	4816      	ldr	r0, [pc, #88]	@ (8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c68:	f7ff ff5a 	bl	8003b20 <LL_ADC_IsEnabled>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	431c      	orrs	r4, r3
 8003c70:	4815      	ldr	r0, [pc, #84]	@ (8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003c72:	f7ff ff55 	bl	8003b20 <LL_ADC_IsEnabled>
 8003c76:	4603      	mov	r3, r0
 8003c78:	4323      	orrs	r3, r4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d112      	bne.n	8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c86:	f023 030f 	bic.w	r3, r3, #15
 8003c8a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c8c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c8e:	e009      	b.n	8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c94:	f043 0220 	orr.w	r2, r3, #32
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003ca2:	e000      	b.n	8003ca6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ca4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cae:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	377c      	adds	r7, #124	@ 0x7c
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd90      	pop	{r4, r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	50040000 	.word	0x50040000
 8003cc0:	50040100 	.word	0x50040100
 8003cc4:	50040300 	.word	0x50040300
 8003cc8:	50040200 	.word	0x50040200

08003ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003d10 <__NVIC_SetPriorityGrouping+0x44>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ce8:	4013      	ands	r3, r2
 8003cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cfe:	4a04      	ldr	r2, [pc, #16]	@ (8003d10 <__NVIC_SetPriorityGrouping+0x44>)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	60d3      	str	r3, [r2, #12]
}
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d18:	4b04      	ldr	r3, [pc, #16]	@ (8003d2c <__NVIC_GetPriorityGrouping+0x18>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	0a1b      	lsrs	r3, r3, #8
 8003d1e:	f003 0307 	and.w	r3, r3, #7
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	e000ed00 	.word	0xe000ed00

08003d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	db0b      	blt.n	8003d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	f003 021f 	and.w	r2, r3, #31
 8003d48:	4907      	ldr	r1, [pc, #28]	@ (8003d68 <__NVIC_EnableIRQ+0x38>)
 8003d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	2001      	movs	r0, #1
 8003d52:	fa00 f202 	lsl.w	r2, r0, r2
 8003d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	e000e100 	.word	0xe000e100

08003d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	6039      	str	r1, [r7, #0]
 8003d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	db0a      	blt.n	8003d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	490c      	ldr	r1, [pc, #48]	@ (8003db8 <__NVIC_SetPriority+0x4c>)
 8003d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8a:	0112      	lsls	r2, r2, #4
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	440b      	add	r3, r1
 8003d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d94:	e00a      	b.n	8003dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	4908      	ldr	r1, [pc, #32]	@ (8003dbc <__NVIC_SetPriority+0x50>)
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	3b04      	subs	r3, #4
 8003da4:	0112      	lsls	r2, r2, #4
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	440b      	add	r3, r1
 8003daa:	761a      	strb	r2, [r3, #24]
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	e000e100 	.word	0xe000e100
 8003dbc:	e000ed00 	.word	0xe000ed00

08003dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b089      	sub	sp, #36	@ 0x24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f1c3 0307 	rsb	r3, r3, #7
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	bf28      	it	cs
 8003dde:	2304      	movcs	r3, #4
 8003de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3304      	adds	r3, #4
 8003de6:	2b06      	cmp	r3, #6
 8003de8:	d902      	bls.n	8003df0 <NVIC_EncodePriority+0x30>
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	3b03      	subs	r3, #3
 8003dee:	e000      	b.n	8003df2 <NVIC_EncodePriority+0x32>
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df4:	f04f 32ff 	mov.w	r2, #4294967295
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43da      	mvns	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	401a      	ands	r2, r3
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e08:	f04f 31ff 	mov.w	r1, #4294967295
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e12:	43d9      	mvns	r1, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e18:	4313      	orrs	r3, r2
         );
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3724      	adds	r7, #36	@ 0x24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
	...

08003e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e38:	d301      	bcc.n	8003e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e00f      	b.n	8003e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e68 <SysTick_Config+0x40>)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e46:	210f      	movs	r1, #15
 8003e48:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4c:	f7ff ff8e 	bl	8003d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e50:	4b05      	ldr	r3, [pc, #20]	@ (8003e68 <SysTick_Config+0x40>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e56:	4b04      	ldr	r3, [pc, #16]	@ (8003e68 <SysTick_Config+0x40>)
 8003e58:	2207      	movs	r2, #7
 8003e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	e000e010 	.word	0xe000e010

08003e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff ff29 	bl	8003ccc <__NVIC_SetPriorityGrouping>
}
 8003e7a:	bf00      	nop
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b086      	sub	sp, #24
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	4603      	mov	r3, r0
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
 8003e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e94:	f7ff ff3e 	bl	8003d14 <__NVIC_GetPriorityGrouping>
 8003e98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	6978      	ldr	r0, [r7, #20]
 8003ea0:	f7ff ff8e 	bl	8003dc0 <NVIC_EncodePriority>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eaa:	4611      	mov	r1, r2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff ff5d 	bl	8003d6c <__NVIC_SetPriority>
}
 8003eb2:	bf00      	nop
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b082      	sub	sp, #8
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff ff31 	bl	8003d30 <__NVIC_EnableIRQ>
}
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff ffa2 	bl	8003e28 <SysTick_Config>
 8003ee4:	4603      	mov	r3, r0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003efe:	e17f      	b.n	8004200 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	2101      	movs	r1, #1
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 8171 	beq.w	80041fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d005      	beq.n	8003f30 <HAL_GPIO_Init+0x40>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 0303 	and.w	r3, r3, #3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d130      	bne.n	8003f92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	43db      	mvns	r3, r3
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4013      	ands	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f66:	2201      	movs	r2, #1
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4013      	ands	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	f003 0201 	and.w	r2, r3, #1
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d118      	bne.n	8003fd0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	08db      	lsrs	r3, r3, #3
 8003fba:	f003 0201 	and.w	r2, r3, #1
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d017      	beq.n	800400c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d123      	bne.n	8004060 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	08da      	lsrs	r2, r3, #3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3208      	adds	r2, #8
 8004020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004024:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	220f      	movs	r2, #15
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4013      	ands	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	08da      	lsrs	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3208      	adds	r2, #8
 800405a:	6939      	ldr	r1, [r7, #16]
 800405c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	2203      	movs	r2, #3
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	43db      	mvns	r3, r3
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4013      	ands	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0203 	and.w	r2, r3, #3
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 80ac 	beq.w	80041fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004220 <HAL_GPIO_Init+0x330>)
 80040a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a6:	4a5e      	ldr	r2, [pc, #376]	@ (8004220 <HAL_GPIO_Init+0x330>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80040ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004220 <HAL_GPIO_Init+0x330>)
 80040b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80040ba:	4a5a      	ldr	r2, [pc, #360]	@ (8004224 <HAL_GPIO_Init+0x334>)
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	089b      	lsrs	r3, r3, #2
 80040c0:	3302      	adds	r3, #2
 80040c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	220f      	movs	r2, #15
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	43db      	mvns	r3, r3
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80040e4:	d025      	beq.n	8004132 <HAL_GPIO_Init+0x242>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a4f      	ldr	r2, [pc, #316]	@ (8004228 <HAL_GPIO_Init+0x338>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d01f      	beq.n	800412e <HAL_GPIO_Init+0x23e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a4e      	ldr	r2, [pc, #312]	@ (800422c <HAL_GPIO_Init+0x33c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d019      	beq.n	800412a <HAL_GPIO_Init+0x23a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a4d      	ldr	r2, [pc, #308]	@ (8004230 <HAL_GPIO_Init+0x340>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d013      	beq.n	8004126 <HAL_GPIO_Init+0x236>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a4c      	ldr	r2, [pc, #304]	@ (8004234 <HAL_GPIO_Init+0x344>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00d      	beq.n	8004122 <HAL_GPIO_Init+0x232>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a4b      	ldr	r2, [pc, #300]	@ (8004238 <HAL_GPIO_Init+0x348>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d007      	beq.n	800411e <HAL_GPIO_Init+0x22e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a4a      	ldr	r2, [pc, #296]	@ (800423c <HAL_GPIO_Init+0x34c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d101      	bne.n	800411a <HAL_GPIO_Init+0x22a>
 8004116:	2306      	movs	r3, #6
 8004118:	e00c      	b.n	8004134 <HAL_GPIO_Init+0x244>
 800411a:	2307      	movs	r3, #7
 800411c:	e00a      	b.n	8004134 <HAL_GPIO_Init+0x244>
 800411e:	2305      	movs	r3, #5
 8004120:	e008      	b.n	8004134 <HAL_GPIO_Init+0x244>
 8004122:	2304      	movs	r3, #4
 8004124:	e006      	b.n	8004134 <HAL_GPIO_Init+0x244>
 8004126:	2303      	movs	r3, #3
 8004128:	e004      	b.n	8004134 <HAL_GPIO_Init+0x244>
 800412a:	2302      	movs	r3, #2
 800412c:	e002      	b.n	8004134 <HAL_GPIO_Init+0x244>
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <HAL_GPIO_Init+0x244>
 8004132:	2300      	movs	r3, #0
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	f002 0203 	and.w	r2, r2, #3
 800413a:	0092      	lsls	r2, r2, #2
 800413c:	4093      	lsls	r3, r2
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004144:	4937      	ldr	r1, [pc, #220]	@ (8004224 <HAL_GPIO_Init+0x334>)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	089b      	lsrs	r3, r3, #2
 800414a:	3302      	adds	r3, #2
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004152:	4b3b      	ldr	r3, [pc, #236]	@ (8004240 <HAL_GPIO_Init+0x350>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	43db      	mvns	r3, r3
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4013      	ands	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004176:	4a32      	ldr	r2, [pc, #200]	@ (8004240 <HAL_GPIO_Init+0x350>)
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800417c:	4b30      	ldr	r3, [pc, #192]	@ (8004240 <HAL_GPIO_Init+0x350>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	43db      	mvns	r3, r3
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4013      	ands	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041a0:	4a27      	ldr	r2, [pc, #156]	@ (8004240 <HAL_GPIO_Init+0x350>)
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80041a6:	4b26      	ldr	r3, [pc, #152]	@ (8004240 <HAL_GPIO_Init+0x350>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	43db      	mvns	r3, r3
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4013      	ands	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004240 <HAL_GPIO_Init+0x350>)
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80041d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004240 <HAL_GPIO_Init+0x350>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	43db      	mvns	r3, r3
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4013      	ands	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041f4:	4a12      	ldr	r2, [pc, #72]	@ (8004240 <HAL_GPIO_Init+0x350>)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	3301      	adds	r3, #1
 80041fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	fa22 f303 	lsr.w	r3, r2, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	f47f ae78 	bne.w	8003f00 <HAL_GPIO_Init+0x10>
  }
}
 8004210:	bf00      	nop
 8004212:	bf00      	nop
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40021000 	.word	0x40021000
 8004224:	40010000 	.word	0x40010000
 8004228:	48000400 	.word	0x48000400
 800422c:	48000800 	.word	0x48000800
 8004230:	48000c00 	.word	0x48000c00
 8004234:	48001000 	.word	0x48001000
 8004238:	48001400 	.word	0x48001400
 800423c:	48001800 	.word	0x48001800
 8004240:	40010400 	.word	0x40010400

08004244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	460b      	mov	r3, r1
 800424e:	807b      	strh	r3, [r7, #2]
 8004250:	4613      	mov	r3, r2
 8004252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004254:	787b      	ldrb	r3, [r7, #1]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800425a:	887a      	ldrh	r2, [r7, #2]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004260:	e002      	b.n	8004268 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004262:	887a      	ldrh	r2, [r7, #2]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e08d      	b.n	80043a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fd fc08 	bl	8001ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2224      	movs	r2, #36	@ 0x24
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0201 	bic.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80042c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d107      	bne.n	80042ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042ea:	609a      	str	r2, [r3, #8]
 80042ec:	e006      	b.n	80042fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80042fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d108      	bne.n	8004316 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004312:	605a      	str	r2, [r3, #4]
 8004314:	e007      	b.n	8004326 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004324:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004334:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004338:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004348:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69d9      	ldr	r1, [r3, #28]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1a      	ldr	r2, [r3, #32]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d138      	bne.n	8004432 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e032      	b.n	8004434 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2224      	movs	r2, #36	@ 0x24
 80043da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0201 	bic.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80043fc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6819      	ldr	r1, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0201 	orr.w	r2, r2, #1
 800441c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2220      	movs	r2, #32
 8004422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	e000      	b.n	8004434 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004432:	2302      	movs	r3, #2
  }
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b20      	cmp	r3, #32
 8004454:	d139      	bne.n	80044ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004460:	2302      	movs	r3, #2
 8004462:	e033      	b.n	80044cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2224      	movs	r2, #36	@ 0x24
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0201 	bic.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004492:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 0201 	orr.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	e000      	b.n	80044cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80044ca:	2302      	movs	r3, #2
  }
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80044dc:	4b04      	ldr	r3, [pc, #16]	@ (80044f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40007000 	.word	0x40007000

080044f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004502:	d130      	bne.n	8004566 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004504:	4b23      	ldr	r3, [pc, #140]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800450c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004510:	d038      	beq.n	8004584 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004512:	4b20      	ldr	r3, [pc, #128]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800451a:	4a1e      	ldr	r2, [pc, #120]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800451c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004520:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004522:	4b1d      	ldr	r3, [pc, #116]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2232      	movs	r2, #50	@ 0x32
 8004528:	fb02 f303 	mul.w	r3, r2, r3
 800452c:	4a1b      	ldr	r2, [pc, #108]	@ (800459c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	0c9b      	lsrs	r3, r3, #18
 8004534:	3301      	adds	r3, #1
 8004536:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004538:	e002      	b.n	8004540 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3b01      	subs	r3, #1
 800453e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004540:	4b14      	ldr	r3, [pc, #80]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004548:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800454c:	d102      	bne.n	8004554 <HAL_PWREx_ControlVoltageScaling+0x60>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1f2      	bne.n	800453a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004554:	4b0f      	ldr	r3, [pc, #60]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800455c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004560:	d110      	bne.n	8004584 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e00f      	b.n	8004586 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004566:	4b0b      	ldr	r3, [pc, #44]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800456e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004572:	d007      	beq.n	8004584 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004574:	4b07      	ldr	r3, [pc, #28]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800457c:	4a05      	ldr	r2, [pc, #20]	@ (8004594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800457e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004582:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40007000 	.word	0x40007000
 8004598:	20000008 	.word	0x20000008
 800459c:	431bde83 	.word	0x431bde83

080045a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e3ca      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045b2:	4b97      	ldr	r3, [pc, #604]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 030c 	and.w	r3, r3, #12
 80045ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045bc:	4b94      	ldr	r3, [pc, #592]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f003 0303 	and.w	r3, r3, #3
 80045c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 80e4 	beq.w	800479c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <HAL_RCC_OscConfig+0x4a>
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	2b0c      	cmp	r3, #12
 80045de:	f040 808b 	bne.w	80046f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	f040 8087 	bne.w	80046f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045ea:	4b89      	ldr	r3, [pc, #548]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_RCC_OscConfig+0x62>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e3a2      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1a      	ldr	r2, [r3, #32]
 8004606:	4b82      	ldr	r3, [pc, #520]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d004      	beq.n	800461c <HAL_RCC_OscConfig+0x7c>
 8004612:	4b7f      	ldr	r3, [pc, #508]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800461a:	e005      	b.n	8004628 <HAL_RCC_OscConfig+0x88>
 800461c:	4b7c      	ldr	r3, [pc, #496]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 800461e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004622:	091b      	lsrs	r3, r3, #4
 8004624:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004628:	4293      	cmp	r3, r2
 800462a:	d223      	bcs.n	8004674 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fd55 	bl	80050e0 <RCC_SetFlashLatencyFromMSIRange>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e383      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004640:	4b73      	ldr	r3, [pc, #460]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a72      	ldr	r2, [pc, #456]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 8004646:	f043 0308 	orr.w	r3, r3, #8
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	4b70      	ldr	r3, [pc, #448]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	496d      	ldr	r1, [pc, #436]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 800465a:	4313      	orrs	r3, r2
 800465c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800465e:	4b6c      	ldr	r3, [pc, #432]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	021b      	lsls	r3, r3, #8
 800466c:	4968      	ldr	r1, [pc, #416]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 800466e:	4313      	orrs	r3, r2
 8004670:	604b      	str	r3, [r1, #4]
 8004672:	e025      	b.n	80046c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004674:	4b66      	ldr	r3, [pc, #408]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a65      	ldr	r2, [pc, #404]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 800467a:	f043 0308 	orr.w	r3, r3, #8
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	4b63      	ldr	r3, [pc, #396]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	4960      	ldr	r1, [pc, #384]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 800468e:	4313      	orrs	r3, r2
 8004690:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004692:	4b5f      	ldr	r3, [pc, #380]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	495b      	ldr	r1, [pc, #364]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d109      	bne.n	80046c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fd15 	bl	80050e0 <RCC_SetFlashLatencyFromMSIRange>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e343      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046c0:	f000 fc4a 	bl	8004f58 <HAL_RCC_GetSysClockFreq>
 80046c4:	4602      	mov	r2, r0
 80046c6:	4b52      	ldr	r3, [pc, #328]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	091b      	lsrs	r3, r3, #4
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	4950      	ldr	r1, [pc, #320]	@ (8004814 <HAL_RCC_OscConfig+0x274>)
 80046d2:	5ccb      	ldrb	r3, [r1, r3]
 80046d4:	f003 031f 	and.w	r3, r3, #31
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
 80046dc:	4a4e      	ldr	r2, [pc, #312]	@ (8004818 <HAL_RCC_OscConfig+0x278>)
 80046de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80046e0:	4b4e      	ldr	r3, [pc, #312]	@ (800481c <HAL_RCC_OscConfig+0x27c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fe f873 	bl	80027d0 <HAL_InitTick>
 80046ea:	4603      	mov	r3, r0
 80046ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d052      	beq.n	800479a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	e327      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d032      	beq.n	8004766 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004700:	4b43      	ldr	r3, [pc, #268]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a42      	ldr	r2, [pc, #264]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 8004706:	f043 0301 	orr.w	r3, r3, #1
 800470a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800470c:	f7fe f8b0 	bl	8002870 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004714:	f7fe f8ac 	bl	8002870 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e310      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004726:	4b3a      	ldr	r3, [pc, #232]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004732:	4b37      	ldr	r3, [pc, #220]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a36      	ldr	r2, [pc, #216]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 8004738:	f043 0308 	orr.w	r3, r3, #8
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	4b34      	ldr	r3, [pc, #208]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	4931      	ldr	r1, [pc, #196]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 800474c:	4313      	orrs	r3, r2
 800474e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004750:	4b2f      	ldr	r3, [pc, #188]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	492c      	ldr	r1, [pc, #176]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 8004760:	4313      	orrs	r3, r2
 8004762:	604b      	str	r3, [r1, #4]
 8004764:	e01a      	b.n	800479c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004766:	4b2a      	ldr	r3, [pc, #168]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a29      	ldr	r2, [pc, #164]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004772:	f7fe f87d 	bl	8002870 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800477a:	f7fe f879 	bl	8002870 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e2dd      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800478c:	4b20      	ldr	r3, [pc, #128]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1f0      	bne.n	800477a <HAL_RCC_OscConfig+0x1da>
 8004798:	e000      	b.n	800479c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800479a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d074      	beq.n	8004892 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d005      	beq.n	80047ba <HAL_RCC_OscConfig+0x21a>
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	2b0c      	cmp	r3, #12
 80047b2:	d10e      	bne.n	80047d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d10b      	bne.n	80047d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ba:	4b15      	ldr	r3, [pc, #84]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d064      	beq.n	8004890 <HAL_RCC_OscConfig+0x2f0>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d160      	bne.n	8004890 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e2ba      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047da:	d106      	bne.n	80047ea <HAL_RCC_OscConfig+0x24a>
 80047dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a0b      	ldr	r2, [pc, #44]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 80047e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047e6:	6013      	str	r3, [r2, #0]
 80047e8:	e026      	b.n	8004838 <HAL_RCC_OscConfig+0x298>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047f2:	d115      	bne.n	8004820 <HAL_RCC_OscConfig+0x280>
 80047f4:	4b06      	ldr	r3, [pc, #24]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a05      	ldr	r2, [pc, #20]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 80047fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	4b03      	ldr	r3, [pc, #12]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a02      	ldr	r2, [pc, #8]	@ (8004810 <HAL_RCC_OscConfig+0x270>)
 8004806:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	e014      	b.n	8004838 <HAL_RCC_OscConfig+0x298>
 800480e:	bf00      	nop
 8004810:	40021000 	.word	0x40021000
 8004814:	08008964 	.word	0x08008964
 8004818:	20000008 	.word	0x20000008
 800481c:	20000018 	.word	0x20000018
 8004820:	4ba0      	ldr	r3, [pc, #640]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a9f      	ldr	r2, [pc, #636]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 8004826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	4b9d      	ldr	r3, [pc, #628]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a9c      	ldr	r2, [pc, #624]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 8004832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d013      	beq.n	8004868 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004840:	f7fe f816 	bl	8002870 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004848:	f7fe f812 	bl	8002870 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b64      	cmp	r3, #100	@ 0x64
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e276      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800485a:	4b92      	ldr	r3, [pc, #584]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0x2a8>
 8004866:	e014      	b.n	8004892 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004868:	f7fe f802 	bl	8002870 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004870:	f7fd fffe 	bl	8002870 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b64      	cmp	r3, #100	@ 0x64
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e262      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004882:	4b88      	ldr	r3, [pc, #544]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0x2d0>
 800488e:	e000      	b.n	8004892 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d060      	beq.n	8004960 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d005      	beq.n	80048b0 <HAL_RCC_OscConfig+0x310>
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	2b0c      	cmp	r3, #12
 80048a8:	d119      	bne.n	80048de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d116      	bne.n	80048de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048b0:	4b7c      	ldr	r3, [pc, #496]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_RCC_OscConfig+0x328>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e23f      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c8:	4b76      	ldr	r3, [pc, #472]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	061b      	lsls	r3, r3, #24
 80048d6:	4973      	ldr	r1, [pc, #460]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048dc:	e040      	b.n	8004960 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d023      	beq.n	800492e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048e6:	4b6f      	ldr	r3, [pc, #444]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a6e      	ldr	r2, [pc, #440]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 80048ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f2:	f7fd ffbd 	bl	8002870 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048fa:	f7fd ffb9 	bl	8002870 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e21d      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800490c:	4b65      	ldr	r3, [pc, #404]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004918:	4b62      	ldr	r3, [pc, #392]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	061b      	lsls	r3, r3, #24
 8004926:	495f      	ldr	r1, [pc, #380]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 8004928:	4313      	orrs	r3, r2
 800492a:	604b      	str	r3, [r1, #4]
 800492c:	e018      	b.n	8004960 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800492e:	4b5d      	ldr	r3, [pc, #372]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a5c      	ldr	r2, [pc, #368]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 8004934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493a:	f7fd ff99 	bl	8002870 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004942:	f7fd ff95 	bl	8002870 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e1f9      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004954:	4b53      	ldr	r3, [pc, #332]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f0      	bne.n	8004942 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b00      	cmp	r3, #0
 800496a:	d03c      	beq.n	80049e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01c      	beq.n	80049ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004974:	4b4b      	ldr	r3, [pc, #300]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 8004976:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800497a:	4a4a      	ldr	r2, [pc, #296]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004984:	f7fd ff74 	bl	8002870 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800498c:	f7fd ff70 	bl	8002870 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e1d4      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800499e:	4b41      	ldr	r3, [pc, #260]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 80049a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0ef      	beq.n	800498c <HAL_RCC_OscConfig+0x3ec>
 80049ac:	e01b      	b.n	80049e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ae:	4b3d      	ldr	r3, [pc, #244]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 80049b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049b4:	4a3b      	ldr	r2, [pc, #236]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049be:	f7fd ff57 	bl	8002870 <HAL_GetTick>
 80049c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049c4:	e008      	b.n	80049d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c6:	f7fd ff53 	bl	8002870 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e1b7      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049d8:	4b32      	ldr	r3, [pc, #200]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 80049da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1ef      	bne.n	80049c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 80a6 	beq.w	8004b40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049f4:	2300      	movs	r3, #0
 80049f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80049f8:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 80049fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10d      	bne.n	8004a20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a04:	4b27      	ldr	r3, [pc, #156]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 8004a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a08:	4a26      	ldr	r2, [pc, #152]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 8004a0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a10:	4b24      	ldr	r3, [pc, #144]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 8004a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a20:	4b21      	ldr	r3, [pc, #132]	@ (8004aa8 <HAL_RCC_OscConfig+0x508>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d118      	bne.n	8004a5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8004aa8 <HAL_RCC_OscConfig+0x508>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa8 <HAL_RCC_OscConfig+0x508>)
 8004a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a38:	f7fd ff1a 	bl	8002870 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a40:	f7fd ff16 	bl	8002870 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e17a      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a52:	4b15      	ldr	r3, [pc, #84]	@ (8004aa8 <HAL_RCC_OscConfig+0x508>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f0      	beq.n	8004a40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d108      	bne.n	8004a78 <HAL_RCC_OscConfig+0x4d8>
 8004a66:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 8004a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 8004a6e:	f043 0301 	orr.w	r3, r3, #1
 8004a72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a76:	e029      	b.n	8004acc <HAL_RCC_OscConfig+0x52c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b05      	cmp	r3, #5
 8004a7e:	d115      	bne.n	8004aac <HAL_RCC_OscConfig+0x50c>
 8004a80:	4b08      	ldr	r3, [pc, #32]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 8004a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a86:	4a07      	ldr	r2, [pc, #28]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 8004a88:	f043 0304 	orr.w	r3, r3, #4
 8004a8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a90:	4b04      	ldr	r3, [pc, #16]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 8004a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a96:	4a03      	ldr	r2, [pc, #12]	@ (8004aa4 <HAL_RCC_OscConfig+0x504>)
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004aa0:	e014      	b.n	8004acc <HAL_RCC_OscConfig+0x52c>
 8004aa2:	bf00      	nop
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	40007000 	.word	0x40007000
 8004aac:	4b9c      	ldr	r3, [pc, #624]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab2:	4a9b      	ldr	r2, [pc, #620]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004ab4:	f023 0301 	bic.w	r3, r3, #1
 8004ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004abc:	4b98      	ldr	r3, [pc, #608]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac2:	4a97      	ldr	r2, [pc, #604]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004ac4:	f023 0304 	bic.w	r3, r3, #4
 8004ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d016      	beq.n	8004b02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad4:	f7fd fecc 	bl	8002870 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ada:	e00a      	b.n	8004af2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004adc:	f7fd fec8 	bl	8002870 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e12a      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004af2:	4b8b      	ldr	r3, [pc, #556]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0ed      	beq.n	8004adc <HAL_RCC_OscConfig+0x53c>
 8004b00:	e015      	b.n	8004b2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b02:	f7fd feb5 	bl	8002870 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b08:	e00a      	b.n	8004b20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b0a:	f7fd feb1 	bl	8002870 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e113      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b20:	4b7f      	ldr	r3, [pc, #508]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1ed      	bne.n	8004b0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b2e:	7ffb      	ldrb	r3, [r7, #31]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d105      	bne.n	8004b40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b34:	4b7a      	ldr	r3, [pc, #488]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b38:	4a79      	ldr	r2, [pc, #484]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004b3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b3e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 80fe 	beq.w	8004d46 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	f040 80d0 	bne.w	8004cf4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b54:	4b72      	ldr	r3, [pc, #456]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f003 0203 	and.w	r2, r3, #3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d130      	bne.n	8004bca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b72:	3b01      	subs	r3, #1
 8004b74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d127      	bne.n	8004bca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d11f      	bne.n	8004bca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b94:	2a07      	cmp	r2, #7
 8004b96:	bf14      	ite	ne
 8004b98:	2201      	movne	r2, #1
 8004b9a:	2200      	moveq	r2, #0
 8004b9c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d113      	bne.n	8004bca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bac:	085b      	lsrs	r3, r3, #1
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d109      	bne.n	8004bca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc0:	085b      	lsrs	r3, r3, #1
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d06e      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b0c      	cmp	r3, #12
 8004bce:	d069      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004bd0:	4b53      	ldr	r3, [pc, #332]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d105      	bne.n	8004be8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004bdc:	4b50      	ldr	r3, [pc, #320]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0ad      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004bec:	4b4c      	ldr	r3, [pc, #304]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a4b      	ldr	r2, [pc, #300]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004bf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bf6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bf8:	f7fd fe3a 	bl	8002870 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c00:	f7fd fe36 	bl	8002870 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e09a      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c12:	4b43      	ldr	r3, [pc, #268]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c1e:	4b40      	ldr	r3, [pc, #256]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	4b40      	ldr	r3, [pc, #256]	@ (8004d24 <HAL_RCC_OscConfig+0x784>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004c2e:	3a01      	subs	r2, #1
 8004c30:	0112      	lsls	r2, r2, #4
 8004c32:	4311      	orrs	r1, r2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c38:	0212      	lsls	r2, r2, #8
 8004c3a:	4311      	orrs	r1, r2
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c40:	0852      	lsrs	r2, r2, #1
 8004c42:	3a01      	subs	r2, #1
 8004c44:	0552      	lsls	r2, r2, #21
 8004c46:	4311      	orrs	r1, r2
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004c4c:	0852      	lsrs	r2, r2, #1
 8004c4e:	3a01      	subs	r2, #1
 8004c50:	0652      	lsls	r2, r2, #25
 8004c52:	4311      	orrs	r1, r2
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004c58:	0912      	lsrs	r2, r2, #4
 8004c5a:	0452      	lsls	r2, r2, #17
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	4930      	ldr	r1, [pc, #192]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c64:	4b2e      	ldr	r3, [pc, #184]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a2d      	ldr	r2, [pc, #180]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004c6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c70:	4b2b      	ldr	r3, [pc, #172]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	4a2a      	ldr	r2, [pc, #168]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c7c:	f7fd fdf8 	bl	8002870 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c84:	f7fd fdf4 	bl	8002870 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e058      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c96:	4b22      	ldr	r3, [pc, #136]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0f0      	beq.n	8004c84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ca2:	e050      	b.n	8004d46 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e04f      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d148      	bne.n	8004d46 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a19      	ldr	r2, [pc, #100]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004cba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cc0:	4b17      	ldr	r3, [pc, #92]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4a16      	ldr	r2, [pc, #88]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004cc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ccc:	f7fd fdd0 	bl	8002870 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd4:	f7fd fdcc 	bl	8002870 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e030      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0f0      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x734>
 8004cf2:	e028      	b.n	8004d46 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	2b0c      	cmp	r3, #12
 8004cf8:	d023      	beq.n	8004d42 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfa:	4b09      	ldr	r3, [pc, #36]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a08      	ldr	r2, [pc, #32]	@ (8004d20 <HAL_RCC_OscConfig+0x780>)
 8004d00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d06:	f7fd fdb3 	bl	8002870 <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d0c:	e00c      	b.n	8004d28 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0e:	f7fd fdaf 	bl	8002870 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d905      	bls.n	8004d28 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e013      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
 8004d20:	40021000 	.word	0x40021000
 8004d24:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d28:	4b09      	ldr	r3, [pc, #36]	@ (8004d50 <HAL_RCC_OscConfig+0x7b0>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1ec      	bne.n	8004d0e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d34:	4b06      	ldr	r3, [pc, #24]	@ (8004d50 <HAL_RCC_OscConfig+0x7b0>)
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	4905      	ldr	r1, [pc, #20]	@ (8004d50 <HAL_RCC_OscConfig+0x7b0>)
 8004d3a:	4b06      	ldr	r3, [pc, #24]	@ (8004d54 <HAL_RCC_OscConfig+0x7b4>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	60cb      	str	r3, [r1, #12]
 8004d40:	e001      	b.n	8004d46 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3720      	adds	r7, #32
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40021000 	.word	0x40021000
 8004d54:	feeefffc 	.word	0xfeeefffc

08004d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e0e7      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d6c:	4b75      	ldr	r3, [pc, #468]	@ (8004f44 <HAL_RCC_ClockConfig+0x1ec>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d910      	bls.n	8004d9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7a:	4b72      	ldr	r3, [pc, #456]	@ (8004f44 <HAL_RCC_ClockConfig+0x1ec>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f023 0207 	bic.w	r2, r3, #7
 8004d82:	4970      	ldr	r1, [pc, #448]	@ (8004f44 <HAL_RCC_ClockConfig+0x1ec>)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d8a:	4b6e      	ldr	r3, [pc, #440]	@ (8004f44 <HAL_RCC_ClockConfig+0x1ec>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d001      	beq.n	8004d9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0cf      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d010      	beq.n	8004dca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	4b66      	ldr	r3, [pc, #408]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f0>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d908      	bls.n	8004dca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db8:	4b63      	ldr	r3, [pc, #396]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f0>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	4960      	ldr	r1, [pc, #384]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f0>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d04c      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d107      	bne.n	8004dee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dde:	4b5a      	ldr	r3, [pc, #360]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d121      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e0a6      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d107      	bne.n	8004e06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004df6:	4b54      	ldr	r3, [pc, #336]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d115      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e09a      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d107      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e0e:	4b4e      	ldr	r3, [pc, #312]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e08e      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e086      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e2e:	4b46      	ldr	r3, [pc, #280]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f0>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f023 0203 	bic.w	r2, r3, #3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	4943      	ldr	r1, [pc, #268]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f0>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e40:	f7fd fd16 	bl	8002870 <HAL_GetTick>
 8004e44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e46:	e00a      	b.n	8004e5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e48:	f7fd fd12 	bl	8002870 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e06e      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e5e:	4b3a      	ldr	r3, [pc, #232]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f0>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 020c 	and.w	r2, r3, #12
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d1eb      	bne.n	8004e48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d010      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	4b31      	ldr	r3, [pc, #196]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f0>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d208      	bcs.n	8004e9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f0>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	492b      	ldr	r1, [pc, #172]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f0>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e9e:	4b29      	ldr	r3, [pc, #164]	@ (8004f44 <HAL_RCC_ClockConfig+0x1ec>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d210      	bcs.n	8004ece <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eac:	4b25      	ldr	r3, [pc, #148]	@ (8004f44 <HAL_RCC_ClockConfig+0x1ec>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f023 0207 	bic.w	r2, r3, #7
 8004eb4:	4923      	ldr	r1, [pc, #140]	@ (8004f44 <HAL_RCC_ClockConfig+0x1ec>)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ebc:	4b21      	ldr	r3, [pc, #132]	@ (8004f44 <HAL_RCC_ClockConfig+0x1ec>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d001      	beq.n	8004ece <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e036      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d008      	beq.n	8004eec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eda:	4b1b      	ldr	r3, [pc, #108]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f0>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	4918      	ldr	r1, [pc, #96]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f0>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d009      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ef8:	4b13      	ldr	r3, [pc, #76]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f0>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	4910      	ldr	r1, [pc, #64]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f0>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f0c:	f000 f824 	bl	8004f58 <HAL_RCC_GetSysClockFreq>
 8004f10:	4602      	mov	r2, r0
 8004f12:	4b0d      	ldr	r3, [pc, #52]	@ (8004f48 <HAL_RCC_ClockConfig+0x1f0>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	091b      	lsrs	r3, r3, #4
 8004f18:	f003 030f 	and.w	r3, r3, #15
 8004f1c:	490b      	ldr	r1, [pc, #44]	@ (8004f4c <HAL_RCC_ClockConfig+0x1f4>)
 8004f1e:	5ccb      	ldrb	r3, [r1, r3]
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
 8004f28:	4a09      	ldr	r2, [pc, #36]	@ (8004f50 <HAL_RCC_ClockConfig+0x1f8>)
 8004f2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f2c:	4b09      	ldr	r3, [pc, #36]	@ (8004f54 <HAL_RCC_ClockConfig+0x1fc>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fd fc4d 	bl	80027d0 <HAL_InitTick>
 8004f36:	4603      	mov	r3, r0
 8004f38:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f3a:	7afb      	ldrb	r3, [r7, #11]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40022000 	.word	0x40022000
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	08008964 	.word	0x08008964
 8004f50:	20000008 	.word	0x20000008
 8004f54:	20000018 	.word	0x20000018

08004f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b089      	sub	sp, #36	@ 0x24
 8004f5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	2300      	movs	r3, #0
 8004f64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f66:	4b3e      	ldr	r3, [pc, #248]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 030c 	and.w	r3, r3, #12
 8004f6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f70:	4b3b      	ldr	r3, [pc, #236]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f003 0303 	and.w	r3, r3, #3
 8004f78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d005      	beq.n	8004f8c <HAL_RCC_GetSysClockFreq+0x34>
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	2b0c      	cmp	r3, #12
 8004f84:	d121      	bne.n	8004fca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d11e      	bne.n	8004fca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f8c:	4b34      	ldr	r3, [pc, #208]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d107      	bne.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f98:	4b31      	ldr	r3, [pc, #196]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f9e:	0a1b      	lsrs	r3, r3, #8
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	61fb      	str	r3, [r7, #28]
 8004fa6:	e005      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x108>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	091b      	lsrs	r3, r3, #4
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10d      	bne.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fc8:	e00a      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d102      	bne.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fd0:	4b25      	ldr	r3, [pc, #148]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fd2:	61bb      	str	r3, [r7, #24]
 8004fd4:	e004      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d101      	bne.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fdc:	4b23      	ldr	r3, [pc, #140]	@ (800506c <HAL_RCC_GetSysClockFreq+0x114>)
 8004fde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	2b0c      	cmp	r3, #12
 8004fe4:	d134      	bne.n	8005050 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d003      	beq.n	8004ffe <HAL_RCC_GetSysClockFreq+0xa6>
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2b03      	cmp	r3, #3
 8004ffa:	d003      	beq.n	8005004 <HAL_RCC_GetSysClockFreq+0xac>
 8004ffc:	e005      	b.n	800500a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x110>)
 8005000:	617b      	str	r3, [r7, #20]
      break;
 8005002:	e005      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005004:	4b19      	ldr	r3, [pc, #100]	@ (800506c <HAL_RCC_GetSysClockFreq+0x114>)
 8005006:	617b      	str	r3, [r7, #20]
      break;
 8005008:	e002      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	617b      	str	r3, [r7, #20]
      break;
 800500e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005010:	4b13      	ldr	r3, [pc, #76]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x108>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	091b      	lsrs	r3, r3, #4
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	3301      	adds	r3, #1
 800501c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800501e:	4b10      	ldr	r3, [pc, #64]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x108>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	0a1b      	lsrs	r3, r3, #8
 8005024:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	fb03 f202 	mul.w	r2, r3, r2
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	fbb2 f3f3 	udiv	r3, r2, r3
 8005034:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005036:	4b0a      	ldr	r3, [pc, #40]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x108>)
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	0e5b      	lsrs	r3, r3, #25
 800503c:	f003 0303 	and.w	r3, r3, #3
 8005040:	3301      	adds	r3, #1
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	fbb2 f3f3 	udiv	r3, r2, r3
 800504e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005050:	69bb      	ldr	r3, [r7, #24]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3724      	adds	r7, #36	@ 0x24
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40021000 	.word	0x40021000
 8005064:	0800897c 	.word	0x0800897c
 8005068:	00f42400 	.word	0x00f42400
 800506c:	017d7840 	.word	0x017d7840

08005070 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005074:	4b03      	ldr	r3, [pc, #12]	@ (8005084 <HAL_RCC_GetHCLKFreq+0x14>)
 8005076:	681b      	ldr	r3, [r3, #0]
}
 8005078:	4618      	mov	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20000008 	.word	0x20000008

08005088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800508c:	f7ff fff0 	bl	8005070 <HAL_RCC_GetHCLKFreq>
 8005090:	4602      	mov	r2, r0
 8005092:	4b06      	ldr	r3, [pc, #24]	@ (80050ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	0a1b      	lsrs	r3, r3, #8
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	4904      	ldr	r1, [pc, #16]	@ (80050b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800509e:	5ccb      	ldrb	r3, [r1, r3]
 80050a0:	f003 031f 	and.w	r3, r3, #31
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40021000 	.word	0x40021000
 80050b0:	08008974 	.word	0x08008974

080050b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80050b8:	f7ff ffda 	bl	8005070 <HAL_RCC_GetHCLKFreq>
 80050bc:	4602      	mov	r2, r0
 80050be:	4b06      	ldr	r3, [pc, #24]	@ (80050d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	0adb      	lsrs	r3, r3, #11
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	4904      	ldr	r1, [pc, #16]	@ (80050dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80050ca:	5ccb      	ldrb	r3, [r1, r3]
 80050cc:	f003 031f 	and.w	r3, r3, #31
 80050d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40021000 	.word	0x40021000
 80050dc:	08008974 	.word	0x08008974

080050e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050e8:	2300      	movs	r3, #0
 80050ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050f8:	f7ff f9ee 	bl	80044d8 <HAL_PWREx_GetVoltageRange>
 80050fc:	6178      	str	r0, [r7, #20]
 80050fe:	e014      	b.n	800512a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005100:	4b25      	ldr	r3, [pc, #148]	@ (8005198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005104:	4a24      	ldr	r2, [pc, #144]	@ (8005198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800510a:	6593      	str	r3, [r2, #88]	@ 0x58
 800510c:	4b22      	ldr	r3, [pc, #136]	@ (8005198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800510e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005118:	f7ff f9de 	bl	80044d8 <HAL_PWREx_GetVoltageRange>
 800511c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800511e:	4b1e      	ldr	r3, [pc, #120]	@ (8005198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005122:	4a1d      	ldr	r2, [pc, #116]	@ (8005198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005124:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005128:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005130:	d10b      	bne.n	800514a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b80      	cmp	r3, #128	@ 0x80
 8005136:	d919      	bls.n	800516c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2ba0      	cmp	r3, #160	@ 0xa0
 800513c:	d902      	bls.n	8005144 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800513e:	2302      	movs	r3, #2
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	e013      	b.n	800516c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005144:	2301      	movs	r3, #1
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	e010      	b.n	800516c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b80      	cmp	r3, #128	@ 0x80
 800514e:	d902      	bls.n	8005156 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005150:	2303      	movs	r3, #3
 8005152:	613b      	str	r3, [r7, #16]
 8005154:	e00a      	b.n	800516c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b80      	cmp	r3, #128	@ 0x80
 800515a:	d102      	bne.n	8005162 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800515c:	2302      	movs	r3, #2
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	e004      	b.n	800516c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b70      	cmp	r3, #112	@ 0x70
 8005166:	d101      	bne.n	800516c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005168:	2301      	movs	r3, #1
 800516a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800516c:	4b0b      	ldr	r3, [pc, #44]	@ (800519c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f023 0207 	bic.w	r2, r3, #7
 8005174:	4909      	ldr	r1, [pc, #36]	@ (800519c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800517c:	4b07      	ldr	r3, [pc, #28]	@ (800519c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	429a      	cmp	r2, r3
 8005188:	d001      	beq.n	800518e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40021000 	.word	0x40021000
 800519c:	40022000 	.word	0x40022000

080051a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051a8:	2300      	movs	r3, #0
 80051aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051ac:	2300      	movs	r3, #0
 80051ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d041      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80051c4:	d02a      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80051c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80051ca:	d824      	bhi.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80051d0:	d008      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80051d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80051d6:	d81e      	bhi.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80051dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051e0:	d010      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051e2:	e018      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051e4:	4b86      	ldr	r3, [pc, #536]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	4a85      	ldr	r2, [pc, #532]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051f0:	e015      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3304      	adds	r3, #4
 80051f6:	2100      	movs	r1, #0
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 fa8b 	bl	8005714 <RCCEx_PLLSAI1_Config>
 80051fe:	4603      	mov	r3, r0
 8005200:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005202:	e00c      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3320      	adds	r3, #32
 8005208:	2100      	movs	r1, #0
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fb76 	bl	80058fc <RCCEx_PLLSAI2_Config>
 8005210:	4603      	mov	r3, r0
 8005212:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005214:	e003      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	74fb      	strb	r3, [r7, #19]
      break;
 800521a:	e000      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800521c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800521e:	7cfb      	ldrb	r3, [r7, #19]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10b      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005224:	4b76      	ldr	r3, [pc, #472]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005232:	4973      	ldr	r1, [pc, #460]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800523a:	e001      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523c:	7cfb      	ldrb	r3, [r7, #19]
 800523e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d041      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005250:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005254:	d02a      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005256:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800525a:	d824      	bhi.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800525c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005260:	d008      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005262:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005266:	d81e      	bhi.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800526c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005270:	d010      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005272:	e018      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005274:	4b62      	ldr	r3, [pc, #392]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	4a61      	ldr	r2, [pc, #388]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800527a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800527e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005280:	e015      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3304      	adds	r3, #4
 8005286:	2100      	movs	r1, #0
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fa43 	bl	8005714 <RCCEx_PLLSAI1_Config>
 800528e:	4603      	mov	r3, r0
 8005290:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005292:	e00c      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3320      	adds	r3, #32
 8005298:	2100      	movs	r1, #0
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fb2e 	bl	80058fc <RCCEx_PLLSAI2_Config>
 80052a0:	4603      	mov	r3, r0
 80052a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052a4:	e003      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	74fb      	strb	r3, [r7, #19]
      break;
 80052aa:	e000      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80052ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052ae:	7cfb      	ldrb	r3, [r7, #19]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10b      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052b4:	4b52      	ldr	r3, [pc, #328]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052c2:	494f      	ldr	r1, [pc, #316]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80052ca:	e001      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052cc:	7cfb      	ldrb	r3, [r7, #19]
 80052ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 80a0 	beq.w	800541e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052de:	2300      	movs	r3, #0
 80052e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052e2:	4b47      	ldr	r3, [pc, #284]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80052f2:	2300      	movs	r3, #0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00d      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f8:	4b41      	ldr	r3, [pc, #260]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fc:	4a40      	ldr	r2, [pc, #256]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005302:	6593      	str	r3, [r2, #88]	@ 0x58
 8005304:	4b3e      	ldr	r3, [pc, #248]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800530c:	60bb      	str	r3, [r7, #8]
 800530e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005310:	2301      	movs	r3, #1
 8005312:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005314:	4b3b      	ldr	r3, [pc, #236]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a3a      	ldr	r2, [pc, #232]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800531a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800531e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005320:	f7fd faa6 	bl	8002870 <HAL_GetTick>
 8005324:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005326:	e009      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005328:	f7fd faa2 	bl	8002870 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d902      	bls.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	74fb      	strb	r3, [r7, #19]
        break;
 800533a:	e005      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800533c:	4b31      	ldr	r3, [pc, #196]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0ef      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005348:	7cfb      	ldrb	r3, [r7, #19]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d15c      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800534e:	4b2c      	ldr	r3, [pc, #176]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005354:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005358:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01f      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	429a      	cmp	r2, r3
 800536a:	d019      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800536c:	4b24      	ldr	r3, [pc, #144]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005376:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005378:	4b21      	ldr	r3, [pc, #132]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800537a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800537e:	4a20      	ldr	r2, [pc, #128]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005384:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005388:	4b1d      	ldr	r3, [pc, #116]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800538e:	4a1c      	ldr	r2, [pc, #112]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005390:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005394:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005398:	4a19      	ldr	r2, [pc, #100]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d016      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053aa:	f7fd fa61 	bl	8002870 <HAL_GetTick>
 80053ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053b0:	e00b      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b2:	f7fd fa5d 	bl	8002870 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d902      	bls.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	74fb      	strb	r3, [r7, #19]
            break;
 80053c8:	e006      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0ec      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80053d8:	7cfb      	ldrb	r3, [r7, #19]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10c      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053de:	4b08      	ldr	r3, [pc, #32]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ee:	4904      	ldr	r1, [pc, #16]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80053f6:	e009      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053f8:	7cfb      	ldrb	r3, [r7, #19]
 80053fa:	74bb      	strb	r3, [r7, #18]
 80053fc:	e006      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80053fe:	bf00      	nop
 8005400:	40021000 	.word	0x40021000
 8005404:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005408:	7cfb      	ldrb	r3, [r7, #19]
 800540a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800540c:	7c7b      	ldrb	r3, [r7, #17]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d105      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005412:	4ba1      	ldr	r3, [pc, #644]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005416:	4aa0      	ldr	r2, [pc, #640]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005418:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800541c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800542a:	4b9b      	ldr	r3, [pc, #620]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005430:	f023 0203 	bic.w	r2, r3, #3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005438:	4997      	ldr	r1, [pc, #604]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800544c:	4b92      	ldr	r3, [pc, #584]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005452:	f023 020c 	bic.w	r2, r3, #12
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800545a:	498f      	ldr	r1, [pc, #572]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800546e:	4b8a      	ldr	r3, [pc, #552]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005474:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547c:	4986      	ldr	r1, [pc, #536]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005490:	4b81      	ldr	r3, [pc, #516]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005496:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800549e:	497e      	ldr	r1, [pc, #504]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0310 	and.w	r3, r3, #16
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054b2:	4b79      	ldr	r3, [pc, #484]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80054b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054c0:	4975      	ldr	r1, [pc, #468]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0320 	and.w	r3, r3, #32
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00a      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054d4:	4b70      	ldr	r3, [pc, #448]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80054d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054e2:	496d      	ldr	r1, [pc, #436]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054f6:	4b68      	ldr	r3, [pc, #416]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005504:	4964      	ldr	r1, [pc, #400]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00a      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005518:	4b5f      	ldr	r3, [pc, #380]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800551a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800551e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005526:	495c      	ldr	r1, [pc, #368]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800553a:	4b57      	ldr	r3, [pc, #348]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800553c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005540:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005548:	4953      	ldr	r1, [pc, #332]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800555c:	4b4e      	ldr	r3, [pc, #312]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005562:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556a:	494b      	ldr	r1, [pc, #300]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800557e:	4b46      	ldr	r3, [pc, #280]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005584:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558c:	4942      	ldr	r1, [pc, #264]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d028      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80055a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055ae:	493a      	ldr	r1, [pc, #232]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055be:	d106      	bne.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c0:	4b35      	ldr	r3, [pc, #212]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	4a34      	ldr	r2, [pc, #208]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80055c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055ca:	60d3      	str	r3, [r2, #12]
 80055cc:	e011      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055d6:	d10c      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3304      	adds	r3, #4
 80055dc:	2101      	movs	r1, #1
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 f898 	bl	8005714 <RCCEx_PLLSAI1_Config>
 80055e4:	4603      	mov	r3, r0
 80055e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055e8:	7cfb      	ldrb	r3, [r7, #19]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 80055ee:	7cfb      	ldrb	r3, [r7, #19]
 80055f0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d028      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055fe:	4b26      	ldr	r3, [pc, #152]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005604:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800560c:	4922      	ldr	r1, [pc, #136]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005618:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800561c:	d106      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800561e:	4b1e      	ldr	r3, [pc, #120]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	4a1d      	ldr	r2, [pc, #116]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005628:	60d3      	str	r3, [r2, #12]
 800562a:	e011      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005630:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005634:	d10c      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	3304      	adds	r3, #4
 800563a:	2101      	movs	r1, #1
 800563c:	4618      	mov	r0, r3
 800563e:	f000 f869 	bl	8005714 <RCCEx_PLLSAI1_Config>
 8005642:	4603      	mov	r3, r0
 8005644:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005646:	7cfb      	ldrb	r3, [r7, #19]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800564c:	7cfb      	ldrb	r3, [r7, #19]
 800564e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d031      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800565c:	4b0e      	ldr	r3, [pc, #56]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800565e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005662:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800566a:	490b      	ldr	r1, [pc, #44]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005676:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800567a:	d10f      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3304      	adds	r3, #4
 8005680:	2102      	movs	r1, #2
 8005682:	4618      	mov	r0, r3
 8005684:	f000 f846 	bl	8005714 <RCCEx_PLLSAI1_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800568c:	7cfb      	ldrb	r3, [r7, #19]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d016      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8005692:	7cfb      	ldrb	r3, [r7, #19]
 8005694:	74bb      	strb	r3, [r7, #18]
 8005696:	e013      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005698:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056a4:	d10c      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3320      	adds	r3, #32
 80056aa:	2102      	movs	r1, #2
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 f925 	bl	80058fc <RCCEx_PLLSAI2_Config>
 80056b2:	4603      	mov	r3, r0
 80056b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056b6:	7cfb      	ldrb	r3, [r7, #19]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 80056bc:	7cfb      	ldrb	r3, [r7, #19]
 80056be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00a      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056cc:	4b10      	ldr	r3, [pc, #64]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80056ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056da:	490d      	ldr	r1, [pc, #52]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056ee:	4b08      	ldr	r3, [pc, #32]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056fc:	4904      	ldr	r1, [pc, #16]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005704:	7cbb      	ldrb	r3, [r7, #18]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40021000 	.word	0x40021000

08005714 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005722:	4b75      	ldr	r3, [pc, #468]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d018      	beq.n	8005760 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800572e:	4b72      	ldr	r3, [pc, #456]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f003 0203 	and.w	r2, r3, #3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d10d      	bne.n	800575a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
       ||
 8005742:	2b00      	cmp	r3, #0
 8005744:	d009      	beq.n	800575a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005746:	4b6c      	ldr	r3, [pc, #432]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	091b      	lsrs	r3, r3, #4
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
       ||
 8005756:	429a      	cmp	r2, r3
 8005758:	d047      	beq.n	80057ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	73fb      	strb	r3, [r7, #15]
 800575e:	e044      	b.n	80057ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b03      	cmp	r3, #3
 8005766:	d018      	beq.n	800579a <RCCEx_PLLSAI1_Config+0x86>
 8005768:	2b03      	cmp	r3, #3
 800576a:	d825      	bhi.n	80057b8 <RCCEx_PLLSAI1_Config+0xa4>
 800576c:	2b01      	cmp	r3, #1
 800576e:	d002      	beq.n	8005776 <RCCEx_PLLSAI1_Config+0x62>
 8005770:	2b02      	cmp	r3, #2
 8005772:	d009      	beq.n	8005788 <RCCEx_PLLSAI1_Config+0x74>
 8005774:	e020      	b.n	80057b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005776:	4b60      	ldr	r3, [pc, #384]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d11d      	bne.n	80057be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005786:	e01a      	b.n	80057be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005788:	4b5b      	ldr	r3, [pc, #364]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005790:	2b00      	cmp	r3, #0
 8005792:	d116      	bne.n	80057c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005798:	e013      	b.n	80057c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800579a:	4b57      	ldr	r3, [pc, #348]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10f      	bne.n	80057c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057a6:	4b54      	ldr	r3, [pc, #336]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d109      	bne.n	80057c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057b6:	e006      	b.n	80057c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]
      break;
 80057bc:	e004      	b.n	80057c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057be:	bf00      	nop
 80057c0:	e002      	b.n	80057c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057c2:	bf00      	nop
 80057c4:	e000      	b.n	80057c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10d      	bne.n	80057ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057ce:	4b4a      	ldr	r3, [pc, #296]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6819      	ldr	r1, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	3b01      	subs	r3, #1
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	430b      	orrs	r3, r1
 80057e4:	4944      	ldr	r1, [pc, #272]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d17d      	bne.n	80058ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80057f0:	4b41      	ldr	r3, [pc, #260]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a40      	ldr	r2, [pc, #256]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80057fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057fc:	f7fd f838 	bl	8002870 <HAL_GetTick>
 8005800:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005802:	e009      	b.n	8005818 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005804:	f7fd f834 	bl	8002870 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d902      	bls.n	8005818 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	73fb      	strb	r3, [r7, #15]
        break;
 8005816:	e005      	b.n	8005824 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005818:	4b37      	ldr	r3, [pc, #220]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1ef      	bne.n	8005804 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d160      	bne.n	80058ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d111      	bne.n	8005854 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005830:	4b31      	ldr	r3, [pc, #196]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005838:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6892      	ldr	r2, [r2, #8]
 8005840:	0211      	lsls	r1, r2, #8
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	68d2      	ldr	r2, [r2, #12]
 8005846:	0912      	lsrs	r2, r2, #4
 8005848:	0452      	lsls	r2, r2, #17
 800584a:	430a      	orrs	r2, r1
 800584c:	492a      	ldr	r1, [pc, #168]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800584e:	4313      	orrs	r3, r2
 8005850:	610b      	str	r3, [r1, #16]
 8005852:	e027      	b.n	80058a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d112      	bne.n	8005880 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800585a:	4b27      	ldr	r3, [pc, #156]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005862:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6892      	ldr	r2, [r2, #8]
 800586a:	0211      	lsls	r1, r2, #8
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6912      	ldr	r2, [r2, #16]
 8005870:	0852      	lsrs	r2, r2, #1
 8005872:	3a01      	subs	r2, #1
 8005874:	0552      	lsls	r2, r2, #21
 8005876:	430a      	orrs	r2, r1
 8005878:	491f      	ldr	r1, [pc, #124]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800587a:	4313      	orrs	r3, r2
 800587c:	610b      	str	r3, [r1, #16]
 800587e:	e011      	b.n	80058a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005880:	4b1d      	ldr	r3, [pc, #116]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005888:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6892      	ldr	r2, [r2, #8]
 8005890:	0211      	lsls	r1, r2, #8
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6952      	ldr	r2, [r2, #20]
 8005896:	0852      	lsrs	r2, r2, #1
 8005898:	3a01      	subs	r2, #1
 800589a:	0652      	lsls	r2, r2, #25
 800589c:	430a      	orrs	r2, r1
 800589e:	4916      	ldr	r1, [pc, #88]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058a4:	4b14      	ldr	r3, [pc, #80]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a13      	ldr	r2, [pc, #76]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b0:	f7fc ffde 	bl	8002870 <HAL_GetTick>
 80058b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058b6:	e009      	b.n	80058cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058b8:	f7fc ffda 	bl	8002870 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d902      	bls.n	80058cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	73fb      	strb	r3, [r7, #15]
          break;
 80058ca:	e005      	b.n	80058d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058cc:	4b0a      	ldr	r3, [pc, #40]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0ef      	beq.n	80058b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80058de:	4b06      	ldr	r3, [pc, #24]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e0:	691a      	ldr	r2, [r3, #16]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	4904      	ldr	r1, [pc, #16]	@ (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40021000 	.word	0x40021000

080058fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800590a:	4b6a      	ldr	r3, [pc, #424]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d018      	beq.n	8005948 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005916:	4b67      	ldr	r3, [pc, #412]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f003 0203 	and.w	r2, r3, #3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d10d      	bne.n	8005942 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
       ||
 800592a:	2b00      	cmp	r3, #0
 800592c:	d009      	beq.n	8005942 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800592e:	4b61      	ldr	r3, [pc, #388]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	091b      	lsrs	r3, r3, #4
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
       ||
 800593e:	429a      	cmp	r2, r3
 8005940:	d047      	beq.n	80059d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	73fb      	strb	r3, [r7, #15]
 8005946:	e044      	b.n	80059d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b03      	cmp	r3, #3
 800594e:	d018      	beq.n	8005982 <RCCEx_PLLSAI2_Config+0x86>
 8005950:	2b03      	cmp	r3, #3
 8005952:	d825      	bhi.n	80059a0 <RCCEx_PLLSAI2_Config+0xa4>
 8005954:	2b01      	cmp	r3, #1
 8005956:	d002      	beq.n	800595e <RCCEx_PLLSAI2_Config+0x62>
 8005958:	2b02      	cmp	r3, #2
 800595a:	d009      	beq.n	8005970 <RCCEx_PLLSAI2_Config+0x74>
 800595c:	e020      	b.n	80059a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800595e:	4b55      	ldr	r3, [pc, #340]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d11d      	bne.n	80059a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800596e:	e01a      	b.n	80059a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005970:	4b50      	ldr	r3, [pc, #320]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005978:	2b00      	cmp	r3, #0
 800597a:	d116      	bne.n	80059aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005980:	e013      	b.n	80059aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005982:	4b4c      	ldr	r3, [pc, #304]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10f      	bne.n	80059ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800598e:	4b49      	ldr	r3, [pc, #292]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d109      	bne.n	80059ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800599e:	e006      	b.n	80059ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	73fb      	strb	r3, [r7, #15]
      break;
 80059a4:	e004      	b.n	80059b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059a6:	bf00      	nop
 80059a8:	e002      	b.n	80059b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059aa:	bf00      	nop
 80059ac:	e000      	b.n	80059b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10d      	bne.n	80059d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059b6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6819      	ldr	r1, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	430b      	orrs	r3, r1
 80059cc:	4939      	ldr	r1, [pc, #228]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d167      	bne.n	8005aa8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80059d8:	4b36      	ldr	r3, [pc, #216]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a35      	ldr	r2, [pc, #212]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059e4:	f7fc ff44 	bl	8002870 <HAL_GetTick>
 80059e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059ea:	e009      	b.n	8005a00 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059ec:	f7fc ff40 	bl	8002870 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d902      	bls.n	8005a00 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	73fb      	strb	r3, [r7, #15]
        break;
 80059fe:	e005      	b.n	8005a0c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a00:	4b2c      	ldr	r3, [pc, #176]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1ef      	bne.n	80059ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d14a      	bne.n	8005aa8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d111      	bne.n	8005a3c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a18:	4b26      	ldr	r3, [pc, #152]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005a20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6892      	ldr	r2, [r2, #8]
 8005a28:	0211      	lsls	r1, r2, #8
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	68d2      	ldr	r2, [r2, #12]
 8005a2e:	0912      	lsrs	r2, r2, #4
 8005a30:	0452      	lsls	r2, r2, #17
 8005a32:	430a      	orrs	r2, r1
 8005a34:	491f      	ldr	r1, [pc, #124]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	614b      	str	r3, [r1, #20]
 8005a3a:	e011      	b.n	8005a60 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005a44:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6892      	ldr	r2, [r2, #8]
 8005a4c:	0211      	lsls	r1, r2, #8
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6912      	ldr	r2, [r2, #16]
 8005a52:	0852      	lsrs	r2, r2, #1
 8005a54:	3a01      	subs	r2, #1
 8005a56:	0652      	lsls	r2, r2, #25
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	4916      	ldr	r1, [pc, #88]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a60:	4b14      	ldr	r3, [pc, #80]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a13      	ldr	r2, [pc, #76]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6c:	f7fc ff00 	bl	8002870 <HAL_GetTick>
 8005a70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a72:	e009      	b.n	8005a88 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a74:	f7fc fefc 	bl	8002870 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d902      	bls.n	8005a88 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	73fb      	strb	r3, [r7, #15]
          break;
 8005a86:	e005      	b.n	8005a94 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a88:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0ef      	beq.n	8005a74 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a9a:	4b06      	ldr	r3, [pc, #24]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a9c:	695a      	ldr	r2, [r3, #20]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	4904      	ldr	r1, [pc, #16]	@ (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	40021000 	.word	0x40021000

08005ab8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e095      	b.n	8005bf6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d108      	bne.n	8005ae4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ada:	d009      	beq.n	8005af0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	61da      	str	r2, [r3, #28]
 8005ae2:	e005      	b.n	8005af0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fc f82e 	bl	8001b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b30:	d902      	bls.n	8005b38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b32:	2300      	movs	r3, #0
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	e002      	b.n	8005b3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005b46:	d007      	beq.n	8005b58 <HAL_SPI_Init+0xa0>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b50:	d002      	beq.n	8005b58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b9a:	ea42 0103 	orr.w	r1, r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	0c1b      	lsrs	r3, r3, #16
 8005bb4:	f003 0204 	and.w	r2, r3, #4
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005bd4:	ea42 0103 	orr.w	r1, r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d002      	beq.n	8005c24 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8005c1e:	2302      	movs	r3, #2
 8005c20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c22:	e092      	b.n	8005d4a <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d110      	bne.n	8005c4e <HAL_SPI_Receive_IT+0x4e>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c34:	d10b      	bne.n	8005c4e <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2204      	movs	r2, #4
 8005c3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8005c3e:	88fb      	ldrh	r3, [r7, #6]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 f889 	bl	8005d5c <HAL_SPI_TransmitReceive_IT>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	e07e      	b.n	8005d4c <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <HAL_SPI_Receive_IT+0x5a>
 8005c54:	88fb      	ldrh	r3, [r7, #6]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d102      	bne.n	8005c60 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c5e:	e074      	b.n	8005d4a <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d101      	bne.n	8005c6e <HAL_SPI_Receive_IT+0x6e>
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	e06e      	b.n	8005d4c <HAL_SPI_Receive_IT+0x14c>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2204      	movs	r2, #4
 8005c7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	88fa      	ldrh	r2, [r7, #6]
 8005c8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	88fa      	ldrh	r2, [r7, #6]
 8005c96:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cba:	d90b      	bls.n	8005cd4 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005cca:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4a21      	ldr	r2, [pc, #132]	@ (8005d54 <HAL_SPI_Receive_IT+0x154>)
 8005cd0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005cd2:	e00a      	b.n	8005cea <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ce2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8005d58 <HAL_SPI_Receive_IT+0x158>)
 8005ce8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cf2:	d10f      	bne.n	8005d14 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d12:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d1e:	2b40      	cmp	r3, #64	@ 0x40
 8005d20:	d007      	beq.n	8005d32 <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d30:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8005d48:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	08006147 	.word	0x08006147
 8005d58:	080060f7 	.word	0x080060f7

08005d5c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005d74:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d7c:	7dbb      	ldrb	r3, [r7, #22]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d00d      	beq.n	8005d9e <HAL_SPI_TransmitReceive_IT+0x42>
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d88:	d106      	bne.n	8005d98 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d102      	bne.n	8005d98 <HAL_SPI_TransmitReceive_IT+0x3c>
 8005d92:	7dbb      	ldrb	r3, [r7, #22]
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d002      	beq.n	8005d9e <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8005d98:	2302      	movs	r3, #2
 8005d9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d9c:	e07d      	b.n	8005e9a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <HAL_SPI_TransmitReceive_IT+0x54>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <HAL_SPI_TransmitReceive_IT+0x54>
 8005daa:	887b      	ldrh	r3, [r7, #2]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d102      	bne.n	8005db6 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005db4:	e071      	b.n	8005e9a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_SPI_TransmitReceive_IT+0x68>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e06b      	b.n	8005e9c <HAL_SPI_TransmitReceive_IT+0x140>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d003      	beq.n	8005de0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2205      	movs	r2, #5
 8005ddc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	887a      	ldrh	r2, [r7, #2]
 8005df0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	887a      	ldrh	r2, [r7, #2]
 8005df6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	887a      	ldrh	r2, [r7, #2]
 8005e02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	887a      	ldrh	r2, [r7, #2]
 8005e0a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e16:	d906      	bls.n	8005e26 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4a23      	ldr	r2, [pc, #140]	@ (8005ea8 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8005e1c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4a22      	ldr	r2, [pc, #136]	@ (8005eac <HAL_SPI_TransmitReceive_IT+0x150>)
 8005e22:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e24:	e005      	b.n	8005e32 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4a21      	ldr	r2, [pc, #132]	@ (8005eb0 <HAL_SPI_TransmitReceive_IT+0x154>)
 8005e2a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4a21      	ldr	r2, [pc, #132]	@ (8005eb4 <HAL_SPI_TransmitReceive_IT+0x158>)
 8005e30:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e3a:	d802      	bhi.n	8005e42 <HAL_SPI_TransmitReceive_IT+0xe6>
 8005e3c:	887b      	ldrh	r3, [r7, #2]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d908      	bls.n	8005e54 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e50:	605a      	str	r2, [r3, #4]
 8005e52:	e007      	b.n	8005e64 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e62:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e6e:	2b40      	cmp	r3, #64	@ 0x40
 8005e70:	d007      	beq.n	8005e82 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e80:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8005e98:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8005e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	371c      	adds	r7, #28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	08006031 	.word	0x08006031
 8005eac:	08006097 	.word	0x08006097
 8005eb0:	08005ee1 	.word	0x08005ee1
 8005eb4:	08005f9f 	.word	0x08005f9f

08005eb8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d923      	bls.n	8005f3c <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efe:	b292      	uxth	r2, r2
 8005f00:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f06:	1c9a      	adds	r2, r3, #2
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	3b02      	subs	r3, #2
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d11f      	bne.n	8005f6a <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f38:	605a      	str	r2, [r3, #4]
 8005f3a:	e016      	b.n	8005f6a <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f103 020c 	add.w	r2, r3, #12
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f48:	7812      	ldrb	r2, [r2, #0]
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	3b01      	subs	r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10f      	bne.n	8005f96 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f84:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d102      	bne.n	8005f96 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fabb 	bl	800650c <SPI_CloseRxTx_ISR>
    }
  }
}
 8005f96:	bf00      	nop
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b082      	sub	sp, #8
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d912      	bls.n	8005fd6 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb4:	881a      	ldrh	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc0:	1c9a      	adds	r2, r3, #2
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	3b02      	subs	r3, #2
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005fd4:	e012      	b.n	8005ffc <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	330c      	adds	r3, #12
 8005fe0:	7812      	ldrb	r2, [r2, #0]
 8005fe2:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d110      	bne.n	8006028 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006014:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d102      	bne.n	8006028 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fa72 	bl	800650c <SPI_CloseRxTx_ISR>
    }
  }
}
 8006028:	bf00      	nop
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006042:	b292      	uxth	r2, r2
 8006044:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604a:	1c9a      	adds	r2, r3, #2
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006056:	b29b      	uxth	r3, r3
 8006058:	3b01      	subs	r3, #1
 800605a:	b29a      	uxth	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10f      	bne.n	800608e <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800607c:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d102      	bne.n	800608e <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fa3f 	bl	800650c <SPI_CloseRxTx_ISR>
    }
  }
}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b082      	sub	sp, #8
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a2:	881a      	ldrh	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ae:	1c9a      	adds	r2, r3, #2
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d110      	bne.n	80060ee <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060da:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d102      	bne.n	80060ee <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fa0f 	bl	800650c <SPI_CloseRxTx_ISR>
    }
  }
}
 80060ee:	bf00      	nop
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b082      	sub	sp, #8
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f103 020c 	add.w	r2, r3, #12
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610a:	7812      	ldrb	r2, [r2, #0]
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006120:	b29b      	uxth	r3, r3
 8006122:	3b01      	subs	r3, #1
 8006124:	b29a      	uxth	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006132:	b29b      	uxth	r3, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fa29 	bl	8006590 <SPI_CloseRx_ISR>
  }
}
 800613e:	bf00      	nop
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b082      	sub	sp, #8
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68da      	ldr	r2, [r3, #12]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006158:	b292      	uxth	r2, r2
 800615a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006160:	1c9a      	adds	r2, r3, #2
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800616c:	b29b      	uxth	r3, r3
 800616e:	3b01      	subs	r3, #1
 8006170:	b29a      	uxth	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800617e:	b29b      	uxth	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d102      	bne.n	800618a <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fa03 	bl	8006590 <SPI_CloseRx_ISR>
  }
}
 800618a:	bf00      	nop
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
	...

08006194 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	603b      	str	r3, [r7, #0]
 80061a0:	4613      	mov	r3, r2
 80061a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061a4:	f7fc fb64 	bl	8002870 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ac:	1a9b      	subs	r3, r3, r2
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	4413      	add	r3, r2
 80061b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061b4:	f7fc fb5c 	bl	8002870 <HAL_GetTick>
 80061b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061ba:	4b39      	ldr	r3, [pc, #228]	@ (80062a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	015b      	lsls	r3, r3, #5
 80061c0:	0d1b      	lsrs	r3, r3, #20
 80061c2:	69fa      	ldr	r2, [r7, #28]
 80061c4:	fb02 f303 	mul.w	r3, r2, r3
 80061c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ca:	e054      	b.n	8006276 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d2:	d050      	beq.n	8006276 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061d4:	f7fc fb4c 	bl	8002870 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d902      	bls.n	80061ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d13d      	bne.n	8006266 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80061f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006202:	d111      	bne.n	8006228 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800620c:	d004      	beq.n	8006218 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006216:	d107      	bne.n	8006228 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006230:	d10f      	bne.n	8006252 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e017      	b.n	8006296 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	3b01      	subs	r3, #1
 8006274:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4013      	ands	r3, r2
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	429a      	cmp	r2, r3
 8006284:	bf0c      	ite	eq
 8006286:	2301      	moveq	r3, #1
 8006288:	2300      	movne	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	79fb      	ldrb	r3, [r7, #7]
 8006290:	429a      	cmp	r2, r3
 8006292:	d19b      	bne.n	80061cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3720      	adds	r7, #32
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	20000008 	.word	0x20000008

080062a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08a      	sub	sp, #40	@ 0x28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80062b6:	f7fc fadb 	bl	8002870 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062be:	1a9b      	subs	r3, r3, r2
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	4413      	add	r3, r2
 80062c4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80062c6:	f7fc fad3 	bl	8002870 <HAL_GetTick>
 80062ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	330c      	adds	r3, #12
 80062d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80062d4:	4b3d      	ldr	r3, [pc, #244]	@ (80063cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	4613      	mov	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	00da      	lsls	r2, r3, #3
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	0d1b      	lsrs	r3, r3, #20
 80062e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80062ec:	e060      	b.n	80063b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80062f4:	d107      	bne.n	8006306 <SPI_WaitFifoStateUntilTimeout+0x62>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006304:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630c:	d050      	beq.n	80063b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800630e:	f7fc faaf 	bl	8002870 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800631a:	429a      	cmp	r2, r3
 800631c:	d902      	bls.n	8006324 <SPI_WaitFifoStateUntilTimeout+0x80>
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	2b00      	cmp	r3, #0
 8006322:	d13d      	bne.n	80063a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006332:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800633c:	d111      	bne.n	8006362 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006346:	d004      	beq.n	8006352 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006350:	d107      	bne.n	8006362 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006360:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800636a:	d10f      	bne.n	800638c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800638a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e010      	b.n	80063c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	3b01      	subs	r3, #1
 80063ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	4013      	ands	r3, r2
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d196      	bne.n	80062ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3728      	adds	r7, #40	@ 0x28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20000008 	.word	0x20000008

080063d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063e4:	d111      	bne.n	800640a <SPI_EndRxTransaction+0x3a>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ee:	d004      	beq.n	80063fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063f8:	d107      	bne.n	800640a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006408:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2200      	movs	r2, #0
 8006412:	2180      	movs	r1, #128	@ 0x80
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f7ff febd 	bl	8006194 <SPI_WaitFlagStateUntilTimeout>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d007      	beq.n	8006430 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006424:	f043 0220 	orr.w	r2, r3, #32
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e023      	b.n	8006478 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006438:	d11d      	bne.n	8006476 <SPI_EndRxTransaction+0xa6>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006442:	d004      	beq.n	800644e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800644c:	d113      	bne.n	8006476 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2200      	movs	r2, #0
 8006456:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f7ff ff22 	bl	80062a4 <SPI_WaitFifoStateUntilTimeout>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d007      	beq.n	8006476 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800646a:	f043 0220 	orr.w	r2, r3, #32
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e000      	b.n	8006478 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af02      	add	r7, sp, #8
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2200      	movs	r2, #0
 8006494:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f7ff ff03 	bl	80062a4 <SPI_WaitFifoStateUntilTimeout>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d007      	beq.n	80064b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064a8:	f043 0220 	orr.w	r2, r3, #32
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e027      	b.n	8006504 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2200      	movs	r2, #0
 80064bc:	2180      	movs	r1, #128	@ 0x80
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f7ff fe68 	bl	8006194 <SPI_WaitFlagStateUntilTimeout>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d007      	beq.n	80064da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064ce:	f043 0220 	orr.w	r2, r3, #32
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e014      	b.n	8006504 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f7ff fedc 	bl	80062a4 <SPI_WaitFifoStateUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d007      	beq.n	8006502 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064f6:	f043 0220 	orr.w	r2, r3, #32
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e000      	b.n	8006504 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006514:	f7fc f9ac 	bl	8002870 <HAL_GetTick>
 8006518:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0220 	bic.w	r2, r2, #32
 8006528:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	2164      	movs	r1, #100	@ 0x64
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7ff ffa6 	bl	8006480 <SPI_EndRxTxTransaction>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d005      	beq.n	8006546 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800653e:	f043 0220 	orr.w	r2, r3, #32
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800654a:	2b00      	cmp	r3, #0
 800654c:	d115      	bne.n	800657a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b04      	cmp	r3, #4
 8006558:	d107      	bne.n	800656a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fb f91c 	bl	80017a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006568:	e00e      	b.n	8006588 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7ff fca0 	bl	8005eb8 <HAL_SPI_TxRxCpltCallback>
}
 8006578:	e006      	b.n	8006588 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7ff fca2 	bl	8005ecc <HAL_SPI_ErrorCallback>
}
 8006588:	bf00      	nop
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80065a6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80065a8:	f7fc f962 	bl	8002870 <HAL_GetTick>
 80065ac:	4603      	mov	r3, r0
 80065ae:	461a      	mov	r2, r3
 80065b0:	2164      	movs	r1, #100	@ 0x64
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff ff0c 	bl	80063d0 <SPI_EndRxTransaction>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065c2:	f043 0220 	orr.w	r2, r3, #32
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d103      	bne.n	80065e2 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7fb f8e0 	bl	80017a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80065e0:	e002      	b.n	80065e8 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff fc72 	bl	8005ecc <HAL_SPI_ErrorCallback>
}
 80065e8:	bf00      	nop
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e049      	b.n	8006696 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d106      	bne.n	800661c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fb fc66 	bl	8001ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3304      	adds	r3, #4
 800662c:	4619      	mov	r1, r3
 800662e:	4610      	mov	r0, r2
 8006630:	f000 fe58 	bl	80072e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d001      	beq.n	80066b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e04f      	b.n	8006758 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0201 	orr.w	r2, r2, #1
 80066ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a23      	ldr	r2, [pc, #140]	@ (8006764 <HAL_TIM_Base_Start_IT+0xc4>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d01d      	beq.n	8006716 <HAL_TIM_Base_Start_IT+0x76>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066e2:	d018      	beq.n	8006716 <HAL_TIM_Base_Start_IT+0x76>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a1f      	ldr	r2, [pc, #124]	@ (8006768 <HAL_TIM_Base_Start_IT+0xc8>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d013      	beq.n	8006716 <HAL_TIM_Base_Start_IT+0x76>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a1e      	ldr	r2, [pc, #120]	@ (800676c <HAL_TIM_Base_Start_IT+0xcc>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d00e      	beq.n	8006716 <HAL_TIM_Base_Start_IT+0x76>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006770 <HAL_TIM_Base_Start_IT+0xd0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d009      	beq.n	8006716 <HAL_TIM_Base_Start_IT+0x76>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a1b      	ldr	r2, [pc, #108]	@ (8006774 <HAL_TIM_Base_Start_IT+0xd4>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d004      	beq.n	8006716 <HAL_TIM_Base_Start_IT+0x76>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a19      	ldr	r2, [pc, #100]	@ (8006778 <HAL_TIM_Base_Start_IT+0xd8>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d115      	bne.n	8006742 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	4b17      	ldr	r3, [pc, #92]	@ (800677c <HAL_TIM_Base_Start_IT+0xdc>)
 800671e:	4013      	ands	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2b06      	cmp	r3, #6
 8006726:	d015      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0xb4>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800672e:	d011      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0201 	orr.w	r2, r2, #1
 800673e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006740:	e008      	b.n	8006754 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f042 0201 	orr.w	r2, r2, #1
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	e000      	b.n	8006756 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006754:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	40012c00 	.word	0x40012c00
 8006768:	40000400 	.word	0x40000400
 800676c:	40000800 	.word	0x40000800
 8006770:	40000c00 	.word	0x40000c00
 8006774:	40013400 	.word	0x40013400
 8006778:	40014000 	.word	0x40014000
 800677c:	00010007 	.word	0x00010007

08006780 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e049      	b.n	8006826 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fb fa42 	bl	8001c30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3304      	adds	r3, #4
 80067bc:	4619      	mov	r1, r3
 80067be:	4610      	mov	r0, r2
 80067c0:	f000 fd90 	bl	80072e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b082      	sub	sp, #8
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e049      	b.n	80068d4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	d106      	bne.n	800685a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7fb fac9 	bl	8001dec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2202      	movs	r2, #2
 800685e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	3304      	adds	r3, #4
 800686a:	4619      	mov	r1, r3
 800686c:	4610      	mov	r0, r2
 800686e:	f000 fd39 	bl	80072e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d104      	bne.n	80068fa <HAL_TIM_IC_Start_IT+0x1e>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	e023      	b.n	8006942 <HAL_TIM_IC_Start_IT+0x66>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d104      	bne.n	800690a <HAL_TIM_IC_Start_IT+0x2e>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006906:	b2db      	uxtb	r3, r3
 8006908:	e01b      	b.n	8006942 <HAL_TIM_IC_Start_IT+0x66>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b08      	cmp	r3, #8
 800690e:	d104      	bne.n	800691a <HAL_TIM_IC_Start_IT+0x3e>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006916:	b2db      	uxtb	r3, r3
 8006918:	e013      	b.n	8006942 <HAL_TIM_IC_Start_IT+0x66>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b0c      	cmp	r3, #12
 800691e:	d104      	bne.n	800692a <HAL_TIM_IC_Start_IT+0x4e>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006926:	b2db      	uxtb	r3, r3
 8006928:	e00b      	b.n	8006942 <HAL_TIM_IC_Start_IT+0x66>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b10      	cmp	r3, #16
 800692e:	d104      	bne.n	800693a <HAL_TIM_IC_Start_IT+0x5e>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006936:	b2db      	uxtb	r3, r3
 8006938:	e003      	b.n	8006942 <HAL_TIM_IC_Start_IT+0x66>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006940:	b2db      	uxtb	r3, r3
 8006942:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d104      	bne.n	8006954 <HAL_TIM_IC_Start_IT+0x78>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006950:	b2db      	uxtb	r3, r3
 8006952:	e013      	b.n	800697c <HAL_TIM_IC_Start_IT+0xa0>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2b04      	cmp	r3, #4
 8006958:	d104      	bne.n	8006964 <HAL_TIM_IC_Start_IT+0x88>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006960:	b2db      	uxtb	r3, r3
 8006962:	e00b      	b.n	800697c <HAL_TIM_IC_Start_IT+0xa0>
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	2b08      	cmp	r3, #8
 8006968:	d104      	bne.n	8006974 <HAL_TIM_IC_Start_IT+0x98>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006970:	b2db      	uxtb	r3, r3
 8006972:	e003      	b.n	800697c <HAL_TIM_IC_Start_IT+0xa0>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800697a:	b2db      	uxtb	r3, r3
 800697c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800697e:	7bbb      	ldrb	r3, [r7, #14]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d102      	bne.n	800698a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006984:	7b7b      	ldrb	r3, [r7, #13]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d001      	beq.n	800698e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e0dd      	b.n	8006b4a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d104      	bne.n	800699e <HAL_TIM_IC_Start_IT+0xc2>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800699c:	e023      	b.n	80069e6 <HAL_TIM_IC_Start_IT+0x10a>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b04      	cmp	r3, #4
 80069a2:	d104      	bne.n	80069ae <HAL_TIM_IC_Start_IT+0xd2>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069ac:	e01b      	b.n	80069e6 <HAL_TIM_IC_Start_IT+0x10a>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d104      	bne.n	80069be <HAL_TIM_IC_Start_IT+0xe2>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069bc:	e013      	b.n	80069e6 <HAL_TIM_IC_Start_IT+0x10a>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b0c      	cmp	r3, #12
 80069c2:	d104      	bne.n	80069ce <HAL_TIM_IC_Start_IT+0xf2>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069cc:	e00b      	b.n	80069e6 <HAL_TIM_IC_Start_IT+0x10a>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b10      	cmp	r3, #16
 80069d2:	d104      	bne.n	80069de <HAL_TIM_IC_Start_IT+0x102>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069dc:	e003      	b.n	80069e6 <HAL_TIM_IC_Start_IT+0x10a>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2202      	movs	r2, #2
 80069e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d104      	bne.n	80069f6 <HAL_TIM_IC_Start_IT+0x11a>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069f4:	e013      	b.n	8006a1e <HAL_TIM_IC_Start_IT+0x142>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	d104      	bne.n	8006a06 <HAL_TIM_IC_Start_IT+0x12a>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a04:	e00b      	b.n	8006a1e <HAL_TIM_IC_Start_IT+0x142>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d104      	bne.n	8006a16 <HAL_TIM_IC_Start_IT+0x13a>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a14:	e003      	b.n	8006a1e <HAL_TIM_IC_Start_IT+0x142>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2202      	movs	r2, #2
 8006a1a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b0c      	cmp	r3, #12
 8006a22:	d841      	bhi.n	8006aa8 <HAL_TIM_IC_Start_IT+0x1cc>
 8006a24:	a201      	add	r2, pc, #4	@ (adr r2, 8006a2c <HAL_TIM_IC_Start_IT+0x150>)
 8006a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2a:	bf00      	nop
 8006a2c:	08006a61 	.word	0x08006a61
 8006a30:	08006aa9 	.word	0x08006aa9
 8006a34:	08006aa9 	.word	0x08006aa9
 8006a38:	08006aa9 	.word	0x08006aa9
 8006a3c:	08006a73 	.word	0x08006a73
 8006a40:	08006aa9 	.word	0x08006aa9
 8006a44:	08006aa9 	.word	0x08006aa9
 8006a48:	08006aa9 	.word	0x08006aa9
 8006a4c:	08006a85 	.word	0x08006a85
 8006a50:	08006aa9 	.word	0x08006aa9
 8006a54:	08006aa9 	.word	0x08006aa9
 8006a58:	08006aa9 	.word	0x08006aa9
 8006a5c:	08006a97 	.word	0x08006a97
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0202 	orr.w	r2, r2, #2
 8006a6e:	60da      	str	r2, [r3, #12]
      break;
 8006a70:	e01d      	b.n	8006aae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f042 0204 	orr.w	r2, r2, #4
 8006a80:	60da      	str	r2, [r3, #12]
      break;
 8006a82:	e014      	b.n	8006aae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0208 	orr.w	r2, r2, #8
 8006a92:	60da      	str	r2, [r3, #12]
      break;
 8006a94:	e00b      	b.n	8006aae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f042 0210 	orr.w	r2, r2, #16
 8006aa4:	60da      	str	r2, [r3, #12]
      break;
 8006aa6:	e002      	b.n	8006aae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8006aac:	bf00      	nop
  }

  if (status == HAL_OK)
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d149      	bne.n	8006b48 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 f8a5 	bl	8007c0c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a23      	ldr	r2, [pc, #140]	@ (8006b54 <HAL_TIM_IC_Start_IT+0x278>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d01d      	beq.n	8006b08 <HAL_TIM_IC_Start_IT+0x22c>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ad4:	d018      	beq.n	8006b08 <HAL_TIM_IC_Start_IT+0x22c>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a1f      	ldr	r2, [pc, #124]	@ (8006b58 <HAL_TIM_IC_Start_IT+0x27c>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d013      	beq.n	8006b08 <HAL_TIM_IC_Start_IT+0x22c>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8006b5c <HAL_TIM_IC_Start_IT+0x280>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00e      	beq.n	8006b08 <HAL_TIM_IC_Start_IT+0x22c>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a1c      	ldr	r2, [pc, #112]	@ (8006b60 <HAL_TIM_IC_Start_IT+0x284>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d009      	beq.n	8006b08 <HAL_TIM_IC_Start_IT+0x22c>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a1a      	ldr	r2, [pc, #104]	@ (8006b64 <HAL_TIM_IC_Start_IT+0x288>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d004      	beq.n	8006b08 <HAL_TIM_IC_Start_IT+0x22c>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a19      	ldr	r2, [pc, #100]	@ (8006b68 <HAL_TIM_IC_Start_IT+0x28c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d115      	bne.n	8006b34 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689a      	ldr	r2, [r3, #8]
 8006b0e:	4b17      	ldr	r3, [pc, #92]	@ (8006b6c <HAL_TIM_IC_Start_IT+0x290>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	2b06      	cmp	r3, #6
 8006b18:	d015      	beq.n	8006b46 <HAL_TIM_IC_Start_IT+0x26a>
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b20:	d011      	beq.n	8006b46 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f042 0201 	orr.w	r2, r2, #1
 8006b30:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b32:	e008      	b.n	8006b46 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f042 0201 	orr.w	r2, r2, #1
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	e000      	b.n	8006b48 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b46:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40012c00 	.word	0x40012c00
 8006b58:	40000400 	.word	0x40000400
 8006b5c:	40000800 	.word	0x40000800
 8006b60:	40000c00 	.word	0x40000c00
 8006b64:	40013400 	.word	0x40013400
 8006b68:	40014000 	.word	0x40014000
 8006b6c:	00010007 	.word	0x00010007

08006b70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e097      	b.n	8006cb4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d106      	bne.n	8006b9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7fb f883 	bl	8001ca4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6812      	ldr	r2, [r2, #0]
 8006bb0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006bb4:	f023 0307 	bic.w	r3, r3, #7
 8006bb8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	f000 fb8d 	bl	80072e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bf2:	f023 0303 	bic.w	r3, r3, #3
 8006bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	021b      	lsls	r3, r3, #8
 8006c02:	4313      	orrs	r3, r2
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006c10:	f023 030c 	bic.w	r3, r3, #12
 8006c14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	021b      	lsls	r3, r3, #8
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	011a      	lsls	r2, r3, #4
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	031b      	lsls	r3, r3, #12
 8006c40:	4313      	orrs	r3, r2
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006c4e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006c56:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	011b      	lsls	r3, r3, #4
 8006c62:	4313      	orrs	r3, r2
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d020      	beq.n	8006d20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01b      	beq.n	8006d20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f06f 0202 	mvn.w	r2, #2
 8006cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	f003 0303 	and.w	r3, r3, #3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7fa fd60 	bl	80017cc <HAL_TIM_IC_CaptureCallback>
 8006d0c:	e005      	b.n	8006d1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 faca 	bl	80072a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fad1 	bl	80072bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f003 0304 	and.w	r3, r3, #4
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d020      	beq.n	8006d6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d01b      	beq.n	8006d6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f06f 0204 	mvn.w	r2, #4
 8006d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2202      	movs	r2, #2
 8006d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fa fd3a 	bl	80017cc <HAL_TIM_IC_CaptureCallback>
 8006d58:	e005      	b.n	8006d66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 faa4 	bl	80072a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 faab 	bl	80072bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f003 0308 	and.w	r3, r3, #8
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d020      	beq.n	8006db8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f003 0308 	and.w	r3, r3, #8
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d01b      	beq.n	8006db8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f06f 0208 	mvn.w	r2, #8
 8006d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2204      	movs	r2, #4
 8006d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fa fd14 	bl	80017cc <HAL_TIM_IC_CaptureCallback>
 8006da4:	e005      	b.n	8006db2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fa7e 	bl	80072a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fa85 	bl	80072bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f003 0310 	and.w	r3, r3, #16
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d020      	beq.n	8006e04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f003 0310 	and.w	r3, r3, #16
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01b      	beq.n	8006e04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f06f 0210 	mvn.w	r2, #16
 8006dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2208      	movs	r2, #8
 8006dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7fa fcee 	bl	80017cc <HAL_TIM_IC_CaptureCallback>
 8006df0:	e005      	b.n	8006dfe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fa58 	bl	80072a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fa5f 	bl	80072bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00c      	beq.n	8006e28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d007      	beq.n	8006e28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f06f 0201 	mvn.w	r2, #1
 8006e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7fa fb5e 	bl	80014e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00c      	beq.n	8006e4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d007      	beq.n	8006e4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f001 f816 	bl	8007e78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00c      	beq.n	8006e70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d007      	beq.n	8006e70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 f80e 	bl	8007e8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00c      	beq.n	8006e94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d007      	beq.n	8006e94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fa1e 	bl	80072d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f003 0320 	and.w	r3, r3, #32
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00c      	beq.n	8006eb8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f003 0320 	and.w	r3, r3, #32
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d007      	beq.n	8006eb8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f06f 0220 	mvn.w	r2, #32
 8006eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 ffd6 	bl	8007e64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006eb8:	bf00      	nop
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d101      	bne.n	8006ede <HAL_TIM_IC_ConfigChannel+0x1e>
 8006eda:	2302      	movs	r3, #2
 8006edc:	e088      	b.n	8006ff0 <HAL_TIM_IC_ConfigChannel+0x130>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d11b      	bne.n	8006f24 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006efc:	f000 fd62 	bl	80079c4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	699a      	ldr	r2, [r3, #24]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 020c 	bic.w	r2, r2, #12
 8006f0e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6999      	ldr	r1, [r3, #24]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	689a      	ldr	r2, [r3, #8]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	619a      	str	r2, [r3, #24]
 8006f22:	e060      	b.n	8006fe6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d11c      	bne.n	8006f64 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006f3a:	f000 fdb1 	bl	8007aa0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	699a      	ldr	r2, [r3, #24]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006f4c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6999      	ldr	r1, [r3, #24]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	021a      	lsls	r2, r3, #8
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	619a      	str	r2, [r3, #24]
 8006f62:	e040      	b.n	8006fe6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b08      	cmp	r3, #8
 8006f68:	d11b      	bne.n	8006fa2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006f7a:	f000 fdce 	bl	8007b1a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69da      	ldr	r2, [r3, #28]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 020c 	bic.w	r2, r2, #12
 8006f8c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69d9      	ldr	r1, [r3, #28]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	61da      	str	r2, [r3, #28]
 8006fa0:	e021      	b.n	8006fe6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b0c      	cmp	r3, #12
 8006fa6:	d11c      	bne.n	8006fe2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006fb8:	f000 fdeb 	bl	8007b92 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	69da      	ldr	r2, [r3, #28]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006fca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69d9      	ldr	r1, [r3, #28]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	021a      	lsls	r2, r3, #8
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	61da      	str	r2, [r3, #28]
 8006fe0:	e001      	b.n	8006fe6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007004:	2300      	movs	r3, #0
 8007006:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800700e:	2b01      	cmp	r3, #1
 8007010:	d101      	bne.n	8007016 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007012:	2302      	movs	r3, #2
 8007014:	e0ff      	b.n	8007216 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2b14      	cmp	r3, #20
 8007022:	f200 80f0 	bhi.w	8007206 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007026:	a201      	add	r2, pc, #4	@ (adr r2, 800702c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702c:	08007081 	.word	0x08007081
 8007030:	08007207 	.word	0x08007207
 8007034:	08007207 	.word	0x08007207
 8007038:	08007207 	.word	0x08007207
 800703c:	080070c1 	.word	0x080070c1
 8007040:	08007207 	.word	0x08007207
 8007044:	08007207 	.word	0x08007207
 8007048:	08007207 	.word	0x08007207
 800704c:	08007103 	.word	0x08007103
 8007050:	08007207 	.word	0x08007207
 8007054:	08007207 	.word	0x08007207
 8007058:	08007207 	.word	0x08007207
 800705c:	08007143 	.word	0x08007143
 8007060:	08007207 	.word	0x08007207
 8007064:	08007207 	.word	0x08007207
 8007068:	08007207 	.word	0x08007207
 800706c:	08007185 	.word	0x08007185
 8007070:	08007207 	.word	0x08007207
 8007074:	08007207 	.word	0x08007207
 8007078:	08007207 	.word	0x08007207
 800707c:	080071c5 	.word	0x080071c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68b9      	ldr	r1, [r7, #8]
 8007086:	4618      	mov	r0, r3
 8007088:	f000 f9c6 	bl	8007418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	699a      	ldr	r2, [r3, #24]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0208 	orr.w	r2, r2, #8
 800709a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	699a      	ldr	r2, [r3, #24]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0204 	bic.w	r2, r2, #4
 80070aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6999      	ldr	r1, [r3, #24]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	691a      	ldr	r2, [r3, #16]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	619a      	str	r2, [r3, #24]
      break;
 80070be:	e0a5      	b.n	800720c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68b9      	ldr	r1, [r7, #8]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 fa36 	bl	8007538 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699a      	ldr	r2, [r3, #24]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	699a      	ldr	r2, [r3, #24]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6999      	ldr	r1, [r3, #24]
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	021a      	lsls	r2, r3, #8
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	619a      	str	r2, [r3, #24]
      break;
 8007100:	e084      	b.n	800720c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68b9      	ldr	r1, [r7, #8]
 8007108:	4618      	mov	r0, r3
 800710a:	f000 fa9f 	bl	800764c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	69da      	ldr	r2, [r3, #28]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f042 0208 	orr.w	r2, r2, #8
 800711c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	69da      	ldr	r2, [r3, #28]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 0204 	bic.w	r2, r2, #4
 800712c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69d9      	ldr	r1, [r3, #28]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	691a      	ldr	r2, [r3, #16]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	61da      	str	r2, [r3, #28]
      break;
 8007140:	e064      	b.n	800720c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68b9      	ldr	r1, [r7, #8]
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fb07 	bl	800775c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	69da      	ldr	r2, [r3, #28]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800715c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	69da      	ldr	r2, [r3, #28]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800716c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69d9      	ldr	r1, [r3, #28]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	021a      	lsls	r2, r3, #8
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	61da      	str	r2, [r3, #28]
      break;
 8007182:	e043      	b.n	800720c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68b9      	ldr	r1, [r7, #8]
 800718a:	4618      	mov	r0, r3
 800718c:	f000 fb50 	bl	8007830 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f042 0208 	orr.w	r2, r2, #8
 800719e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0204 	bic.w	r2, r2, #4
 80071ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	691a      	ldr	r2, [r3, #16]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80071c2:	e023      	b.n	800720c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68b9      	ldr	r1, [r7, #8]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fb94 	bl	80078f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	021a      	lsls	r2, r3, #8
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	430a      	orrs	r2, r1
 8007202:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007204:	e002      	b.n	800720c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	75fb      	strb	r3, [r7, #23]
      break;
 800720a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007214:	7dfb      	ldrb	r3, [r7, #23]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop

08007220 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b0c      	cmp	r3, #12
 8007232:	d831      	bhi.n	8007298 <HAL_TIM_ReadCapturedValue+0x78>
 8007234:	a201      	add	r2, pc, #4	@ (adr r2, 800723c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723a:	bf00      	nop
 800723c:	08007271 	.word	0x08007271
 8007240:	08007299 	.word	0x08007299
 8007244:	08007299 	.word	0x08007299
 8007248:	08007299 	.word	0x08007299
 800724c:	0800727b 	.word	0x0800727b
 8007250:	08007299 	.word	0x08007299
 8007254:	08007299 	.word	0x08007299
 8007258:	08007299 	.word	0x08007299
 800725c:	08007285 	.word	0x08007285
 8007260:	08007299 	.word	0x08007299
 8007264:	08007299 	.word	0x08007299
 8007268:	08007299 	.word	0x08007299
 800726c:	0800728f 	.word	0x0800728f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007276:	60fb      	str	r3, [r7, #12]

      break;
 8007278:	e00f      	b.n	800729a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007280:	60fb      	str	r3, [r7, #12]

      break;
 8007282:	e00a      	b.n	800729a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800728a:	60fb      	str	r3, [r7, #12]

      break;
 800728c:	e005      	b.n	800729a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007294:	60fb      	str	r3, [r7, #12]

      break;
 8007296:	e000      	b.n	800729a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007298:	bf00      	nop
  }

  return tmpreg;
 800729a:	68fb      	ldr	r3, [r7, #12]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a40      	ldr	r2, [pc, #256]	@ (80073f8 <TIM_Base_SetConfig+0x114>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d013      	beq.n	8007324 <TIM_Base_SetConfig+0x40>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007302:	d00f      	beq.n	8007324 <TIM_Base_SetConfig+0x40>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a3d      	ldr	r2, [pc, #244]	@ (80073fc <TIM_Base_SetConfig+0x118>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00b      	beq.n	8007324 <TIM_Base_SetConfig+0x40>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a3c      	ldr	r2, [pc, #240]	@ (8007400 <TIM_Base_SetConfig+0x11c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d007      	beq.n	8007324 <TIM_Base_SetConfig+0x40>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a3b      	ldr	r2, [pc, #236]	@ (8007404 <TIM_Base_SetConfig+0x120>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d003      	beq.n	8007324 <TIM_Base_SetConfig+0x40>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a3a      	ldr	r2, [pc, #232]	@ (8007408 <TIM_Base_SetConfig+0x124>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d108      	bne.n	8007336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800732a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	4313      	orrs	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a2f      	ldr	r2, [pc, #188]	@ (80073f8 <TIM_Base_SetConfig+0x114>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d01f      	beq.n	800737e <TIM_Base_SetConfig+0x9a>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007344:	d01b      	beq.n	800737e <TIM_Base_SetConfig+0x9a>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a2c      	ldr	r2, [pc, #176]	@ (80073fc <TIM_Base_SetConfig+0x118>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d017      	beq.n	800737e <TIM_Base_SetConfig+0x9a>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a2b      	ldr	r2, [pc, #172]	@ (8007400 <TIM_Base_SetConfig+0x11c>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d013      	beq.n	800737e <TIM_Base_SetConfig+0x9a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a2a      	ldr	r2, [pc, #168]	@ (8007404 <TIM_Base_SetConfig+0x120>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d00f      	beq.n	800737e <TIM_Base_SetConfig+0x9a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a29      	ldr	r2, [pc, #164]	@ (8007408 <TIM_Base_SetConfig+0x124>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d00b      	beq.n	800737e <TIM_Base_SetConfig+0x9a>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a28      	ldr	r2, [pc, #160]	@ (800740c <TIM_Base_SetConfig+0x128>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d007      	beq.n	800737e <TIM_Base_SetConfig+0x9a>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a27      	ldr	r2, [pc, #156]	@ (8007410 <TIM_Base_SetConfig+0x12c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d003      	beq.n	800737e <TIM_Base_SetConfig+0x9a>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a26      	ldr	r2, [pc, #152]	@ (8007414 <TIM_Base_SetConfig+0x130>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d108      	bne.n	8007390 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	4313      	orrs	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	4313      	orrs	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	689a      	ldr	r2, [r3, #8]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a10      	ldr	r2, [pc, #64]	@ (80073f8 <TIM_Base_SetConfig+0x114>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d00f      	beq.n	80073dc <TIM_Base_SetConfig+0xf8>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a12      	ldr	r2, [pc, #72]	@ (8007408 <TIM_Base_SetConfig+0x124>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d00b      	beq.n	80073dc <TIM_Base_SetConfig+0xf8>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a11      	ldr	r2, [pc, #68]	@ (800740c <TIM_Base_SetConfig+0x128>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d007      	beq.n	80073dc <TIM_Base_SetConfig+0xf8>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a10      	ldr	r2, [pc, #64]	@ (8007410 <TIM_Base_SetConfig+0x12c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d003      	beq.n	80073dc <TIM_Base_SetConfig+0xf8>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007414 <TIM_Base_SetConfig+0x130>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d103      	bne.n	80073e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	691a      	ldr	r2, [r3, #16]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	615a      	str	r2, [r3, #20]
}
 80073ea:	bf00      	nop
 80073ec:	3714      	adds	r7, #20
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	40012c00 	.word	0x40012c00
 80073fc:	40000400 	.word	0x40000400
 8007400:	40000800 	.word	0x40000800
 8007404:	40000c00 	.word	0x40000c00
 8007408:	40013400 	.word	0x40013400
 800740c:	40014000 	.word	0x40014000
 8007410:	40014400 	.word	0x40014400
 8007414:	40014800 	.word	0x40014800

08007418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	f023 0201 	bic.w	r2, r3, #1
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800744a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f023 0303 	bic.w	r3, r3, #3
 8007452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	4313      	orrs	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f023 0302 	bic.w	r3, r3, #2
 8007464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	4313      	orrs	r3, r2
 800746e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a2c      	ldr	r2, [pc, #176]	@ (8007524 <TIM_OC1_SetConfig+0x10c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d00f      	beq.n	8007498 <TIM_OC1_SetConfig+0x80>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a2b      	ldr	r2, [pc, #172]	@ (8007528 <TIM_OC1_SetConfig+0x110>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00b      	beq.n	8007498 <TIM_OC1_SetConfig+0x80>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a2a      	ldr	r2, [pc, #168]	@ (800752c <TIM_OC1_SetConfig+0x114>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d007      	beq.n	8007498 <TIM_OC1_SetConfig+0x80>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a29      	ldr	r2, [pc, #164]	@ (8007530 <TIM_OC1_SetConfig+0x118>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d003      	beq.n	8007498 <TIM_OC1_SetConfig+0x80>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a28      	ldr	r2, [pc, #160]	@ (8007534 <TIM_OC1_SetConfig+0x11c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d10c      	bne.n	80074b2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f023 0308 	bic.w	r3, r3, #8
 800749e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f023 0304 	bic.w	r3, r3, #4
 80074b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007524 <TIM_OC1_SetConfig+0x10c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00f      	beq.n	80074da <TIM_OC1_SetConfig+0xc2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a1a      	ldr	r2, [pc, #104]	@ (8007528 <TIM_OC1_SetConfig+0x110>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d00b      	beq.n	80074da <TIM_OC1_SetConfig+0xc2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a19      	ldr	r2, [pc, #100]	@ (800752c <TIM_OC1_SetConfig+0x114>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d007      	beq.n	80074da <TIM_OC1_SetConfig+0xc2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a18      	ldr	r2, [pc, #96]	@ (8007530 <TIM_OC1_SetConfig+0x118>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d003      	beq.n	80074da <TIM_OC1_SetConfig+0xc2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a17      	ldr	r2, [pc, #92]	@ (8007534 <TIM_OC1_SetConfig+0x11c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d111      	bne.n	80074fe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80074e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	621a      	str	r2, [r3, #32]
}
 8007518:	bf00      	nop
 800751a:	371c      	adds	r7, #28
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	40012c00 	.word	0x40012c00
 8007528:	40013400 	.word	0x40013400
 800752c:	40014000 	.word	0x40014000
 8007530:	40014400 	.word	0x40014400
 8007534:	40014800 	.word	0x40014800

08007538 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	f023 0210 	bic.w	r2, r3, #16
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007566:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800756a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	021b      	lsls	r3, r3, #8
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f023 0320 	bic.w	r3, r3, #32
 8007586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	011b      	lsls	r3, r3, #4
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	4313      	orrs	r3, r2
 8007592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a28      	ldr	r2, [pc, #160]	@ (8007638 <TIM_OC2_SetConfig+0x100>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d003      	beq.n	80075a4 <TIM_OC2_SetConfig+0x6c>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a27      	ldr	r2, [pc, #156]	@ (800763c <TIM_OC2_SetConfig+0x104>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d10d      	bne.n	80075c0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	011b      	lsls	r3, r3, #4
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a1d      	ldr	r2, [pc, #116]	@ (8007638 <TIM_OC2_SetConfig+0x100>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d00f      	beq.n	80075e8 <TIM_OC2_SetConfig+0xb0>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a1c      	ldr	r2, [pc, #112]	@ (800763c <TIM_OC2_SetConfig+0x104>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d00b      	beq.n	80075e8 <TIM_OC2_SetConfig+0xb0>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007640 <TIM_OC2_SetConfig+0x108>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d007      	beq.n	80075e8 <TIM_OC2_SetConfig+0xb0>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a1a      	ldr	r2, [pc, #104]	@ (8007644 <TIM_OC2_SetConfig+0x10c>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d003      	beq.n	80075e8 <TIM_OC2_SetConfig+0xb0>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a19      	ldr	r2, [pc, #100]	@ (8007648 <TIM_OC2_SetConfig+0x110>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d113      	bne.n	8007610 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80075ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80075f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	4313      	orrs	r3, r2
 8007602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	621a      	str	r2, [r3, #32]
}
 800762a:	bf00      	nop
 800762c:	371c      	adds	r7, #28
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	40012c00 	.word	0x40012c00
 800763c:	40013400 	.word	0x40013400
 8007640:	40014000 	.word	0x40014000
 8007644:	40014400 	.word	0x40014400
 8007648:	40014800 	.word	0x40014800

0800764c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a1b      	ldr	r3, [r3, #32]
 8007660:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	69db      	ldr	r3, [r3, #28]
 8007672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800767a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800767e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f023 0303 	bic.w	r3, r3, #3
 8007686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	4313      	orrs	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	021b      	lsls	r3, r3, #8
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a27      	ldr	r2, [pc, #156]	@ (8007748 <TIM_OC3_SetConfig+0xfc>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d003      	beq.n	80076b6 <TIM_OC3_SetConfig+0x6a>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a26      	ldr	r2, [pc, #152]	@ (800774c <TIM_OC3_SetConfig+0x100>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d10d      	bne.n	80076d2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	021b      	lsls	r3, r3, #8
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007748 <TIM_OC3_SetConfig+0xfc>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d00f      	beq.n	80076fa <TIM_OC3_SetConfig+0xae>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a1b      	ldr	r2, [pc, #108]	@ (800774c <TIM_OC3_SetConfig+0x100>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00b      	beq.n	80076fa <TIM_OC3_SetConfig+0xae>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a1a      	ldr	r2, [pc, #104]	@ (8007750 <TIM_OC3_SetConfig+0x104>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d007      	beq.n	80076fa <TIM_OC3_SetConfig+0xae>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a19      	ldr	r2, [pc, #100]	@ (8007754 <TIM_OC3_SetConfig+0x108>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d003      	beq.n	80076fa <TIM_OC3_SetConfig+0xae>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a18      	ldr	r2, [pc, #96]	@ (8007758 <TIM_OC3_SetConfig+0x10c>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d113      	bne.n	8007722 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	011b      	lsls	r3, r3, #4
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	4313      	orrs	r3, r2
 8007714:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	011b      	lsls	r3, r3, #4
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	4313      	orrs	r3, r2
 8007720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	621a      	str	r2, [r3, #32]
}
 800773c:	bf00      	nop
 800773e:	371c      	adds	r7, #28
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	40012c00 	.word	0x40012c00
 800774c:	40013400 	.word	0x40013400
 8007750:	40014000 	.word	0x40014000
 8007754:	40014400 	.word	0x40014400
 8007758:	40014800 	.word	0x40014800

0800775c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800775c:	b480      	push	{r7}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a1b      	ldr	r3, [r3, #32]
 8007770:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800778a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800778e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	021b      	lsls	r3, r3, #8
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	031b      	lsls	r3, r3, #12
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a18      	ldr	r2, [pc, #96]	@ (800781c <TIM_OC4_SetConfig+0xc0>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d00f      	beq.n	80077e0 <TIM_OC4_SetConfig+0x84>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a17      	ldr	r2, [pc, #92]	@ (8007820 <TIM_OC4_SetConfig+0xc4>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d00b      	beq.n	80077e0 <TIM_OC4_SetConfig+0x84>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a16      	ldr	r2, [pc, #88]	@ (8007824 <TIM_OC4_SetConfig+0xc8>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d007      	beq.n	80077e0 <TIM_OC4_SetConfig+0x84>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a15      	ldr	r2, [pc, #84]	@ (8007828 <TIM_OC4_SetConfig+0xcc>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d003      	beq.n	80077e0 <TIM_OC4_SetConfig+0x84>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a14      	ldr	r2, [pc, #80]	@ (800782c <TIM_OC4_SetConfig+0xd0>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d109      	bne.n	80077f4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	019b      	lsls	r3, r3, #6
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	697a      	ldr	r2, [r7, #20]
 80077f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	621a      	str	r2, [r3, #32]
}
 800780e:	bf00      	nop
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	40012c00 	.word	0x40012c00
 8007820:	40013400 	.word	0x40013400
 8007824:	40014000 	.word	0x40014000
 8007828:	40014400 	.word	0x40014400
 800782c:	40014800 	.word	0x40014800

08007830 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007830:	b480      	push	{r7}
 8007832:	b087      	sub	sp, #28
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a1b      	ldr	r3, [r3, #32]
 8007844:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800785e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	4313      	orrs	r3, r2
 800786c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007874:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	041b      	lsls	r3, r3, #16
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	4313      	orrs	r3, r2
 8007880:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a17      	ldr	r2, [pc, #92]	@ (80078e4 <TIM_OC5_SetConfig+0xb4>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d00f      	beq.n	80078aa <TIM_OC5_SetConfig+0x7a>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a16      	ldr	r2, [pc, #88]	@ (80078e8 <TIM_OC5_SetConfig+0xb8>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d00b      	beq.n	80078aa <TIM_OC5_SetConfig+0x7a>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a15      	ldr	r2, [pc, #84]	@ (80078ec <TIM_OC5_SetConfig+0xbc>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d007      	beq.n	80078aa <TIM_OC5_SetConfig+0x7a>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a14      	ldr	r2, [pc, #80]	@ (80078f0 <TIM_OC5_SetConfig+0xc0>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d003      	beq.n	80078aa <TIM_OC5_SetConfig+0x7a>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a13      	ldr	r2, [pc, #76]	@ (80078f4 <TIM_OC5_SetConfig+0xc4>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d109      	bne.n	80078be <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	021b      	lsls	r3, r3, #8
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	621a      	str	r2, [r3, #32]
}
 80078d8:	bf00      	nop
 80078da:	371c      	adds	r7, #28
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	40012c00 	.word	0x40012c00
 80078e8:	40013400 	.word	0x40013400
 80078ec:	40014000 	.word	0x40014000
 80078f0:	40014400 	.word	0x40014400
 80078f4:	40014800 	.word	0x40014800

080078f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800791e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800792a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	021b      	lsls	r3, r3, #8
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	4313      	orrs	r3, r2
 8007936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800793e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	051b      	lsls	r3, r3, #20
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	4313      	orrs	r3, r2
 800794a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a18      	ldr	r2, [pc, #96]	@ (80079b0 <TIM_OC6_SetConfig+0xb8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d00f      	beq.n	8007974 <TIM_OC6_SetConfig+0x7c>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a17      	ldr	r2, [pc, #92]	@ (80079b4 <TIM_OC6_SetConfig+0xbc>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d00b      	beq.n	8007974 <TIM_OC6_SetConfig+0x7c>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a16      	ldr	r2, [pc, #88]	@ (80079b8 <TIM_OC6_SetConfig+0xc0>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d007      	beq.n	8007974 <TIM_OC6_SetConfig+0x7c>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a15      	ldr	r2, [pc, #84]	@ (80079bc <TIM_OC6_SetConfig+0xc4>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d003      	beq.n	8007974 <TIM_OC6_SetConfig+0x7c>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a14      	ldr	r2, [pc, #80]	@ (80079c0 <TIM_OC6_SetConfig+0xc8>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d109      	bne.n	8007988 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800797a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	695b      	ldr	r3, [r3, #20]
 8007980:	029b      	lsls	r3, r3, #10
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	4313      	orrs	r3, r2
 8007986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	621a      	str	r2, [r3, #32]
}
 80079a2:	bf00      	nop
 80079a4:	371c      	adds	r7, #28
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	40012c00 	.word	0x40012c00
 80079b4:	40013400 	.word	0x40013400
 80079b8:	40014000 	.word	0x40014000
 80079bc:	40014400 	.word	0x40014400
 80079c0:	40014800 	.word	0x40014800

080079c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b087      	sub	sp, #28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
 80079d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	f023 0201 	bic.w	r2, r3, #1
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	4a26      	ldr	r2, [pc, #152]	@ (8007a88 <TIM_TI1_SetConfig+0xc4>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d017      	beq.n	8007a22 <TIM_TI1_SetConfig+0x5e>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079f8:	d013      	beq.n	8007a22 <TIM_TI1_SetConfig+0x5e>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4a23      	ldr	r2, [pc, #140]	@ (8007a8c <TIM_TI1_SetConfig+0xc8>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d00f      	beq.n	8007a22 <TIM_TI1_SetConfig+0x5e>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4a22      	ldr	r2, [pc, #136]	@ (8007a90 <TIM_TI1_SetConfig+0xcc>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d00b      	beq.n	8007a22 <TIM_TI1_SetConfig+0x5e>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4a21      	ldr	r2, [pc, #132]	@ (8007a94 <TIM_TI1_SetConfig+0xd0>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d007      	beq.n	8007a22 <TIM_TI1_SetConfig+0x5e>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	4a20      	ldr	r2, [pc, #128]	@ (8007a98 <TIM_TI1_SetConfig+0xd4>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d003      	beq.n	8007a22 <TIM_TI1_SetConfig+0x5e>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8007a9c <TIM_TI1_SetConfig+0xd8>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d101      	bne.n	8007a26 <TIM_TI1_SetConfig+0x62>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e000      	b.n	8007a28 <TIM_TI1_SetConfig+0x64>
 8007a26:	2300      	movs	r3, #0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d008      	beq.n	8007a3e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f023 0303 	bic.w	r3, r3, #3
 8007a32:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	617b      	str	r3, [r7, #20]
 8007a3c:	e003      	b.n	8007a46 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	f043 0301 	orr.w	r3, r3, #1
 8007a44:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	011b      	lsls	r3, r3, #4
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	f023 030a 	bic.w	r3, r3, #10
 8007a60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f003 030a 	and.w	r3, r3, #10
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	621a      	str	r2, [r3, #32]
}
 8007a7a:	bf00      	nop
 8007a7c:	371c      	adds	r7, #28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	40012c00 	.word	0x40012c00
 8007a8c:	40000400 	.word	0x40000400
 8007a90:	40000800 	.word	0x40000800
 8007a94:	40000c00 	.word	0x40000c00
 8007a98:	40013400 	.word	0x40013400
 8007a9c:	40014000 	.word	0x40014000

08007aa0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
 8007aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6a1b      	ldr	r3, [r3, #32]
 8007ab8:	f023 0210 	bic.w	r2, r3, #16
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007acc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	021b      	lsls	r3, r3, #8
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	031b      	lsls	r3, r3, #12
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007af2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	011b      	lsls	r3, r3, #4
 8007af8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	621a      	str	r2, [r3, #32]
}
 8007b0e:	bf00      	nop
 8007b10:	371c      	adds	r7, #28
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b087      	sub	sp, #28
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	60f8      	str	r0, [r7, #12]
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	607a      	str	r2, [r7, #4]
 8007b26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	f023 0303 	bic.w	r3, r3, #3
 8007b46:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b56:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	011b      	lsls	r3, r3, #4
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007b6a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	021b      	lsls	r3, r3, #8
 8007b70:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	621a      	str	r2, [r3, #32]
}
 8007b86:	bf00      	nop
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b087      	sub	sp, #28
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	60b9      	str	r1, [r7, #8]
 8007b9c:	607a      	str	r2, [r7, #4]
 8007b9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bbe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	021b      	lsls	r3, r3, #8
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007bd0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	031b      	lsls	r3, r3, #12
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007be4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	031b      	lsls	r3, r3, #12
 8007bea:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	621a      	str	r2, [r3, #32]
}
 8007c00:	bf00      	nop
 8007c02:	371c      	adds	r7, #28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f003 031f 	and.w	r3, r3, #31
 8007c1e:	2201      	movs	r2, #1
 8007c20:	fa02 f303 	lsl.w	r3, r2, r3
 8007c24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6a1a      	ldr	r2, [r3, #32]
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	43db      	mvns	r3, r3
 8007c2e:	401a      	ands	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6a1a      	ldr	r2, [r3, #32]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f003 031f 	and.w	r3, r3, #31
 8007c3e:	6879      	ldr	r1, [r7, #4]
 8007c40:	fa01 f303 	lsl.w	r3, r1, r3
 8007c44:	431a      	orrs	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	621a      	str	r2, [r3, #32]
}
 8007c4a:	bf00      	nop
 8007c4c:	371c      	adds	r7, #28
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
	...

08007c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d101      	bne.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e068      	b.n	8007d42 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a2e      	ldr	r2, [pc, #184]	@ (8007d50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d004      	beq.n	8007ca4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a2d      	ldr	r2, [pc, #180]	@ (8007d54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d108      	bne.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007caa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a1e      	ldr	r2, [pc, #120]	@ (8007d50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d01d      	beq.n	8007d16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ce2:	d018      	beq.n	8007d16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8007d58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d013      	beq.n	8007d16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8007d5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d00e      	beq.n	8007d16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a18      	ldr	r2, [pc, #96]	@ (8007d60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d009      	beq.n	8007d16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a13      	ldr	r2, [pc, #76]	@ (8007d54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d004      	beq.n	8007d16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a14      	ldr	r2, [pc, #80]	@ (8007d64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d10c      	bne.n	8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	40012c00 	.word	0x40012c00
 8007d54:	40013400 	.word	0x40013400
 8007d58:	40000400 	.word	0x40000400
 8007d5c:	40000800 	.word	0x40000800
 8007d60:	40000c00 	.word	0x40000c00
 8007d64:	40014000 	.word	0x40014000

08007d68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d72:	2300      	movs	r3, #0
 8007d74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d101      	bne.n	8007d84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d80:	2302      	movs	r3, #2
 8007d82:	e065      	b.n	8007e50 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	041b      	lsls	r3, r3, #16
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a16      	ldr	r2, [pc, #88]	@ (8007e5c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d004      	beq.n	8007e12 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a14      	ldr	r2, [pc, #80]	@ (8007e60 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d115      	bne.n	8007e3e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e1c:	051b      	lsls	r3, r3, #20
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	69db      	ldr	r3, [r3, #28]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	40012c00 	.word	0x40012c00
 8007e60:	40013400 	.word	0x40013400

08007e64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e040      	b.n	8007f34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d106      	bne.n	8007ec8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7fa f8c4 	bl	8002050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2224      	movs	r2, #36	@ 0x24
 8007ecc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f022 0201 	bic.w	r2, r2, #1
 8007edc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fae0 	bl	80084ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f825 	bl	8007f3c <UART_SetConfig>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d101      	bne.n	8007efc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e01b      	b.n	8007f34 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	689a      	ldr	r2, [r3, #8]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f042 0201 	orr.w	r2, r2, #1
 8007f2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fb5f 	bl	80085f0 <UART_CheckIdleState>
 8007f32:	4603      	mov	r3, r0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f40:	b08a      	sub	sp, #40	@ 0x28
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	689a      	ldr	r2, [r3, #8]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	431a      	orrs	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	431a      	orrs	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	69db      	ldr	r3, [r3, #28]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	4ba4      	ldr	r3, [pc, #656]	@ (80081fc <UART_SetConfig+0x2c0>)
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	6812      	ldr	r2, [r2, #0]
 8007f72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f74:	430b      	orrs	r3, r1
 8007f76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	68da      	ldr	r2, [r3, #12]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a99      	ldr	r2, [pc, #612]	@ (8008200 <UART_SetConfig+0x2c4>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d004      	beq.n	8007fa8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fb8:	430a      	orrs	r2, r1
 8007fba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a90      	ldr	r2, [pc, #576]	@ (8008204 <UART_SetConfig+0x2c8>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d126      	bne.n	8008014 <UART_SetConfig+0xd8>
 8007fc6:	4b90      	ldr	r3, [pc, #576]	@ (8008208 <UART_SetConfig+0x2cc>)
 8007fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fcc:	f003 0303 	and.w	r3, r3, #3
 8007fd0:	2b03      	cmp	r3, #3
 8007fd2:	d81b      	bhi.n	800800c <UART_SetConfig+0xd0>
 8007fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8007fdc <UART_SetConfig+0xa0>)
 8007fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fda:	bf00      	nop
 8007fdc:	08007fed 	.word	0x08007fed
 8007fe0:	08007ffd 	.word	0x08007ffd
 8007fe4:	08007ff5 	.word	0x08007ff5
 8007fe8:	08008005 	.word	0x08008005
 8007fec:	2301      	movs	r3, #1
 8007fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ff2:	e116      	b.n	8008222 <UART_SetConfig+0x2e6>
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ffa:	e112      	b.n	8008222 <UART_SetConfig+0x2e6>
 8007ffc:	2304      	movs	r3, #4
 8007ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008002:	e10e      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008004:	2308      	movs	r3, #8
 8008006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800800a:	e10a      	b.n	8008222 <UART_SetConfig+0x2e6>
 800800c:	2310      	movs	r3, #16
 800800e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008012:	e106      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a7c      	ldr	r2, [pc, #496]	@ (800820c <UART_SetConfig+0x2d0>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d138      	bne.n	8008090 <UART_SetConfig+0x154>
 800801e:	4b7a      	ldr	r3, [pc, #488]	@ (8008208 <UART_SetConfig+0x2cc>)
 8008020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008024:	f003 030c 	and.w	r3, r3, #12
 8008028:	2b0c      	cmp	r3, #12
 800802a:	d82d      	bhi.n	8008088 <UART_SetConfig+0x14c>
 800802c:	a201      	add	r2, pc, #4	@ (adr r2, 8008034 <UART_SetConfig+0xf8>)
 800802e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008032:	bf00      	nop
 8008034:	08008069 	.word	0x08008069
 8008038:	08008089 	.word	0x08008089
 800803c:	08008089 	.word	0x08008089
 8008040:	08008089 	.word	0x08008089
 8008044:	08008079 	.word	0x08008079
 8008048:	08008089 	.word	0x08008089
 800804c:	08008089 	.word	0x08008089
 8008050:	08008089 	.word	0x08008089
 8008054:	08008071 	.word	0x08008071
 8008058:	08008089 	.word	0x08008089
 800805c:	08008089 	.word	0x08008089
 8008060:	08008089 	.word	0x08008089
 8008064:	08008081 	.word	0x08008081
 8008068:	2300      	movs	r3, #0
 800806a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800806e:	e0d8      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008070:	2302      	movs	r3, #2
 8008072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008076:	e0d4      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008078:	2304      	movs	r3, #4
 800807a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800807e:	e0d0      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008080:	2308      	movs	r3, #8
 8008082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008086:	e0cc      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008088:	2310      	movs	r3, #16
 800808a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800808e:	e0c8      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a5e      	ldr	r2, [pc, #376]	@ (8008210 <UART_SetConfig+0x2d4>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d125      	bne.n	80080e6 <UART_SetConfig+0x1aa>
 800809a:	4b5b      	ldr	r3, [pc, #364]	@ (8008208 <UART_SetConfig+0x2cc>)
 800809c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80080a4:	2b30      	cmp	r3, #48	@ 0x30
 80080a6:	d016      	beq.n	80080d6 <UART_SetConfig+0x19a>
 80080a8:	2b30      	cmp	r3, #48	@ 0x30
 80080aa:	d818      	bhi.n	80080de <UART_SetConfig+0x1a2>
 80080ac:	2b20      	cmp	r3, #32
 80080ae:	d00a      	beq.n	80080c6 <UART_SetConfig+0x18a>
 80080b0:	2b20      	cmp	r3, #32
 80080b2:	d814      	bhi.n	80080de <UART_SetConfig+0x1a2>
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <UART_SetConfig+0x182>
 80080b8:	2b10      	cmp	r3, #16
 80080ba:	d008      	beq.n	80080ce <UART_SetConfig+0x192>
 80080bc:	e00f      	b.n	80080de <UART_SetConfig+0x1a2>
 80080be:	2300      	movs	r3, #0
 80080c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080c4:	e0ad      	b.n	8008222 <UART_SetConfig+0x2e6>
 80080c6:	2302      	movs	r3, #2
 80080c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080cc:	e0a9      	b.n	8008222 <UART_SetConfig+0x2e6>
 80080ce:	2304      	movs	r3, #4
 80080d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080d4:	e0a5      	b.n	8008222 <UART_SetConfig+0x2e6>
 80080d6:	2308      	movs	r3, #8
 80080d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080dc:	e0a1      	b.n	8008222 <UART_SetConfig+0x2e6>
 80080de:	2310      	movs	r3, #16
 80080e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080e4:	e09d      	b.n	8008222 <UART_SetConfig+0x2e6>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a4a      	ldr	r2, [pc, #296]	@ (8008214 <UART_SetConfig+0x2d8>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d125      	bne.n	800813c <UART_SetConfig+0x200>
 80080f0:	4b45      	ldr	r3, [pc, #276]	@ (8008208 <UART_SetConfig+0x2cc>)
 80080f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80080fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80080fc:	d016      	beq.n	800812c <UART_SetConfig+0x1f0>
 80080fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8008100:	d818      	bhi.n	8008134 <UART_SetConfig+0x1f8>
 8008102:	2b80      	cmp	r3, #128	@ 0x80
 8008104:	d00a      	beq.n	800811c <UART_SetConfig+0x1e0>
 8008106:	2b80      	cmp	r3, #128	@ 0x80
 8008108:	d814      	bhi.n	8008134 <UART_SetConfig+0x1f8>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d002      	beq.n	8008114 <UART_SetConfig+0x1d8>
 800810e:	2b40      	cmp	r3, #64	@ 0x40
 8008110:	d008      	beq.n	8008124 <UART_SetConfig+0x1e8>
 8008112:	e00f      	b.n	8008134 <UART_SetConfig+0x1f8>
 8008114:	2300      	movs	r3, #0
 8008116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800811a:	e082      	b.n	8008222 <UART_SetConfig+0x2e6>
 800811c:	2302      	movs	r3, #2
 800811e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008122:	e07e      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008124:	2304      	movs	r3, #4
 8008126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800812a:	e07a      	b.n	8008222 <UART_SetConfig+0x2e6>
 800812c:	2308      	movs	r3, #8
 800812e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008132:	e076      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008134:	2310      	movs	r3, #16
 8008136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800813a:	e072      	b.n	8008222 <UART_SetConfig+0x2e6>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a35      	ldr	r2, [pc, #212]	@ (8008218 <UART_SetConfig+0x2dc>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d12a      	bne.n	800819c <UART_SetConfig+0x260>
 8008146:	4b30      	ldr	r3, [pc, #192]	@ (8008208 <UART_SetConfig+0x2cc>)
 8008148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800814c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008150:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008154:	d01a      	beq.n	800818c <UART_SetConfig+0x250>
 8008156:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800815a:	d81b      	bhi.n	8008194 <UART_SetConfig+0x258>
 800815c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008160:	d00c      	beq.n	800817c <UART_SetConfig+0x240>
 8008162:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008166:	d815      	bhi.n	8008194 <UART_SetConfig+0x258>
 8008168:	2b00      	cmp	r3, #0
 800816a:	d003      	beq.n	8008174 <UART_SetConfig+0x238>
 800816c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008170:	d008      	beq.n	8008184 <UART_SetConfig+0x248>
 8008172:	e00f      	b.n	8008194 <UART_SetConfig+0x258>
 8008174:	2300      	movs	r3, #0
 8008176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800817a:	e052      	b.n	8008222 <UART_SetConfig+0x2e6>
 800817c:	2302      	movs	r3, #2
 800817e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008182:	e04e      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008184:	2304      	movs	r3, #4
 8008186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800818a:	e04a      	b.n	8008222 <UART_SetConfig+0x2e6>
 800818c:	2308      	movs	r3, #8
 800818e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008192:	e046      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008194:	2310      	movs	r3, #16
 8008196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800819a:	e042      	b.n	8008222 <UART_SetConfig+0x2e6>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a17      	ldr	r2, [pc, #92]	@ (8008200 <UART_SetConfig+0x2c4>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d13a      	bne.n	800821c <UART_SetConfig+0x2e0>
 80081a6:	4b18      	ldr	r3, [pc, #96]	@ (8008208 <UART_SetConfig+0x2cc>)
 80081a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80081b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081b4:	d01a      	beq.n	80081ec <UART_SetConfig+0x2b0>
 80081b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081ba:	d81b      	bhi.n	80081f4 <UART_SetConfig+0x2b8>
 80081bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081c0:	d00c      	beq.n	80081dc <UART_SetConfig+0x2a0>
 80081c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081c6:	d815      	bhi.n	80081f4 <UART_SetConfig+0x2b8>
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <UART_SetConfig+0x298>
 80081cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081d0:	d008      	beq.n	80081e4 <UART_SetConfig+0x2a8>
 80081d2:	e00f      	b.n	80081f4 <UART_SetConfig+0x2b8>
 80081d4:	2300      	movs	r3, #0
 80081d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081da:	e022      	b.n	8008222 <UART_SetConfig+0x2e6>
 80081dc:	2302      	movs	r3, #2
 80081de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081e2:	e01e      	b.n	8008222 <UART_SetConfig+0x2e6>
 80081e4:	2304      	movs	r3, #4
 80081e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081ea:	e01a      	b.n	8008222 <UART_SetConfig+0x2e6>
 80081ec:	2308      	movs	r3, #8
 80081ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081f2:	e016      	b.n	8008222 <UART_SetConfig+0x2e6>
 80081f4:	2310      	movs	r3, #16
 80081f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081fa:	e012      	b.n	8008222 <UART_SetConfig+0x2e6>
 80081fc:	efff69f3 	.word	0xefff69f3
 8008200:	40008000 	.word	0x40008000
 8008204:	40013800 	.word	0x40013800
 8008208:	40021000 	.word	0x40021000
 800820c:	40004400 	.word	0x40004400
 8008210:	40004800 	.word	0x40004800
 8008214:	40004c00 	.word	0x40004c00
 8008218:	40005000 	.word	0x40005000
 800821c:	2310      	movs	r3, #16
 800821e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a9f      	ldr	r2, [pc, #636]	@ (80084a4 <UART_SetConfig+0x568>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d17a      	bne.n	8008322 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800822c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008230:	2b08      	cmp	r3, #8
 8008232:	d824      	bhi.n	800827e <UART_SetConfig+0x342>
 8008234:	a201      	add	r2, pc, #4	@ (adr r2, 800823c <UART_SetConfig+0x300>)
 8008236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823a:	bf00      	nop
 800823c:	08008261 	.word	0x08008261
 8008240:	0800827f 	.word	0x0800827f
 8008244:	08008269 	.word	0x08008269
 8008248:	0800827f 	.word	0x0800827f
 800824c:	0800826f 	.word	0x0800826f
 8008250:	0800827f 	.word	0x0800827f
 8008254:	0800827f 	.word	0x0800827f
 8008258:	0800827f 	.word	0x0800827f
 800825c:	08008277 	.word	0x08008277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008260:	f7fc ff12 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 8008264:	61f8      	str	r0, [r7, #28]
        break;
 8008266:	e010      	b.n	800828a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008268:	4b8f      	ldr	r3, [pc, #572]	@ (80084a8 <UART_SetConfig+0x56c>)
 800826a:	61fb      	str	r3, [r7, #28]
        break;
 800826c:	e00d      	b.n	800828a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800826e:	f7fc fe73 	bl	8004f58 <HAL_RCC_GetSysClockFreq>
 8008272:	61f8      	str	r0, [r7, #28]
        break;
 8008274:	e009      	b.n	800828a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800827a:	61fb      	str	r3, [r7, #28]
        break;
 800827c:	e005      	b.n	800828a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008288:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 80fb 	beq.w	8008488 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	685a      	ldr	r2, [r3, #4]
 8008296:	4613      	mov	r3, r2
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	4413      	add	r3, r2
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d305      	bcc.n	80082ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80082a8:	69fa      	ldr	r2, [r7, #28]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d903      	bls.n	80082b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80082b4:	e0e8      	b.n	8008488 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	2200      	movs	r2, #0
 80082ba:	461c      	mov	r4, r3
 80082bc:	4615      	mov	r5, r2
 80082be:	f04f 0200 	mov.w	r2, #0
 80082c2:	f04f 0300 	mov.w	r3, #0
 80082c6:	022b      	lsls	r3, r5, #8
 80082c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80082cc:	0222      	lsls	r2, r4, #8
 80082ce:	68f9      	ldr	r1, [r7, #12]
 80082d0:	6849      	ldr	r1, [r1, #4]
 80082d2:	0849      	lsrs	r1, r1, #1
 80082d4:	2000      	movs	r0, #0
 80082d6:	4688      	mov	r8, r1
 80082d8:	4681      	mov	r9, r0
 80082da:	eb12 0a08 	adds.w	sl, r2, r8
 80082de:	eb43 0b09 	adc.w	fp, r3, r9
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	603b      	str	r3, [r7, #0]
 80082ea:	607a      	str	r2, [r7, #4]
 80082ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082f0:	4650      	mov	r0, sl
 80082f2:	4659      	mov	r1, fp
 80082f4:	f7f7 ff68 	bl	80001c8 <__aeabi_uldivmod>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4613      	mov	r3, r2
 80082fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008306:	d308      	bcc.n	800831a <UART_SetConfig+0x3de>
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800830e:	d204      	bcs.n	800831a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	69ba      	ldr	r2, [r7, #24]
 8008316:	60da      	str	r2, [r3, #12]
 8008318:	e0b6      	b.n	8008488 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008320:	e0b2      	b.n	8008488 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800832a:	d15e      	bne.n	80083ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800832c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008330:	2b08      	cmp	r3, #8
 8008332:	d828      	bhi.n	8008386 <UART_SetConfig+0x44a>
 8008334:	a201      	add	r2, pc, #4	@ (adr r2, 800833c <UART_SetConfig+0x400>)
 8008336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833a:	bf00      	nop
 800833c:	08008361 	.word	0x08008361
 8008340:	08008369 	.word	0x08008369
 8008344:	08008371 	.word	0x08008371
 8008348:	08008387 	.word	0x08008387
 800834c:	08008377 	.word	0x08008377
 8008350:	08008387 	.word	0x08008387
 8008354:	08008387 	.word	0x08008387
 8008358:	08008387 	.word	0x08008387
 800835c:	0800837f 	.word	0x0800837f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008360:	f7fc fe92 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 8008364:	61f8      	str	r0, [r7, #28]
        break;
 8008366:	e014      	b.n	8008392 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008368:	f7fc fea4 	bl	80050b4 <HAL_RCC_GetPCLK2Freq>
 800836c:	61f8      	str	r0, [r7, #28]
        break;
 800836e:	e010      	b.n	8008392 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008370:	4b4d      	ldr	r3, [pc, #308]	@ (80084a8 <UART_SetConfig+0x56c>)
 8008372:	61fb      	str	r3, [r7, #28]
        break;
 8008374:	e00d      	b.n	8008392 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008376:	f7fc fdef 	bl	8004f58 <HAL_RCC_GetSysClockFreq>
 800837a:	61f8      	str	r0, [r7, #28]
        break;
 800837c:	e009      	b.n	8008392 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800837e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008382:	61fb      	str	r3, [r7, #28]
        break;
 8008384:	e005      	b.n	8008392 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008390:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d077      	beq.n	8008488 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	005a      	lsls	r2, r3, #1
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	085b      	lsrs	r3, r3, #1
 80083a2:	441a      	add	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	2b0f      	cmp	r3, #15
 80083b2:	d916      	bls.n	80083e2 <UART_SetConfig+0x4a6>
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083ba:	d212      	bcs.n	80083e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	b29b      	uxth	r3, r3
 80083c0:	f023 030f 	bic.w	r3, r3, #15
 80083c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	085b      	lsrs	r3, r3, #1
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	f003 0307 	and.w	r3, r3, #7
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	8afb      	ldrh	r3, [r7, #22]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	8afa      	ldrh	r2, [r7, #22]
 80083de:	60da      	str	r2, [r3, #12]
 80083e0:	e052      	b.n	8008488 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80083e8:	e04e      	b.n	8008488 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80083ee:	2b08      	cmp	r3, #8
 80083f0:	d827      	bhi.n	8008442 <UART_SetConfig+0x506>
 80083f2:	a201      	add	r2, pc, #4	@ (adr r2, 80083f8 <UART_SetConfig+0x4bc>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	0800841d 	.word	0x0800841d
 80083fc:	08008425 	.word	0x08008425
 8008400:	0800842d 	.word	0x0800842d
 8008404:	08008443 	.word	0x08008443
 8008408:	08008433 	.word	0x08008433
 800840c:	08008443 	.word	0x08008443
 8008410:	08008443 	.word	0x08008443
 8008414:	08008443 	.word	0x08008443
 8008418:	0800843b 	.word	0x0800843b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800841c:	f7fc fe34 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 8008420:	61f8      	str	r0, [r7, #28]
        break;
 8008422:	e014      	b.n	800844e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008424:	f7fc fe46 	bl	80050b4 <HAL_RCC_GetPCLK2Freq>
 8008428:	61f8      	str	r0, [r7, #28]
        break;
 800842a:	e010      	b.n	800844e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800842c:	4b1e      	ldr	r3, [pc, #120]	@ (80084a8 <UART_SetConfig+0x56c>)
 800842e:	61fb      	str	r3, [r7, #28]
        break;
 8008430:	e00d      	b.n	800844e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008432:	f7fc fd91 	bl	8004f58 <HAL_RCC_GetSysClockFreq>
 8008436:	61f8      	str	r0, [r7, #28]
        break;
 8008438:	e009      	b.n	800844e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800843a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800843e:	61fb      	str	r3, [r7, #28]
        break;
 8008440:	e005      	b.n	800844e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008442:	2300      	movs	r3, #0
 8008444:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800844c:	bf00      	nop
    }

    if (pclk != 0U)
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d019      	beq.n	8008488 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	085a      	lsrs	r2, r3, #1
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	441a      	add	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	fbb2 f3f3 	udiv	r3, r2, r3
 8008466:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	2b0f      	cmp	r3, #15
 800846c:	d909      	bls.n	8008482 <UART_SetConfig+0x546>
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008474:	d205      	bcs.n	8008482 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	b29a      	uxth	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	60da      	str	r2, [r3, #12]
 8008480:	e002      	b.n	8008488 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008494:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008498:	4618      	mov	r0, r3
 800849a:	3728      	adds	r7, #40	@ 0x28
 800849c:	46bd      	mov	sp, r7
 800849e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084a2:	bf00      	nop
 80084a4:	40008000 	.word	0x40008000
 80084a8:	00f42400 	.word	0x00f42400

080084ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b8:	f003 0308 	and.w	r3, r3, #8
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00a      	beq.n	80084d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	430a      	orrs	r2, r1
 80084d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00a      	beq.n	80084f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	430a      	orrs	r2, r1
 80084f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084fc:	f003 0302 	and.w	r3, r3, #2
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00a      	beq.n	800851a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851e:	f003 0304 	and.w	r3, r3, #4
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00a      	beq.n	800853c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008540:	f003 0310 	and.w	r3, r3, #16
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00a      	beq.n	800855e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008562:	f003 0320 	and.w	r3, r3, #32
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00a      	beq.n	8008580 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008588:	2b00      	cmp	r3, #0
 800858a:	d01a      	beq.n	80085c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085aa:	d10a      	bne.n	80085c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00a      	beq.n	80085e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	605a      	str	r2, [r3, #4]
  }
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b098      	sub	sp, #96	@ 0x60
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008600:	f7fa f936 	bl	8002870 <HAL_GetTick>
 8008604:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0308 	and.w	r3, r3, #8
 8008610:	2b08      	cmp	r3, #8
 8008612:	d12e      	bne.n	8008672 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008614:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800861c:	2200      	movs	r2, #0
 800861e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f88c 	bl	8008740 <UART_WaitOnFlagUntilTimeout>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d021      	beq.n	8008672 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008636:	e853 3f00 	ldrex	r3, [r3]
 800863a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800863c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800863e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008642:	653b      	str	r3, [r7, #80]	@ 0x50
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	461a      	mov	r2, r3
 800864a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800864c:	647b      	str	r3, [r7, #68]	@ 0x44
 800864e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008650:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008652:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008654:	e841 2300 	strex	r3, r2, [r1]
 8008658:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800865a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1e6      	bne.n	800862e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2220      	movs	r2, #32
 8008664:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e062      	b.n	8008738 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 0304 	and.w	r3, r3, #4
 800867c:	2b04      	cmp	r3, #4
 800867e:	d149      	bne.n	8008714 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008680:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008688:	2200      	movs	r2, #0
 800868a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f856 	bl	8008740 <UART_WaitOnFlagUntilTimeout>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d03c      	beq.n	8008714 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a2:	e853 3f00 	ldrex	r3, [r3]
 80086a6:	623b      	str	r3, [r7, #32]
   return(result);
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	461a      	mov	r2, r3
 80086b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80086ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086c0:	e841 2300 	strex	r3, r2, [r1]
 80086c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1e6      	bne.n	800869a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3308      	adds	r3, #8
 80086d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	e853 3f00 	ldrex	r3, [r3]
 80086da:	60fb      	str	r3, [r7, #12]
   return(result);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f023 0301 	bic.w	r3, r3, #1
 80086e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3308      	adds	r3, #8
 80086ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086ec:	61fa      	str	r2, [r7, #28]
 80086ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f0:	69b9      	ldr	r1, [r7, #24]
 80086f2:	69fa      	ldr	r2, [r7, #28]
 80086f4:	e841 2300 	strex	r3, r2, [r1]
 80086f8:	617b      	str	r3, [r7, #20]
   return(result);
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1e5      	bne.n	80086cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2220      	movs	r2, #32
 8008704:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e011      	b.n	8008738 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2220      	movs	r2, #32
 8008718:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2220      	movs	r2, #32
 800871e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3758      	adds	r7, #88	@ 0x58
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	603b      	str	r3, [r7, #0]
 800874c:	4613      	mov	r3, r2
 800874e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008750:	e049      	b.n	80087e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008758:	d045      	beq.n	80087e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800875a:	f7fa f889 	bl	8002870 <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	69ba      	ldr	r2, [r7, #24]
 8008766:	429a      	cmp	r2, r3
 8008768:	d302      	bcc.n	8008770 <UART_WaitOnFlagUntilTimeout+0x30>
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e048      	b.n	8008806 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0304 	and.w	r3, r3, #4
 800877e:	2b00      	cmp	r3, #0
 8008780:	d031      	beq.n	80087e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	f003 0308 	and.w	r3, r3, #8
 800878c:	2b08      	cmp	r3, #8
 800878e:	d110      	bne.n	80087b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2208      	movs	r2, #8
 8008796:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f000 f838 	bl	800880e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2208      	movs	r2, #8
 80087a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e029      	b.n	8008806 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	69db      	ldr	r3, [r3, #28]
 80087b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087c0:	d111      	bne.n	80087e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f000 f81e 	bl	800880e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2220      	movs	r2, #32
 80087d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e00f      	b.n	8008806 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	69da      	ldr	r2, [r3, #28]
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	4013      	ands	r3, r2
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	bf0c      	ite	eq
 80087f6:	2301      	moveq	r3, #1
 80087f8:	2300      	movne	r3, #0
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	461a      	mov	r2, r3
 80087fe:	79fb      	ldrb	r3, [r7, #7]
 8008800:	429a      	cmp	r2, r3
 8008802:	d0a6      	beq.n	8008752 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800880e:	b480      	push	{r7}
 8008810:	b095      	sub	sp, #84	@ 0x54
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800881e:	e853 3f00 	ldrex	r3, [r3]
 8008822:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008826:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800882a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	461a      	mov	r2, r3
 8008832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008834:	643b      	str	r3, [r7, #64]	@ 0x40
 8008836:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008838:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800883a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800883c:	e841 2300 	strex	r3, r2, [r1]
 8008840:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e6      	bne.n	8008816 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3308      	adds	r3, #8
 800884e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	e853 3f00 	ldrex	r3, [r3]
 8008856:	61fb      	str	r3, [r7, #28]
   return(result);
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	f023 0301 	bic.w	r3, r3, #1
 800885e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	3308      	adds	r3, #8
 8008866:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008868:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800886a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800886e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008870:	e841 2300 	strex	r3, r2, [r1]
 8008874:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1e5      	bne.n	8008848 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008880:	2b01      	cmp	r3, #1
 8008882:	d118      	bne.n	80088b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	e853 3f00 	ldrex	r3, [r3]
 8008890:	60bb      	str	r3, [r7, #8]
   return(result);
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	f023 0310 	bic.w	r3, r3, #16
 8008898:	647b      	str	r3, [r7, #68]	@ 0x44
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	461a      	mov	r2, r3
 80088a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088a2:	61bb      	str	r3, [r7, #24]
 80088a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a6:	6979      	ldr	r1, [r7, #20]
 80088a8:	69ba      	ldr	r2, [r7, #24]
 80088aa:	e841 2300 	strex	r3, r2, [r1]
 80088ae:	613b      	str	r3, [r7, #16]
   return(result);
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1e6      	bne.n	8008884 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2220      	movs	r2, #32
 80088ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80088ca:	bf00      	nop
 80088cc:	3754      	adds	r7, #84	@ 0x54
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <memset>:
 80088d6:	4402      	add	r2, r0
 80088d8:	4603      	mov	r3, r0
 80088da:	4293      	cmp	r3, r2
 80088dc:	d100      	bne.n	80088e0 <memset+0xa>
 80088de:	4770      	bx	lr
 80088e0:	f803 1b01 	strb.w	r1, [r3], #1
 80088e4:	e7f9      	b.n	80088da <memset+0x4>
	...

080088e8 <__libc_init_array>:
 80088e8:	b570      	push	{r4, r5, r6, lr}
 80088ea:	4d0d      	ldr	r5, [pc, #52]	@ (8008920 <__libc_init_array+0x38>)
 80088ec:	4c0d      	ldr	r4, [pc, #52]	@ (8008924 <__libc_init_array+0x3c>)
 80088ee:	1b64      	subs	r4, r4, r5
 80088f0:	10a4      	asrs	r4, r4, #2
 80088f2:	2600      	movs	r6, #0
 80088f4:	42a6      	cmp	r6, r4
 80088f6:	d109      	bne.n	800890c <__libc_init_array+0x24>
 80088f8:	4d0b      	ldr	r5, [pc, #44]	@ (8008928 <__libc_init_array+0x40>)
 80088fa:	4c0c      	ldr	r4, [pc, #48]	@ (800892c <__libc_init_array+0x44>)
 80088fc:	f000 f826 	bl	800894c <_init>
 8008900:	1b64      	subs	r4, r4, r5
 8008902:	10a4      	asrs	r4, r4, #2
 8008904:	2600      	movs	r6, #0
 8008906:	42a6      	cmp	r6, r4
 8008908:	d105      	bne.n	8008916 <__libc_init_array+0x2e>
 800890a:	bd70      	pop	{r4, r5, r6, pc}
 800890c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008910:	4798      	blx	r3
 8008912:	3601      	adds	r6, #1
 8008914:	e7ee      	b.n	80088f4 <__libc_init_array+0xc>
 8008916:	f855 3b04 	ldr.w	r3, [r5], #4
 800891a:	4798      	blx	r3
 800891c:	3601      	adds	r6, #1
 800891e:	e7f2      	b.n	8008906 <__libc_init_array+0x1e>
 8008920:	080089b4 	.word	0x080089b4
 8008924:	080089b4 	.word	0x080089b4
 8008928:	080089b4 	.word	0x080089b4
 800892c:	080089b8 	.word	0x080089b8

08008930 <memcpy>:
 8008930:	440a      	add	r2, r1
 8008932:	4291      	cmp	r1, r2
 8008934:	f100 33ff 	add.w	r3, r0, #4294967295
 8008938:	d100      	bne.n	800893c <memcpy+0xc>
 800893a:	4770      	bx	lr
 800893c:	b510      	push	{r4, lr}
 800893e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008942:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008946:	4291      	cmp	r1, r2
 8008948:	d1f9      	bne.n	800893e <memcpy+0xe>
 800894a:	bd10      	pop	{r4, pc}

0800894c <_init>:
 800894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894e:	bf00      	nop
 8008950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008952:	bc08      	pop	{r3}
 8008954:	469e      	mov	lr, r3
 8008956:	4770      	bx	lr

08008958 <_fini>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	bf00      	nop
 800895c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895e:	bc08      	pop	{r3}
 8008960:	469e      	mov	lr, r3
 8008962:	4770      	bx	lr
